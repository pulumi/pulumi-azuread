{
    "name": "azuread",
    "displayName": "Azure Active Directory (Azure AD)",
    "description": "A Pulumi package for creating and managing Azure Active Directory (Azure AD) cloud resources.",
    "keywords": [
        "pulumi",
        "azuread"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`azuread` Terraform Provider](https://github.com/hashicorp/terraform-provider-azuread).",
    "repository": "https://github.com/pulumi/pulumi-azuread",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "azuread": "AzureAD"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Azure Active Directory (Azure AD) cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-azuread)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-azuread` repo](https://github.com/pulumi/pulumi-azuread/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-azuread` repo](https://github.com/hashicorp/terraform-provider-azuread/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-azuread)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-azuread` repo](https://github.com/pulumi/pulumi-azuread/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-azuread` repo](https://github.com/hashicorp/terraform-provider-azuread/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "clientCertificate": {
                "type": "string",
                "description": "Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate\n"
            },
            "clientCertificatePassword": {
                "type": "string",
                "description": "The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client\nCertificate\n"
            },
            "clientCertificatePath": {
                "type": "string",
                "description": "The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service\nPrincipal using a Client Certificate\n"
            },
            "clientId": {
                "type": "string",
                "description": "The Client ID which should be used for service principal authentication\n"
            },
            "clientIdFilePath": {
                "type": "string",
                "description": "The path to a file containing the Client ID which should be used for service principal authentication\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "The application password to use when authenticating as a Service Principal using a Client Secret\n"
            },
            "clientSecretFilePath": {
                "type": "string",
                "description": "The path to a file containing the application password to use when authenticating as a Service Principal using a Client\nSecret\n"
            },
            "disableTerraformPartnerId": {
                "type": "boolean",
                "description": "Disable the Terraform Partner ID, which is used if a custom `partner_id` isn't specified\n"
            },
            "environment": {
                "type": "string",
                "description": "The cloud environment which should be used. Possible values are: `global` (also `public`), `usgovernmentl4` (also\n`usgovernment`), `usgovernmentl5` (also `dod`), and `china`. Defaults to `global`\n",
                "default": "public",
                "defaultInfo": {
                    "environment": [
                        "ARM_ENVIRONMENT"
                    ]
                }
            },
            "metadataHost": {
                "type": "string",
                "description": "The Hostname which should be used for the Azure Metadata Service.\n"
            },
            "msiEndpoint": {
                "type": "string",
                "description": "The path to a custom endpoint for Managed Identity - in most circumstances this should be detected automatically\n",
                "defaultInfo": {
                    "environment": [
                        "ARM_MSI_ENDPOINT"
                    ]
                }
            },
            "oidcRequestToken": {
                "type": "string",
                "description": "The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID\nConnect.\n"
            },
            "oidcRequestUrl": {
                "type": "string",
                "description": "The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal\nusing OpenID Connect.\n"
            },
            "oidcToken": {
                "type": "string",
                "description": "The ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "oidcTokenFilePath": {
                "type": "string",
                "description": "The path to a file containing an ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "partnerId": {
                "type": "string",
                "description": "A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution\n"
            },
            "tenantId": {
                "type": "string",
                "description": "The Tenant ID which should be used. Works with all authentication methods except Managed Identity\n"
            },
            "useCli": {
                "type": "boolean",
                "description": "Allow Azure CLI to be used for Authentication\n"
            },
            "useMsi": {
                "type": "boolean",
                "description": "Allow Managed Identity to be used for Authentication\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "ARM_USE_MSI"
                    ]
                }
            },
            "useOidc": {
                "type": "boolean",
                "description": "Allow OpenID Connect to be used for authentication\n"
            }
        },
        "defaults": [
            "environment",
            "metadataHost"
        ]
    },
    "types": {
        "azuread:index/AccessPackageAssignmentPolicyApprovalSettings:AccessPackageAssignmentPolicyApprovalSettings": {
            "properties": {
                "approvalRequired": {
                    "type": "boolean",
                    "description": "Whether an approval is required.\n"
                },
                "approvalRequiredForExtension": {
                    "type": "boolean",
                    "description": "Whether an approval is required to grant extension. Same approval settings used to approve initial access will apply.\n"
                },
                "approvalStages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStage:AccessPackageAssignmentPolicyApprovalSettingsApprovalStage"
                    },
                    "description": "An `approval_stage` block specifying the process to obtain an approval, as documented below.\n"
                },
                "requestorJustificationRequired": {
                    "type": "boolean",
                    "description": "Whether a requestor is required to provide a justification to request an access package. Justification is visible to approvers and the requestor.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStage:AccessPackageAssignmentPolicyApprovalSettingsApprovalStage": {
            "properties": {
                "alternativeApprovalEnabled": {
                    "type": "boolean",
                    "description": "Whether alternative approvers are enabled.\n"
                },
                "alternativeApprovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover:AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover"
                    },
                    "description": "A block specifying alternative approvers when escalation is enabled and the primary approvers do not respond before the escalation time, as documented below.\n"
                },
                "approvalTimeoutInDays": {
                    "type": "integer",
                    "description": "Maximum number of days within which a request must be approved. If a request is not approved within this time period after it is made, it will be automatically rejected.\n"
                },
                "approverJustificationRequired": {
                    "type": "boolean",
                    "description": "Whether an approver must provide a justification for their decision. Justification is visible to other approvers and the requestor.\n"
                },
                "enableAlternativeApprovalInDays": {
                    "type": "integer",
                    "description": "Number of days before the request is forwarded to alternative approvers.\n"
                },
                "primaryApprovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover:AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover"
                    },
                    "description": "A block specifying the users who will be asked to approve requests, as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "approvalTimeoutInDays"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover:AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "For a user in an approval stage, this property indicates whether the user is a backup fallback approver.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The ID of the subject.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "Specifies the type of users. Valid values are `singleUser`, `groupMembers`, `connectedOrganizationMembers`, `requestorManager`, `internalSponsors`, or `externalSponsors`.\n"
                }
            },
            "type": "object",
            "required": [
                "subjectType"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover:AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "For a user in an approval stage, this property indicates whether the user is a backup fallback approver.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The ID of the subject.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "Specifies the type of users. Valid values are `singleUser`, `groupMembers`, `connectedOrganizationMembers`, `requestorManager`, `internalSponsors`, or `externalSponsors`.\n"
                }
            },
            "type": "object",
            "required": [
                "subjectType"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettings:AccessPackageAssignmentPolicyAssignmentReviewSettings": {
            "properties": {
                "accessRecommendationEnabled": {
                    "type": "boolean",
                    "description": "Whether to show the reviewer decision helpers. If enabled, system recommendations based on users' access information will be shown to the reviewers. The reviewer will be recommended to approve the review if the user has signed-in at least once during the last 30 days. The reviewer will be recommended to deny the review if the user has not signed-in during the last 30 days.\n"
                },
                "accessReviewTimeoutBehavior": {
                    "type": "string",
                    "description": "Specifies the actions the system takes if reviewers don't respond in time. Valid values are `keepAccess`, `removeAccess`, or `acceptAccessRecommendation`.\n"
                },
                "approverJustificationRequired": {
                    "type": "boolean",
                    "description": "Whether a reviewer needs to provide a justification for their decision. Justification is visible to other reviewers and the requestor.\n"
                },
                "durationInDays": {
                    "type": "integer",
                    "description": "How many days each occurrence of the access review series will run.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable assignment review.\n"
                },
                "reviewFrequency": {
                    "type": "string",
                    "description": "This will determine how often the access review campaign runs, valid values are `weekly`, `monthly`, `quarterly`, `halfyearly`, or `annual`.\n"
                },
                "reviewType": {
                    "type": "string",
                    "description": "Self-review or specific reviewers. Valid values are `Manager`, `Reviewers`, or `Self`.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer:AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer"
                    },
                    "description": "One or more `reviewer` blocks to specify the users who will be reviewers (when `review_type` is `Reviewers`), as documented below.\n"
                },
                "startingOn": {
                    "type": "string",
                    "description": "This is the date the access review campaign will start on, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z), default is now. Once an access review has been created, you cannot update its start date\n"
                }
            },
            "type": "object"
        },
        "azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer:AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "For a user in an approval stage, this property indicates whether the user is a backup fallback approver.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The ID of the subject.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "Specifies the type of users. Valid values are `singleUser`, `groupMembers`, `connectedOrganizationMembers`, `requestorManager`, `internalSponsors`, or `externalSponsors`.\n"
                }
            },
            "type": "object",
            "required": [
                "subjectType"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestion:AccessPackageAssignmentPolicyQuestion": {
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestionChoice:AccessPackageAssignmentPolicyQuestionChoice"
                    },
                    "description": "One or more blocks configuring a choice to the question, as documented below.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether this question is required.\n"
                },
                "sequence": {
                    "type": "integer",
                    "description": "The sequence number of this question.\n"
                },
                "text": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestionText:AccessPackageAssignmentPolicyQuestionText",
                    "description": "A block describing the content of this question, as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "text"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestionChoice:AccessPackageAssignmentPolicyQuestionChoice": {
            "properties": {
                "actualValue": {
                    "type": "string",
                    "description": "The actual value of this choice.\n"
                },
                "displayValue": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestionChoiceDisplayValue:AccessPackageAssignmentPolicyQuestionChoiceDisplayValue",
                    "description": "A block describing the display text of this choice, as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "actualValue",
                "displayValue"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestionChoiceDisplayValue:AccessPackageAssignmentPolicyQuestionChoiceDisplayValue": {
            "properties": {
                "defaultText": {
                    "type": "string",
                    "description": "The default text of this question choice.\n"
                },
                "localizedTexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText:AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText"
                    },
                    "description": "One or more blocks describing localized text of this question choice, as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultText"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText:AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The localized content of this question choice.\n"
                },
                "languageCode": {
                    "type": "string",
                    "description": "The ISO 639 language code for this question choice content.\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "languageCode"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestionText:AccessPackageAssignmentPolicyQuestionText": {
            "properties": {
                "defaultText": {
                    "type": "string",
                    "description": "The default text of this question choice.\n"
                },
                "localizedTexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestionTextLocalizedText:AccessPackageAssignmentPolicyQuestionTextLocalizedText"
                    },
                    "description": "One or more blocks describing localized text of this question choice, as documented below.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultText"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyQuestionTextLocalizedText:AccessPackageAssignmentPolicyQuestionTextLocalizedText": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The localized content of this question choice.\n"
                },
                "languageCode": {
                    "type": "string",
                    "description": "The ISO 639 language code for this question choice content.\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "languageCode"
            ]
        },
        "azuread:index/AccessPackageAssignmentPolicyRequestorSettings:AccessPackageAssignmentPolicyRequestorSettings": {
            "properties": {
                "requestors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyRequestorSettingsRequestor:AccessPackageAssignmentPolicyRequestorSettingsRequestor"
                    },
                    "description": "A block specifying the users who are allowed to request on this policy, as documented below.\n"
                },
                "requestsAccepted": {
                    "type": "boolean",
                    "description": "Whether to accept requests using this policy. When `false`, no new requests can be made using this policy.\n"
                },
                "scopeType": {
                    "type": "string",
                    "description": "Specifies the scopes of the requestors. Valid values are `AllConfiguredConnectedOrganizationSubjects`, `AllExistingConnectedOrganizationSubjects`, `AllExistingDirectoryMemberUsers`, `AllExistingDirectorySubjects`, `AllExternalSubjects`, `NoSubjects`, `SpecificConnectedOrganizationSubjects`, or `SpecificDirectorySubjects`.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/AccessPackageAssignmentPolicyRequestorSettingsRequestor:AccessPackageAssignmentPolicyRequestorSettingsRequestor": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "For a user in an approval stage, this property indicates whether the user is a backup fallback approver.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The ID of the subject.\n"
                },
                "subjectType": {
                    "type": "string",
                    "description": "Specifies the type of users. Valid values are `singleUser`, `groupMembers`, `connectedOrganizationMembers`, `requestorManager`, `internalSponsors`, or `externalSponsors`.\n"
                }
            },
            "type": "object",
            "required": [
                "subjectType"
            ]
        },
        "azuread:index/ApplicationApi:ApplicationApi": {
            "properties": {
                "knownClientApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of application IDs (client IDs), used for bundling consent if you have a solution that contains two parts: a client app and a custom web API app.\n"
                },
                "mappedClaimsEnabled": {
                    "type": "boolean",
                    "description": "Allows an application to use claims mapping without specifying a custom signing key. Defaults to `false`.\n"
                },
                "oauth2PermissionScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationApiOauth2PermissionScope:ApplicationApiOauth2PermissionScope"
                    },
                    "description": "One or more `oauth2_permission_scope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this application.\n"
                },
                "requestedAccessTokenVersion": {
                    "type": "integer",
                    "description": "The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `1`.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationApiOauth2PermissionScope:ApplicationApiOauth2PermissionScope": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the permission scope is enabled. Defaults to `true`.\n"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "azuread:index/ApplicationAppRole:ApplicationAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled. Defaults to `true`.\n"
                },
                "id": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName",
                "id"
            ]
        },
        "azuread:index/ApplicationFeatureTag:ApplicationFeatureTag": {
            "properties": {
                "customSingleSignOn": {
                    "type": "boolean",
                    "description": "Whether this application represents a custom SAML application for linked service principals. Enabling this will assign the `WindowsAzureActiveDirectoryCustomSingleSignOnApplication` tag. Defaults to `false`.\n"
                },
                "enterprise": {
                    "type": "boolean",
                    "description": "Whether this application represents an Enterprise Application for linked service principals. Enabling this will assign the `WindowsAzureActiveDirectoryIntegratedApp` tag. Defaults to `false`.\n"
                },
                "gallery": {
                    "type": "boolean",
                    "description": "Whether this application represents a gallery application for linked service principals. Enabling this will assign the `WindowsAzureActiveDirectoryGalleryApplicationNonPrimaryV1` tag. Defaults to `false`.\n"
                },
                "hide": {
                    "type": "boolean",
                    "description": "Whether this app is invisible to users in My Apps and Office 365 Launcher. Enabling this will assign the `HideApp` tag. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims": {
            "properties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken"
                    },
                    "description": "One or more `access_token` blocks as documented below.\n"
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken"
                    },
                    "description": "One or more `id_token` blocks as documented below.\n"
                },
                "saml2Tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsSaml2Token:ApplicationOptionalClaimsSaml2Token"
                    },
                    "description": "One or more `saml2_token` blocks as documented below.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim. Possible values are: `cloud_displayname`, `dns_domain_and_sam_account_name`, `emit_as_roles`, `include_externally_authenticated_upn_without_hash`, `include_externally_authenticated_upn`, `max_size_limit`, `netbios_domain_and_sam_account_name`, `on_premise_security_identifier`, `sam_account_name`, and `use_guid`.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim. Possible values are: `cloud_displayname`, `dns_domain_and_sam_account_name`, `emit_as_roles`, `include_externally_authenticated_upn_without_hash`, `include_externally_authenticated_upn`, `max_size_limit`, `netbios_domain_and_sam_account_name`, `on_premise_security_identifier`, `sam_account_name`, and `use_guid`.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/ApplicationOptionalClaimsSaml2Token:ApplicationOptionalClaimsSaml2Token": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim. Possible values are: `cloud_displayname`, `dns_domain_and_sam_account_name`, `emit_as_roles`, `include_externally_authenticated_upn_without_hash`, `include_externally_authenticated_upn`, `max_size_limit`, `netbios_domain_and_sam_account_name`, `on_premise_security_identifier`, `sam_account_name`, and `use_guid`.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/ApplicationPublicClient:ApplicationPublicClient": {
            "properties": {
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `https` or `ms-appx-web` URL.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess": {
            "properties": {
                "resourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccessResourceAccess:ApplicationRequiredResourceAccessResourceAccess"
                    },
                    "description": "A collection of `resource_access` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.\n"
                },
                "resourceAppId": {
                    "type": "string",
                    "description": "The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.\n\n\u003e **Note:** Documentation on `resource_app_id` values for Microsoft APIs can be difficult to find, but you can use the [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/ad/sp?view=azure-cli-latest#az_ad_sp_list) to find them. (e.g. `az ad sp list --display-name \"Microsoft Graph\" --query '[].{appDisplayName:appDisplayName, appId:appId}'`)\n"
                }
            },
            "type": "object",
            "required": [
                "resourceAccesses",
                "resourceAppId"
            ]
        },
        "azuread:index/ApplicationRequiredResourceAccessResourceAccess:ApplicationRequiredResourceAccessResourceAccess": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for an app role or OAuth2 permission scope published by the resource application.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the `id` property references an app role or an OAuth2 permission scope. Possible values are `Role` or `Scope`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "azuread:index/ApplicationSinglePageApplication:ApplicationSinglePageApplication": {
            "properties": {
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `https` URL.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationWeb:ApplicationWeb": {
            "properties": {
                "homepageUrl": {
                    "type": "string",
                    "description": "Home page or landing page of the application.\n"
                },
                "implicitGrant": {
                    "$ref": "#/types/azuread:index/ApplicationWebImplicitGrant:ApplicationWebImplicitGrant",
                    "description": "An `implicit_grant` block as documented above.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationWebImplicitGrant:ApplicationWebImplicitGrant": {
            "properties": {
                "accessTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an access token using OAuth 2.0 implicit flow.\n"
                },
                "idTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an ID token using OAuth 2.0 implicit flow.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ConditionalAccessPolicyConditions:ConditionalAccessPolicyConditions": {
            "properties": {
                "applications": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsApplications:ConditionalAccessPolicyConditionsApplications",
                    "description": "An `applications` block as documented below, which specifies applications and user actions included in and excluded from the policy.\n"
                },
                "clientAppTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of client application types included in the policy. Possible values are: `all`, `browser`, `mobileAppsAndDesktopClients`, `exchangeActiveSync`, `easSupported` and `other`.\n"
                },
                "clientApplications": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsClientApplications:ConditionalAccessPolicyConditionsClientApplications",
                    "description": "An `client_applications` block as documented below, which specifies service principals included in and excluded from the policy.\n"
                },
                "devices": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsDevices:ConditionalAccessPolicyConditionsDevices",
                    "description": "A `devices` block as documented below, which describes devices to be included in and excluded from the policy. A `devices` block can be added to an existing policy, but removing the `devices` block forces a new resource to be created.\n"
                },
                "locations": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsLocations:ConditionalAccessPolicyConditionsLocations",
                    "description": "A `locations` block as documented below, which specifies locations included in and excluded from the policy.\n"
                },
                "platforms": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsPlatforms:ConditionalAccessPolicyConditionsPlatforms",
                    "description": "A `platforms` block as documented below, which specifies platforms included in and excluded from the policy.\n"
                },
                "servicePrincipalRiskLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service principal sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `none`, `unknownFutureValue`.\n"
                },
                "signInRiskLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user sign-in risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.\n"
                },
                "userRiskLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user risk levels included in the policy. Possible values are: `low`, `medium`, `high`, `hidden`, `none`, `unknownFutureValue`.\n"
                },
                "users": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsUsers:ConditionalAccessPolicyConditionsUsers",
                    "description": "A `users` block as documented below, which specifies users, groups, and roles included in and excluded from the policy.\n"
                }
            },
            "type": "object",
            "required": [
                "applications",
                "clientAppTypes",
                "users"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsApplications:ConditionalAccessPolicyConditionsApplications": {
            "properties": {
                "excludedApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of application IDs explicitly excluded from the policy. Can also be set to `Office365`.\n"
                },
                "includedApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of application IDs the policy applies to, unless explicitly excluded (in `excluded_applications`). Can also be set to `All`, `None` or `Office365`. Cannot be specified with `included_user_actions`. One of `included_applications` or `included_user_actions` must be specified.\n"
                },
                "includedUserActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user actions to include. Supported values are `urn:user:registerdevice` and `urn:user:registersecurityinfo`. Cannot be specified with `included_applications`. One of `included_applications` or `included_user_actions` must be specified.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ConditionalAccessPolicyConditionsClientApplications:ConditionalAccessPolicyConditionsClientApplications": {
            "properties": {
                "excludedServicePrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service principal IDs explicitly excluded in the policy.\n"
                },
                "includedServicePrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excluded_service_principals` is set.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ConditionalAccessPolicyConditionsDevices:ConditionalAccessPolicyConditionsDevices": {
            "properties": {
                "filter": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsDevicesFilter:ConditionalAccessPolicyConditionsDevicesFilter",
                    "description": "A `filter` block as described below.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ConditionalAccessPolicyConditionsDevicesFilter:ConditionalAccessPolicyConditionsDevicesFilter": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "Whether to include in, or exclude from, matching devices from the policy. Supported values are `include` or `exclude`.\n"
                },
                "rule": {
                    "type": "string",
                    "description": "Condition filter to match devices. For more information, see [official documentation](https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-condition-filters-for-devices#supported-operators-and-device-properties-for-filters).\n"
                }
            },
            "type": "object",
            "required": [
                "mode",
                "rule"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsLocations:ConditionalAccessPolicyConditionsLocations": {
            "properties": {
                "excludedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of location IDs excluded from scope of policy. Can also be set to `AllTrusted`.\n"
                },
                "includedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of location IDs in scope of policy unless explicitly excluded. Can also be set to `All`, or `AllTrusted`.\n"
                }
            },
            "type": "object",
            "required": [
                "includedLocations"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsPlatforms:ConditionalAccessPolicyConditionsPlatforms": {
            "properties": {
                "excludedPlatforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of platforms explicitly excluded from the policy. Possible values are: `all`, `android`, `iOS`, `linux`, `macOS`, `windows`, `windowsPhone` or `unknownFutureValue`.\n"
                },
                "includedPlatforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of platforms the policy applies to, unless explicitly excluded. Possible values are: `all`, `android`, `iOS`, `linux`, `macOS`, `windows`, `windowsPhone` or `unknownFutureValue`.\n"
                }
            },
            "type": "object",
            "required": [
                "includedPlatforms"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsUsers:ConditionalAccessPolicyConditionsUsers": {
            "properties": {
                "excludedGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of group IDs excluded from scope of policy.\n"
                },
                "excludedGuestsOrExternalUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser:ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser"
                    },
                    "description": "A `guests_or_external_users` block as documented below, which specifies internal guests and external users excluded from scope of policy.\n"
                },
                "excludedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of role IDs excluded from scope of policy.\n"
                },
                "excludedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user IDs excluded from scope of policy and/or `GuestsOrExternalUsers`.\n"
                },
                "includedGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of group IDs in scope of policy unless explicitly excluded.\n"
                },
                "includedGuestsOrExternalUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser:ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser"
                    },
                    "description": "A `guests_or_external_users` block as documented below, which specifies internal guests and external users in scope of policy.\n"
                },
                "includedRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of role IDs in scope of policy unless explicitly excluded.\n"
                },
                "includedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user IDs in scope of policy unless explicitly excluded, or `None` or `All` or `GuestsOrExternalUsers`.\n\n\u003e At least one of `included_groups`, `included_guests_or_external_users`, `included_roles` or `included_users` must be specified.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser:ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser": {
            "properties": {
                "externalTenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUserExternalTenant:ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUserExternalTenant"
                    },
                    "description": "An `external_tenants` block as documented below, which specifies external tenants in a policy scope.\n"
                },
                "guestOrExternalUserTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of guest or external user types. Possible values are: `b2bCollaborationGuest`, `b2bCollaborationMember`, `b2bDirectConnectUser`, `internalGuest`, `none`, `otherExternalUser`, `serviceProvider`, `unknownFutureValue`.\n"
                }
            },
            "type": "object",
            "required": [
                "guestOrExternalUserTypes"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUserExternalTenant:ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUserExternalTenant": {
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list tenant IDs. Can only be specified if `membership_kind` is `enumerated`.\n"
                },
                "membershipKind": {
                    "type": "string",
                    "description": "The external tenant membership kind. Possible values are: `all`, `enumerated`, `unknownFutureValue`.\n"
                }
            },
            "type": "object",
            "required": [
                "membershipKind"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser:ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser": {
            "properties": {
                "externalTenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUserExternalTenant:ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUserExternalTenant"
                    },
                    "description": "An `external_tenants` block as documented below, which specifies external tenants in a policy scope.\n"
                },
                "guestOrExternalUserTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of guest or external user types. Possible values are: `b2bCollaborationGuest`, `b2bCollaborationMember`, `b2bDirectConnectUser`, `internalGuest`, `none`, `otherExternalUser`, `serviceProvider`, `unknownFutureValue`.\n"
                }
            },
            "type": "object",
            "required": [
                "guestOrExternalUserTypes"
            ]
        },
        "azuread:index/ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUserExternalTenant:ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUserExternalTenant": {
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list tenant IDs. Can only be specified if `membership_kind` is `enumerated`.\n"
                },
                "membershipKind": {
                    "type": "string",
                    "description": "The external tenant membership kind. Possible values are: `all`, `enumerated`, `unknownFutureValue`.\n"
                }
            },
            "type": "object",
            "required": [
                "membershipKind"
            ]
        },
        "azuread:index/ConditionalAccessPolicyGrantControls:ConditionalAccessPolicyGrantControls": {
            "properties": {
                "authenticationStrengthPolicyId": {
                    "type": "string",
                    "description": "ID of an Authentication Strength Policy to use in this policy.\n"
                },
                "builtInControls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of built-in controls required by the policy. Possible values are: `block`, `mfa`, `approvedApplication`, `compliantApplication`, `compliantDevice`, `domainJoinedDevice`, `passwordChange` or `unknownFutureValue`.\n"
                },
                "customAuthenticationFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of custom controls IDs required by the policy.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Defines the relationship of the grant controls. Possible values are: `AND`, `OR`.\n"
                },
                "termsOfUses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of terms of use IDs required by the policy.\n\n\u003e At least one of `authentication_strength_policy_id`, `built_in_controls` or `terms_of_use` must be specified.\n"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "azuread:index/ConditionalAccessPolicySessionControls:ConditionalAccessPolicySessionControls": {
            "properties": {
                "applicationEnforcedRestrictionsEnabled": {
                    "type": "boolean",
                    "description": "Whether application enforced restrictions are enabled. Defaults to `false`.\n\n\u003e Only Office 365, Exchange Online and Sharepoint Online support application enforced restrictions.\n"
                },
                "cloudAppSecurityPolicy": {
                    "type": "string",
                    "description": "Enables cloud app security and specifies the cloud app security policy to use. Possible values are: `blockDownloads`, `mcasConfigured`, `monitorOnly` or `unknownFutureValue`.\n"
                },
                "disableResilienceDefaults": {
                    "type": "boolean",
                    "description": "Disables [resilience defaults](https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/resilience-defaults). Defaults to `false`.\n"
                },
                "persistentBrowserMode": {
                    "type": "string",
                    "description": "Session control to define whether to persist cookies. Possible values are: `always` or `never`.\n"
                },
                "signInFrequency": {
                    "type": "integer",
                    "description": "Number of days or hours to enforce sign-in frequency. Required when `sign_in_frequency_period` is specified.\n"
                },
                "signInFrequencyAuthenticationType": {
                    "type": "string",
                    "description": "Authentication type for enforcing sign-in frequency. Possible values are: `primaryAndSecondaryAuthentication` or `secondaryAuthentication`. Defaults to `primaryAndSecondaryAuthentication`.\n"
                },
                "signInFrequencyInterval": {
                    "type": "string",
                    "description": "The interval to apply to sign-in frequency control. Possible values are: `timeBased` or `everyTime`. Defaults to `timeBased`.\n"
                },
                "signInFrequencyPeriod": {
                    "type": "string",
                    "description": "The time period to enforce sign-in frequency. Possible values are: `hours` or `days`. Required when `sign_in_frequency_period` is specified.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/CustomDirectoryRolePermission:CustomDirectoryRolePermission": {
            "properties": {
                "allowedResourceActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tasks that can be performed on a resource. For more information, see the [Permissions Reference](https://docs.microsoft.com/en-us/azure/active-directory/roles/permissions-reference) documentation.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedResourceActions"
            ]
        },
        "azuread:index/GroupDynamicMembership:GroupDynamicMembership": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether rule processing is \"On\" (true) or \"Paused\" (false).\n"
                },
                "rule": {
                    "type": "string",
                    "description": "The rule that determines membership of this group. For more information, see official documentation on [membership rules syntax](https://docs.microsoft.com/en-gb/azure/active-directory/enterprise-users/groups-dynamic-membership).\n\n\u003e **Dynamic Group Memberships** Remember to include `DynamicMembership` in the set of `types` for the group when configuring a dynamic membership rule. Dynamic membership is a premium feature which requires an Azure Active Directory P1 or P2 license.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "rule"
            ]
        },
        "azuread:index/InvitationMessage:InvitationMessage": {
            "properties": {
                "additionalRecipients": {
                    "type": "string",
                    "description": "Email addresses of additional recipients the invitation message should be sent to. Only 1 additional recipient is currently supported by Azure.\n"
                },
                "body": {
                    "type": "string",
                    "description": "Customized message body you want to send if you don't want to send the default message. Cannot be specified with `language`.\n"
                },
                "language": {
                    "type": "string",
                    "description": "The language you want to send the default message in. The value specified must be in ISO 639 format. Defaults to `en-US`. Cannot be specified with `body`.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/NamedLocationCountry:NamedLocationCountry": {
            "properties": {
                "countriesAndRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries and/or regions in two-letter format specified by ISO 3166-2.\n"
                },
                "includeUnknownCountriesAndRegions": {
                    "type": "boolean",
                    "description": "Whether IP addresses that don't map to a country or region should be included in the named location. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "countriesAndRegions"
            ]
        },
        "azuread:index/NamedLocationIp:NamedLocationIp": {
            "properties": {
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.\n"
                },
                "trusted": {
                    "type": "boolean",
                    "description": "Whether the named location is trusted. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "required": [
                "ipRanges"
            ]
        },
        "azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the service principal provided for internal end-users.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the permission scope is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the delegated permission.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth 2.0 access tokens.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMemberTypes",
                        "description",
                        "displayName",
                        "enabled",
                        "id",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/ServicePrincipalFeature:ServicePrincipalFeature": {
            "properties": {
                "customSingleSignOnApp": {
                    "type": "boolean"
                },
                "enterpriseApplication": {
                    "type": "boolean"
                },
                "galleryApplication": {
                    "type": "boolean"
                },
                "visibleToUsers": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "azuread:index/ServicePrincipalFeatureTag:ServicePrincipalFeatureTag": {
            "properties": {
                "customSingleSignOn": {
                    "type": "boolean",
                    "description": "Whether this service principal represents a custom SAML application. Enabling this will assign the `WindowsAzureActiveDirectoryCustomSingleSignOnApplication` tag. Defaults to `false`.\n"
                },
                "enterprise": {
                    "type": "boolean",
                    "description": "Whether this service principal represents an Enterprise Application. Enabling this will assign the `WindowsAzureActiveDirectoryIntegratedApp` tag. Defaults to `false`.\n"
                },
                "gallery": {
                    "type": "boolean",
                    "description": "Whether this service principal represents a gallery application. Enabling this will assign the `WindowsAzureActiveDirectoryGalleryApplicationNonPrimaryV1` tag. Defaults to `false`.\n"
                },
                "hide": {
                    "type": "boolean",
                    "description": "Whether this app is invisible to users in My Apps and Office 365 Launcher. Enabling this will assign the `HideApp` tag. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/ServicePrincipalOauth2PermissionScope:ServicePrincipalOauth2PermissionScope": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the permission scope is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the delegated permission.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth 2.0 access tokens.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminConsentDescription",
                        "adminConsentDisplayName",
                        "enabled",
                        "id",
                        "type",
                        "userConsentDescription",
                        "userConsentDisplayName",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/ServicePrincipalSamlSingleSignOn:ServicePrincipalSamlSingleSignOn": {
            "properties": {
                "relayState": {
                    "type": "string",
                    "description": "The relative URI the service provider would redirect to after completion of the single sign-on flow.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/SynchronizationJobSchedule:SynchronizationJobSchedule": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "description": "Date and time when this job will expire, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                },
                "interval": {
                    "type": "string",
                    "description": "The interval between synchronization iterations ISO8601. E.g. PT40M run every 40 minutes.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the job.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "expiration",
                        "interval",
                        "state"
                    ]
                }
            }
        },
        "azuread:index/SynchronizationSecretCredential:SynchronizationSecretCredential": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the secret.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "azuread:index/getApplicationApi:getApplicationApi": {
            "properties": {
                "knownClientApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of application IDs (client IDs), used for bundling consent if you have a solution that contains two parts: a client app and a custom web API app.\n"
                },
                "mappedClaimsEnabled": {
                    "type": "boolean",
                    "description": "Allows an application to use claims mapping without specifying a custom signing key.\n"
                },
                "oauth2PermissionScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationApiOauth2PermissionScope:getApplicationApiOauth2PermissionScope"
                    },
                    "description": "One or more `oauth2_permission_scope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this application.\n"
                },
                "requestedAccessTokenVersion": {
                    "type": "integer",
                    "description": "The access token version expected by this resource. Possible values are `1` or `2`.\n"
                }
            },
            "type": "object",
            "required": [
                "knownClientApplications",
                "mappedClaimsEnabled",
                "oauth2PermissionScopes",
                "requestedAccessTokenVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationApiOauth2PermissionScope:getApplicationApiOauth2PermissionScope": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for an app role or OAuth2 permission scope published by the resource application.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the `id` property references an app role or an OAuth2 permission scope. Possible values are `Role` or `Scope`.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.\n"
                }
            },
            "type": "object",
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "enabled",
                "id",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationAppRole:getApplicationAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are `User` or `Application`, or both.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies the display name of the application.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for an app role or OAuth2 permission scope published by the resource application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName",
                "enabled",
                "id",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationFeatureTag:getApplicationFeatureTag": {
            "properties": {
                "customSingleSignOn": {
                    "type": "boolean",
                    "description": "Whether this application represents a custom SAML application for linked service principals.\n"
                },
                "enterprise": {
                    "type": "boolean",
                    "description": "Whether this application represents an Enterprise Application for linked service principals.\n"
                },
                "gallery": {
                    "type": "boolean",
                    "description": "Whether this application represents a gallery application for linked service principals.\n"
                },
                "hide": {
                    "type": "boolean",
                    "description": "Whether this app is visible to users in My Apps and Office 365 Launcher.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/getApplicationOptionalClaim:getApplicationOptionalClaim": {
            "properties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaimAccessToken:getApplicationOptionalClaimAccessToken"
                    },
                    "description": "One or more `access_token` blocks as documented below.\n"
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaimIdToken:getApplicationOptionalClaimIdToken"
                    },
                    "description": "One or more `id_token` blocks as documented below.\n"
                },
                "saml2Tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaimSaml2Token:getApplicationOptionalClaimSaml2Token"
                    },
                    "description": "One or more `saml2_token` blocks as documented below.\n"
                }
            },
            "type": "object"
        },
        "azuread:index/getApplicationOptionalClaimAccessToken:getApplicationOptionalClaimAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationOptionalClaimIdToken:getApplicationOptionalClaimIdToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationOptionalClaimSaml2Token:getApplicationOptionalClaimSaml2Token": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n"
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationPublicClient:getApplicationPublicClient": {
            "properties": {
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.\n"
                }
            },
            "type": "object",
            "required": [
                "redirectUris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationRequiredResourceAccess:getApplicationRequiredResourceAccess": {
            "properties": {
                "resourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationRequiredResourceAccessResourceAccess:getApplicationRequiredResourceAccessResourceAccess"
                    },
                    "description": "A collection of `resource_access` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.\n"
                },
                "resourceAppId": {
                    "type": "string",
                    "description": "The unique identifier for the resource that the application requires access to. This is the Application ID of the target application.\n"
                }
            },
            "type": "object",
            "required": [
                "resourceAccesses",
                "resourceAppId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationRequiredResourceAccessResourceAccess:getApplicationRequiredResourceAccessResourceAccess": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for an app role or OAuth2 permission scope published by the resource application.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the `id` property references an app role or an OAuth2 permission scope. Possible values are `Role` or `Scope`.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationSinglePageApplication:getApplicationSinglePageApplication": {
            "properties": {
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.\n"
                }
            },
            "type": "object",
            "required": [
                "redirectUris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationWeb:getApplicationWeb": {
            "properties": {
                "homepageUrl": {
                    "type": "string",
                    "description": "Home page or landing page of the application.\n"
                },
                "implicitGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationWebImplicitGrant:getApplicationWebImplicitGrant"
                    },
                    "description": "An `implicit_grant` block as documented above.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.\n"
                }
            },
            "type": "object",
            "required": [
                "homepageUrl",
                "implicitGrants",
                "logoutUrl",
                "redirectUris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationWebImplicitGrant:getApplicationWebImplicitGrant": {
            "properties": {
                "accessTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an access token using OAuth 2.0 implicit flow.\n"
                },
                "idTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an ID token using OAuth 2.0 implicit flow.\n"
                }
            },
            "type": "object",
            "required": [
                "accessTokenIssuanceEnabled",
                "idTokenIssuanceEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getDirectoryRoleTemplatesRoleTemplate:getDirectoryRoleTemplatesRoleTemplate": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the directory role template.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the directory role template.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the directory role template.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "objectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getDirectoryRolesRole:getDirectoryRolesRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the directory role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the directory role.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the directory role.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The template ID of the directory role.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "displayName",
                "objectId",
                "templateId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getDomainsDomain:getDomainsDomain": {
            "properties": {
                "adminManaged": {
                    "type": "boolean",
                    "description": "Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.\n"
                },
                "authenticationType": {
                    "type": "string",
                    "description": "The authentication type of the domain. Possible values include `Managed` or `Federated`.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Whether this is the default domain that is used for user creation.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain.\n"
                },
                "initial": {
                    "type": "boolean",
                    "description": "Whether this is the initial domain created by Azure Active Directory.\n"
                },
                "root": {
                    "type": "boolean",
                    "description": "Whether the domain is a verified root domain (not a subdomain).\n"
                },
                "supportedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of capabilities / services supported by the domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.\n"
                },
                "verified": {
                    "type": "boolean",
                    "description": "Whether the domain has completed domain ownership verification.\n"
                }
            },
            "type": "object",
            "required": [
                "adminManaged",
                "authenticationType",
                "default",
                "domainName",
                "initial",
                "root",
                "supportedServices",
                "verified"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getGroupDynamicMembership:getGroupDynamicMembership": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether rule processing is \"On\" (true) or \"Paused\" (false).\n"
                },
                "rule": {
                    "type": "string",
                    "description": "The rule that determines membership of this group.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "rule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getNamedLocationCountry:getNamedLocationCountry": {
            "properties": {
                "countriesAndRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includeUnknownCountriesAndRegions": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "countriesAndRegions",
                "includeUnknownCountriesAndRegions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getNamedLocationIp:getNamedLocationIp": {
            "properties": {
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trusted": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "ipRanges",
                "trusted"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalAppRole:getServicePrincipalAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the application associated with this service principal.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the permission scope is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the delegated permission. Must be a valid UUID.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth 2.0 access tokens.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName",
                "enabled",
                "id",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalFeature:getServicePrincipalFeature": {
            "properties": {
                "customSingleSignOnApp": {
                    "type": "boolean",
                    "description": "Whether this service principal represents a custom SAML application.\n"
                },
                "enterpriseApplication": {
                    "type": "boolean",
                    "description": "Whether this service principal represents an Enterprise Application.\n"
                },
                "galleryApplication": {
                    "type": "boolean",
                    "description": "Whether this service principal represents a gallery application.\n"
                },
                "visibleToUsers": {
                    "type": "boolean",
                    "description": "Whether this app is visible to users in My Apps and Office 365 Launcher.\n"
                }
            },
            "type": "object",
            "required": [
                "customSingleSignOnApp",
                "enterpriseApplication",
                "galleryApplication",
                "visibleToUsers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalFeatureTag:getServicePrincipalFeatureTag": {
            "properties": {
                "customSingleSignOn": {
                    "type": "boolean"
                },
                "enterprise": {
                    "type": "boolean"
                },
                "gallery": {
                    "type": "boolean"
                },
                "hide": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "customSingleSignOn",
                "enterprise",
                "gallery",
                "hide"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalOauth2PermissionScope:getServicePrincipalOauth2PermissionScope": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Determines if the permission scope is enabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the delegated permission. Must be a valid UUID.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth 2.0 access tokens.\n"
                }
            },
            "type": "object",
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "enabled",
                "id",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalSamlSingleSignOn:getServicePrincipalSamlSingleSignOn": {
            "properties": {
                "relayState": {
                    "type": "string",
                    "description": "The relative URI the service provider would redirect to after completion of the single sign-on flow.\n"
                }
            },
            "type": "object",
            "required": [
                "relayState"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalsServicePrincipal:getServicePrincipalsServicePrincipal": {
            "properties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether the service principal account is enabled.\n"
                },
                "appRoleAssignmentRequired": {
                    "type": "boolean",
                    "description": "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application.\n"
                },
                "applicationId": {
                    "type": "string",
                    "deprecationMessage": "The `application_id` attribute has been replaced by the `client_id` attribute and will be removed in version 3.0 of the AzureAD provider"
                },
                "applicationTenantId": {
                    "type": "string",
                    "description": "The tenant ID where the associated application is registered.\n"
                },
                "clientId": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the application associated with this service principal.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the service principal.\n"
                },
                "preferredSingleSignOnMode": {
                    "type": "string",
                    "description": "The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps.\n"
                },
                "samlMetadataUrl": {
                    "type": "string",
                    "description": "The URL where the service exposes SAML metadata for federation.\n"
                },
                "servicePrincipalNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of identifier URI(s), copied over from the associated application.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to the service principal.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identifies whether the service principal represents an application or a managed identity. Possible values include `Application` or `ManagedIdentity`.\n"
                }
            },
            "type": "object",
            "required": [
                "accountEnabled",
                "appRoleAssignmentRequired",
                "applicationId",
                "applicationTenantId",
                "clientId",
                "displayName",
                "objectId",
                "preferredSingleSignOnMode",
                "samlMetadataUrl",
                "servicePrincipalNames",
                "signInAudience",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getUsersUser:getUsersUser": {
            "properties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether or not the account is enabled.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user.\n"
                },
                "employeeId": {
                    "type": "string",
                    "description": "The employee identifier assigned to the user by the organisation.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The primary email address of the user.\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The email alias of the user.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the user.\n"
                },
                "onpremisesImmutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premises Active Directory user account with their Azure AD user object.\n"
                },
                "onpremisesSamAccountName": {
                    "type": "string",
                    "description": "The on-premise SAM account name of the user.\n"
                },
                "onpremisesUserPrincipalName": {
                    "type": "string",
                    "description": "The on-premise user principal name of the user.\n"
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the user.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The user principal name (UPN) of the user.\n"
                }
            },
            "type": "object",
            "required": [
                "accountEnabled",
                "displayName",
                "employeeId",
                "mail",
                "mailNickname",
                "objectId",
                "onpremisesImmutableId",
                "onpremisesSamAccountName",
                "onpremisesUserPrincipalName",
                "usageLocation",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the azuread package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "clientCertificate": {
                "type": "string",
                "description": "Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate\n"
            },
            "clientCertificatePassword": {
                "type": "string",
                "description": "The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client\nCertificate\n"
            },
            "clientCertificatePath": {
                "type": "string",
                "description": "The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service\nPrincipal using a Client Certificate\n"
            },
            "clientId": {
                "type": "string",
                "description": "The Client ID which should be used for service principal authentication\n"
            },
            "clientIdFilePath": {
                "type": "string",
                "description": "The path to a file containing the Client ID which should be used for service principal authentication\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "The application password to use when authenticating as a Service Principal using a Client Secret\n"
            },
            "clientSecretFilePath": {
                "type": "string",
                "description": "The path to a file containing the application password to use when authenticating as a Service Principal using a Client\nSecret\n"
            },
            "disableTerraformPartnerId": {
                "type": "boolean",
                "description": "Disable the Terraform Partner ID, which is used if a custom `partner_id` isn't specified\n"
            },
            "environment": {
                "type": "string",
                "description": "The cloud environment which should be used. Possible values are: `global` (also `public`), `usgovernmentl4` (also\n`usgovernment`), `usgovernmentl5` (also `dod`), and `china`. Defaults to `global`\n"
            },
            "metadataHost": {
                "type": "string",
                "description": "The Hostname which should be used for the Azure Metadata Service.\n"
            },
            "msiEndpoint": {
                "type": "string",
                "description": "The path to a custom endpoint for Managed Identity - in most circumstances this should be detected automatically\n"
            },
            "oidcRequestToken": {
                "type": "string",
                "description": "The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID\nConnect.\n"
            },
            "oidcRequestUrl": {
                "type": "string",
                "description": "The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal\nusing OpenID Connect.\n"
            },
            "oidcToken": {
                "type": "string",
                "description": "The ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "oidcTokenFilePath": {
                "type": "string",
                "description": "The path to a file containing an ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "partnerId": {
                "type": "string",
                "description": "A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution\n"
            },
            "tenantId": {
                "type": "string",
                "description": "The Tenant ID which should be used. Works with all authentication methods except Managed Identity\n"
            },
            "useCli": {
                "type": "boolean",
                "description": "Allow Azure CLI to be used for Authentication\n"
            },
            "useMsi": {
                "type": "boolean",
                "description": "Allow Managed Identity to be used for Authentication\n"
            },
            "useOidc": {
                "type": "boolean",
                "description": "Allow OpenID Connect to be used for authentication\n"
            }
        },
        "required": [
            "metadataHost"
        ],
        "inputProperties": {
            "clientCertificate": {
                "type": "string",
                "description": "Base64 encoded PKCS#12 certificate bundle to use when authenticating as a Service Principal using a Client Certificate\n"
            },
            "clientCertificatePassword": {
                "type": "string",
                "description": "The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client\nCertificate\n"
            },
            "clientCertificatePath": {
                "type": "string",
                "description": "The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service\nPrincipal using a Client Certificate\n"
            },
            "clientId": {
                "type": "string",
                "description": "The Client ID which should be used for service principal authentication\n"
            },
            "clientIdFilePath": {
                "type": "string",
                "description": "The path to a file containing the Client ID which should be used for service principal authentication\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "The application password to use when authenticating as a Service Principal using a Client Secret\n"
            },
            "clientSecretFilePath": {
                "type": "string",
                "description": "The path to a file containing the application password to use when authenticating as a Service Principal using a Client\nSecret\n"
            },
            "disableTerraformPartnerId": {
                "type": "boolean",
                "description": "Disable the Terraform Partner ID, which is used if a custom `partner_id` isn't specified\n"
            },
            "environment": {
                "type": "string",
                "description": "The cloud environment which should be used. Possible values are: `global` (also `public`), `usgovernmentl4` (also\n`usgovernment`), `usgovernmentl5` (also `dod`), and `china`. Defaults to `global`\n",
                "default": "public",
                "defaultInfo": {
                    "environment": [
                        "ARM_ENVIRONMENT"
                    ]
                }
            },
            "metadataHost": {
                "type": "string",
                "description": "The Hostname which should be used for the Azure Metadata Service.\n"
            },
            "msiEndpoint": {
                "type": "string",
                "description": "The path to a custom endpoint for Managed Identity - in most circumstances this should be detected automatically\n",
                "defaultInfo": {
                    "environment": [
                        "ARM_MSI_ENDPOINT"
                    ]
                }
            },
            "oidcRequestToken": {
                "type": "string",
                "description": "The bearer token for the request to the OIDC provider. For use when authenticating as a Service Principal using OpenID\nConnect.\n"
            },
            "oidcRequestUrl": {
                "type": "string",
                "description": "The URL for the OIDC provider from which to request an ID token. For use when authenticating as a Service Principal\nusing OpenID Connect.\n"
            },
            "oidcToken": {
                "type": "string",
                "description": "The ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "oidcTokenFilePath": {
                "type": "string",
                "description": "The path to a file containing an ID token for use when authenticating as a Service Principal using OpenID Connect.\n"
            },
            "partnerId": {
                "type": "string",
                "description": "A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution\n"
            },
            "tenantId": {
                "type": "string",
                "description": "The Tenant ID which should be used. Works with all authentication methods except Managed Identity\n"
            },
            "useCli": {
                "type": "boolean",
                "description": "Allow Azure CLI to be used for Authentication\n"
            },
            "useMsi": {
                "type": "boolean",
                "description": "Allow Managed Identity to be used for Authentication\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "ARM_USE_MSI"
                    ]
                }
            },
            "useOidc": {
                "type": "boolean",
                "description": "Allow OpenID Connect to be used for authentication\n"
            }
        },
        "requiredInputs": [
            "metadataHost"
        ]
    },
    "resources": {
        "azuread:index/accessPackage:AccessPackage": {
            "description": "Manages an Access Package within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner`, `Access package manager` or `Global Administrator`\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleAccessPackageCatalog = new azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\", {\n    displayName: \"example-catalog\",\n    description: \"Example catalog\",\n});\nconst exampleAccessPackage = new azuread.AccessPackage(\"exampleAccessPackage\", {\n    catalogId: exampleAccessPackageCatalog.id,\n    displayName: \"access-package\",\n    description: \"Access Package\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_access_package_catalog = azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\",\n    display_name=\"example-catalog\",\n    description=\"Example catalog\")\nexample_access_package = azuread.AccessPackage(\"exampleAccessPackage\",\n    catalog_id=example_access_package_catalog.id,\n    display_name=\"access-package\",\n    description=\"Access Package\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleAccessPackageCatalog = new AzureAD.AccessPackageCatalog(\"exampleAccessPackageCatalog\", new()\n    {\n        DisplayName = \"example-catalog\",\n        Description = \"Example catalog\",\n    });\n\n    var exampleAccessPackage = new AzureAD.AccessPackage(\"exampleAccessPackage\", new()\n    {\n        CatalogId = exampleAccessPackageCatalog.Id,\n        DisplayName = \"access-package\",\n        Description = \"Access Package\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleAccessPackageCatalog, err := azuread.NewAccessPackageCatalog(ctx, \"exampleAccessPackageCatalog\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.String(\"example-catalog\"),\n\t\t\tDescription: pulumi.String(\"Example catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackage(ctx, \"exampleAccessPackage\", \u0026azuread.AccessPackageArgs{\n\t\t\tCatalogId:   exampleAccessPackageCatalog.ID(),\n\t\t\tDisplayName: pulumi.String(\"access-package\"),\n\t\t\tDescription: pulumi.String(\"Access Package\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport com.pulumi.azuread.AccessPackage;\nimport com.pulumi.azuread.AccessPackageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleAccessPackageCatalog = new AccessPackageCatalog(\"exampleAccessPackageCatalog\", AccessPackageCatalogArgs.builder()        \n            .displayName(\"example-catalog\")\n            .description(\"Example catalog\")\n            .build());\n\n        var exampleAccessPackage = new AccessPackage(\"exampleAccessPackage\", AccessPackageArgs.builder()        \n            .catalogId(exampleAccessPackageCatalog.id())\n            .displayName(\"access-package\")\n            .description(\"Access Package\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleAccessPackageCatalog:\n    type: azuread:AccessPackageCatalog\n    properties:\n      displayName: example-catalog\n      description: Example catalog\n  exampleAccessPackage:\n    type: azuread:AccessPackage\n    properties:\n      catalogId: ${exampleAccessPackageCatalog.id}\n      displayName: access-package\n      description: Access Package\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccess Packages can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackage:AccessPackage example_package 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of the Catalog this access package will be created in.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the access package.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the access package.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Whether the access package is hidden from the requestor.\n"
                }
            },
            "required": [
                "catalogId",
                "description",
                "displayName"
            ],
            "inputProperties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of the Catalog this access package will be created in.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the access package.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the access package.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Whether the access package is hidden from the requestor.\n"
                }
            },
            "requiredInputs": [
                "catalogId",
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackage resources.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "The ID of the Catalog this access package will be created in.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the access package.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the access package.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Whether the access package is hidden from the requestor.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy": {
            "description": "Manages an assignment policy for an access package within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this resource requires `Global Administrator` directory role, or one of the `Catalog Owner` and `Access Package Manager` role in Identity Governance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"group-name\",\n    securityEnabled: true,\n});\nconst exampleAccessPackageCatalog = new azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\", {\n    displayName: \"example-catalog\",\n    description: \"Example catalog\",\n});\nconst exampleAccessPackage = new azuread.AccessPackage(\"exampleAccessPackage\", {\n    catalogId: exampleAccessPackageCatalog.id,\n    displayName: \"access-package\",\n    description: \"Access Package\",\n});\nconst exampleAccessPackageAssignmentPolicy = new azuread.AccessPackageAssignmentPolicy(\"exampleAccessPackageAssignmentPolicy\", {\n    accessPackageId: exampleAccessPackage.id,\n    displayName: \"assignment-policy\",\n    description: \"My assignment policy\",\n    durationInDays: 90,\n    requestorSettings: {\n        scopeType: \"AllExistingDirectoryMemberUsers\",\n    },\n    approvalSettings: {\n        approvalRequired: true,\n        approvalStages: [{\n            approvalTimeoutInDays: 14,\n            primaryApprovers: [{\n                objectId: exampleGroup.objectId,\n                subjectType: \"groupMembers\",\n            }],\n        }],\n    },\n    assignmentReviewSettings: {\n        enabled: true,\n        reviewFrequency: \"weekly\",\n        durationInDays: 3,\n        reviewType: \"Self\",\n        accessReviewTimeoutBehavior: \"keepAccess\",\n    },\n    questions: [{\n        text: {\n            defaultText: \"hello, how are you?\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"group-name\",\n    security_enabled=True)\nexample_access_package_catalog = azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\",\n    display_name=\"example-catalog\",\n    description=\"Example catalog\")\nexample_access_package = azuread.AccessPackage(\"exampleAccessPackage\",\n    catalog_id=example_access_package_catalog.id,\n    display_name=\"access-package\",\n    description=\"Access Package\")\nexample_access_package_assignment_policy = azuread.AccessPackageAssignmentPolicy(\"exampleAccessPackageAssignmentPolicy\",\n    access_package_id=example_access_package.id,\n    display_name=\"assignment-policy\",\n    description=\"My assignment policy\",\n    duration_in_days=90,\n    requestor_settings=azuread.AccessPackageAssignmentPolicyRequestorSettingsArgs(\n        scope_type=\"AllExistingDirectoryMemberUsers\",\n    ),\n    approval_settings=azuread.AccessPackageAssignmentPolicyApprovalSettingsArgs(\n        approval_required=True,\n        approval_stages=[azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs(\n            approval_timeout_in_days=14,\n            primary_approvers=[azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs(\n                object_id=example_group.object_id,\n                subject_type=\"groupMembers\",\n            )],\n        )],\n    ),\n    assignment_review_settings=azuread.AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs(\n        enabled=True,\n        review_frequency=\"weekly\",\n        duration_in_days=3,\n        review_type=\"Self\",\n        access_review_timeout_behavior=\"keepAccess\",\n    ),\n    questions=[azuread.AccessPackageAssignmentPolicyQuestionArgs(\n        text=azuread.AccessPackageAssignmentPolicyQuestionTextArgs(\n            default_text=\"hello, how are you?\",\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"group-name\",\n        SecurityEnabled = true,\n    });\n\n    var exampleAccessPackageCatalog = new AzureAD.AccessPackageCatalog(\"exampleAccessPackageCatalog\", new()\n    {\n        DisplayName = \"example-catalog\",\n        Description = \"Example catalog\",\n    });\n\n    var exampleAccessPackage = new AzureAD.AccessPackage(\"exampleAccessPackage\", new()\n    {\n        CatalogId = exampleAccessPackageCatalog.Id,\n        DisplayName = \"access-package\",\n        Description = \"Access Package\",\n    });\n\n    var exampleAccessPackageAssignmentPolicy = new AzureAD.AccessPackageAssignmentPolicy(\"exampleAccessPackageAssignmentPolicy\", new()\n    {\n        AccessPackageId = exampleAccessPackage.Id,\n        DisplayName = \"assignment-policy\",\n        Description = \"My assignment policy\",\n        DurationInDays = 90,\n        RequestorSettings = new AzureAD.Inputs.AccessPackageAssignmentPolicyRequestorSettingsArgs\n        {\n            ScopeType = \"AllExistingDirectoryMemberUsers\",\n        },\n        ApprovalSettings = new AzureAD.Inputs.AccessPackageAssignmentPolicyApprovalSettingsArgs\n        {\n            ApprovalRequired = true,\n            ApprovalStages = new[]\n            {\n                new AzureAD.Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs\n                {\n                    ApprovalTimeoutInDays = 14,\n                    PrimaryApprovers = new[]\n                    {\n                        new AzureAD.Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs\n                        {\n                            ObjectId = exampleGroup.ObjectId,\n                            SubjectType = \"groupMembers\",\n                        },\n                    },\n                },\n            },\n        },\n        AssignmentReviewSettings = new AzureAD.Inputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs\n        {\n            Enabled = true,\n            ReviewFrequency = \"weekly\",\n            DurationInDays = 3,\n            ReviewType = \"Self\",\n            AccessReviewTimeoutBehavior = \"keepAccess\",\n        },\n        Questions = new[]\n        {\n            new AzureAD.Inputs.AccessPackageAssignmentPolicyQuestionArgs\n            {\n                Text = new AzureAD.Inputs.AccessPackageAssignmentPolicyQuestionTextArgs\n                {\n                    DefaultText = \"hello, how are you?\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleGroup, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"group-name\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackageCatalog, err := azuread.NewAccessPackageCatalog(ctx, \"exampleAccessPackageCatalog\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.String(\"example-catalog\"),\n\t\t\tDescription: pulumi.String(\"Example catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackage, err := azuread.NewAccessPackage(ctx, \"exampleAccessPackage\", \u0026azuread.AccessPackageArgs{\n\t\t\tCatalogId:   exampleAccessPackageCatalog.ID(),\n\t\t\tDisplayName: pulumi.String(\"access-package\"),\n\t\t\tDescription: pulumi.String(\"Access Package\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageAssignmentPolicy(ctx, \"exampleAccessPackageAssignmentPolicy\", \u0026azuread.AccessPackageAssignmentPolicyArgs{\n\t\t\tAccessPackageId: exampleAccessPackage.ID(),\n\t\t\tDisplayName:     pulumi.String(\"assignment-policy\"),\n\t\t\tDescription:     pulumi.String(\"My assignment policy\"),\n\t\t\tDurationInDays:  pulumi.Int(90),\n\t\t\tRequestorSettings: \u0026azuread.AccessPackageAssignmentPolicyRequestorSettingsArgs{\n\t\t\t\tScopeType: pulumi.String(\"AllExistingDirectoryMemberUsers\"),\n\t\t\t},\n\t\t\tApprovalSettings: \u0026azuread.AccessPackageAssignmentPolicyApprovalSettingsArgs{\n\t\t\t\tApprovalRequired: pulumi.Bool(true),\n\t\t\t\tApprovalStages: azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArray{\n\t\t\t\t\t\u0026azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs{\n\t\t\t\t\t\tApprovalTimeoutInDays: pulumi.Int(14),\n\t\t\t\t\t\tPrimaryApprovers: azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArray{\n\t\t\t\t\t\t\t\u0026azuread.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs{\n\t\t\t\t\t\t\t\tObjectId:    exampleGroup.ObjectId,\n\t\t\t\t\t\t\t\tSubjectType: pulumi.String(\"groupMembers\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAssignmentReviewSettings: \u0026azuread.AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs{\n\t\t\t\tEnabled:                     pulumi.Bool(true),\n\t\t\t\tReviewFrequency:             pulumi.String(\"weekly\"),\n\t\t\t\tDurationInDays:              pulumi.Int(3),\n\t\t\t\tReviewType:                  pulumi.String(\"Self\"),\n\t\t\t\tAccessReviewTimeoutBehavior: pulumi.String(\"keepAccess\"),\n\t\t\t},\n\t\t\tQuestions: azuread.AccessPackageAssignmentPolicyQuestionArray{\n\t\t\t\t\u0026azuread.AccessPackageAssignmentPolicyQuestionArgs{\n\t\t\t\t\tText: \u0026azuread.AccessPackageAssignmentPolicyQuestionTextArgs{\n\t\t\t\t\t\tDefaultText: pulumi.String(\"hello, how are you?\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport com.pulumi.azuread.AccessPackage;\nimport com.pulumi.azuread.AccessPackageArgs;\nimport com.pulumi.azuread.AccessPackageAssignmentPolicy;\nimport com.pulumi.azuread.AccessPackageAssignmentPolicyArgs;\nimport com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyRequestorSettingsArgs;\nimport com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyApprovalSettingsArgs;\nimport com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs;\nimport com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyQuestionArgs;\nimport com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyQuestionTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"group-name\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleAccessPackageCatalog = new AccessPackageCatalog(\"exampleAccessPackageCatalog\", AccessPackageCatalogArgs.builder()        \n            .displayName(\"example-catalog\")\n            .description(\"Example catalog\")\n            .build());\n\n        var exampleAccessPackage = new AccessPackage(\"exampleAccessPackage\", AccessPackageArgs.builder()        \n            .catalogId(exampleAccessPackageCatalog.id())\n            .displayName(\"access-package\")\n            .description(\"Access Package\")\n            .build());\n\n        var exampleAccessPackageAssignmentPolicy = new AccessPackageAssignmentPolicy(\"exampleAccessPackageAssignmentPolicy\", AccessPackageAssignmentPolicyArgs.builder()        \n            .accessPackageId(exampleAccessPackage.id())\n            .displayName(\"assignment-policy\")\n            .description(\"My assignment policy\")\n            .durationInDays(90)\n            .requestorSettings(AccessPackageAssignmentPolicyRequestorSettingsArgs.builder()\n                .scopeType(\"AllExistingDirectoryMemberUsers\")\n                .build())\n            .approvalSettings(AccessPackageAssignmentPolicyApprovalSettingsArgs.builder()\n                .approvalRequired(true)\n                .approvalStages(AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs.builder()\n                    .approvalTimeoutInDays(14)\n                    .primaryApprovers(AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs.builder()\n                        .objectId(exampleGroup.objectId())\n                        .subjectType(\"groupMembers\")\n                        .build())\n                    .build())\n                .build())\n            .assignmentReviewSettings(AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs.builder()\n                .enabled(true)\n                .reviewFrequency(\"weekly\")\n                .durationInDays(3)\n                .reviewType(\"Self\")\n                .accessReviewTimeoutBehavior(\"keepAccess\")\n                .build())\n            .questions(AccessPackageAssignmentPolicyQuestionArgs.builder()\n                .text(AccessPackageAssignmentPolicyQuestionTextArgs.builder()\n                    .defaultText(\"hello, how are you?\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: group-name\n      securityEnabled: true\n  exampleAccessPackageCatalog:\n    type: azuread:AccessPackageCatalog\n    properties:\n      displayName: example-catalog\n      description: Example catalog\n  exampleAccessPackage:\n    type: azuread:AccessPackage\n    properties:\n      catalogId: ${exampleAccessPackageCatalog.id}\n      displayName: access-package\n      description: Access Package\n  exampleAccessPackageAssignmentPolicy:\n    type: azuread:AccessPackageAssignmentPolicy\n    properties:\n      accessPackageId: ${exampleAccessPackage.id}\n      displayName: assignment-policy\n      description: My assignment policy\n      durationInDays: 90\n      requestorSettings:\n        scopeType: AllExistingDirectoryMemberUsers\n      approvalSettings:\n        approvalRequired: true\n        approvalStages:\n          - approvalTimeoutInDays: 14\n            primaryApprovers:\n              - objectId: ${exampleGroup.objectId}\n                subjectType: groupMembers\n      assignmentReviewSettings:\n        enabled: true\n        reviewFrequency: weekly\n        durationInDays: 3\n        reviewType: Self\n        accessReviewTimeoutBehavior: keepAccess\n      questions:\n        - text:\n            defaultText: hello, how are you?\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn access package assignment policy can be imported using the ID, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessPackageId": {
                    "type": "string",
                    "description": "The ID of the access package that will contain the policy.\n"
                },
                "approvalSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettings:AccessPackageAssignmentPolicyApprovalSettings",
                    "description": "An `approval_settings` block to specify whether approvals are required and how they are obtained, as documented below.\n"
                },
                "assignmentReviewSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettings:AccessPackageAssignmentPolicyAssignmentReviewSettings",
                    "description": "An `assignment_review_settings` block, to specify whether assignment review is needed and how it is conducted, as documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the policy.\n"
                },
                "durationInDays": {
                    "type": "integer",
                    "description": "How many days this assignment is valid for.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The date that this assignment expires, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z).\n"
                },
                "extensionEnabled": {
                    "type": "boolean",
                    "description": "Whether users will be able to request extension of their access to this package before their access expires.\n"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestion:AccessPackageAssignmentPolicyQuestion"
                    },
                    "description": "One or more `question` blocks for the requestor, as documented below.\n"
                },
                "requestorSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyRequestorSettings:AccessPackageAssignmentPolicyRequestorSettings",
                    "description": "A `requestor_settings` block to configure the users who can request access, as documented below.\n"
                }
            },
            "required": [
                "accessPackageId",
                "description",
                "displayName"
            ],
            "inputProperties": {
                "accessPackageId": {
                    "type": "string",
                    "description": "The ID of the access package that will contain the policy.\n"
                },
                "approvalSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettings:AccessPackageAssignmentPolicyApprovalSettings",
                    "description": "An `approval_settings` block to specify whether approvals are required and how they are obtained, as documented below.\n"
                },
                "assignmentReviewSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettings:AccessPackageAssignmentPolicyAssignmentReviewSettings",
                    "description": "An `assignment_review_settings` block, to specify whether assignment review is needed and how it is conducted, as documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the policy.\n"
                },
                "durationInDays": {
                    "type": "integer",
                    "description": "How many days this assignment is valid for.\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The date that this assignment expires, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z).\n"
                },
                "extensionEnabled": {
                    "type": "boolean",
                    "description": "Whether users will be able to request extension of their access to this package before their access expires.\n"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestion:AccessPackageAssignmentPolicyQuestion"
                    },
                    "description": "One or more `question` blocks for the requestor, as documented below.\n"
                },
                "requestorSettings": {
                    "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyRequestorSettings:AccessPackageAssignmentPolicyRequestorSettings",
                    "description": "A `requestor_settings` block to configure the users who can request access, as documented below.\n"
                }
            },
            "requiredInputs": [
                "accessPackageId",
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackageAssignmentPolicy resources.\n",
                "properties": {
                    "accessPackageId": {
                        "type": "string",
                        "description": "The ID of the access package that will contain the policy.\n"
                    },
                    "approvalSettings": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyApprovalSettings:AccessPackageAssignmentPolicyApprovalSettings",
                        "description": "An `approval_settings` block to specify whether approvals are required and how they are obtained, as documented below.\n"
                    },
                    "assignmentReviewSettings": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyAssignmentReviewSettings:AccessPackageAssignmentPolicyAssignmentReviewSettings",
                        "description": "An `assignment_review_settings` block, to specify whether assignment review is needed and how it is conducted, as documented below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the policy.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the policy.\n"
                    },
                    "durationInDays": {
                        "type": "integer",
                        "description": "How many days this assignment is valid for.\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The date that this assignment expires, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z).\n"
                    },
                    "extensionEnabled": {
                        "type": "boolean",
                        "description": "Whether users will be able to request extension of their access to this package before their access expires.\n"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyQuestion:AccessPackageAssignmentPolicyQuestion"
                        },
                        "description": "One or more `question` blocks for the requestor, as documented below.\n"
                    },
                    "requestorSettings": {
                        "$ref": "#/types/azuread:index/AccessPackageAssignmentPolicyRequestorSettings:AccessPackageAssignmentPolicyRequestorSettings",
                        "description": "A `requestor_settings` block to configure the users who can request access, as documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/accessPackageCatalog:AccessPackageCatalog": {
            "description": "Manages an access package catalog within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner`, `Catalog creator` or `Global Administrator`\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.AccessPackageCatalog(\"example\", {\n    description: \"Example access package catalog\",\n    displayName: \"example-access-package-catalog\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.AccessPackageCatalog(\"example\",\n    description=\"Example access package catalog\",\n    display_name=\"example-access-package-catalog\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.AccessPackageCatalog(\"example\", new()\n    {\n        Description = \"Example access package catalog\",\n        DisplayName = \"example-access-package-catalog\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewAccessPackageCatalog(ctx, \"example\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDescription: pulumi.String(\"Example access package catalog\"),\n\t\t\tDisplayName: pulumi.String(\"example-access-package-catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AccessPackageCatalog(\"example\", AccessPackageCatalogArgs.builder()        \n            .description(\"Example access package catalog\")\n            .displayName(\"example-access-package-catalog\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:AccessPackageCatalog\n    properties:\n      description: Example access package catalog\n      displayName: example-access-package-catalog\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn Access Package Catalog can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackageCatalog:AccessPackageCatalog example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the access package catalog.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the access package catalog.\n"
                },
                "externallyVisible": {
                    "type": "boolean",
                    "description": "Whether the access packages in this catalog can be requested by users outside the tenant.\n"
                },
                "published": {
                    "type": "boolean",
                    "description": "Whether the access packages in this catalog are available for management.\n"
                }
            },
            "required": [
                "description",
                "displayName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the access package catalog.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the access package catalog.\n"
                },
                "externallyVisible": {
                    "type": "boolean",
                    "description": "Whether the access packages in this catalog can be requested by users outside the tenant.\n"
                },
                "published": {
                    "type": "boolean",
                    "description": "Whether the access packages in this catalog are available for management.\n"
                }
            },
            "requiredInputs": [
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackageCatalog resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the access package catalog.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the access package catalog.\n"
                    },
                    "externallyVisible": {
                        "type": "boolean",
                        "description": "Whether the access packages in this catalog can be requested by users outside the tenant.\n"
                    },
                    "published": {
                        "type": "boolean",
                        "description": "Whether the access packages in this catalog are available for management.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/accessPackageCatalogRoleAssignment:AccessPackageCatalogRoleAssignment": {
            "description": "Manages a single catalog role assignment within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `EntitlementManagement.ReadWrite.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Identity Governance administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleAccessPackageCatalogRole = azuread.getAccessPackageCatalogRole({\n    displayName: \"Catalog owner\",\n});\nconst exampleAccessPackageCatalog = new azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\", {\n    displayName: \"example-access-package-catalog\",\n    description: \"Example access package catalog\",\n});\nconst exampleAccessPackageCatalogRoleAssignment = new azuread.AccessPackageCatalogRoleAssignment(\"exampleAccessPackageCatalogRoleAssignment\", {\n    roleId: exampleAccessPackageCatalogRole.then(exampleAccessPackageCatalogRole =\u003e exampleAccessPackageCatalogRole.objectId),\n    principalObjectId: exampleUser.then(exampleUser =\u003e exampleUser.objectId),\n    catalogId: exampleAccessPackageCatalog.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_access_package_catalog_role = azuread.get_access_package_catalog_role(display_name=\"Catalog owner\")\nexample_access_package_catalog = azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\",\n    display_name=\"example-access-package-catalog\",\n    description=\"Example access package catalog\")\nexample_access_package_catalog_role_assignment = azuread.AccessPackageCatalogRoleAssignment(\"exampleAccessPackageCatalogRoleAssignment\",\n    role_id=example_access_package_catalog_role.object_id,\n    principal_object_id=example_user.object_id,\n    catalog_id=example_access_package_catalog.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleAccessPackageCatalogRole = AzureAD.GetAccessPackageCatalogRole.Invoke(new()\n    {\n        DisplayName = \"Catalog owner\",\n    });\n\n    var exampleAccessPackageCatalog = new AzureAD.AccessPackageCatalog(\"exampleAccessPackageCatalog\", new()\n    {\n        DisplayName = \"example-access-package-catalog\",\n        Description = \"Example access package catalog\",\n    });\n\n    var exampleAccessPackageCatalogRoleAssignment = new AzureAD.AccessPackageCatalogRoleAssignment(\"exampleAccessPackageCatalogRoleAssignment\", new()\n    {\n        RoleId = exampleAccessPackageCatalogRole.Apply(getAccessPackageCatalogRoleResult =\u003e getAccessPackageCatalogRoleResult.ObjectId),\n        PrincipalObjectId = exampleUser.Apply(getUserResult =\u003e getUserResult.ObjectId),\n        CatalogId = exampleAccessPackageCatalog.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackageCatalogRole, err := azuread.GetAccessPackageCatalogRole(ctx, \u0026azuread.GetAccessPackageCatalogRoleArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Catalog owner\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackageCatalog, err := azuread.NewAccessPackageCatalog(ctx, \"exampleAccessPackageCatalog\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.String(\"example-access-package-catalog\"),\n\t\t\tDescription: pulumi.String(\"Example access package catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageCatalogRoleAssignment(ctx, \"exampleAccessPackageCatalogRoleAssignment\", \u0026azuread.AccessPackageCatalogRoleAssignmentArgs{\n\t\t\tRoleId:            *pulumi.String(exampleAccessPackageCatalogRole.ObjectId),\n\t\t\tPrincipalObjectId: *pulumi.String(exampleUser.ObjectId),\n\t\t\tCatalogId:         exampleAccessPackageCatalog.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport com.pulumi.azuread.AccessPackageCatalogRoleAssignment;\nimport com.pulumi.azuread.AccessPackageCatalogRoleAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        final var exampleAccessPackageCatalogRole = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()\n            .displayName(\"Catalog owner\")\n            .build());\n\n        var exampleAccessPackageCatalog = new AccessPackageCatalog(\"exampleAccessPackageCatalog\", AccessPackageCatalogArgs.builder()        \n            .displayName(\"example-access-package-catalog\")\n            .description(\"Example access package catalog\")\n            .build());\n\n        var exampleAccessPackageCatalogRoleAssignment = new AccessPackageCatalogRoleAssignment(\"exampleAccessPackageCatalogRoleAssignment\", AccessPackageCatalogRoleAssignmentArgs.builder()        \n            .roleId(exampleAccessPackageCatalogRole.applyValue(getAccessPackageCatalogRoleResult -\u003e getAccessPackageCatalogRoleResult.objectId()))\n            .principalObjectId(exampleUser.applyValue(getUserResult -\u003e getUserResult.objectId()))\n            .catalogId(exampleAccessPackageCatalog.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleAccessPackageCatalog:\n    type: azuread:AccessPackageCatalog\n    properties:\n      displayName: example-access-package-catalog\n      description: Example access package catalog\n  exampleAccessPackageCatalogRoleAssignment:\n    type: azuread:AccessPackageCatalogRoleAssignment\n    properties:\n      roleId: ${exampleAccessPackageCatalogRole.objectId}\n      principalObjectId: ${exampleUser.objectId}\n      catalogId: ${exampleAccessPackageCatalog.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n  exampleAccessPackageCatalogRole:\n    fn::invoke:\n      Function: azuread:getAccessPackageCatalogRole\n      Arguments:\n        displayName: Catalog owner\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCatalog role assignments can be imported using the ID of the assignment, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackageCatalogRoleAssignment:AccessPackageCatalogRoleAssignment example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of the Catalog this role assignment will be scoped to. Changing this forces a new resource to be created.\n"
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The object ID of the catalog role you want to assign. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "catalogId",
                "principalObjectId",
                "roleId"
            ],
            "inputProperties": {
                "catalogId": {
                    "type": "string",
                    "description": "The ID of the Catalog this role assignment will be scoped to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "string",
                    "description": "The object ID of the catalog role you want to assign. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "catalogId",
                "principalObjectId",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackageCatalogRoleAssignment resources.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "The ID of the Catalog this role assignment will be scoped to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalObjectId": {
                        "type": "string",
                        "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The object ID of the catalog role you want to assign. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/accessPackageResourceCatalogAssociation:AccessPackageResourceCatalogAssociation": {
            "description": "Manages the resources added to access package catalogs within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner` or `Global Administrator`\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"example-group\",\n    securityEnabled: true,\n});\nconst exampleAccessPackageCatalog = new azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\", {\n    displayName: \"example-catalog\",\n    description: \"Example catalog\",\n});\nconst exampleAccessPackageResourceCatalogAssociation = new azuread.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", {\n    catalogId: azuread_access_package_catalog.example_catalog.id,\n    resourceOriginId: azuread_group.example_group.object_id,\n    resourceOriginSystem: \"AadGroup\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"example-group\",\n    security_enabled=True)\nexample_access_package_catalog = azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\",\n    display_name=\"example-catalog\",\n    description=\"Example catalog\")\nexample_access_package_resource_catalog_association = azuread.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\",\n    catalog_id=azuread_access_package_catalog[\"example_catalog\"][\"id\"],\n    resource_origin_id=azuread_group[\"example_group\"][\"object_id\"],\n    resource_origin_system=\"AadGroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"example-group\",\n        SecurityEnabled = true,\n    });\n\n    var exampleAccessPackageCatalog = new AzureAD.AccessPackageCatalog(\"exampleAccessPackageCatalog\", new()\n    {\n        DisplayName = \"example-catalog\",\n        Description = \"Example catalog\",\n    });\n\n    var exampleAccessPackageResourceCatalogAssociation = new AzureAD.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", new()\n    {\n        CatalogId = azuread_access_package_catalog.Example_catalog.Id,\n        ResourceOriginId = azuread_group.Example_group.Object_id,\n        ResourceOriginSystem = \"AadGroup\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"example-group\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageCatalog(ctx, \"exampleAccessPackageCatalog\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.String(\"example-catalog\"),\n\t\t\tDescription: pulumi.String(\"Example catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageResourceCatalogAssociation(ctx, \"exampleAccessPackageResourceCatalogAssociation\", \u0026azuread.AccessPackageResourceCatalogAssociationArgs{\n\t\t\tCatalogId:            pulumi.Any(azuread_access_package_catalog.Example_catalog.Id),\n\t\t\tResourceOriginId:     pulumi.Any(azuread_group.Example_group.Object_id),\n\t\t\tResourceOriginSystem: pulumi.String(\"AadGroup\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport com.pulumi.azuread.AccessPackageResourceCatalogAssociation;\nimport com.pulumi.azuread.AccessPackageResourceCatalogAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"example-group\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleAccessPackageCatalog = new AccessPackageCatalog(\"exampleAccessPackageCatalog\", AccessPackageCatalogArgs.builder()        \n            .displayName(\"example-catalog\")\n            .description(\"Example catalog\")\n            .build());\n\n        var exampleAccessPackageResourceCatalogAssociation = new AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", AccessPackageResourceCatalogAssociationArgs.builder()        \n            .catalogId(azuread_access_package_catalog.example_catalog().id())\n            .resourceOriginId(azuread_group.example_group().object_id())\n            .resourceOriginSystem(\"AadGroup\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: example-group\n      securityEnabled: true\n  exampleAccessPackageCatalog:\n    type: azuread:AccessPackageCatalog\n    properties:\n      displayName: example-catalog\n      description: Example catalog\n  exampleAccessPackageResourceCatalogAssociation:\n    type: azuread:AccessPackageResourceCatalogAssociation\n    properties:\n      catalogId: ${azuread_access_package_catalog.example_catalog.id}\n      resourceOriginId: ${azuread_group.example_group.object_id}\n      resourceOriginSystem: AadGroup\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe resource and catalog association can be imported using the catalog ID and the resource origin ID, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackageResourceCatalogAssociation:AccessPackageResourceCatalogAssociation example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Catalog ID and the Resource Origin ID in the format `{CatalogID}/{ResourceOriginID}`. ",
            "properties": {
                "catalogId": {
                    "type": "string",
                    "description": "The unique ID of the access package catalog. Changing this forces a new resource to be created.\n"
                },
                "resourceOriginId": {
                    "type": "string",
                    "description": "The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.\n"
                },
                "resourceOriginSystem": {
                    "type": "string",
                    "description": "The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "catalogId",
                "resourceOriginId",
                "resourceOriginSystem"
            ],
            "inputProperties": {
                "catalogId": {
                    "type": "string",
                    "description": "The unique ID of the access package catalog. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "resourceOriginId": {
                    "type": "string",
                    "description": "The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "resourceOriginSystem": {
                    "type": "string",
                    "description": "The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "catalogId",
                "resourceOriginId",
                "resourceOriginSystem"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackageResourceCatalogAssociation resources.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "The unique ID of the access package catalog. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceOriginId": {
                        "type": "string",
                        "description": "The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceOriginSystem": {
                        "type": "string",
                        "description": "The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation": {
            "description": "Manages the resources added to access packages within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner`, `Access package manager` or `Global Administrator`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"example-group\",\n    securityEnabled: true,\n});\nconst exampleAccessPackageCatalog = new azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\", {\n    displayName: \"example-catalog\",\n    description: \"Example catalog\",\n});\nconst exampleAccessPackageResourceCatalogAssociation = new azuread.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", {\n    catalogId: azuread_access_package_catalog.example_catalog.id,\n    resourceOriginId: azuread_group.example_group.object_id,\n    resourceOriginSystem: \"AadGroup\",\n});\nconst exampleAccessPackage = new azuread.AccessPackage(\"exampleAccessPackage\", {\n    displayName: \"example-package\",\n    description: \"Example Package\",\n    catalogId: azuread_access_package_catalog.example_catalog.id,\n});\nconst exampleAccessPackageResourcePackageAssociation = new azuread.AccessPackageResourcePackageAssociation(\"exampleAccessPackageResourcePackageAssociation\", {\n    accessPackageId: exampleAccessPackage.id,\n    catalogResourceAssociationId: exampleAccessPackageResourceCatalogAssociation.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"example-group\",\n    security_enabled=True)\nexample_access_package_catalog = azuread.AccessPackageCatalog(\"exampleAccessPackageCatalog\",\n    display_name=\"example-catalog\",\n    description=\"Example catalog\")\nexample_access_package_resource_catalog_association = azuread.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\",\n    catalog_id=azuread_access_package_catalog[\"example_catalog\"][\"id\"],\n    resource_origin_id=azuread_group[\"example_group\"][\"object_id\"],\n    resource_origin_system=\"AadGroup\")\nexample_access_package = azuread.AccessPackage(\"exampleAccessPackage\",\n    display_name=\"example-package\",\n    description=\"Example Package\",\n    catalog_id=azuread_access_package_catalog[\"example_catalog\"][\"id\"])\nexample_access_package_resource_package_association = azuread.AccessPackageResourcePackageAssociation(\"exampleAccessPackageResourcePackageAssociation\",\n    access_package_id=example_access_package.id,\n    catalog_resource_association_id=example_access_package_resource_catalog_association.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"example-group\",\n        SecurityEnabled = true,\n    });\n\n    var exampleAccessPackageCatalog = new AzureAD.AccessPackageCatalog(\"exampleAccessPackageCatalog\", new()\n    {\n        DisplayName = \"example-catalog\",\n        Description = \"Example catalog\",\n    });\n\n    var exampleAccessPackageResourceCatalogAssociation = new AzureAD.AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", new()\n    {\n        CatalogId = azuread_access_package_catalog.Example_catalog.Id,\n        ResourceOriginId = azuread_group.Example_group.Object_id,\n        ResourceOriginSystem = \"AadGroup\",\n    });\n\n    var exampleAccessPackage = new AzureAD.AccessPackage(\"exampleAccessPackage\", new()\n    {\n        DisplayName = \"example-package\",\n        Description = \"Example Package\",\n        CatalogId = azuread_access_package_catalog.Example_catalog.Id,\n    });\n\n    var exampleAccessPackageResourcePackageAssociation = new AzureAD.AccessPackageResourcePackageAssociation(\"exampleAccessPackageResourcePackageAssociation\", new()\n    {\n        AccessPackageId = exampleAccessPackage.Id,\n        CatalogResourceAssociationId = exampleAccessPackageResourceCatalogAssociation.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"example-group\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageCatalog(ctx, \"exampleAccessPackageCatalog\", \u0026azuread.AccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.String(\"example-catalog\"),\n\t\t\tDescription: pulumi.String(\"Example catalog\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackageResourceCatalogAssociation, err := azuread.NewAccessPackageResourceCatalogAssociation(ctx, \"exampleAccessPackageResourceCatalogAssociation\", \u0026azuread.AccessPackageResourceCatalogAssociationArgs{\n\t\t\tCatalogId:            pulumi.Any(azuread_access_package_catalog.Example_catalog.Id),\n\t\t\tResourceOriginId:     pulumi.Any(azuread_group.Example_group.Object_id),\n\t\t\tResourceOriginSystem: pulumi.String(\"AadGroup\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAccessPackage, err := azuread.NewAccessPackage(ctx, \"exampleAccessPackage\", \u0026azuread.AccessPackageArgs{\n\t\t\tDisplayName: pulumi.String(\"example-package\"),\n\t\t\tDescription: pulumi.String(\"Example Package\"),\n\t\t\tCatalogId:   pulumi.Any(azuread_access_package_catalog.Example_catalog.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAccessPackageResourcePackageAssociation(ctx, \"exampleAccessPackageResourcePackageAssociation\", \u0026azuread.AccessPackageResourcePackageAssociationArgs{\n\t\t\tAccessPackageId:              exampleAccessPackage.ID(),\n\t\t\tCatalogResourceAssociationId: exampleAccessPackageResourceCatalogAssociation.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.AccessPackageCatalog;\nimport com.pulumi.azuread.AccessPackageCatalogArgs;\nimport com.pulumi.azuread.AccessPackageResourceCatalogAssociation;\nimport com.pulumi.azuread.AccessPackageResourceCatalogAssociationArgs;\nimport com.pulumi.azuread.AccessPackage;\nimport com.pulumi.azuread.AccessPackageArgs;\nimport com.pulumi.azuread.AccessPackageResourcePackageAssociation;\nimport com.pulumi.azuread.AccessPackageResourcePackageAssociationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"example-group\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleAccessPackageCatalog = new AccessPackageCatalog(\"exampleAccessPackageCatalog\", AccessPackageCatalogArgs.builder()        \n            .displayName(\"example-catalog\")\n            .description(\"Example catalog\")\n            .build());\n\n        var exampleAccessPackageResourceCatalogAssociation = new AccessPackageResourceCatalogAssociation(\"exampleAccessPackageResourceCatalogAssociation\", AccessPackageResourceCatalogAssociationArgs.builder()        \n            .catalogId(azuread_access_package_catalog.example_catalog().id())\n            .resourceOriginId(azuread_group.example_group().object_id())\n            .resourceOriginSystem(\"AadGroup\")\n            .build());\n\n        var exampleAccessPackage = new AccessPackage(\"exampleAccessPackage\", AccessPackageArgs.builder()        \n            .displayName(\"example-package\")\n            .description(\"Example Package\")\n            .catalogId(azuread_access_package_catalog.example_catalog().id())\n            .build());\n\n        var exampleAccessPackageResourcePackageAssociation = new AccessPackageResourcePackageAssociation(\"exampleAccessPackageResourcePackageAssociation\", AccessPackageResourcePackageAssociationArgs.builder()        \n            .accessPackageId(exampleAccessPackage.id())\n            .catalogResourceAssociationId(exampleAccessPackageResourceCatalogAssociation.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: example-group\n      securityEnabled: true\n  exampleAccessPackageCatalog:\n    type: azuread:AccessPackageCatalog\n    properties:\n      displayName: example-catalog\n      description: Example catalog\n  exampleAccessPackageResourceCatalogAssociation:\n    type: azuread:AccessPackageResourceCatalogAssociation\n    properties:\n      catalogId: ${azuread_access_package_catalog.example_catalog.id}\n      resourceOriginId: ${azuread_group.example_group.object_id}\n      resourceOriginSystem: AadGroup\n  exampleAccessPackage:\n    type: azuread:AccessPackage\n    properties:\n      displayName: example-package\n      description: Example Package\n      catalogId: ${azuread_access_package_catalog.example_catalog.id}\n  exampleAccessPackageResourcePackageAssociation:\n    type: azuread:AccessPackageResourcePackageAssociation\n    properties:\n      accessPackageId: ${exampleAccessPackage.id}\n      catalogResourceAssociationId: ${exampleAccessPackageResourceCatalogAssociation.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe resource and catalog association can be imported using the access package ID, the resource association ID, the resource origin ID, and the access type, e.g.\n\n```sh\n $ pulumi import azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111_22222222-2222-2222-2222-22222222/33333333-3333-3333-3333-33333333/Member\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Access Package ID, the Resource Association ID, the Resource Origin ID, and the Access Type, in the format `{AccessPackageID}/{ResourceAssociationID}/{ResourceOriginID}/{AccessType}`. ",
            "properties": {
                "accessPackageId": {
                    "type": "string",
                    "description": "The ID of access package this resource association is configured to. Changing this forces a new resource to be created.\n"
                },
                "accessType": {
                    "type": "string",
                    "description": "The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.\n"
                },
                "catalogResourceAssociationId": {
                    "type": "string",
                    "description": "The ID of the catalog association from the `azuread.AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "accessPackageId",
                "catalogResourceAssociationId"
            ],
            "inputProperties": {
                "accessPackageId": {
                    "type": "string",
                    "description": "The ID of access package this resource association is configured to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "accessType": {
                    "type": "string",
                    "description": "The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "catalogResourceAssociationId": {
                    "type": "string",
                    "description": "The ID of the catalog association from the `azuread.AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accessPackageId",
                "catalogResourceAssociationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessPackageResourcePackageAssociation resources.\n",
                "properties": {
                    "accessPackageId": {
                        "type": "string",
                        "description": "The ID of access package this resource association is configured to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "accessType": {
                        "type": "string",
                        "description": "The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "catalogResourceAssociationId": {
                        "type": "string",
                        "description": "The ID of the catalog association from the `azuread.AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/administrativeUnit:AdministrativeUnit": {
            "description": "Manages an Administrative Unit within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `AdministrativeUnit.ReadWrite.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.AdministrativeUnit(\"example\", {\n    description: \"Just an example\",\n    displayName: \"Example-AU\",\n    hiddenMembershipEnabled: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.AdministrativeUnit(\"example\",\n    description=\"Just an example\",\n    display_name=\"Example-AU\",\n    hidden_membership_enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.AdministrativeUnit(\"example\", new()\n    {\n        Description = \"Just an example\",\n        DisplayName = \"Example-AU\",\n        HiddenMembershipEnabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewAdministrativeUnit(ctx, \"example\", \u0026azuread.AdministrativeUnitArgs{\n\t\t\tDescription:             pulumi.String(\"Just an example\"),\n\t\t\tDisplayName:             pulumi.String(\"Example-AU\"),\n\t\t\tHiddenMembershipEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AdministrativeUnit;\nimport com.pulumi.azuread.AdministrativeUnitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AdministrativeUnit(\"example\", AdministrativeUnitArgs.builder()        \n            .description(\"Just an example\")\n            .displayName(\"Example-AU\")\n            .hiddenMembershipEnabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:AdministrativeUnit\n    properties:\n      description: Just an example\n      displayName: Example-AU\n      hiddenMembershipEnabled: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAdministrative units can be imported using their object ID, e.g.\n\n```sh\n $ pulumi import azuread:index/administrativeUnit:AdministrativeUnit example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the administrative unit.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the administrative unit.\n"
                },
                "hiddenMembershipEnabled": {
                    "type": "boolean",
                    "description": "Whether the administrative unit and its members are hidden or publicly viewable in the directory.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.AdministrativeUnitMember resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the administrative unit.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing administrative unit is found with the same name\n"
                }
            },
            "required": [
                "displayName",
                "members",
                "objectId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the administrative unit.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the administrative unit.\n"
                },
                "hiddenMembershipEnabled": {
                    "type": "boolean",
                    "description": "Whether the administrative unit and its members are hidden or publicly viewable in the directory.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.AdministrativeUnitMember resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing administrative unit is found with the same name\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdministrativeUnit resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the administrative unit.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the administrative unit.\n"
                    },
                    "hiddenMembershipEnabled": {
                        "type": "boolean",
                        "description": "Whether the administrative unit and its members are hidden or publicly viewable in the directory.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.AdministrativeUnitMember resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the administrative unit.\n"
                    },
                    "preventDuplicateNames": {
                        "type": "boolean",
                        "description": "If `true`, will return an error if an existing administrative unit is found with the same name\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/administrativeUnitMember:AdministrativeUnitMember": {
            "description": "Manages a single administrative unit membership within Azure Active Directory.\n\n\u003e **Warning** Do not use this resource at the same time as the `members` property of the `azuread.AdministrativeUnit` resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `AdministrativeUnit.ReadWrite.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleAdministrativeUnit = new azuread.AdministrativeUnit(\"exampleAdministrativeUnit\", {displayName: \"Example-AU\"});\nconst exampleAdministrativeUnitMember = new azuread.AdministrativeUnitMember(\"exampleAdministrativeUnitMember\", {\n    administrativeUnitObjectId: exampleAdministrativeUnit.id,\n    memberObjectId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_administrative_unit = azuread.AdministrativeUnit(\"exampleAdministrativeUnit\", display_name=\"Example-AU\")\nexample_administrative_unit_member = azuread.AdministrativeUnitMember(\"exampleAdministrativeUnitMember\",\n    administrative_unit_object_id=example_administrative_unit.id,\n    member_object_id=example_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleAdministrativeUnit = new AzureAD.AdministrativeUnit(\"exampleAdministrativeUnit\", new()\n    {\n        DisplayName = \"Example-AU\",\n    });\n\n    var exampleAdministrativeUnitMember = new AzureAD.AdministrativeUnitMember(\"exampleAdministrativeUnitMember\", new()\n    {\n        AdministrativeUnitObjectId = exampleAdministrativeUnit.Id,\n        MemberObjectId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAdministrativeUnit, err := azuread.NewAdministrativeUnit(ctx, \"exampleAdministrativeUnit\", \u0026azuread.AdministrativeUnitArgs{\n\t\t\tDisplayName: pulumi.String(\"Example-AU\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAdministrativeUnitMember(ctx, \"exampleAdministrativeUnitMember\", \u0026azuread.AdministrativeUnitMemberArgs{\n\t\t\tAdministrativeUnitObjectId: exampleAdministrativeUnit.ID(),\n\t\t\tMemberObjectId:             *pulumi.String(exampleUser.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.AdministrativeUnit;\nimport com.pulumi.azuread.AdministrativeUnitArgs;\nimport com.pulumi.azuread.AdministrativeUnitMember;\nimport com.pulumi.azuread.AdministrativeUnitMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleAdministrativeUnit = new AdministrativeUnit(\"exampleAdministrativeUnit\", AdministrativeUnitArgs.builder()        \n            .displayName(\"Example-AU\")\n            .build());\n\n        var exampleAdministrativeUnitMember = new AdministrativeUnitMember(\"exampleAdministrativeUnitMember\", AdministrativeUnitMemberArgs.builder()        \n            .administrativeUnitObjectId(exampleAdministrativeUnit.id())\n            .memberObjectId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleAdministrativeUnit:\n    type: azuread:AdministrativeUnit\n    properties:\n      displayName: Example-AU\n  exampleAdministrativeUnitMember:\n    type: azuread:AdministrativeUnitMember\n    properties:\n      administrativeUnitObjectId: ${exampleAdministrativeUnit.id}\n      memberObjectId: ${exampleUser.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAdministrative unit members can be imported using the object ID of the administrative unit and the object ID of the member, e.g.\n\n```sh\n $ pulumi import azuread:index/administrativeUnitMember:AdministrativeUnitMember example 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Administrative Unit Object ID and the target Member Object ID in the format `{AdministrativeUnitObjectID}/member/{MemberObjectID}`. ",
            "properties": {
                "administrativeUnitObjectId": {
                    "type": "string",
                    "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n"
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the user or group you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n"
                }
            },
            "inputProperties": {
                "administrativeUnitObjectId": {
                    "type": "string",
                    "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the user or group you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdministrativeUnitMember resources.\n",
                "properties": {
                    "administrativeUnitObjectId": {
                        "type": "string",
                        "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "memberObjectId": {
                        "type": "string",
                        "description": "The object ID of the user or group you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/administrativeUnitRoleMember:AdministrativeUnitRoleMember": {
            "description": "Manages a single directory role assignment scoped to an administrative unit within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `AdministrativeUnit.ReadWrite.All` and `RoleManagement.ReadWrite.Directory`, or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleAdministrativeUnit = new azuread.AdministrativeUnit(\"exampleAdministrativeUnit\", {displayName: \"Example-AU\"});\nconst exampleDirectoryRole = new azuread.DirectoryRole(\"exampleDirectoryRole\", {displayName: \"Security administrator\"});\nconst exampleAdministrativeUnitRoleMember = new azuread.AdministrativeUnitRoleMember(\"exampleAdministrativeUnitRoleMember\", {\n    roleObjectId: exampleDirectoryRole.objectId,\n    administrativeUnitObjectId: exampleAdministrativeUnit.id,\n    memberObjectId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_administrative_unit = azuread.AdministrativeUnit(\"exampleAdministrativeUnit\", display_name=\"Example-AU\")\nexample_directory_role = azuread.DirectoryRole(\"exampleDirectoryRole\", display_name=\"Security administrator\")\nexample_administrative_unit_role_member = azuread.AdministrativeUnitRoleMember(\"exampleAdministrativeUnitRoleMember\",\n    role_object_id=example_directory_role.object_id,\n    administrative_unit_object_id=example_administrative_unit.id,\n    member_object_id=example_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleAdministrativeUnit = new AzureAD.AdministrativeUnit(\"exampleAdministrativeUnit\", new()\n    {\n        DisplayName = \"Example-AU\",\n    });\n\n    var exampleDirectoryRole = new AzureAD.DirectoryRole(\"exampleDirectoryRole\", new()\n    {\n        DisplayName = \"Security administrator\",\n    });\n\n    var exampleAdministrativeUnitRoleMember = new AzureAD.AdministrativeUnitRoleMember(\"exampleAdministrativeUnitRoleMember\", new()\n    {\n        RoleObjectId = exampleDirectoryRole.ObjectId,\n        AdministrativeUnitObjectId = exampleAdministrativeUnit.Id,\n        MemberObjectId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAdministrativeUnit, err := azuread.NewAdministrativeUnit(ctx, \"exampleAdministrativeUnit\", \u0026azuread.AdministrativeUnitArgs{\n\t\t\tDisplayName: pulumi.String(\"Example-AU\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDirectoryRole, err := azuread.NewDirectoryRole(ctx, \"exampleDirectoryRole\", \u0026azuread.DirectoryRoleArgs{\n\t\t\tDisplayName: pulumi.String(\"Security administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAdministrativeUnitRoleMember(ctx, \"exampleAdministrativeUnitRoleMember\", \u0026azuread.AdministrativeUnitRoleMemberArgs{\n\t\t\tRoleObjectId:               exampleDirectoryRole.ObjectId,\n\t\t\tAdministrativeUnitObjectId: exampleAdministrativeUnit.ID(),\n\t\t\tMemberObjectId:             *pulumi.String(exampleUser.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.AdministrativeUnit;\nimport com.pulumi.azuread.AdministrativeUnitArgs;\nimport com.pulumi.azuread.DirectoryRole;\nimport com.pulumi.azuread.DirectoryRoleArgs;\nimport com.pulumi.azuread.AdministrativeUnitRoleMember;\nimport com.pulumi.azuread.AdministrativeUnitRoleMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleAdministrativeUnit = new AdministrativeUnit(\"exampleAdministrativeUnit\", AdministrativeUnitArgs.builder()        \n            .displayName(\"Example-AU\")\n            .build());\n\n        var exampleDirectoryRole = new DirectoryRole(\"exampleDirectoryRole\", DirectoryRoleArgs.builder()        \n            .displayName(\"Security administrator\")\n            .build());\n\n        var exampleAdministrativeUnitRoleMember = new AdministrativeUnitRoleMember(\"exampleAdministrativeUnitRoleMember\", AdministrativeUnitRoleMemberArgs.builder()        \n            .roleObjectId(exampleDirectoryRole.objectId())\n            .administrativeUnitObjectId(exampleAdministrativeUnit.id())\n            .memberObjectId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleAdministrativeUnit:\n    type: azuread:AdministrativeUnit\n    properties:\n      displayName: Example-AU\n  exampleDirectoryRole:\n    type: azuread:DirectoryRole\n    properties:\n      displayName: Security administrator\n  exampleAdministrativeUnitRoleMember:\n    type: azuread:AdministrativeUnitRoleMember\n    properties:\n      roleObjectId: ${exampleDirectoryRole.objectId}\n      administrativeUnitObjectId: ${exampleAdministrativeUnit.id}\n      memberObjectId: ${exampleUser.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAdministrative unit role members can be imported using the object ID of the administrative unit and the unique ID of the role assignment, e.g.\n\n```sh\n $ pulumi import azuread:index/administrativeUnitRoleMember:AdministrativeUnitRoleMember example 00000000-0000-0000-0000-000000000000/roleMember/zX37MRLyF0uvE-xf2WH4B7x-6CPLfudNnxFGj800htpBXqkxW7bITqGb6Rj4kuTuS\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Administrative Unit Object ID and the role assignment ID in the format `{AdministrativeUnitObjectID}/roleMember/{RoleAssignmentID}`. ",
            "properties": {
                "administrativeUnitObjectId": {
                    "type": "string",
                    "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n"
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n"
                },
                "roleObjectId": {
                    "type": "string",
                    "description": "The object ID of the directory role you want to assign. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "administrativeUnitObjectId",
                "memberObjectId",
                "roleObjectId"
            ],
            "inputProperties": {
                "administrativeUnitObjectId": {
                    "type": "string",
                    "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleObjectId": {
                    "type": "string",
                    "description": "The object ID of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "administrativeUnitObjectId",
                "memberObjectId",
                "roleObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdministrativeUnitRoleMember resources.\n",
                "properties": {
                    "administrativeUnitObjectId": {
                        "type": "string",
                        "description": "The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "memberObjectId": {
                        "type": "string",
                        "description": "The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleObjectId": {
                        "type": "string",
                        "description": "The object ID of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/appRoleAssignment:AppRoleAssignment": {
            "description": "Manages an app role assignment for a group, user or service principal. Can be used to grant admin consent for application permissions.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `AppRoleAssignment.ReadWrite.All` and `Application.Read.All`, or `AppRoleAssignment.ReadWrite.All` and `Directory.Read.All`, or `Application.ReadWrite.All`, or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Application Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*App role assignment for accessing Microsoft Graph*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = new azuread.ServicePrincipal(\"msgraph\", {\n    applicationId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    useExisting: true,\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    requiredResourceAccesses: [{\n        resourceAppId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n        resourceAccesses: [\n            {\n                id: msgraph.appRoleIds[\"User.Read.All\"],\n                type: \"Role\",\n            },\n            {\n                id: msgraph.oauth2PermissionScopeIds[\"User.ReadWrite\"],\n                type: \"Scope\",\n            },\n        ],\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleAppRoleAssignment = new azuread.AppRoleAssignment(\"exampleAppRoleAssignment\", {\n    appRoleId: msgraph.appRoleIds[\"User.Read.All\"],\n    principalObjectId: exampleServicePrincipal.objectId,\n    resourceObjectId: msgraph.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.ServicePrincipal(\"msgraph\",\n    application_id=well_known.result[\"MicrosoftGraph\"],\n    use_existing=True)\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    required_resource_accesses=[azuread.ApplicationRequiredResourceAccessArgs(\n        resource_app_id=well_known.result[\"MicrosoftGraph\"],\n        resource_accesses=[\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.app_role_ids[\"User.Read.All\"],\n                type=\"Role\",\n            ),\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"],\n                type=\"Scope\",\n            ),\n        ],\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_app_role_assignment = azuread.AppRoleAssignment(\"exampleAppRoleAssignment\",\n    app_role_id=msgraph.app_role_ids[\"User.Read.All\"],\n    principal_object_id=example_service_principal.object_id,\n    resource_object_id=msgraph.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = new AzureAD.ServicePrincipal(\"msgraph\", new()\n    {\n        ApplicationId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        UseExisting = true,\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.User_Read_All),\n                        Type = \"Role\",\n                    },\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.User_ReadWrite),\n                        Type = \"Scope\",\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleAppRoleAssignment = new AzureAD.AppRoleAssignment(\"exampleAppRoleAssignment\", new()\n    {\n        AppRoleId = msgraph.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.User_Read_All),\n        PrincipalObjectId = exampleServicePrincipal.ObjectId,\n        ResourceObjectId = msgraph.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmsgraph, err := azuread.NewServicePrincipal(ctx, \"msgraph\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn appRoleIds.User.Read.All, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.User.ReadWrite, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAppRoleAssignment(ctx, \"exampleAppRoleAssignment\", \u0026azuread.AppRoleAssignmentArgs{\n\t\t\tAppRoleId: msgraph.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\treturn appRoleIds.User.Read.All, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPrincipalObjectId: exampleServicePrincipal.ObjectId,\n\t\t\tResourceObjectId:  msgraph.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport com.pulumi.azuread.AppRoleAssignment;\nimport com.pulumi.azuread.AppRoleAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        var msgraph = new ServicePrincipal(\"msgraph\", ServicePrincipalArgs.builder()        \n            .applicationId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .useExisting(true)\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()\n                .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n                .resourceAccesses(                \n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.User.Read.All()))\n                        .type(\"Role\")\n                        .build(),\n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.User.ReadWrite()))\n                        .type(\"Scope\")\n                        .build())\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleAppRoleAssignment = new AppRoleAssignment(\"exampleAppRoleAssignment\", AppRoleAssignmentArgs.builder()        \n            .appRoleId(msgraph.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.User.Read.All()))\n            .principalObjectId(exampleServicePrincipal.objectId())\n            .resourceObjectId(msgraph.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  msgraph:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${wellKnown.result.MicrosoftGraph}\n      useExisting: true\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      requiredResourceAccesses:\n        - resourceAppId: ${wellKnown.result.MicrosoftGraph}\n          resourceAccesses:\n            - id: ${msgraph.appRoleIds\"User.Read.All\"[%!s(MISSING)]}\n              type: Role\n            - id: ${msgraph.oauth2PermissionScopeIds\"User.ReadWrite\"[%!s(MISSING)]}\n              type: Scope\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleAppRoleAssignment:\n    type: azuread:AppRoleAssignment\n    properties:\n      appRoleId: ${msgraph.appRoleIds\"User.Read.All\"[%!s(MISSING)]}\n      principalObjectId: ${exampleServicePrincipal.objectId}\n      resourceObjectId: ${msgraph.objectId}\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n```\n\n*App role assignment for internal application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst internalApplication = new azuread.Application(\"internalApplication\", {\n    displayName: \"internal\",\n    appRoles: [{\n        allowedMemberTypes: [\"Application\"],\n        description: \"Apps can query the database\",\n        displayName: \"Query\",\n        enabled: true,\n        id: \"00000000-0000-0000-0000-111111111111\",\n        value: \"Query.All\",\n    }],\n});\nconst internalServicePrincipal = new azuread.ServicePrincipal(\"internalServicePrincipal\", {applicationId: internalApplication.applicationId});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    requiredResourceAccesses: [{\n        resourceAppId: internalApplication.applicationId,\n        resourceAccesses: [{\n            id: internalServicePrincipal.appRoleIds[\"Query.All\"],\n            type: \"Role\",\n        }],\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleAppRoleAssignment = new azuread.AppRoleAssignment(\"exampleAppRoleAssignment\", {\n    appRoleId: internalServicePrincipal.appRoleIds[\"Query.All\"],\n    principalObjectId: exampleServicePrincipal.objectId,\n    resourceObjectId: internalServicePrincipal.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ninternal_application = azuread.Application(\"internalApplication\",\n    display_name=\"internal\",\n    app_roles=[azuread.ApplicationAppRoleArgs(\n        allowed_member_types=[\"Application\"],\n        description=\"Apps can query the database\",\n        display_name=\"Query\",\n        enabled=True,\n        id=\"00000000-0000-0000-0000-111111111111\",\n        value=\"Query.All\",\n    )])\ninternal_service_principal = azuread.ServicePrincipal(\"internalServicePrincipal\", application_id=internal_application.application_id)\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    required_resource_accesses=[azuread.ApplicationRequiredResourceAccessArgs(\n        resource_app_id=internal_application.application_id,\n        resource_accesses=[azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n            id=internal_service_principal.app_role_ids[\"Query.All\"],\n            type=\"Role\",\n        )],\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_app_role_assignment = azuread.AppRoleAssignment(\"exampleAppRoleAssignment\",\n    app_role_id=internal_service_principal.app_role_ids[\"Query.All\"],\n    principal_object_id=example_service_principal.object_id,\n    resource_object_id=internal_service_principal.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var internalApplication = new AzureAD.Application(\"internalApplication\", new()\n    {\n        DisplayName = \"internal\",\n        AppRoles = new[]\n        {\n            new AzureAD.Inputs.ApplicationAppRoleArgs\n            {\n                AllowedMemberTypes = new[]\n                {\n                    \"Application\",\n                },\n                Description = \"Apps can query the database\",\n                DisplayName = \"Query\",\n                Enabled = true,\n                Id = \"00000000-0000-0000-0000-111111111111\",\n                Value = \"Query.All\",\n            },\n        },\n    });\n\n    var internalServicePrincipal = new AzureAD.ServicePrincipal(\"internalServicePrincipal\", new()\n    {\n        ApplicationId = internalApplication.ApplicationId,\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = internalApplication.ApplicationId,\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = internalServicePrincipal.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.Query_All),\n                        Type = \"Role\",\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleAppRoleAssignment = new AzureAD.AppRoleAssignment(\"exampleAppRoleAssignment\", new()\n    {\n        AppRoleId = internalServicePrincipal.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.Query_All),\n        PrincipalObjectId = exampleServicePrincipal.ObjectId,\n        ResourceObjectId = internalServicePrincipal.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinternalApplication, err := azuread.NewApplication(ctx, \"internalApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"internal\"),\n\t\t\tAppRoles: azuread.ApplicationAppRoleTypeArray{\n\t\t\t\t\u0026azuread.ApplicationAppRoleTypeArgs{\n\t\t\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Application\"),\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"Apps can query the database\"),\n\t\t\t\t\tDisplayName: pulumi.String(\"Query\"),\n\t\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\t\tId:          pulumi.String(\"00000000-0000-0000-0000-111111111111\"),\n\t\t\t\t\tValue:       pulumi.String(\"Query.All\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinternalServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"internalServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: internalApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: internalApplication.ApplicationId,\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: internalServicePrincipal.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn appRoleIds.Query.All, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAppRoleAssignment(ctx, \"exampleAppRoleAssignment\", \u0026azuread.AppRoleAssignmentArgs{\n\t\t\tAppRoleId: internalServicePrincipal.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\treturn appRoleIds.Query.All, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPrincipalObjectId: exampleServicePrincipal.ObjectId,\n\t\t\tResourceObjectId:  internalServicePrincipal.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationAppRoleArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport com.pulumi.azuread.AppRoleAssignment;\nimport com.pulumi.azuread.AppRoleAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var internalApplication = new Application(\"internalApplication\", ApplicationArgs.builder()        \n            .displayName(\"internal\")\n            .appRoles(ApplicationAppRoleArgs.builder()\n                .allowedMemberTypes(\"Application\")\n                .description(\"Apps can query the database\")\n                .displayName(\"Query\")\n                .enabled(true)\n                .id(\"00000000-0000-0000-0000-111111111111\")\n                .value(\"Query.All\")\n                .build())\n            .build());\n\n        var internalServicePrincipal = new ServicePrincipal(\"internalServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(internalApplication.applicationId())\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()\n                .resourceAppId(internalApplication.applicationId())\n                .resourceAccesses(ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                    .id(internalServicePrincipal.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.Query.All()))\n                    .type(\"Role\")\n                    .build())\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleAppRoleAssignment = new AppRoleAssignment(\"exampleAppRoleAssignment\", AppRoleAssignmentArgs.builder()        \n            .appRoleId(internalServicePrincipal.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.Query.All()))\n            .principalObjectId(exampleServicePrincipal.objectId())\n            .resourceObjectId(internalServicePrincipal.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  internalApplication:\n    type: azuread:Application\n    properties:\n      displayName: internal\n      appRoles:\n        - allowedMemberTypes:\n            - Application\n          description: Apps can query the database\n          displayName: Query\n          enabled: true\n          id: 00000000-0000-0000-0000-111111111111\n          value: Query.All\n  internalServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${internalApplication.applicationId}\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      requiredResourceAccesses:\n        - resourceAppId: ${internalApplication.applicationId}\n          resourceAccesses:\n            - id: ${internalServicePrincipal.appRoleIds\"Query.All\"[%!s(MISSING)]}\n              type: Role\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleAppRoleAssignment:\n    type: azuread:AppRoleAssignment\n    properties:\n      appRoleId: ${internalServicePrincipal.appRoleIds\"Query.All\"[%!s(MISSING)]}\n      principalObjectId: ${exampleServicePrincipal.objectId}\n      resourceObjectId: ${internalServicePrincipal.objectId}\n```\n\n*Assign a user and group to an internal application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleDomains = azuread.getDomains({\n    onlyInitial: true,\n});\nconst internalApplication = new azuread.Application(\"internalApplication\", {\n    displayName: \"internal\",\n    appRoles: [{\n        allowedMemberTypes: [\n            \"Application\",\n            \"User\",\n        ],\n        description: \"Admins can perform all task actions\",\n        displayName: \"Admin\",\n        enabled: true,\n        id: \"00000000-0000-0000-0000-222222222222\",\n        value: \"Admin.All\",\n    }],\n});\nconst internalServicePrincipal = new azuread.ServicePrincipal(\"internalServicePrincipal\", {applicationId: internalApplication.applicationId});\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"example\",\n    securityEnabled: true,\n});\nconst exampleAppRoleAssignment = new azuread.AppRoleAssignment(\"exampleAppRoleAssignment\", {\n    appRoleId: internalServicePrincipal.appRoleIds[\"Admin.All\"],\n    principalObjectId: exampleGroup.objectId,\n    resourceObjectId: internalServicePrincipal.objectId,\n});\nconst exampleUser = new azuread.User(\"exampleUser\", {\n    displayName: \"D. Duck\",\n    password: \"SecretP@sswd99!\",\n    userPrincipalName: exampleDomains.then(exampleDomains =\u003e `d.duck@${exampleDomains.domains?.[0]?.domainName}`),\n});\nconst exampleIndex_appRoleAssignmentAppRoleAssignment = new azuread.AppRoleAssignment(\"exampleIndex/appRoleAssignmentAppRoleAssignment\", {\n    appRoleId: internalServicePrincipal.appRoleIds[\"Admin.All\"],\n    principalObjectId: exampleUser.objectId,\n    resourceObjectId: internalServicePrincipal.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_domains = azuread.get_domains(only_initial=True)\ninternal_application = azuread.Application(\"internalApplication\",\n    display_name=\"internal\",\n    app_roles=[azuread.ApplicationAppRoleArgs(\n        allowed_member_types=[\n            \"Application\",\n            \"User\",\n        ],\n        description=\"Admins can perform all task actions\",\n        display_name=\"Admin\",\n        enabled=True,\n        id=\"00000000-0000-0000-0000-222222222222\",\n        value=\"Admin.All\",\n    )])\ninternal_service_principal = azuread.ServicePrincipal(\"internalServicePrincipal\", application_id=internal_application.application_id)\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"example\",\n    security_enabled=True)\nexample_app_role_assignment = azuread.AppRoleAssignment(\"exampleAppRoleAssignment\",\n    app_role_id=internal_service_principal.app_role_ids[\"Admin.All\"],\n    principal_object_id=example_group.object_id,\n    resource_object_id=internal_service_principal.object_id)\nexample_user = azuread.User(\"exampleUser\",\n    display_name=\"D. Duck\",\n    password=\"SecretP@sswd99!\",\n    user_principal_name=f\"d.duck@{example_domains.domains[0].domain_name}\")\nexample_index_app_role_assignment_app_role_assignment = azuread.AppRoleAssignment(\"exampleIndex/appRoleAssignmentAppRoleAssignment\",\n    app_role_id=internal_service_principal.app_role_ids[\"Admin.All\"],\n    principal_object_id=example_user.object_id,\n    resource_object_id=internal_service_principal.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDomains = AzureAD.GetDomains.Invoke(new()\n    {\n        OnlyInitial = true,\n    });\n\n    var internalApplication = new AzureAD.Application(\"internalApplication\", new()\n    {\n        DisplayName = \"internal\",\n        AppRoles = new[]\n        {\n            new AzureAD.Inputs.ApplicationAppRoleArgs\n            {\n                AllowedMemberTypes = new[]\n                {\n                    \"Application\",\n                    \"User\",\n                },\n                Description = \"Admins can perform all task actions\",\n                DisplayName = \"Admin\",\n                Enabled = true,\n                Id = \"00000000-0000-0000-0000-222222222222\",\n                Value = \"Admin.All\",\n            },\n        },\n    });\n\n    var internalServicePrincipal = new AzureAD.ServicePrincipal(\"internalServicePrincipal\", new()\n    {\n        ApplicationId = internalApplication.ApplicationId,\n    });\n\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"example\",\n        SecurityEnabled = true,\n    });\n\n    var exampleAppRoleAssignment = new AzureAD.AppRoleAssignment(\"exampleAppRoleAssignment\", new()\n    {\n        AppRoleId = internalServicePrincipal.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.Admin_All),\n        PrincipalObjectId = exampleGroup.ObjectId,\n        ResourceObjectId = internalServicePrincipal.ObjectId,\n    });\n\n    var exampleUser = new AzureAD.User(\"exampleUser\", new()\n    {\n        DisplayName = \"D. Duck\",\n        Password = \"SecretP@sswd99!\",\n        UserPrincipalName = $\"d.duck@{exampleDomains.Apply(getDomainsResult =\u003e getDomainsResult.Domains[0]?.DomainName)}\",\n    });\n\n    var exampleIndex_appRoleAssignmentAppRoleAssignment = new AzureAD.AppRoleAssignment(\"exampleIndex/appRoleAssignmentAppRoleAssignment\", new()\n    {\n        AppRoleId = internalServicePrincipal.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.Admin_All),\n        PrincipalObjectId = exampleUser.ObjectId,\n        ResourceObjectId = internalServicePrincipal.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDomains, err := azuread.GetDomains(ctx, \u0026azuread.GetDomainsArgs{\n\t\t\tOnlyInitial: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinternalApplication, err := azuread.NewApplication(ctx, \"internalApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"internal\"),\n\t\t\tAppRoles: azuread.ApplicationAppRoleTypeArray{\n\t\t\t\t\u0026azuread.ApplicationAppRoleTypeArgs{\n\t\t\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Application\"),\n\t\t\t\t\t\tpulumi.String(\"User\"),\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"Admins can perform all task actions\"),\n\t\t\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\t\tId:          pulumi.String(\"00000000-0000-0000-0000-222222222222\"),\n\t\t\t\t\tValue:       pulumi.String(\"Admin.All\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinternalServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"internalServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: internalApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"example\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAppRoleAssignment(ctx, \"exampleAppRoleAssignment\", \u0026azuread.AppRoleAssignmentArgs{\n\t\t\tAppRoleId: internalServicePrincipal.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\treturn appRoleIds.Admin.All, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPrincipalObjectId: exampleGroup.ObjectId,\n\t\t\tResourceObjectId:  internalServicePrincipal.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuread.NewUser(ctx, \"exampleUser\", \u0026azuread.UserArgs{\n\t\t\tDisplayName:       pulumi.String(\"D. Duck\"),\n\t\t\tPassword:          pulumi.String(\"SecretP@sswd99!\"),\n\t\t\tUserPrincipalName: pulumi.String(fmt.Sprintf(\"d.duck@%v\", exampleDomains.Domains[0].DomainName)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAppRoleAssignment(ctx, \"exampleIndex/appRoleAssignmentAppRoleAssignment\", \u0026azuread.AppRoleAssignmentArgs{\n\t\t\tAppRoleId: internalServicePrincipal.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\treturn appRoleIds.Admin.All, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPrincipalObjectId: exampleUser.ObjectId,\n\t\t\tResourceObjectId:  internalServicePrincipal.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetDomainsArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationAppRoleArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.AppRoleAssignment;\nimport com.pulumi.azuread.AppRoleAssignmentArgs;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleDomains = AzureadFunctions.getDomains(GetDomainsArgs.builder()\n            .onlyInitial(true)\n            .build());\n\n        var internalApplication = new Application(\"internalApplication\", ApplicationArgs.builder()        \n            .displayName(\"internal\")\n            .appRoles(ApplicationAppRoleArgs.builder()\n                .allowedMemberTypes(                \n                    \"Application\",\n                    \"User\")\n                .description(\"Admins can perform all task actions\")\n                .displayName(\"Admin\")\n                .enabled(true)\n                .id(\"00000000-0000-0000-0000-222222222222\")\n                .value(\"Admin.All\")\n                .build())\n            .build());\n\n        var internalServicePrincipal = new ServicePrincipal(\"internalServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(internalApplication.applicationId())\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"example\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleAppRoleAssignment = new AppRoleAssignment(\"exampleAppRoleAssignment\", AppRoleAssignmentArgs.builder()        \n            .appRoleId(internalServicePrincipal.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.Admin.All()))\n            .principalObjectId(exampleGroup.objectId())\n            .resourceObjectId(internalServicePrincipal.objectId())\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .displayName(\"D. Duck\")\n            .password(\"SecretP@sswd99!\")\n            .userPrincipalName(String.format(\"d.duck@%s\", exampleDomains.applyValue(getDomainsResult -\u003e getDomainsResult.domains()[0].domainName())))\n            .build());\n\n        var exampleIndex_appRoleAssignmentAppRoleAssignment = new AppRoleAssignment(\"exampleIndex/appRoleAssignmentAppRoleAssignment\", AppRoleAssignmentArgs.builder()        \n            .appRoleId(internalServicePrincipal.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.Admin.All()))\n            .principalObjectId(exampleUser.objectId())\n            .resourceObjectId(internalServicePrincipal.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  internalApplication:\n    type: azuread:Application\n    properties:\n      displayName: internal\n      appRoles:\n        - allowedMemberTypes:\n            - Application\n            - User\n          description: Admins can perform all task actions\n          displayName: Admin\n          enabled: true\n          id: 00000000-0000-0000-0000-222222222222\n          value: Admin.All\n  internalServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${internalApplication.applicationId}\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: example\n      securityEnabled: true\n  exampleAppRoleAssignment:\n    type: azuread:AppRoleAssignment\n    properties:\n      appRoleId: ${internalServicePrincipal.appRoleIds\"Admin.All\"[%!s(MISSING)]}\n      principalObjectId: ${exampleGroup.objectId}\n      resourceObjectId: ${internalServicePrincipal.objectId}\n  exampleUser:\n    type: azuread:User\n    properties:\n      displayName: D. Duck\n      password: SecretP@sswd99!\n      userPrincipalName: d.duck@${exampleDomains.domains[0].domainName}\n  exampleIndex/appRoleAssignmentAppRoleAssignment:\n    type: azuread:AppRoleAssignment\n    properties:\n      appRoleId: ${internalServicePrincipal.appRoleIds\"Admin.All\"[%!s(MISSING)]}\n      principalObjectId: ${exampleUser.objectId}\n      resourceObjectId: ${internalServicePrincipal.objectId}\nvariables:\n  exampleDomains:\n    fn::invoke:\n      Function: azuread:getDomains\n      Arguments:\n        onlyInitial: true\n```\n\n*Assign a group to the default app role for an internal application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst internalApplication = new azuread.Application(\"internalApplication\", {displayName: \"internal\"});\nconst internalServicePrincipal = new azuread.ServicePrincipal(\"internalServicePrincipal\", {applicationId: internalApplication.applicationId});\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"example\",\n    securityEnabled: true,\n});\nconst exampleAppRoleAssignment = new azuread.AppRoleAssignment(\"exampleAppRoleAssignment\", {\n    appRoleId: \"00000000-0000-0000-0000-000000000000\",\n    principalObjectId: exampleGroup.objectId,\n    resourceObjectId: internalServicePrincipal.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ninternal_application = azuread.Application(\"internalApplication\", display_name=\"internal\")\ninternal_service_principal = azuread.ServicePrincipal(\"internalServicePrincipal\", application_id=internal_application.application_id)\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"example\",\n    security_enabled=True)\nexample_app_role_assignment = azuread.AppRoleAssignment(\"exampleAppRoleAssignment\",\n    app_role_id=\"00000000-0000-0000-0000-000000000000\",\n    principal_object_id=example_group.object_id,\n    resource_object_id=internal_service_principal.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var internalApplication = new AzureAD.Application(\"internalApplication\", new()\n    {\n        DisplayName = \"internal\",\n    });\n\n    var internalServicePrincipal = new AzureAD.ServicePrincipal(\"internalServicePrincipal\", new()\n    {\n        ApplicationId = internalApplication.ApplicationId,\n    });\n\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"example\",\n        SecurityEnabled = true,\n    });\n\n    var exampleAppRoleAssignment = new AzureAD.AppRoleAssignment(\"exampleAppRoleAssignment\", new()\n    {\n        AppRoleId = \"00000000-0000-0000-0000-000000000000\",\n        PrincipalObjectId = exampleGroup.ObjectId,\n        ResourceObjectId = internalServicePrincipal.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinternalApplication, err := azuread.NewApplication(ctx, \"internalApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"internal\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinternalServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"internalServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: internalApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"example\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewAppRoleAssignment(ctx, \"exampleAppRoleAssignment\", \u0026azuread.AppRoleAssignmentArgs{\n\t\t\tAppRoleId:         pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tPrincipalObjectId: exampleGroup.ObjectId,\n\t\t\tResourceObjectId:  internalServicePrincipal.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.AppRoleAssignment;\nimport com.pulumi.azuread.AppRoleAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var internalApplication = new Application(\"internalApplication\", ApplicationArgs.builder()        \n            .displayName(\"internal\")\n            .build());\n\n        var internalServicePrincipal = new ServicePrincipal(\"internalServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(internalApplication.applicationId())\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"example\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleAppRoleAssignment = new AppRoleAssignment(\"exampleAppRoleAssignment\", AppRoleAssignmentArgs.builder()        \n            .appRoleId(\"00000000-0000-0000-0000-000000000000\")\n            .principalObjectId(exampleGroup.objectId())\n            .resourceObjectId(internalServicePrincipal.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  internalApplication:\n    type: azuread:Application\n    properties:\n      displayName: internal\n  internalServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${internalApplication.applicationId}\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: example\n      securityEnabled: true\n  exampleAppRoleAssignment:\n    type: azuread:AppRoleAssignment\n    properties:\n      appRoleId: 00000000-0000-0000-0000-000000000000\n      principalObjectId: ${exampleGroup.objectId}\n      resourceObjectId: ${internalServicePrincipal.objectId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp role assignments can be imported using the object ID of the service principal representing the resource and the ID of the app role assignment (note_not_ the ID of the app role), e.g.\n\n```sh\n $ pulumi import azuread:index/appRoleAssignment:AppRoleAssignment example 00000000-0000-0000-0000-000000000000/appRoleAssignment/aaBBcDDeFG6h5JKLMN2PQrrssTTUUvWWxxxxxyyyzzz\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Resource Service Principal Object ID and the ID of the App Role Assignment in the format `{ResourcePrincipalID}/appRoleAssignment/{AppRoleAssignmentID}`. ",
            "properties": {
                "appRoleId": {
                    "type": "string",
                    "description": "The ID of the app role to be assigned, or the default role ID `00000000-0000-0000-0000-000000000000`. Changing this forces a new resource to be created.\n"
                },
                "principalDisplayName": {
                    "type": "string",
                    "description": "The display name of the principal to which the app role is assigned.\n"
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                },
                "principalType": {
                    "type": "string",
                    "description": "The object type of the principal to which the app role is assigned.\n"
                },
                "resourceDisplayName": {
                    "type": "string",
                    "description": "The display name of the application representing the resource.\n"
                },
                "resourceObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal representing the resource. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "appRoleId",
                "principalDisplayName",
                "principalObjectId",
                "principalType",
                "resourceDisplayName",
                "resourceObjectId"
            ],
            "inputProperties": {
                "appRoleId": {
                    "type": "string",
                    "description": "The ID of the app role to be assigned, or the default role ID `00000000-0000-0000-0000-000000000000`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "resourceObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal representing the resource. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "appRoleId",
                "principalObjectId",
                "resourceObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppRoleAssignment resources.\n",
                "properties": {
                    "appRoleId": {
                        "type": "string",
                        "description": "The ID of the app role to be assigned, or the default role ID `00000000-0000-0000-0000-000000000000`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalDisplayName": {
                        "type": "string",
                        "description": "The display name of the principal to which the app role is assigned.\n"
                    },
                    "principalObjectId": {
                        "type": "string",
                        "description": "The object ID of the user, group or service principal to be assigned this app role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalType": {
                        "type": "string",
                        "description": "The object type of the principal to which the app role is assigned.\n"
                    },
                    "resourceDisplayName": {
                        "type": "string",
                        "description": "The display name of the application representing the resource.\n"
                    },
                    "resourceObjectId": {
                        "type": "string",
                        "description": "The object ID of the service principal representing the resource. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/application:Application": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Create an application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\nimport * as fs from \"fs\";\n\nconst current = azuread.getClientConfig({});\nconst example = new azuread.Application(\"example\", {\n    displayName: \"example\",\n    identifierUris: [\"api://example-app\"],\n    logoImage: Buffer.from(fs.readFileSync(\"/path/to/logo.png\"), 'binary').toString('base64'),\n    owners: [current.then(current =\u003e current.objectId)],\n    signInAudience: \"AzureADMultipleOrgs\",\n    api: {\n        mappedClaimsEnabled: true,\n        requestedAccessTokenVersion: 2,\n        knownClientApplications: [\n            azuread_application.known1.application_id,\n            azuread_application.known2.application_id,\n        ],\n        oauth2PermissionScopes: [\n            {\n                adminConsentDescription: \"Allow the application to access example on behalf of the signed-in user.\",\n                adminConsentDisplayName: \"Access example\",\n                enabled: true,\n                id: \"96183846-204b-4b43-82e1-5d2222eb4b9b\",\n                type: \"User\",\n                userConsentDescription: \"Allow the application to access example on your behalf.\",\n                userConsentDisplayName: \"Access example\",\n                value: \"user_impersonation\",\n            },\n            {\n                adminConsentDescription: \"Administer the example application\",\n                adminConsentDisplayName: \"Administer\",\n                enabled: true,\n                id: \"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\",\n                type: \"Admin\",\n                value: \"administer\",\n            },\n        ],\n    },\n    appRoles: [\n        {\n            allowedMemberTypes: [\n                \"User\",\n                \"Application\",\n            ],\n            description: \"Admins can manage roles and perform all task actions\",\n            displayName: \"Admin\",\n            enabled: true,\n            id: \"1b19509b-32b1-4e9f-b71d-4992aa991967\",\n            value: \"admin\",\n        },\n        {\n            allowedMemberTypes: [\"User\"],\n            description: \"ReadOnly roles have limited query access\",\n            displayName: \"ReadOnly\",\n            enabled: true,\n            id: \"497406e4-012a-4267-bf18-45a1cb148a01\",\n            value: \"User\",\n        },\n    ],\n    featureTags: [{\n        enterprise: true,\n        gallery: true,\n    }],\n    optionalClaims: {\n        accessTokens: [\n            {\n                name: \"myclaim\",\n            },\n            {\n                name: \"otherclaim\",\n            },\n        ],\n        idTokens: [{\n            name: \"userclaim\",\n            source: \"user\",\n            essential: true,\n            additionalProperties: [\"emit_as_roles\"],\n        }],\n        saml2Tokens: [{\n            name: \"samlexample\",\n        }],\n    },\n    requiredResourceAccesses: [\n        {\n            resourceAppId: \"00000003-0000-0000-c000-000000000000\",\n            resourceAccesses: [\n                {\n                    id: \"df021288-bdef-4463-88db-98f22de89214\",\n                    type: \"Role\",\n                },\n                {\n                    id: \"b4e74841-8e56-480b-be8b-910348b18b4c\",\n                    type: \"Scope\",\n                },\n            ],\n        },\n        {\n            resourceAppId: \"c5393580-f805-4401-95e8-94b7a6ef2fc2\",\n            resourceAccesses: [{\n                id: \"594c1fb6-4f81-4475-ae41-0c394909246c\",\n                type: \"Role\",\n            }],\n        },\n    ],\n    web: {\n        homepageUrl: \"https://app.example.net\",\n        logoutUrl: \"https://app.example.net/logout\",\n        redirectUris: [\"https://app.example.net/account\"],\n        implicitGrant: {\n            accessTokenIssuanceEnabled: true,\n            idTokenIssuanceEnabled: true,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample = azuread.Application(\"example\",\n    display_name=\"example\",\n    identifier_uris=[\"api://example-app\"],\n    logo_image=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"/path/to/logo.png\"),\n    owners=[current.object_id],\n    sign_in_audience=\"AzureADMultipleOrgs\",\n    api=azuread.ApplicationApiArgs(\n        mapped_claims_enabled=True,\n        requested_access_token_version=2,\n        known_client_applications=[\n            azuread_application[\"known1\"][\"application_id\"],\n            azuread_application[\"known2\"][\"application_id\"],\n        ],\n        oauth2_permission_scopes=[\n            azuread.ApplicationApiOauth2PermissionScopeArgs(\n                admin_consent_description=\"Allow the application to access example on behalf of the signed-in user.\",\n                admin_consent_display_name=\"Access example\",\n                enabled=True,\n                id=\"96183846-204b-4b43-82e1-5d2222eb4b9b\",\n                type=\"User\",\n                user_consent_description=\"Allow the application to access example on your behalf.\",\n                user_consent_display_name=\"Access example\",\n                value=\"user_impersonation\",\n            ),\n            azuread.ApplicationApiOauth2PermissionScopeArgs(\n                admin_consent_description=\"Administer the example application\",\n                admin_consent_display_name=\"Administer\",\n                enabled=True,\n                id=\"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\",\n                type=\"Admin\",\n                value=\"administer\",\n            ),\n        ],\n    ),\n    app_roles=[\n        azuread.ApplicationAppRoleArgs(\n            allowed_member_types=[\n                \"User\",\n                \"Application\",\n            ],\n            description=\"Admins can manage roles and perform all task actions\",\n            display_name=\"Admin\",\n            enabled=True,\n            id=\"1b19509b-32b1-4e9f-b71d-4992aa991967\",\n            value=\"admin\",\n        ),\n        azuread.ApplicationAppRoleArgs(\n            allowed_member_types=[\"User\"],\n            description=\"ReadOnly roles have limited query access\",\n            display_name=\"ReadOnly\",\n            enabled=True,\n            id=\"497406e4-012a-4267-bf18-45a1cb148a01\",\n            value=\"User\",\n        ),\n    ],\n    feature_tags=[azuread.ApplicationFeatureTagArgs(\n        enterprise=True,\n        gallery=True,\n    )],\n    optional_claims=azuread.ApplicationOptionalClaimsArgs(\n        access_tokens=[\n            azuread.ApplicationOptionalClaimsAccessTokenArgs(\n                name=\"myclaim\",\n            ),\n            azuread.ApplicationOptionalClaimsAccessTokenArgs(\n                name=\"otherclaim\",\n            ),\n        ],\n        id_tokens=[azuread.ApplicationOptionalClaimsIdTokenArgs(\n            name=\"userclaim\",\n            source=\"user\",\n            essential=True,\n            additional_properties=[\"emit_as_roles\"],\n        )],\n        saml2_tokens=[azuread.ApplicationOptionalClaimsSaml2TokenArgs(\n            name=\"samlexample\",\n        )],\n    ),\n    required_resource_accesses=[\n        azuread.ApplicationRequiredResourceAccessArgs(\n            resource_app_id=\"00000003-0000-0000-c000-000000000000\",\n            resource_accesses=[\n                azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                    id=\"df021288-bdef-4463-88db-98f22de89214\",\n                    type=\"Role\",\n                ),\n                azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                    id=\"b4e74841-8e56-480b-be8b-910348b18b4c\",\n                    type=\"Scope\",\n                ),\n            ],\n        ),\n        azuread.ApplicationRequiredResourceAccessArgs(\n            resource_app_id=\"c5393580-f805-4401-95e8-94b7a6ef2fc2\",\n            resource_accesses=[azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=\"594c1fb6-4f81-4475-ae41-0c394909246c\",\n                type=\"Role\",\n            )],\n        ),\n    ],\n    web=azuread.ApplicationWebArgs(\n        homepage_url=\"https://app.example.net\",\n        logout_url=\"https://app.example.net/logout\",\n        redirect_uris=[\"https://app.example.net/account\"],\n        implicit_grant=azuread.ApplicationWebImplicitGrantArgs(\n            access_token_issuance_enabled=True,\n            id_token_issuance_enabled=True,\n        ),\n    ))\n```\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(File.ReadAllText(path)));\n\t}\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var example = new AzureAD.Application(\"example\", new()\n    {\n        DisplayName = \"example\",\n        IdentifierUris = new[]\n        {\n            \"api://example-app\",\n        },\n        LogoImage = ReadFileBase64(\"/path/to/logo.png\"),\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n        SignInAudience = \"AzureADMultipleOrgs\",\n        Api = new AzureAD.Inputs.ApplicationApiArgs\n        {\n            MappedClaimsEnabled = true,\n            RequestedAccessTokenVersion = 2,\n            KnownClientApplications = new[]\n            {\n                azuread_application.Known1.Application_id,\n                azuread_application.Known2.Application_id,\n            },\n            Oauth2PermissionScopes = new[]\n            {\n                new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs\n                {\n                    AdminConsentDescription = \"Allow the application to access example on behalf of the signed-in user.\",\n                    AdminConsentDisplayName = \"Access example\",\n                    Enabled = true,\n                    Id = \"96183846-204b-4b43-82e1-5d2222eb4b9b\",\n                    Type = \"User\",\n                    UserConsentDescription = \"Allow the application to access example on your behalf.\",\n                    UserConsentDisplayName = \"Access example\",\n                    Value = \"user_impersonation\",\n                },\n                new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs\n                {\n                    AdminConsentDescription = \"Administer the example application\",\n                    AdminConsentDisplayName = \"Administer\",\n                    Enabled = true,\n                    Id = \"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\",\n                    Type = \"Admin\",\n                    Value = \"administer\",\n                },\n            },\n        },\n        AppRoles = new[]\n        {\n            new AzureAD.Inputs.ApplicationAppRoleArgs\n            {\n                AllowedMemberTypes = new[]\n                {\n                    \"User\",\n                    \"Application\",\n                },\n                Description = \"Admins can manage roles and perform all task actions\",\n                DisplayName = \"Admin\",\n                Enabled = true,\n                Id = \"1b19509b-32b1-4e9f-b71d-4992aa991967\",\n                Value = \"admin\",\n            },\n            new AzureAD.Inputs.ApplicationAppRoleArgs\n            {\n                AllowedMemberTypes = new[]\n                {\n                    \"User\",\n                },\n                Description = \"ReadOnly roles have limited query access\",\n                DisplayName = \"ReadOnly\",\n                Enabled = true,\n                Id = \"497406e4-012a-4267-bf18-45a1cb148a01\",\n                Value = \"User\",\n            },\n        },\n        FeatureTags = new[]\n        {\n            new AzureAD.Inputs.ApplicationFeatureTagArgs\n            {\n                Enterprise = true,\n                Gallery = true,\n            },\n        },\n        OptionalClaims = new AzureAD.Inputs.ApplicationOptionalClaimsArgs\n        {\n            AccessTokens = new[]\n            {\n                new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n                {\n                    Name = \"myclaim\",\n                },\n                new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n                {\n                    Name = \"otherclaim\",\n                },\n            },\n            IdTokens = new[]\n            {\n                new AzureAD.Inputs.ApplicationOptionalClaimsIdTokenArgs\n                {\n                    Name = \"userclaim\",\n                    Source = \"user\",\n                    Essential = true,\n                    AdditionalProperties = new[]\n                    {\n                        \"emit_as_roles\",\n                    },\n                },\n            },\n            Saml2Tokens = new[]\n            {\n                new AzureAD.Inputs.ApplicationOptionalClaimsSaml2TokenArgs\n                {\n                    Name = \"samlexample\",\n                },\n            },\n        },\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = \"00000003-0000-0000-c000-000000000000\",\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = \"df021288-bdef-4463-88db-98f22de89214\",\n                        Type = \"Role\",\n                    },\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = \"b4e74841-8e56-480b-be8b-910348b18b4c\",\n                        Type = \"Scope\",\n                    },\n                },\n            },\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = \"c5393580-f805-4401-95e8-94b7a6ef2fc2\",\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = \"594c1fb6-4f81-4475-ae41-0c394909246c\",\n                        Type = \"Role\",\n                    },\n                },\n            },\n        },\n        Web = new AzureAD.Inputs.ApplicationWebArgs\n        {\n            HomepageUrl = \"https://app.example.net\",\n            LogoutUrl = \"https://app.example.net/logout\",\n            RedirectUris = new[]\n            {\n                \"https://app.example.net/account\",\n            },\n            ImplicitGrant = new AzureAD.Inputs.ApplicationWebImplicitGrantArgs\n            {\n                AccessTokenIssuanceEnabled = true,\n                IdTokenIssuanceEnabled = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := os.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplication(ctx, \"example\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tIdentifierUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"api://example-app\"),\n\t\t\t},\n\t\t\tLogoImage: filebase64OrPanic(\"/path/to/logo.png\"),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t\tSignInAudience: pulumi.String(\"AzureADMultipleOrgs\"),\n\t\t\tApi: \u0026azuread.ApplicationApiArgs{\n\t\t\t\tMappedClaimsEnabled:         pulumi.Bool(true),\n\t\t\t\tRequestedAccessTokenVersion: pulumi.Int(2),\n\t\t\t\tKnownClientApplications: pulumi.StringArray{\n\t\t\t\t\tazuread_application.Known1.Application_id,\n\t\t\t\t\tazuread_application.Known2.Application_id,\n\t\t\t\t},\n\t\t\t\tOauth2PermissionScopes: azuread.ApplicationApiOauth2PermissionScopeArray{\n\t\t\t\t\t\u0026azuread.ApplicationApiOauth2PermissionScopeArgs{\n\t\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Allow the application to access example on behalf of the signed-in user.\"),\n\t\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Access example\"),\n\t\t\t\t\t\tEnabled:                 pulumi.Bool(true),\n\t\t\t\t\t\tId:                      pulumi.String(\"96183846-204b-4b43-82e1-5d2222eb4b9b\"),\n\t\t\t\t\t\tType:                    pulumi.String(\"User\"),\n\t\t\t\t\t\tUserConsentDescription:  pulumi.String(\"Allow the application to access example on your behalf.\"),\n\t\t\t\t\t\tUserConsentDisplayName:  pulumi.String(\"Access example\"),\n\t\t\t\t\t\tValue:                   pulumi.String(\"user_impersonation\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuread.ApplicationApiOauth2PermissionScopeArgs{\n\t\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Administer the example application\"),\n\t\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Administer\"),\n\t\t\t\t\t\tEnabled:                 pulumi.Bool(true),\n\t\t\t\t\t\tId:                      pulumi.String(\"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\"),\n\t\t\t\t\t\tType:                    pulumi.String(\"Admin\"),\n\t\t\t\t\t\tValue:                   pulumi.String(\"administer\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAppRoles: azuread.ApplicationAppRoleTypeArray{\n\t\t\t\t\u0026azuread.ApplicationAppRoleTypeArgs{\n\t\t\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"User\"),\n\t\t\t\t\t\tpulumi.String(\"Application\"),\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"Admins can manage roles and perform all task actions\"),\n\t\t\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\t\tId:          pulumi.String(\"1b19509b-32b1-4e9f-b71d-4992aa991967\"),\n\t\t\t\t\tValue:       pulumi.String(\"admin\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.ApplicationAppRoleTypeArgs{\n\t\t\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"User\"),\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"ReadOnly roles have limited query access\"),\n\t\t\t\t\tDisplayName: pulumi.String(\"ReadOnly\"),\n\t\t\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\t\t\tId:          pulumi.String(\"497406e4-012a-4267-bf18-45a1cb148a01\"),\n\t\t\t\t\tValue:       pulumi.String(\"User\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFeatureTags: azuread.ApplicationFeatureTagArray{\n\t\t\t\t\u0026azuread.ApplicationFeatureTagArgs{\n\t\t\t\t\tEnterprise: pulumi.Bool(true),\n\t\t\t\t\tGallery:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOptionalClaims: \u0026azuread.ApplicationOptionalClaimsTypeArgs{\n\t\t\t\tAccessTokens: azuread.ApplicationOptionalClaimsAccessTokenArray{\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\t\tName: pulumi.String(\"myclaim\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\t\tName: pulumi.String(\"otherclaim\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIdTokens: azuread.ApplicationOptionalClaimsIdTokenArray{\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsIdTokenArgs{\n\t\t\t\t\t\tName:      pulumi.String(\"userclaim\"),\n\t\t\t\t\t\tSource:    pulumi.String(\"user\"),\n\t\t\t\t\t\tEssential: pulumi.Bool(true),\n\t\t\t\t\t\tAdditionalProperties: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"emit_as_roles\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSaml2Tokens: azuread.ApplicationOptionalClaimsSaml2TokenArray{\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsSaml2TokenArgs{\n\t\t\t\t\t\tName: pulumi.String(\"samlexample\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: pulumi.String(\"00000003-0000-0000-c000-000000000000\"),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"df021288-bdef-4463-88db-98f22de89214\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"b4e74841-8e56-480b-be8b-910348b18b4c\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: pulumi.String(\"c5393580-f805-4401-95e8-94b7a6ef2fc2\"),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"594c1fb6-4f81-4475-ae41-0c394909246c\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tWeb: \u0026azuread.ApplicationWebArgs{\n\t\t\t\tHomepageUrl: pulumi.String(\"https://app.example.net\"),\n\t\t\t\tLogoutUrl:   pulumi.String(\"https://app.example.net/logout\"),\n\t\t\t\tRedirectUris: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"https://app.example.net/account\"),\n\t\t\t\t},\n\t\t\t\tImplicitGrant: \u0026azuread.ApplicationWebImplicitGrantArgs{\n\t\t\t\t\tAccessTokenIssuanceEnabled: pulumi.Bool(true),\n\t\t\t\t\tIdTokenIssuanceEnabled:     pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationApiArgs;\nimport com.pulumi.azuread.inputs.ApplicationAppRoleArgs;\nimport com.pulumi.azuread.inputs.ApplicationFeatureTagArgs;\nimport com.pulumi.azuread.inputs.ApplicationOptionalClaimsArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport com.pulumi.azuread.inputs.ApplicationWebArgs;\nimport com.pulumi.azuread.inputs.ApplicationWebImplicitGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var example = new Application(\"example\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .identifierUris(\"api://example-app\")\n            .logoImage(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"/path/to/logo.png\"))))\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .signInAudience(\"AzureADMultipleOrgs\")\n            .api(ApplicationApiArgs.builder()\n                .mappedClaimsEnabled(true)\n                .requestedAccessTokenVersion(2)\n                .knownClientApplications(                \n                    azuread_application.known1().application_id(),\n                    azuread_application.known2().application_id())\n                .oauth2PermissionScopes(                \n                    ApplicationApiOauth2PermissionScopeArgs.builder()\n                        .adminConsentDescription(\"Allow the application to access example on behalf of the signed-in user.\")\n                        .adminConsentDisplayName(\"Access example\")\n                        .enabled(true)\n                        .id(\"96183846-204b-4b43-82e1-5d2222eb4b9b\")\n                        .type(\"User\")\n                        .userConsentDescription(\"Allow the application to access example on your behalf.\")\n                        .userConsentDisplayName(\"Access example\")\n                        .value(\"user_impersonation\")\n                        .build(),\n                    ApplicationApiOauth2PermissionScopeArgs.builder()\n                        .adminConsentDescription(\"Administer the example application\")\n                        .adminConsentDisplayName(\"Administer\")\n                        .enabled(true)\n                        .id(\"be98fa3e-ab5b-4b11-83d9-04ba2b7946bc\")\n                        .type(\"Admin\")\n                        .value(\"administer\")\n                        .build())\n                .build())\n            .appRoles(            \n                ApplicationAppRoleArgs.builder()\n                    .allowedMemberTypes(                    \n                        \"User\",\n                        \"Application\")\n                    .description(\"Admins can manage roles and perform all task actions\")\n                    .displayName(\"Admin\")\n                    .enabled(true)\n                    .id(\"1b19509b-32b1-4e9f-b71d-4992aa991967\")\n                    .value(\"admin\")\n                    .build(),\n                ApplicationAppRoleArgs.builder()\n                    .allowedMemberTypes(\"User\")\n                    .description(\"ReadOnly roles have limited query access\")\n                    .displayName(\"ReadOnly\")\n                    .enabled(true)\n                    .id(\"497406e4-012a-4267-bf18-45a1cb148a01\")\n                    .value(\"User\")\n                    .build())\n            .featureTags(ApplicationFeatureTagArgs.builder()\n                .enterprise(true)\n                .gallery(true)\n                .build())\n            .optionalClaims(ApplicationOptionalClaimsArgs.builder()\n                .accessTokens(                \n                    ApplicationOptionalClaimsAccessTokenArgs.builder()\n                        .name(\"myclaim\")\n                        .build(),\n                    ApplicationOptionalClaimsAccessTokenArgs.builder()\n                        .name(\"otherclaim\")\n                        .build())\n                .idTokens(ApplicationOptionalClaimsIdTokenArgs.builder()\n                    .name(\"userclaim\")\n                    .source(\"user\")\n                    .essential(true)\n                    .additionalProperties(\"emit_as_roles\")\n                    .build())\n                .saml2Tokens(ApplicationOptionalClaimsSaml2TokenArgs.builder()\n                    .name(\"samlexample\")\n                    .build())\n                .build())\n            .requiredResourceAccesses(            \n                ApplicationRequiredResourceAccessArgs.builder()\n                    .resourceAppId(\"00000003-0000-0000-c000-000000000000\")\n                    .resourceAccesses(                    \n                        ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                            .id(\"df021288-bdef-4463-88db-98f22de89214\")\n                            .type(\"Role\")\n                            .build(),\n                        ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                            .id(\"b4e74841-8e56-480b-be8b-910348b18b4c\")\n                            .type(\"Scope\")\n                            .build())\n                    .build(),\n                ApplicationRequiredResourceAccessArgs.builder()\n                    .resourceAppId(\"c5393580-f805-4401-95e8-94b7a6ef2fc2\")\n                    .resourceAccesses(ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(\"594c1fb6-4f81-4475-ae41-0c394909246c\")\n                        .type(\"Role\")\n                        .build())\n                    .build())\n            .web(ApplicationWebArgs.builder()\n                .homepageUrl(\"https://app.example.net\")\n                .logoutUrl(\"https://app.example.net/logout\")\n                .redirectUris(\"https://app.example.net/account\")\n                .implicitGrant(ApplicationWebImplicitGrantArgs.builder()\n                    .accessTokenIssuanceEnabled(true)\n                    .idTokenIssuanceEnabled(true)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n\n*Create application from a gallery template*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationTemplate = azuread.getApplicationTemplate({\n    displayName: \"Marketo\",\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    templateId: exampleApplicationTemplate.then(exampleApplicationTemplate =\u003e exampleApplicationTemplate.templateId),\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    applicationId: exampleApplication.applicationId,\n    useExisting: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_template = azuread.get_application_template(display_name=\"Marketo\")\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    template_id=example_application_template.template_id)\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    application_id=example_application.application_id,\n    use_existing=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationTemplate = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Marketo\",\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        TemplateId = exampleApplicationTemplate.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n        UseExisting = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationTemplate, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Marketo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tTemplateId:  *pulumi.String(exampleApplicationTemplate.TemplateId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApplicationTemplate = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Marketo\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .templateId(exampleApplicationTemplate.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()))\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .useExisting(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      templateId: ${exampleApplicationTemplate.templateId}\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n      useExisting: true\nvariables:\n  exampleApplicationTemplate:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Marketo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplications can be imported using their object ID, e.g.\n\n```sh\n $ pulumi import azuread:index/application:Application example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "api": {
                    "$ref": "#/types/azuread:index/ApplicationApi:ApplicationApi",
                    "description": "An `api` block as documented below, which configures API related settings for this application.\n"
                },
                "appRoleIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.\n"
                },
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                    },
                    "description": "A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The Application ID (also called Client ID)\n",
                    "deprecationMessage": "The `application_id` attribute has been replaced by the `client_id` attribute and will be removed in version 3.0 of the AzureAD provider"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the application, as shown to end users.\n"
                },
                "deviceOnlyAuthEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this application supports device authentication without a user. Defaults to `false`.\n"
                },
                "disabledByMicrosoft": {
                    "type": "string",
                    "description": "Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "fallbackPublicClientEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.\n"
                },
                "featureTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationFeatureTag:ApplicationFeatureTag"
                    },
                    "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.\n"
                },
                "groupMembershipClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "identifierUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                },
                "logoImage": {
                    "type": "string",
                    "description": "A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.\n"
                },
                "logoUrl": {
                    "type": "string",
                    "description": "CDN URL to the application's logo, as uploaded with the `logo_image` property.\n"
                },
                "marketingUrl": {
                    "type": "string",
                    "description": "URL of the application's marketing page.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "User-specified notes relevant for the management of the application.\n"
                },
                "oauth2PermissionScopeIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                },
                "oauth2PostResponseRequired": {
                    "type": "boolean",
                    "description": "Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The application's object ID.\n"
                },
                "optionalClaims": {
                    "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                    "description": "An `optional_claims` block as documented below.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object IDs of principals that will be granted ownership of the application\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.\n"
                },
                "privacyStatementUrl": {
                    "type": "string",
                    "description": "URL of the application's privacy statement.\n"
                },
                "publicClient": {
                    "$ref": "#/types/azuread:index/ApplicationPublicClient:ApplicationPublicClient",
                    "description": "A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.\n"
                },
                "publisherDomain": {
                    "type": "string",
                    "description": "The verified publisher domain for the application.\n"
                },
                "requiredResourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                    },
                    "description": "A collection of `required_resource_access` blocks as documented below.\n"
                },
                "serviceManagementReference": {
                    "type": "string",
                    "description": "References application context information from a Service or Asset Management database.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n\n\u003e **Changing `sign_in_audience` for existing applications** When updating an existing application to use a `sign_in_audience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.\n"
                },
                "singlePageApplication": {
                    "$ref": "#/types/azuread:index/ApplicationSinglePageApplication:ApplicationSinglePageApplication",
                    "description": "A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "URL of the application's support page.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n\n\u003e **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the azuread.ApplicationRegistration resource instead.\n"
                },
                "termsOfServiceUrl": {
                    "type": "string",
                    "description": "URL of the application's terms of service statement.\n"
                },
                "web": {
                    "$ref": "#/types/azuread:index/ApplicationWeb:ApplicationWeb",
                    "description": "A `web` block as documented below, which configures web related settings for this application.\n\n\u003e **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing applications if you want to avoid name collisions.\n"
                }
            },
            "required": [
                "appRoleIds",
                "applicationId",
                "clientId",
                "disabledByMicrosoft",
                "displayName",
                "featureTags",
                "logoUrl",
                "oauth2PermissionScopeIds",
                "objectId",
                "publisherDomain",
                "tags",
                "templateId"
            ],
            "inputProperties": {
                "api": {
                    "$ref": "#/types/azuread:index/ApplicationApi:ApplicationApi",
                    "description": "An `api` block as documented below, which configures API related settings for this application.\n"
                },
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                    },
                    "description": "A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the application, as shown to end users.\n"
                },
                "deviceOnlyAuthEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether this application supports device authentication without a user. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "fallbackPublicClientEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.\n"
                },
                "featureTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationFeatureTag:ApplicationFeatureTag"
                    },
                    "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.\n"
                },
                "groupMembershipClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "identifierUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                },
                "logoImage": {
                    "type": "string",
                    "description": "A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.\n"
                },
                "marketingUrl": {
                    "type": "string",
                    "description": "URL of the application's marketing page.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "User-specified notes relevant for the management of the application.\n"
                },
                "oauth2PostResponseRequired": {
                    "type": "boolean",
                    "description": "Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.\n"
                },
                "optionalClaims": {
                    "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                    "description": "An `optional_claims` block as documented below.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object IDs of principals that will be granted ownership of the application\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.\n"
                },
                "privacyStatementUrl": {
                    "type": "string",
                    "description": "URL of the application's privacy statement.\n"
                },
                "publicClient": {
                    "$ref": "#/types/azuread:index/ApplicationPublicClient:ApplicationPublicClient",
                    "description": "A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.\n"
                },
                "requiredResourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                    },
                    "description": "A collection of `required_resource_access` blocks as documented below.\n"
                },
                "serviceManagementReference": {
                    "type": "string",
                    "description": "References application context information from a Service or Asset Management database.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n\n\u003e **Changing `sign_in_audience` for existing applications** When updating an existing application to use a `sign_in_audience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.\n"
                },
                "singlePageApplication": {
                    "$ref": "#/types/azuread:index/ApplicationSinglePageApplication:ApplicationSinglePageApplication",
                    "description": "A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "URL of the application's support page.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n\n\u003e **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the azuread.ApplicationRegistration resource instead.\n",
                    "willReplaceOnChanges": true
                },
                "termsOfServiceUrl": {
                    "type": "string",
                    "description": "URL of the application's terms of service statement.\n"
                },
                "web": {
                    "$ref": "#/types/azuread:index/ApplicationWeb:ApplicationWeb",
                    "description": "A `web` block as documented below, which configures web related settings for this application.\n\n\u003e **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing applications if you want to avoid name collisions.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "api": {
                        "$ref": "#/types/azuread:index/ApplicationApi:ApplicationApi",
                        "description": "An `api` block as documented below, which configures API related settings for this application.\n"
                    },
                    "appRoleIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.\n"
                    },
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                        },
                        "description": "A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The Application ID (also called Client ID)\n",
                        "deprecationMessage": "The `application_id` attribute has been replaced by the `client_id` attribute and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The Client ID for the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the application, as shown to end users.\n"
                    },
                    "deviceOnlyAuthEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether this application supports device authentication without a user. Defaults to `false`.\n"
                    },
                    "disabledByMicrosoft": {
                        "type": "string",
                        "description": "Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application.\n"
                    },
                    "fallbackPublicClientEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.\n"
                    },
                    "featureTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationFeatureTag:ApplicationFeatureTag"
                        },
                        "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.\n"
                    },
                    "groupMembershipClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                    },
                    "identifierUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                    },
                    "logoImage": {
                        "type": "string",
                        "description": "A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "CDN URL to the application's logo, as uploaded with the `logo_image` property.\n"
                    },
                    "marketingUrl": {
                        "type": "string",
                        "description": "URL of the application's marketing page.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "User-specified notes relevant for the management of the application.\n"
                    },
                    "oauth2PermissionScopeIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                    },
                    "oauth2PostResponseRequired": {
                        "type": "boolean",
                        "description": "Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The application's object ID.\n"
                    },
                    "optionalClaims": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                        "description": "An `optional_claims` block as documented below.\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of object IDs of principals that will be granted ownership of the application\n"
                    },
                    "preventDuplicateNames": {
                        "type": "boolean",
                        "description": "If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.\n"
                    },
                    "privacyStatementUrl": {
                        "type": "string",
                        "description": "URL of the application's privacy statement.\n"
                    },
                    "publicClient": {
                        "$ref": "#/types/azuread:index/ApplicationPublicClient:ApplicationPublicClient",
                        "description": "A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.\n"
                    },
                    "publisherDomain": {
                        "type": "string",
                        "description": "The verified publisher domain for the application.\n"
                    },
                    "requiredResourceAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                        },
                        "description": "A collection of `required_resource_access` blocks as documented below.\n"
                    },
                    "serviceManagementReference": {
                        "type": "string",
                        "description": "References application context information from a Service or Asset Management database.\n"
                    },
                    "signInAudience": {
                        "type": "string",
                        "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n\n\u003e **Changing `sign_in_audience` for existing applications** When updating an existing application to use a `sign_in_audience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.\n"
                    },
                    "singlePageApplication": {
                        "$ref": "#/types/azuread:index/ApplicationSinglePageApplication:ApplicationSinglePageApplication",
                        "description": "A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "URL of the application's support page.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n\n\u003e **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the azuread.ApplicationRegistration resource instead.\n",
                        "willReplaceOnChanges": true
                    },
                    "termsOfServiceUrl": {
                        "type": "string",
                        "description": "URL of the application's terms of service statement.\n"
                    },
                    "web": {
                        "$ref": "#/types/azuread:index/ApplicationWeb:ApplicationWeb",
                        "description": "A `web` block as documented below, which configures web related settings for this application.\n\n\u003e **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing applications if you want to avoid name collisions.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationApiAccess:ApplicationApiAccess": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = wellKnown.then(wellKnown =\u003e azuread.getServicePrincipal({\n    clientId: wellKnown.result?.MicrosoftGraph,\n}));\nconst example = new azuread.ApplicationRegistration(\"example\", {displayName: \"example\"});\nconst exampleMsgraph = new azuread.ApplicationApiAccess(\"exampleMsgraph\", {\n    applicationId: example.id,\n    apiClientId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    roleIds: [\n        azuread_service_principal.msgraph.app_role_ids[\"Group.Read.All\"],\n        azuread_service_principal.msgraph.app_role_ids[\"User.Read.All\"],\n    ],\n    scopeIds: [azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"]],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.get_service_principal(client_id=well_known.result[\"MicrosoftGraph\"])\nexample = azuread.ApplicationRegistration(\"example\", display_name=\"example\")\nexample_msgraph = azuread.ApplicationApiAccess(\"exampleMsgraph\",\n    application_id=example.id,\n    api_client_id=well_known.result[\"MicrosoftGraph\"],\n    role_ids=[\n        azuread_service_principal[\"msgraph\"][\"app_role_ids\"][\"Group.Read.All\"],\n        azuread_service_principal[\"msgraph\"][\"app_role_ids\"][\"User.Read.All\"],\n    ],\n    scope_ids=[azuread_service_principal[\"msgraph\"][\"oauth2_permission_scope_ids\"][\"User.ReadWrite\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = AzureAD.GetServicePrincipal.Invoke(new()\n    {\n        ClientId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n    });\n\n    var example = new AzureAD.ApplicationRegistration(\"example\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleMsgraph = new AzureAD.ApplicationApiAccess(\"exampleMsgraph\", new()\n    {\n        ApplicationId = example.Id,\n        ApiClientId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        RoleIds = new[]\n        {\n            azuread_service_principal.Msgraph.App_role_ids.Group_Read_All,\n            azuread_service_principal.Msgraph.App_role_ids.User_Read_All,\n        },\n        ScopeIds = new[]\n        {\n            azuread_service_principal.Msgraph.Oauth2_permission_scope_ids.User_ReadWrite,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tClientId: pulumi.StringRef(wellKnown.Result.MicrosoftGraph),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := azuread.NewApplicationRegistration(ctx, \"example\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationApiAccess(ctx, \"exampleMsgraph\", \u0026azuread.ApplicationApiAccessArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tApiClientId:   *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\tazuread_service_principal.Msgraph.App_role_ids.Group.Read.All,\n\t\t\t\tazuread_service_principal.Msgraph.App_role_ids.User.Read.All,\n\t\t\t},\n\t\t\tScopeIds: pulumi.StringArray{\n\t\t\t\tazuread_service_principal.Msgraph.Oauth2_permission_scope_ids.User.ReadWrite,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalArgs;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationApiAccess;\nimport com.pulumi.azuread.ApplicationApiAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        final var msgraph = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()\n            .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .build());\n\n        var example = new ApplicationRegistration(\"example\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleMsgraph = new ApplicationApiAccess(\"exampleMsgraph\", ApplicationApiAccessArgs.builder()        \n            .applicationId(example.id())\n            .apiClientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .roleIds(            \n                azuread_service_principal.msgraph().app_role_ids().Group.Read.All(),\n                azuread_service_principal.msgraph().app_role_ids().User.Read.All())\n            .scopeIds(azuread_service_principal.msgraph().oauth2_permission_scope_ids().User.ReadWrite())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleMsgraph:\n    type: azuread:ApplicationApiAccess\n    properties:\n      applicationId: ${example.id}\n      apiClientId: ${wellKnown.result.MicrosoftGraph}\n      roleIds:\n        - ${azuread_service_principal.msgraph.app_role_ids\"Group.Read.All\"[%!s(MISSING)]}\n        - ${azuread_service_principal.msgraph.app_role_ids\"User.Read.All\"[%!s(MISSING)]}\n      scopeIds:\n        - ${azuread_service_principal.msgraph.oauth2_permission_scope_ids\"User.ReadWrite\"[%!s(MISSING)]}\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n  msgraph:\n    fn::invoke:\n      Function: azuread:getServicePrincipal\n      Arguments:\n        clientId: ${wellKnown.result.MicrosoftGraph}\n```\n\n\u003e **Tip** For managing permissions for an additional API, create another instance of this resource\n\n*Usage with azuread.Application resource*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleApplicationApiAccess = new azuread.ApplicationApiAccess(\"exampleApplicationApiAccess\", {applicationId: exampleApplication.id});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_application_api_access = azuread.ApplicationApiAccess(\"exampleApplicationApiAccess\", application_id=example_application.id)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationApiAccess = new AzureAD.ApplicationApiAccess(\"exampleApplicationApiAccess\", new()\n    {\n        ApplicationId = exampleApplication.Id,\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationApiAccess(ctx, \"exampleApplicationApiAccess\", \u0026azuread.ApplicationApiAccessArgs{\n\t\t\tApplicationId: exampleApplication.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ApplicationApiAccess;\nimport com.pulumi.azuread.ApplicationApiAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationApiAccess = new ApplicationApiAccess(\"exampleApplicationApiAccess\", ApplicationApiAccessArgs.builder()        \n            .applicationId(exampleApplication.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleApplicationApiAccess:\n    type: azuread:ApplicationApiAccess\n    properties:\n      applicationId: ${exampleApplication.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication API Access can be imported using the object ID of the application and the client ID of the API, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationApiAccess:ApplicationApiAccess example /applications/00000000-0000-0000-0000-000000000000/apiAccess/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "apiClientId": {
                    "type": "string",
                    "description": "The client ID of the API to which access is being granted. Changing this forces a new resource to be created.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of role IDs to be granted to the application, as published by the API.\n"
                },
                "scopeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of scope IDs to be granted to the application, as published by the API.\n\n\u003e At least one of `role_ids` or `scope_ids` must be specified.\n"
                }
            },
            "required": [
                "apiClientId",
                "applicationId"
            ],
            "inputProperties": {
                "apiClientId": {
                    "type": "string",
                    "description": "The client ID of the API to which access is being granted. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of role IDs to be granted to the application, as published by the API.\n"
                },
                "scopeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of scope IDs to be granted to the application, as published by the API.\n\n\u003e At least one of `role_ids` or `scope_ids` must be specified.\n"
                }
            },
            "requiredInputs": [
                "apiClientId",
                "applicationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationApiAccess resources.\n",
                "properties": {
                    "apiClientId": {
                        "type": "string",
                        "description": "The client ID of the API to which access is being granted. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of role IDs to be granted to the application, as published by the API.\n"
                    },
                    "scopeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of scope IDs to be granted to the application, as published by the API.\n\n\u003e At least one of `role_ids` or `scope_ids` must be specified.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationAppRole:ApplicationAppRole": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\nimport * as random from \"@pulumi/random\";\n\nconst example = new azuread.ApplicationRegistration(\"example\", {displayName: \"example\"});\nconst exampleAdministrator = new random.RandomUuid(\"exampleAdministrator\", {});\nconst exampleAdminister = new azuread.ApplicationAppRole(\"exampleAdminister\", {\n    applicationId: example.id,\n    roleId: exampleAdministrator.id,\n    allowedMemberTypes: [\"User\"],\n    description: \"My role description\",\n    displayName: \"Administer\",\n    value: \"admin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\nimport pulumi_random as random\n\nexample = azuread.ApplicationRegistration(\"example\", display_name=\"example\")\nexample_administrator = random.RandomUuid(\"exampleAdministrator\")\nexample_administer = azuread.ApplicationAppRole(\"exampleAdminister\",\n    application_id=example.id,\n    role_id=example_administrator.id,\n    allowed_member_types=[\"User\"],\n    description=\"My role description\",\n    display_name=\"Administer\",\n    value=\"admin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.ApplicationRegistration(\"example\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleAdministrator = new Random.RandomUuid(\"exampleAdministrator\");\n\n    var exampleAdminister = new AzureAD.ApplicationAppRole(\"exampleAdminister\", new()\n    {\n        ApplicationId = example.Id,\n        RoleId = exampleAdministrator.Id,\n        AllowedMemberTypes = new[]\n        {\n            \"User\",\n        },\n        Description = \"My role description\",\n        DisplayName = \"Administer\",\n        Value = \"admin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.NewApplicationRegistration(ctx, \"example\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAdministrator, err := random.NewRandomUuid(ctx, \"exampleAdministrator\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationAppRole(ctx, \"exampleAdminister\", \u0026azuread.ApplicationAppRoleArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tRoleId:        exampleAdministrator.ID(),\n\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"My role description\"),\n\t\t\tDisplayName: pulumi.String(\"Administer\"),\n\t\t\tValue:       pulumi.String(\"admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.random.RandomUuid;\nimport com.pulumi.azuread.ApplicationAppRole;\nimport com.pulumi.azuread.ApplicationAppRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApplicationRegistration(\"example\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleAdministrator = new RandomUuid(\"exampleAdministrator\");\n\n        var exampleAdminister = new ApplicationAppRole(\"exampleAdminister\", ApplicationAppRoleArgs.builder()        \n            .applicationId(example.id())\n            .roleId(exampleAdministrator.id())\n            .allowedMemberTypes(\"User\")\n            .description(\"My role description\")\n            .displayName(\"Administer\")\n            .value(\"admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleAdministrator:\n    type: random:RandomUuid\n  exampleAdminister:\n    type: azuread:ApplicationAppRole\n    properties:\n      applicationId: ${example.id}\n      roleId: ${exampleAdministrator.id}\n      allowedMemberTypes:\n        - User\n      description: My role description\n      displayName: Administer\n      value: admin\n```\n\n\u003e **Tip** For managing more app roles, create additional instances of this resource\n\n*Usage with azuread.Application resource*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Application(\"example\", {displayName: \"example\"});\nconst exampleAdminister = new azuread.ApplicationAppRole(\"exampleAdminister\", {applicationId: example.id});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Application(\"example\", display_name=\"example\")\nexample_administer = azuread.ApplicationAppRole(\"exampleAdminister\", application_id=example.id)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.Application(\"example\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleAdminister = new AzureAD.ApplicationAppRole(\"exampleAdminister\", new()\n    {\n        ApplicationId = example.Id,\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.NewApplication(ctx, \"example\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationAppRole(ctx, \"exampleAdminister\", \u0026azuread.ApplicationAppRoleArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ApplicationAppRole;\nimport com.pulumi.azuread.ApplicationAppRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleAdminister = new ApplicationAppRole(\"exampleAdminister\", ApplicationAppRoleArgs.builder()        \n            .applicationId(example.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleAdminister:\n    type: azuread:ApplicationAppRole\n    properties:\n      applicationId: ${example.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication App Roles can be imported using the object ID of the application and the ID of the app role, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationAppRole:ApplicationAppRole example /applications/00000000-0000-0000-0000-000000000000/appRoles/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of values to specify whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications by setting to `Application`, or to both.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The unique identifier of the app role\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                }
            },
            "required": [
                "allowedMemberTypes",
                "applicationId",
                "description",
                "displayName",
                "roleId"
            ],
            "inputProperties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of values to specify whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications by setting to `Application`, or to both.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The unique identifier of the app role\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                }
            },
            "requiredInputs": [
                "allowedMemberTypes",
                "applicationId",
                "description",
                "displayName",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationAppRole resources.\n",
                "properties": {
                    "allowedMemberTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of values to specify whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications by setting to `Application`, or to both.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The unique identifier of the app role\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationCertificate:ApplicationCertificate": {
            "description": "\n\n## Import\n\nCertificates can be imported using the object ID of the associated application and the key ID of the certificate credential, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationCertificate:ApplicationCertificate example 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the application's object ID, the string \"certificate\" and the certificate's key ID in the format `{ObjectId}/certificate/{CertificateKeyId}`. ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this certificate should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If omitted, the API will decide a suitable expiry date, which is typically around 2 years from the start date. Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be specified. The maximum allowed duration is determined by Azure AD and is typically around 2 years from the creation date.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this certificate. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                    "secret": true
                }
            },
            "required": [
                "applicationId",
                "applicationObjectId",
                "endDate",
                "keyId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this certificate should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n",
                    "willReplaceOnChanges": true
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If omitted, the API will decide a suitable expiry date, which is typically around 2 years from the start date. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be specified. The maximum allowed duration is determined by Azure AD and is typically around 2 years from the creation date.\n",
                    "willReplaceOnChanges": true
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this certificate. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationCertificate resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The object ID of the application for which this certificate should be created\n",
                        "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If omitted, the API will decide a suitable expiry date, which is typically around 2 years from the start date. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be specified. The maximum allowed duration is determined by Azure AD and is typically around 2 years from the creation date.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify this certificate. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationFallbackPublicClient:ApplicationFallbackPublicClient": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleApplicationFallbackPublicClient = new azuread.ApplicationFallbackPublicClient(\"exampleApplicationFallbackPublicClient\", {\n    applicationId: exampleApplicationRegistration.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_application_fallback_public_client = azuread.ApplicationFallbackPublicClient(\"exampleApplicationFallbackPublicClient\",\n    application_id=example_application_registration.id,\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationFallbackPublicClient = new AzureAD.ApplicationFallbackPublicClient(\"exampleApplicationFallbackPublicClient\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationFallbackPublicClient(ctx, \"exampleApplicationFallbackPublicClient\", \u0026azuread.ApplicationFallbackPublicClientArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationFallbackPublicClient;\nimport com.pulumi.azuread.ApplicationFallbackPublicClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationFallbackPublicClient = new ApplicationFallbackPublicClient(\"exampleApplicationFallbackPublicClient\", ApplicationFallbackPublicClientArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleApplicationFallbackPublicClient:\n    type: azuread:ApplicationFallbackPublicClient\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      enabled: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThe Application Fallback Public Client setting can be imported using the object ID of the application, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationFallbackPublicClient:ApplicationFallbackPublicClient example /applications/00000000-0000-0000-0000-000000000000/fallbackPublicClient\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the application as a fallback public client.\n\n\u003e Some configurations may require the Fallback Public Client setting to be `null`, for this case simply destroy this resource (or don't use it)\n"
                }
            },
            "required": [
                "applicationId"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the application as a fallback public client.\n\n\u003e Some configurations may require the Fallback Public Client setting to be `null`, for this case simply destroy this resource (or don't use it)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationFallbackPublicClient resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable the application as a fallback public client.\n\n\u003e Some configurations may require the Fallback Public Client setting to be `null`, for this case simply destroy this resource (or don't use it)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationFederatedIdentityCredential:ApplicationFederatedIdentityCredential": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleApplicationFederatedIdentityCredential = new azuread.ApplicationFederatedIdentityCredential(\"exampleApplicationFederatedIdentityCredential\", {\n    applicationId: exampleApplicationRegistration.id,\n    displayName: \"my-repo-deploy\",\n    description: \"Deployments for my-repo\",\n    audiences: [\"api://AzureADTokenExchange\"],\n    issuer: \"https://token.actions.githubusercontent.com\",\n    subject: \"repo:my-organization/my-repo:environment:prod\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_application_federated_identity_credential = azuread.ApplicationFederatedIdentityCredential(\"exampleApplicationFederatedIdentityCredential\",\n    application_id=example_application_registration.id,\n    display_name=\"my-repo-deploy\",\n    description=\"Deployments for my-repo\",\n    audiences=[\"api://AzureADTokenExchange\"],\n    issuer=\"https://token.actions.githubusercontent.com\",\n    subject=\"repo:my-organization/my-repo:environment:prod\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationFederatedIdentityCredential = new AzureAD.ApplicationFederatedIdentityCredential(\"exampleApplicationFederatedIdentityCredential\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        DisplayName = \"my-repo-deploy\",\n        Description = \"Deployments for my-repo\",\n        Audiences = new[]\n        {\n            \"api://AzureADTokenExchange\",\n        },\n        Issuer = \"https://token.actions.githubusercontent.com\",\n        Subject = \"repo:my-organization/my-repo:environment:prod\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationFederatedIdentityCredential(ctx, \"exampleApplicationFederatedIdentityCredential\", \u0026azuread.ApplicationFederatedIdentityCredentialArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tDisplayName:   pulumi.String(\"my-repo-deploy\"),\n\t\t\tDescription:   pulumi.String(\"Deployments for my-repo\"),\n\t\t\tAudiences: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"api://AzureADTokenExchange\"),\n\t\t\t},\n\t\t\tIssuer:  pulumi.String(\"https://token.actions.githubusercontent.com\"),\n\t\t\tSubject: pulumi.String(\"repo:my-organization/my-repo:environment:prod\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationFederatedIdentityCredential;\nimport com.pulumi.azuread.ApplicationFederatedIdentityCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationFederatedIdentityCredential = new ApplicationFederatedIdentityCredential(\"exampleApplicationFederatedIdentityCredential\", ApplicationFederatedIdentityCredentialArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .displayName(\"my-repo-deploy\")\n            .description(\"Deployments for my-repo\")\n            .audiences(\"api://AzureADTokenExchange\")\n            .issuer(\"https://token.actions.githubusercontent.com\")\n            .subject(\"repo:my-organization/my-repo:environment:prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleApplicationFederatedIdentityCredential:\n    type: azuread:ApplicationFederatedIdentityCredential\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      displayName: my-repo-deploy\n      description: Deployments for my-repo\n      audiences:\n        - api://AzureADTokenExchange\n      issuer: https://token.actions.githubusercontent.com\n      subject: repo:my-organization/my-repo:environment:prod\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFederated Identity Credentials can be imported using the object ID of the associated application and the ID of the federated identity credential, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationFederatedIdentityCredential:ApplicationFederatedIdentityCredential example 00000000-0000-0000-0000-000000000000/federatedIdentityCredential/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the application's object ID, the string \"federatedIdentityCredential\" and the credential ID in the format `{ObjectId}/federatedIdentityCredential/{CredentialId}`. ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this federated identity credential should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.\n"
                },
                "credentialId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this federated identity credential.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the federated identity credential.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A unique display name for the federated identity credential. Changing this forces a new resource to be created.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.\n"
                }
            },
            "required": [
                "applicationId",
                "applicationObjectId",
                "audiences",
                "credentialId",
                "displayName",
                "issuer",
                "subject"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this federated identity credential should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the federated identity credential.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "A unique display name for the federated identity credential. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "issuer": {
                    "type": "string",
                    "description": "The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.\n"
                }
            },
            "requiredInputs": [
                "audiences",
                "displayName",
                "issuer",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationFederatedIdentityCredential resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application for which this federated identity credential should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The object ID of the application for which this federated identity credential should be created\n",
                        "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "audiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of audiences that can appear in the external token. This specifies what should be accepted in the `aud` claim of incoming tokens.\n"
                    },
                    "credentialId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify this federated identity credential.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the federated identity credential.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A unique display name for the federated identity credential. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The URL of the external identity provider, which must match the issuer claim of the external token being exchanged. The combination of the values of issuer and subject must be unique on the app.\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The identifier of the external software workload within the external identity provider. The combination of issuer and subject must be unique on the app.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationFromTemplate:ApplicationFromTemplate": {
            "description": "Creates an application registration and associated service principal from a gallery template.\n\n\u003e The azuread.Application resource can also be used to instantiate a gallery application, however unlike the `azuread.Application` resource, this resource does not attempt to manage any properties of the resulting application.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.OwnedBy` or `Application.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource may require one of the following directory roles: `Application Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationTemplate = azuread.getApplicationTemplate({\n    displayName: \"Marketo\",\n});\nconst exampleApplicationFromTemplate = new azuread.ApplicationFromTemplate(\"exampleApplicationFromTemplate\", {\n    displayName: \"Example Application\",\n    templateId: exampleApplicationTemplate.then(exampleApplicationTemplate =\u003e exampleApplicationTemplate.templateId),\n});\nconst exampleApplication = azuread.getApplicationOutput({\n    objectId: exampleApplicationFromTemplate.applicationObjectId,\n});\nconst exampleServicePrincipal = azuread.getServicePrincipalOutput({\n    objectId: exampleApplicationFromTemplate.servicePrincipalObjectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_template = azuread.get_application_template(display_name=\"Marketo\")\nexample_application_from_template = azuread.ApplicationFromTemplate(\"exampleApplicationFromTemplate\",\n    display_name=\"Example Application\",\n    template_id=example_application_template.template_id)\nexample_application = azuread.get_application_output(object_id=example_application_from_template.application_object_id)\nexample_service_principal = azuread.get_service_principal_output(object_id=example_application_from_template.service_principal_object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationTemplate = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Marketo\",\n    });\n\n    var exampleApplicationFromTemplate = new AzureAD.ApplicationFromTemplate(\"exampleApplicationFromTemplate\", new()\n    {\n        DisplayName = \"Example Application\",\n        TemplateId = exampleApplicationTemplate.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n    });\n\n    var exampleApplication = AzureAD.GetApplication.Invoke(new()\n    {\n        ObjectId = exampleApplicationFromTemplate.ApplicationObjectId,\n    });\n\n    var exampleServicePrincipal = AzureAD.GetServicePrincipal.Invoke(new()\n    {\n        ObjectId = exampleApplicationFromTemplate.ServicePrincipalObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationTemplate, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Marketo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplicationFromTemplate, err := azuread.NewApplicationFromTemplate(ctx, \"exampleApplicationFromTemplate\", \u0026azuread.ApplicationFromTemplateArgs{\n\t\t\tDisplayName: pulumi.String(\"Example Application\"),\n\t\t\tTemplateId:  *pulumi.String(exampleApplicationTemplate.TemplateId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = azuread.LookupApplicationOutput(ctx, azuread.GetApplicationOutputArgs{\n\t\t\tObjectId: exampleApplicationFromTemplate.ApplicationObjectId,\n\t\t}, nil)\n\t\t_ = azuread.LookupServicePrincipalOutput(ctx, azuread.GetServicePrincipalOutputArgs{\n\t\t\tObjectId: exampleApplicationFromTemplate.ServicePrincipalObjectId,\n\t\t}, nil)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport com.pulumi.azuread.ApplicationFromTemplate;\nimport com.pulumi.azuread.ApplicationFromTemplateArgs;\nimport com.pulumi.azuread.inputs.GetApplicationArgs;\nimport com.pulumi.azuread.inputs.GetServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApplicationTemplate = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Marketo\")\n            .build());\n\n        var exampleApplicationFromTemplate = new ApplicationFromTemplate(\"exampleApplicationFromTemplate\", ApplicationFromTemplateArgs.builder()        \n            .displayName(\"Example Application\")\n            .templateId(exampleApplicationTemplate.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()))\n            .build());\n\n        final var exampleApplication = AzureadFunctions.getApplication(GetApplicationArgs.builder()\n            .objectId(exampleApplicationFromTemplate.applicationObjectId())\n            .build());\n\n        final var exampleServicePrincipal = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()\n            .objectId(exampleApplicationFromTemplate.servicePrincipalObjectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationFromTemplate:\n    type: azuread:ApplicationFromTemplate\n    properties:\n      displayName: Example Application\n      templateId: ${exampleApplicationTemplate.templateId}\nvariables:\n  exampleApplicationTemplate:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Marketo\n  exampleApplication:\n    fn::invoke:\n      Function: azuread:getApplication\n      Arguments:\n        objectId: ${exampleApplicationFromTemplate.applicationObjectId}\n  exampleServicePrincipal:\n    fn::invoke:\n      Function: azuread:getServicePrincipal\n      Arguments:\n        objectId: ${exampleApplicationFromTemplate.servicePrincipalObjectId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTemplated Applications can be imported using the template ID, the object ID of the application, and the object ID of the service principal, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationFromTemplate:ApplicationFromTemplate example /applicationTemplates/00000000-0000-0000-0000-000000000000/instantiate/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID for the application.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID for the application.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The resource ID for the service principal.\n"
                },
                "servicePrincipalObjectId": {
                    "type": "string",
                    "description": "The object ID for the service principal.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "applicationId",
                "applicationObjectId",
                "displayName",
                "servicePrincipalId",
                "servicePrincipalObjectId",
                "templateId"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "displayName",
                "templateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationFromTemplate resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID for the application.\n"
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The object ID for the application.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The resource ID for the service principal.\n"
                    },
                    "servicePrincipalObjectId": {
                        "type": "string",
                        "description": "The object ID for the service principal.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationIdentifierUri:ApplicationIdentifierUri": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleApplicationIdentifierUri = new azuread.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", {\n    applicationId: exampleApplicationRegistration.id,\n    identifierUri: \"https://app.hashitown.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_application_identifier_uri = azuread.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\",\n    application_id=example_application_registration.id,\n    identifier_uri=\"https://app.hashitown.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationIdentifierUri = new AzureAD.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        IdentifierUri = \"https://app.hashitown.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationIdentifierUri(ctx, \"exampleApplicationIdentifierUri\", \u0026azuread.ApplicationIdentifierUriArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tIdentifierUri: pulumi.String(\"https://app.hashitown.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationIdentifierUri;\nimport com.pulumi.azuread.ApplicationIdentifierUriArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationIdentifierUri = new ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", ApplicationIdentifierUriArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .identifierUri(\"https://app.hashitown.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleApplicationIdentifierUri:\n    type: azuread:ApplicationIdentifierUri\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      identifierUri: https://app.hashitown.com\n```\n\n\u003e **Tip** For managing multiple identifier URIs for the same application, create another instance of this resource\n\n*Usage with azuread.Application resource*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleApplicationIdentifierUri = new azuread.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", {applicationId: exampleApplication.id});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_application_identifier_uri = azuread.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", application_id=example_application.id)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationIdentifierUri = new AzureAD.ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", new()\n    {\n        ApplicationId = exampleApplication.Id,\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationIdentifierUri(ctx, \"exampleApplicationIdentifierUri\", \u0026azuread.ApplicationIdentifierUriArgs{\n\t\t\tApplicationId: exampleApplication.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ApplicationIdentifierUri;\nimport com.pulumi.azuread.ApplicationIdentifierUriArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationIdentifierUri = new ApplicationIdentifierUri(\"exampleApplicationIdentifierUri\", ApplicationIdentifierUriArgs.builder()        \n            .applicationId(exampleApplication.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleApplicationIdentifierUri:\n    type: azuread:ApplicationIdentifierUri\n    properties:\n      applicationId: ${exampleApplication.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication Identifier URIs can be imported using the object ID of the application and the base64-encoded identifier URI, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationIdentifierUri:ApplicationIdentifierUri example /applications/00000000-0000-0000-0000-000000000000/identifierUris/aHR0cHM6Ly9leGFtcGxlLm5ldC8=\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "identifierUri": {
                    "type": "string",
                    "description": "The user-defined URI that uniquely identifies an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "applicationId",
                "identifierUri"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "identifierUri": {
                    "type": "string",
                    "description": "The user-defined URI that uniquely identifies an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId",
                "identifierUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationIdentifierUri resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "identifierUri": {
                        "type": "string",
                        "description": "The user-defined URI that uniquely identifies an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationKnownClients:ApplicationKnownClients": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst client = new azuread.ApplicationRegistration(\"client\", {displayName: \"example client\"});\nconst exampleApplicationKnownClients = new azuread.ApplicationKnownClients(\"exampleApplicationKnownClients\", {\n    applicationId: exampleApplicationRegistration.id,\n    knownClientIds: [client.clientId],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nclient = azuread.ApplicationRegistration(\"client\", display_name=\"example client\")\nexample_application_known_clients = azuread.ApplicationKnownClients(\"exampleApplicationKnownClients\",\n    application_id=example_application_registration.id,\n    known_client_ids=[client.client_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var client = new AzureAD.ApplicationRegistration(\"client\", new()\n    {\n        DisplayName = \"example client\",\n    });\n\n    var exampleApplicationKnownClients = new AzureAD.ApplicationKnownClients(\"exampleApplicationKnownClients\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        KnownClientIds = new[]\n        {\n            client.ClientId,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tclient, err := azuread.NewApplicationRegistration(ctx, \"client\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example client\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationKnownClients(ctx, \"exampleApplicationKnownClients\", \u0026azuread.ApplicationKnownClientsArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tKnownClientIds: pulumi.StringArray{\n\t\t\t\tclient.ClientId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationKnownClients;\nimport com.pulumi.azuread.ApplicationKnownClientsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var client = new ApplicationRegistration(\"client\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example client\")\n            .build());\n\n        var exampleApplicationKnownClients = new ApplicationKnownClients(\"exampleApplicationKnownClients\", ApplicationKnownClientsArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .knownClientIds(client.clientId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  client:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example client\n  exampleApplicationKnownClients:\n    type: azuread:ApplicationKnownClients\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      knownClientIds:\n        - ${client.clientId}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication Known Clients can be imported using the object ID of the application in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationKnownClients:ApplicationKnownClients example /applications/00000000-0000-0000-0000-000000000000/knownClients\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "knownClientIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of client IDs for the known applications.\n"
                }
            },
            "required": [
                "applicationId",
                "knownClientIds"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "knownClientIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of client IDs for the known applications.\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "knownClientIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationKnownClients resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "knownClientIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of client IDs for the known applications.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationOptionalClaims:ApplicationOptionalClaims": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleApplicationOptionalClaims = new azuread.ApplicationOptionalClaims(\"exampleApplicationOptionalClaims\", {\n    applicationId: exampleApplicationRegistration.id,\n    accessTokens: [\n        {\n            name: \"myclaim\",\n        },\n        {\n            name: \"otherclaim\",\n        },\n    ],\n    idTokens: [{\n        name: \"userclaim\",\n        source: \"user\",\n        essential: true,\n        additionalProperties: [\"emit_as_roles\"],\n    }],\n    saml2Tokens: [{\n        name: \"samlexample\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_application_optional_claims = azuread.ApplicationOptionalClaims(\"exampleApplicationOptionalClaims\",\n    application_id=example_application_registration.id,\n    access_tokens=[\n        azuread.ApplicationOptionalClaimsAccessTokenArgs(\n            name=\"myclaim\",\n        ),\n        azuread.ApplicationOptionalClaimsAccessTokenArgs(\n            name=\"otherclaim\",\n        ),\n    ],\n    id_tokens=[azuread.ApplicationOptionalClaimsIdTokenArgs(\n        name=\"userclaim\",\n        source=\"user\",\n        essential=True,\n        additional_properties=[\"emit_as_roles\"],\n    )],\n    saml2_tokens=[azuread.ApplicationOptionalClaimsSaml2TokenArgs(\n        name=\"samlexample\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationOptionalClaims = new AzureAD.ApplicationOptionalClaims(\"exampleApplicationOptionalClaims\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        AccessTokens = new[]\n        {\n            new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n            {\n                Name = \"myclaim\",\n            },\n            new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n            {\n                Name = \"otherclaim\",\n            },\n        },\n        IdTokens = new[]\n        {\n            new AzureAD.Inputs.ApplicationOptionalClaimsIdTokenArgs\n            {\n                Name = \"userclaim\",\n                Source = \"user\",\n                Essential = true,\n                AdditionalProperties = new[]\n                {\n                    \"emit_as_roles\",\n                },\n            },\n        },\n        Saml2Tokens = new[]\n        {\n            new AzureAD.Inputs.ApplicationOptionalClaimsSaml2TokenArgs\n            {\n                Name = \"samlexample\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationOptionalClaims(ctx, \"exampleApplicationOptionalClaims\", \u0026azuread.ApplicationOptionalClaimsArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tAccessTokens: azuread.ApplicationOptionalClaimsAccessTokenArray{\n\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\tName: pulumi.String(\"myclaim\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\tName: pulumi.String(\"otherclaim\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tIdTokens: azuread.ApplicationOptionalClaimsIdTokenArray{\n\t\t\t\t\u0026azuread.ApplicationOptionalClaimsIdTokenArgs{\n\t\t\t\t\tName:      pulumi.String(\"userclaim\"),\n\t\t\t\t\tSource:    pulumi.String(\"user\"),\n\t\t\t\t\tEssential: pulumi.Bool(true),\n\t\t\t\t\tAdditionalProperties: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"emit_as_roles\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tSaml2Tokens: azuread.ApplicationOptionalClaimsSaml2TokenArray{\n\t\t\t\t\u0026azuread.ApplicationOptionalClaimsSaml2TokenArgs{\n\t\t\t\t\tName: pulumi.String(\"samlexample\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationOptionalClaims;\nimport com.pulumi.azuread.ApplicationOptionalClaimsArgs;\nimport com.pulumi.azuread.inputs.ApplicationOptionalClaimsAccessTokenArgs;\nimport com.pulumi.azuread.inputs.ApplicationOptionalClaimsIdTokenArgs;\nimport com.pulumi.azuread.inputs.ApplicationOptionalClaimsSaml2TokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationOptionalClaims = new ApplicationOptionalClaims(\"exampleApplicationOptionalClaims\", ApplicationOptionalClaimsArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .accessTokens(            \n                ApplicationOptionalClaimsAccessTokenArgs.builder()\n                    .name(\"myclaim\")\n                    .build(),\n                ApplicationOptionalClaimsAccessTokenArgs.builder()\n                    .name(\"otherclaim\")\n                    .build())\n            .idTokens(ApplicationOptionalClaimsIdTokenArgs.builder()\n                .name(\"userclaim\")\n                .source(\"user\")\n                .essential(true)\n                .additionalProperties(\"emit_as_roles\")\n                .build())\n            .saml2Tokens(ApplicationOptionalClaimsSaml2TokenArgs.builder()\n                .name(\"samlexample\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleApplicationOptionalClaims:\n    type: azuread:ApplicationOptionalClaims\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      accessTokens:\n        - name: myclaim\n        - name: otherclaim\n      idTokens:\n        - name: userclaim\n          source: user\n          essential: true\n          additionalProperties:\n            - emit_as_roles\n      saml2Tokens:\n        - name: samlexample\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication Optional Claims can be imported using the object ID of the application, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationOptionalClaims:ApplicationOptionalClaims example /applications/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken"
                    },
                    "description": "One or more `access_token` blocks as documented below.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken"
                    },
                    "description": "One or more `id_token` blocks as documented below.\n"
                },
                "saml2Tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsSaml2Token:ApplicationOptionalClaimsSaml2Token"
                    },
                    "description": "One or more `saml2_token` blocks as documented below.\n\n\u003e At least one of `access_token`, `id_token` or `saml2_token` must be specified\n"
                }
            },
            "required": [
                "applicationId"
            ],
            "inputProperties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken"
                    },
                    "description": "One or more `access_token` blocks as documented below.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken"
                    },
                    "description": "One or more `id_token` blocks as documented below.\n"
                },
                "saml2Tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsSaml2Token:ApplicationOptionalClaimsSaml2Token"
                    },
                    "description": "One or more `saml2_token` blocks as documented below.\n\n\u003e At least one of `access_token`, `id_token` or `saml2_token` must be specified\n"
                }
            },
            "requiredInputs": [
                "applicationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationOptionalClaims resources.\n",
                "properties": {
                    "accessTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken"
                        },
                        "description": "One or more `access_token` blocks as documented below.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "idTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken"
                        },
                        "description": "One or more `id_token` blocks as documented below.\n"
                    },
                    "saml2Tokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationOptionalClaimsSaml2Token:ApplicationOptionalClaimsSaml2Token"
                        },
                        "description": "One or more `saml2_token` blocks as documented below.\n\n\u003e At least one of `access_token`, `id_token` or `saml2_token` must be specified\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationOwner:ApplicationOwner": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.ApplicationRegistration(\"example\", {displayName: \"example\"});\nconst jane = new azuread.User(\"jane\", {\n    userPrincipalName: \"jane.fischer@hashitown.com\",\n    displayName: \"Jane Fischer\",\n    password: \"Ch@ngeMe\",\n});\nconst exampleJane = new azuread.ApplicationOwner(\"exampleJane\", {\n    applicationId: example.id,\n    ownerObjectId: jane.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.ApplicationRegistration(\"example\", display_name=\"example\")\njane = azuread.User(\"jane\",\n    user_principal_name=\"jane.fischer@hashitown.com\",\n    display_name=\"Jane Fischer\",\n    password=\"Ch@ngeMe\")\nexample_jane = azuread.ApplicationOwner(\"exampleJane\",\n    application_id=example.id,\n    owner_object_id=jane.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.ApplicationRegistration(\"example\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var jane = new AzureAD.User(\"jane\", new()\n    {\n        UserPrincipalName = \"jane.fischer@hashitown.com\",\n        DisplayName = \"Jane Fischer\",\n        Password = \"Ch@ngeMe\",\n    });\n\n    var exampleJane = new AzureAD.ApplicationOwner(\"exampleJane\", new()\n    {\n        ApplicationId = example.Id,\n        OwnerObjectId = jane.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.NewApplicationRegistration(ctx, \"example\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjane, err := azuread.NewUser(ctx, \"jane\", \u0026azuread.UserArgs{\n\t\t\tUserPrincipalName: pulumi.String(\"jane.fischer@hashitown.com\"),\n\t\t\tDisplayName:       pulumi.String(\"Jane Fischer\"),\n\t\t\tPassword:          pulumi.String(\"Ch@ngeMe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationOwner(ctx, \"exampleJane\", \u0026azuread.ApplicationOwnerArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tOwnerObjectId: jane.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport com.pulumi.azuread.ApplicationOwner;\nimport com.pulumi.azuread.ApplicationOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApplicationRegistration(\"example\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var jane = new User(\"jane\", UserArgs.builder()        \n            .userPrincipalName(\"jane.fischer@hashitown.com\")\n            .displayName(\"Jane Fischer\")\n            .password(\"Ch@ngeMe\")\n            .build());\n\n        var exampleJane = new ApplicationOwner(\"exampleJane\", ApplicationOwnerArgs.builder()        \n            .applicationId(example.id())\n            .ownerObjectId(jane.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  jane:\n    type: azuread:User\n    properties:\n      userPrincipalName: jane.fischer@hashitown.com\n      displayName: Jane Fischer\n      password: Ch@ngeMe\n  exampleJane:\n    type: azuread:ApplicationOwner\n    properties:\n      applicationId: ${example.id}\n      ownerObjectId: ${jane.objectId}\n```\n\n\u003e **Tip** For managing more application owners, create additional instances of this resource\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication Owners can be imported using the object ID of the application and the object ID of the owner, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationOwner:ApplicationOwner example /applications/00000000-0000-0000-0000-000000000000/owners/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "ownerObjectId": {
                    "type": "string",
                    "description": "The object ID of the owner to assign to the application, typically a user or service principal. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "applicationId",
                "ownerObjectId"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "ownerObjectId": {
                    "type": "string",
                    "description": "The object ID of the owner to assign to the application, typically a user or service principal. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId",
                "ownerObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationOwner resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerObjectId": {
                        "type": "string",
                        "description": "The object ID of the owner to assign to the application, typically a user or service principal. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationPassword:ApplicationPassword": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleApplicationPassword = new azuread.ApplicationPassword(\"exampleApplicationPassword\", {applicationId: exampleApplicationRegistration.id});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_application_password = azuread.ApplicationPassword(\"exampleApplicationPassword\", application_id=example_application_registration.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationPassword = new AzureAD.ApplicationPassword(\"exampleApplicationPassword\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPassword(ctx, \"exampleApplicationPassword\", \u0026azuread.ApplicationPasswordArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationPassword;\nimport com.pulumi.azuread.ApplicationPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationPassword = new ApplicationPassword(\"exampleApplicationPassword\", ApplicationPasswordArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleApplicationPassword:\n    type: azuread:ApplicationPassword\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n```\n\n*Time-based rotation*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\nimport * as time from \"@pulumiverse/time\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleRotating = new time.Rotating(\"exampleRotating\", {rotationDays: 7});\nconst exampleApplicationPassword = new azuread.ApplicationPassword(\"exampleApplicationPassword\", {\n    applicationId: exampleApplicationRegistration.id,\n    rotateWhenChanged: {\n        rotation: exampleRotating.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\nimport pulumiverse_time as time\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_rotating = time.Rotating(\"exampleRotating\", rotation_days=7)\nexample_application_password = azuread.ApplicationPassword(\"exampleApplicationPassword\",\n    application_id=example_application_registration.id,\n    rotate_when_changed={\n        \"rotation\": example_rotating.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\nusing Time = Pulumiverse.Time;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleRotating = new Time.Rotating(\"exampleRotating\", new()\n    {\n        RotationDays = 7,\n    });\n\n    var exampleApplicationPassword = new AzureAD.ApplicationPassword(\"exampleApplicationPassword\", new()\n    {\n        ApplicationId = exampleApplicationRegistration.Id,\n        RotateWhenChanged = \n        {\n            { \"rotation\", exampleRotating.Id },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi-time/sdk/go/time\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationRegistration, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRotating, err := time.NewRotating(ctx, \"exampleRotating\", \u0026time.RotatingArgs{\n\t\t\tRotationDays: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPassword(ctx, \"exampleApplicationPassword\", \u0026azuread.ApplicationPasswordArgs{\n\t\t\tApplicationId: exampleApplicationRegistration.ID(),\n\t\t\tRotateWhenChanged: pulumi.StringMap{\n\t\t\t\t\"rotation\": exampleRotating.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.time.Rotating;\nimport com.pulumi.time.RotatingArgs;\nimport com.pulumi.azuread.ApplicationPassword;\nimport com.pulumi.azuread.ApplicationPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleRotating = new Rotating(\"exampleRotating\", RotatingArgs.builder()        \n            .rotationDays(7)\n            .build());\n\n        var exampleApplicationPassword = new ApplicationPassword(\"exampleApplicationPassword\", ApplicationPasswordArgs.builder()        \n            .applicationId(exampleApplicationRegistration.id())\n            .rotateWhenChanged(Map.of(\"rotation\", exampleRotating.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleRotating:\n    type: time:Rotating\n    properties:\n      rotationDays: 7\n  exampleApplicationPassword:\n    type: azuread:ApplicationPassword\n    properties:\n      applicationId: ${exampleApplicationRegistration.id}\n      rotateWhenChanged:\n        rotation: ${exampleRotating.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this password should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "displayName": {
                    "type": "string",
                    "description": "A display name for the password. Changing this field forces a new resource to be created.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this password credential.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The password for this application, which is generated by Azure Active Directory.\n",
                    "secret": true
                }
            },
            "required": [
                "applicationId",
                "applicationObjectId",
                "displayName",
                "endDate",
                "keyId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which this password should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application for which this password should be created\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "A display name for the password. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationPassword resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application for which this password should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The object ID of the application for which this password should be created\n",
                        "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "A display name for the password. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify this password credential.\n"
                    },
                    "rotateWhenChanged": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The password for this application, which is generated by Azure Active Directory.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationPermissionScope:ApplicationPermissionScope": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\nimport * as random from \"@pulumi/random\";\n\nconst exampleApplicationRegistration = new azuread.ApplicationRegistration(\"exampleApplicationRegistration\", {displayName: \"example\"});\nconst exampleAdminister = new random.RandomUuid(\"exampleAdminister\", {});\nconst exampleApplicationPermissionScope = new azuread.ApplicationPermissionScope(\"exampleApplicationPermissionScope\", {\n    applicationId: azuread_application_registration.test.id,\n    scopeId: exampleAdminister.id,\n    value: \"administer\",\n    adminConsentDescription: \"Administer the application\",\n    adminConsentDisplayName: \"Administer\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\nimport pulumi_random as random\n\nexample_application_registration = azuread.ApplicationRegistration(\"exampleApplicationRegistration\", display_name=\"example\")\nexample_administer = random.RandomUuid(\"exampleAdminister\")\nexample_application_permission_scope = azuread.ApplicationPermissionScope(\"exampleApplicationPermissionScope\",\n    application_id=azuread_application_registration[\"test\"][\"id\"],\n    scope_id=example_administer.id,\n    value=\"administer\",\n    admin_consent_description=\"Administer the application\",\n    admin_consent_display_name=\"Administer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\nusing Random = Pulumi.Random;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationRegistration = new AzureAD.ApplicationRegistration(\"exampleApplicationRegistration\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleAdminister = new Random.RandomUuid(\"exampleAdminister\");\n\n    var exampleApplicationPermissionScope = new AzureAD.ApplicationPermissionScope(\"exampleApplicationPermissionScope\", new()\n    {\n        ApplicationId = azuread_application_registration.Test.Id,\n        ScopeId = exampleAdminister.Id,\n        Value = \"administer\",\n        AdminConsentDescription = \"Administer the application\",\n        AdminConsentDisplayName = \"Administer\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi-random/sdk/v4/go/random\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewApplicationRegistration(ctx, \"exampleApplicationRegistration\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAdminister, err := random.NewRandomUuid(ctx, \"exampleAdminister\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPermissionScope(ctx, \"exampleApplicationPermissionScope\", \u0026azuread.ApplicationPermissionScopeArgs{\n\t\t\tApplicationId:           pulumi.Any(azuread_application_registration.Test.Id),\n\t\t\tScopeId:                 exampleAdminister.ID(),\n\t\t\tValue:                   pulumi.String(\"administer\"),\n\t\t\tAdminConsentDescription: pulumi.String(\"Administer the application\"),\n\t\t\tAdminConsentDisplayName: pulumi.String(\"Administer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.random.RandomUuid;\nimport com.pulumi.azuread.ApplicationPermissionScope;\nimport com.pulumi.azuread.ApplicationPermissionScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationRegistration = new ApplicationRegistration(\"exampleApplicationRegistration\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleAdminister = new RandomUuid(\"exampleAdminister\");\n\n        var exampleApplicationPermissionScope = new ApplicationPermissionScope(\"exampleApplicationPermissionScope\", ApplicationPermissionScopeArgs.builder()        \n            .applicationId(azuread_application_registration.test().id())\n            .scopeId(exampleAdminister.id())\n            .value(\"administer\")\n            .adminConsentDescription(\"Administer the application\")\n            .adminConsentDisplayName(\"Administer\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplicationRegistration:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  exampleAdminister:\n    type: random:RandomUuid\n  exampleApplicationPermissionScope:\n    type: azuread:ApplicationPermissionScope\n    properties:\n      applicationId: ${azuread_application_registration.test.id}\n      scopeId: ${exampleAdminister.id}\n      value: administer\n      adminConsentDescription: Administer the application\n      adminConsentDisplayName: Administer\n```\n\n\u003e **Tip** For managing more permissions scopes, create additional instances of this resource\n\n*Usage with azuread.Application resource*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleApplicationPermissionScope = new azuread.ApplicationPermissionScope(\"exampleApplicationPermissionScope\", {applicationId: exampleApplication.id});\n// ...\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_application_permission_scope = azuread.ApplicationPermissionScope(\"exampleApplicationPermissionScope\", application_id=example_application.id)\n# ...\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleApplicationPermissionScope = new AzureAD.ApplicationPermissionScope(\"exampleApplicationPermissionScope\", new()\n    {\n        ApplicationId = exampleApplication.Id,\n    });\n\n    // ...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPermissionScope(ctx, \"exampleApplicationPermissionScope\", \u0026azuread.ApplicationPermissionScopeArgs{\n\t\t\tApplicationId: exampleApplication.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ApplicationPermissionScope;\nimport com.pulumi.azuread.ApplicationPermissionScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleApplicationPermissionScope = new ApplicationPermissionScope(\"exampleApplicationPermissionScope\", ApplicationPermissionScopeArgs.builder()        \n            .applicationId(exampleApplication.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleApplicationPermissionScope:\n    type: azuread:ApplicationPermissionScope\n    properties:\n      applicationId: ${exampleApplication.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication App Roles can be imported using the object ID of the application and the ID of the permission scope, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationPermissionScope:ApplicationPermissionScope example /applications/00000000-0000-0000-0000-000000000000/permissionScopes/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth access tokens.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                }
            },
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "applicationId",
                "scopeId",
                "value"
            ],
            "inputProperties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "scopeId": {
                    "type": "string",
                    "description": "The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the delegated permission that appears in the end user consent experience\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value that is used for the `scp` claim in OAuth access tokens.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                }
            },
            "requiredInputs": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "applicationId",
                "scopeId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationPermissionScope resources.\n",
                "properties": {
                    "adminConsentDescription": {
                        "type": "string",
                        "description": "Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.\n"
                    },
                    "adminConsentDisplayName": {
                        "type": "string",
                        "description": "Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.\n"
                    },
                    "userConsentDescription": {
                        "type": "string",
                        "description": "Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.\n"
                    },
                    "userConsentDisplayName": {
                        "type": "string",
                        "description": "Display name for the delegated permission that appears in the end user consent experience\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value that is used for the `scp` claim in OAuth access tokens.\n\n\u003e **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationPreAuthorized:ApplicationPreAuthorized": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst authorized = new azuread.ApplicationRegistration(\"authorized\", {displayName: \"example-authorized-app\"});\nconst authorizer = new azuread.Application(\"authorizer\", {\n    displayName: \"example-authorizing-app\",\n    api: {\n        oauth2PermissionScopes: [\n            {\n                adminConsentDescription: \"Administer the application\",\n                adminConsentDisplayName: \"Administer\",\n                enabled: true,\n                id: \"00000000-0000-0000-0000-000000000000\",\n                type: \"Admin\",\n                value: \"administer\",\n            },\n            {\n                adminConsentDescription: \"Access the application\",\n                adminConsentDisplayName: \"Access\",\n                enabled: true,\n                id: \"11111111-1111-1111-1111-111111111111\",\n                type: \"User\",\n                userConsentDescription: \"Access the application\",\n                userConsentDisplayName: \"Access\",\n                value: \"user_impersonation\",\n            },\n        ],\n    },\n});\nconst example = new azuread.ApplicationPreAuthorized(\"example\", {\n    applicationId: authorizer.id,\n    authorizedClientId: authorized.clientId,\n    permissionIds: [\n        \"00000000-0000-0000-0000-000000000000\",\n        \"11111111-1111-1111-1111-111111111111\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nauthorized = azuread.ApplicationRegistration(\"authorized\", display_name=\"example-authorized-app\")\nauthorizer = azuread.Application(\"authorizer\",\n    display_name=\"example-authorizing-app\",\n    api=azuread.ApplicationApiArgs(\n        oauth2_permission_scopes=[\n            azuread.ApplicationApiOauth2PermissionScopeArgs(\n                admin_consent_description=\"Administer the application\",\n                admin_consent_display_name=\"Administer\",\n                enabled=True,\n                id=\"00000000-0000-0000-0000-000000000000\",\n                type=\"Admin\",\n                value=\"administer\",\n            ),\n            azuread.ApplicationApiOauth2PermissionScopeArgs(\n                admin_consent_description=\"Access the application\",\n                admin_consent_display_name=\"Access\",\n                enabled=True,\n                id=\"11111111-1111-1111-1111-111111111111\",\n                type=\"User\",\n                user_consent_description=\"Access the application\",\n                user_consent_display_name=\"Access\",\n                value=\"user_impersonation\",\n            ),\n        ],\n    ))\nexample = azuread.ApplicationPreAuthorized(\"example\",\n    application_id=authorizer.id,\n    authorized_client_id=authorized.client_id,\n    permission_ids=[\n        \"00000000-0000-0000-0000-000000000000\",\n        \"11111111-1111-1111-1111-111111111111\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var authorized = new AzureAD.ApplicationRegistration(\"authorized\", new()\n    {\n        DisplayName = \"example-authorized-app\",\n    });\n\n    var authorizer = new AzureAD.Application(\"authorizer\", new()\n    {\n        DisplayName = \"example-authorizing-app\",\n        Api = new AzureAD.Inputs.ApplicationApiArgs\n        {\n            Oauth2PermissionScopes = new[]\n            {\n                new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs\n                {\n                    AdminConsentDescription = \"Administer the application\",\n                    AdminConsentDisplayName = \"Administer\",\n                    Enabled = true,\n                    Id = \"00000000-0000-0000-0000-000000000000\",\n                    Type = \"Admin\",\n                    Value = \"administer\",\n                },\n                new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs\n                {\n                    AdminConsentDescription = \"Access the application\",\n                    AdminConsentDisplayName = \"Access\",\n                    Enabled = true,\n                    Id = \"11111111-1111-1111-1111-111111111111\",\n                    Type = \"User\",\n                    UserConsentDescription = \"Access the application\",\n                    UserConsentDisplayName = \"Access\",\n                    Value = \"user_impersonation\",\n                },\n            },\n        },\n    });\n\n    var example = new AzureAD.ApplicationPreAuthorized(\"example\", new()\n    {\n        ApplicationId = authorizer.Id,\n        AuthorizedClientId = authorized.ClientId,\n        PermissionIds = new[]\n        {\n            \"00000000-0000-0000-0000-000000000000\",\n            \"11111111-1111-1111-1111-111111111111\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tauthorized, err := azuread.NewApplicationRegistration(ctx, \"authorized\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example-authorized-app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tauthorizer, err := azuread.NewApplication(ctx, \"authorizer\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example-authorizing-app\"),\n\t\t\tApi: \u0026azuread.ApplicationApiArgs{\n\t\t\t\tOauth2PermissionScopes: azuread.ApplicationApiOauth2PermissionScopeArray{\n\t\t\t\t\t\u0026azuread.ApplicationApiOauth2PermissionScopeArgs{\n\t\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Administer the application\"),\n\t\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Administer\"),\n\t\t\t\t\t\tEnabled:                 pulumi.Bool(true),\n\t\t\t\t\t\tId:                      pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\t\t\tType:                    pulumi.String(\"Admin\"),\n\t\t\t\t\t\tValue:                   pulumi.String(\"administer\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuread.ApplicationApiOauth2PermissionScopeArgs{\n\t\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Access the application\"),\n\t\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Access\"),\n\t\t\t\t\t\tEnabled:                 pulumi.Bool(true),\n\t\t\t\t\t\tId:                      pulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\t\t\t\tType:                    pulumi.String(\"User\"),\n\t\t\t\t\t\tUserConsentDescription:  pulumi.String(\"Access the application\"),\n\t\t\t\t\t\tUserConsentDisplayName:  pulumi.String(\"Access\"),\n\t\t\t\t\t\tValue:                   pulumi.String(\"user_impersonation\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPreAuthorized(ctx, \"example\", \u0026azuread.ApplicationPreAuthorizedArgs{\n\t\t\tApplicationId:      authorizer.ID(),\n\t\t\tAuthorizedClientId: authorized.ClientId,\n\t\t\tPermissionIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\t\tpulumi.String(\"11111111-1111-1111-1111-111111111111\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationApiArgs;\nimport com.pulumi.azuread.ApplicationPreAuthorized;\nimport com.pulumi.azuread.ApplicationPreAuthorizedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var authorized = new ApplicationRegistration(\"authorized\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example-authorized-app\")\n            .build());\n\n        var authorizer = new Application(\"authorizer\", ApplicationArgs.builder()        \n            .displayName(\"example-authorizing-app\")\n            .api(ApplicationApiArgs.builder()\n                .oauth2PermissionScopes(                \n                    ApplicationApiOauth2PermissionScopeArgs.builder()\n                        .adminConsentDescription(\"Administer the application\")\n                        .adminConsentDisplayName(\"Administer\")\n                        .enabled(true)\n                        .id(\"00000000-0000-0000-0000-000000000000\")\n                        .type(\"Admin\")\n                        .value(\"administer\")\n                        .build(),\n                    ApplicationApiOauth2PermissionScopeArgs.builder()\n                        .adminConsentDescription(\"Access the application\")\n                        .adminConsentDisplayName(\"Access\")\n                        .enabled(true)\n                        .id(\"11111111-1111-1111-1111-111111111111\")\n                        .type(\"User\")\n                        .userConsentDescription(\"Access the application\")\n                        .userConsentDisplayName(\"Access\")\n                        .value(\"user_impersonation\")\n                        .build())\n                .build())\n            .build());\n\n        var example = new ApplicationPreAuthorized(\"example\", ApplicationPreAuthorizedArgs.builder()        \n            .applicationId(authorizer.id())\n            .authorizedClientId(authorized.clientId())\n            .permissionIds(            \n                \"00000000-0000-0000-0000-000000000000\",\n                \"11111111-1111-1111-1111-111111111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  authorized:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example-authorized-app\n  authorizer:\n    type: azuread:Application\n    properties:\n      displayName: example-authorizing-app\n      api:\n        oauth2PermissionScopes:\n          - adminConsentDescription: Administer the application\n            adminConsentDisplayName: Administer\n            enabled: true\n            id: 00000000-0000-0000-0000-000000000000\n            type: Admin\n            value: administer\n          - adminConsentDescription: Access the application\n            adminConsentDisplayName: Access\n            enabled: true\n            id: 11111111-1111-1111-1111-111111111111\n            type: User\n            userConsentDescription: Access the application\n            userConsentDisplayName: Access\n            value: user_impersonation\n  example:\n    type: azuread:ApplicationPreAuthorized\n    properties:\n      applicationId: ${authorizer.id}\n      authorizedClientId: ${authorized.clientId}\n      permissionIds:\n        - 00000000-0000-0000-0000-000000000000\n        - 11111111-1111-1111-1111-111111111111\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPre-authorized applications can be imported using the object ID of the authorizing application and the application ID of the application being authorized, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationPreAuthorized:ApplicationPreAuthorized example 00000000-0000-0000-0000-000000000000/preAuthorizedApplication/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the authorizing application's object ID, the string \"preAuthorizedApplication\" and the authorized application's application ID (client ID) in the format `{ObjectId}/preAuthorizedApplication/{ApplicationId}`. ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application to which this pre-authorized application should be added\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "authorizedAppId": {
                    "type": "string",
                    "description": "The application ID of the pre-authorized application\n",
                    "deprecationMessage": "The `authorized_app_id` property has been replaced with the `authorized_client_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "authorizedClientId": {
                    "type": "string",
                    "description": "The client ID of the application being authorized. Changing this field forces a new resource to be created.\n"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of permission scope IDs required by the authorized application.\n"
                }
            },
            "required": [
                "applicationId",
                "applicationObjectId",
                "authorizedAppId",
                "authorizedClientId",
                "permissionIds"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The object ID of the application to which this pre-authorized application should be added\n",
                    "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "authorizedAppId": {
                    "type": "string",
                    "description": "The application ID of the pre-authorized application\n",
                    "deprecationMessage": "The `authorized_app_id` property has been replaced with the `authorized_client_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "authorizedClientId": {
                    "type": "string",
                    "description": "The client ID of the application being authorized. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of permission scope IDs required by the authorized application.\n"
                }
            },
            "requiredInputs": [
                "permissionIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationPreAuthorized resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The object ID of the application to which this pre-authorized application should be added\n",
                        "deprecationMessage": "The `application_object_id` property has been replaced with the `application_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "authorizedAppId": {
                        "type": "string",
                        "description": "The application ID of the pre-authorized application\n",
                        "deprecationMessage": "The `authorized_app_id` property has been replaced with the `authorized_client_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "authorizedClientId": {
                        "type": "string",
                        "description": "The client ID of the application being authorized. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of permission scope IDs required by the authorized application.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationRedirectUris:ApplicationRedirectUris": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.ApplicationRegistration(\"example\", {displayName: \"example\"});\nconst examplePublic = new azuread.ApplicationRedirectUris(\"examplePublic\", {\n    applicationId: example.id,\n    type: \"PublicClient\",\n    redirectUris: [\n        \"myapp://auth\",\n        \"sample.mobile.app.bundie.id://auth\",\n        \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\n        \"https://login.live.com/oauth20_desktop.srf\",\n        \"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\",\n        \"urn:ietf:wg:oauth:2.0:foo\",\n    ],\n});\nconst exampleSpa = new azuread.ApplicationRedirectUris(\"exampleSpa\", {\n    applicationId: example.id,\n    type: \"SPA\",\n    redirectUris: [\n        \"https://mobile.hashitown.com/\",\n        \"https://beta.hashitown.com/\",\n    ],\n});\nconst exampleWeb = new azuread.ApplicationRedirectUris(\"exampleWeb\", {\n    applicationId: example.id,\n    type: \"Web\",\n    redirectUris: [\n        \"https://app.hashitown.com/\",\n        \"https://classic.hashitown.com/\",\n        \"urn:ietf:wg:oauth:2.0:oob\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.ApplicationRegistration(\"example\", display_name=\"example\")\nexample_public = azuread.ApplicationRedirectUris(\"examplePublic\",\n    application_id=example.id,\n    type=\"PublicClient\",\n    redirect_uris=[\n        \"myapp://auth\",\n        \"sample.mobile.app.bundie.id://auth\",\n        \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\n        \"https://login.live.com/oauth20_desktop.srf\",\n        \"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\",\n        \"urn:ietf:wg:oauth:2.0:foo\",\n    ])\nexample_spa = azuread.ApplicationRedirectUris(\"exampleSpa\",\n    application_id=example.id,\n    type=\"SPA\",\n    redirect_uris=[\n        \"https://mobile.hashitown.com/\",\n        \"https://beta.hashitown.com/\",\n    ])\nexample_web = azuread.ApplicationRedirectUris(\"exampleWeb\",\n    application_id=example.id,\n    type=\"Web\",\n    redirect_uris=[\n        \"https://app.hashitown.com/\",\n        \"https://classic.hashitown.com/\",\n        \"urn:ietf:wg:oauth:2.0:oob\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.ApplicationRegistration(\"example\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var examplePublic = new AzureAD.ApplicationRedirectUris(\"examplePublic\", new()\n    {\n        ApplicationId = example.Id,\n        Type = \"PublicClient\",\n        RedirectUris = new[]\n        {\n            \"myapp://auth\",\n            \"sample.mobile.app.bundie.id://auth\",\n            \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\n            \"https://login.live.com/oauth20_desktop.srf\",\n            \"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\",\n            \"urn:ietf:wg:oauth:2.0:foo\",\n        },\n    });\n\n    var exampleSpa = new AzureAD.ApplicationRedirectUris(\"exampleSpa\", new()\n    {\n        ApplicationId = example.Id,\n        Type = \"SPA\",\n        RedirectUris = new[]\n        {\n            \"https://mobile.hashitown.com/\",\n            \"https://beta.hashitown.com/\",\n        },\n    });\n\n    var exampleWeb = new AzureAD.ApplicationRedirectUris(\"exampleWeb\", new()\n    {\n        ApplicationId = example.Id,\n        Type = \"Web\",\n        RedirectUris = new[]\n        {\n            \"https://app.hashitown.com/\",\n            \"https://classic.hashitown.com/\",\n            \"urn:ietf:wg:oauth:2.0:oob\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.NewApplicationRegistration(ctx, \"example\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationRedirectUris(ctx, \"examplePublic\", \u0026azuread.ApplicationRedirectUrisArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tType:          pulumi.String(\"PublicClient\"),\n\t\t\tRedirectUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"myapp://auth\"),\n\t\t\t\tpulumi.String(\"sample.mobile.app.bundie.id://auth\"),\n\t\t\t\tpulumi.String(\"https://login.microsoftonline.com/common/oauth2/nativeclient\"),\n\t\t\t\tpulumi.String(\"https://login.live.com/oauth20_desktop.srf\"),\n\t\t\t\tpulumi.String(\"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\"),\n\t\t\t\tpulumi.String(\"urn:ietf:wg:oauth:2.0:foo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationRedirectUris(ctx, \"exampleSpa\", \u0026azuread.ApplicationRedirectUrisArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tType:          pulumi.String(\"SPA\"),\n\t\t\tRedirectUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://mobile.hashitown.com/\"),\n\t\t\t\tpulumi.String(\"https://beta.hashitown.com/\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationRedirectUris(ctx, \"exampleWeb\", \u0026azuread.ApplicationRedirectUrisArgs{\n\t\t\tApplicationId: example.ID(),\n\t\t\tType:          pulumi.String(\"Web\"),\n\t\t\tRedirectUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://app.hashitown.com/\"),\n\t\t\t\tpulumi.String(\"https://classic.hashitown.com/\"),\n\t\t\t\tpulumi.String(\"urn:ietf:wg:oauth:2.0:oob\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport com.pulumi.azuread.ApplicationRedirectUris;\nimport com.pulumi.azuread.ApplicationRedirectUrisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApplicationRegistration(\"example\", ApplicationRegistrationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var examplePublic = new ApplicationRedirectUris(\"examplePublic\", ApplicationRedirectUrisArgs.builder()        \n            .applicationId(example.id())\n            .type(\"PublicClient\")\n            .redirectUris(            \n                \"myapp://auth\",\n                \"sample.mobile.app.bundie.id://auth\",\n                \"https://login.microsoftonline.com/common/oauth2/nativeclient\",\n                \"https://login.live.com/oauth20_desktop.srf\",\n                \"ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\",\n                \"urn:ietf:wg:oauth:2.0:foo\")\n            .build());\n\n        var exampleSpa = new ApplicationRedirectUris(\"exampleSpa\", ApplicationRedirectUrisArgs.builder()        \n            .applicationId(example.id())\n            .type(\"SPA\")\n            .redirectUris(            \n                \"https://mobile.hashitown.com/\",\n                \"https://beta.hashitown.com/\")\n            .build());\n\n        var exampleWeb = new ApplicationRedirectUris(\"exampleWeb\", ApplicationRedirectUrisArgs.builder()        \n            .applicationId(example.id())\n            .type(\"Web\")\n            .redirectUris(            \n                \"https://app.hashitown.com/\",\n                \"https://classic.hashitown.com/\",\n                \"urn:ietf:wg:oauth:2.0:oob\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ApplicationRegistration\n    properties:\n      displayName: example\n  examplePublic:\n    type: azuread:ApplicationRedirectUris\n    properties:\n      applicationId: ${example.id}\n      type: PublicClient\n      redirectUris:\n        - myapp://auth\n        - sample.mobile.app.bundie.id://auth\n        - https://login.microsoftonline.com/common/oauth2/nativeclient\n        - https://login.live.com/oauth20_desktop.srf\n        - ms-appx-web://Microsoft.AAD.BrokerPlugin/00000000-1111-1111-1111-222222222222\n        - urn:ietf:wg:oauth:2.0:foo\n  exampleSpa:\n    type: azuread:ApplicationRedirectUris\n    properties:\n      applicationId: ${example.id}\n      type: SPA\n      redirectUris:\n        - https://mobile.hashitown.com/\n        - https://beta.hashitown.com/\n  exampleWeb:\n    type: azuread:ApplicationRedirectUris\n    properties:\n      applicationId: ${example.id}\n      type: Web\n      redirectUris:\n        - https://app.hashitown.com/\n        - https://classic.hashitown.com/\n        - urn:ietf:wg:oauth:2.0:oob\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication API Access can be imported using the object ID of the application and the URI type, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationRedirectUris:ApplicationRedirectUris example /applications/00000000-0000-0000-0000-000000000000/uriType/Web\n```\n\n ",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of redirect URIs to assign to the application.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "applicationId",
                "redirectUris",
                "type"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of redirect URIs to assign to the application.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId",
                "redirectUris",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationRedirectUris resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The resource ID of the application registration. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of redirect URIs to assign to the application.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationRegistration:ApplicationRegistration": {
            "description": "Manages an application registration within Azure Active Directory.\n\nFor a more comprehensive alternative, please see the azuread.Application resource. Please note that this resource should not be used together with the `azuread.Application` resource when managing the same application.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.OwnedBy` or `Application.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource may require one of the following directory roles: `Application Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.ApplicationRegistration(\"example\", {\n    description: \"My example application\",\n    displayName: \"Example Application\",\n    homepageUrl: \"https://app.hashitown.com/\",\n    logoutUrl: \"https://app.hashitown.com/logout\",\n    marketingUrl: \"https://hashitown.com/\",\n    privacyStatementUrl: \"https://hashitown.com/privacy\",\n    signInAudience: \"AzureADMyOrg\",\n    supportUrl: \"https://support.hashitown.com/\",\n    termsOfServiceUrl: \"https://hashitown.com/terms\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.ApplicationRegistration(\"example\",\n    description=\"My example application\",\n    display_name=\"Example Application\",\n    homepage_url=\"https://app.hashitown.com/\",\n    logout_url=\"https://app.hashitown.com/logout\",\n    marketing_url=\"https://hashitown.com/\",\n    privacy_statement_url=\"https://hashitown.com/privacy\",\n    sign_in_audience=\"AzureADMyOrg\",\n    support_url=\"https://support.hashitown.com/\",\n    terms_of_service_url=\"https://hashitown.com/terms\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.ApplicationRegistration(\"example\", new()\n    {\n        Description = \"My example application\",\n        DisplayName = \"Example Application\",\n        HomepageUrl = \"https://app.hashitown.com/\",\n        LogoutUrl = \"https://app.hashitown.com/logout\",\n        MarketingUrl = \"https://hashitown.com/\",\n        PrivacyStatementUrl = \"https://hashitown.com/privacy\",\n        SignInAudience = \"AzureADMyOrg\",\n        SupportUrl = \"https://support.hashitown.com/\",\n        TermsOfServiceUrl = \"https://hashitown.com/terms\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewApplicationRegistration(ctx, \"example\", \u0026azuread.ApplicationRegistrationArgs{\n\t\t\tDescription:         pulumi.String(\"My example application\"),\n\t\t\tDisplayName:         pulumi.String(\"Example Application\"),\n\t\t\tHomepageUrl:         pulumi.String(\"https://app.hashitown.com/\"),\n\t\t\tLogoutUrl:           pulumi.String(\"https://app.hashitown.com/logout\"),\n\t\t\tMarketingUrl:        pulumi.String(\"https://hashitown.com/\"),\n\t\t\tPrivacyStatementUrl: pulumi.String(\"https://hashitown.com/privacy\"),\n\t\t\tSignInAudience:      pulumi.String(\"AzureADMyOrg\"),\n\t\t\tSupportUrl:          pulumi.String(\"https://support.hashitown.com/\"),\n\t\t\tTermsOfServiceUrl:   pulumi.String(\"https://hashitown.com/terms\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ApplicationRegistration;\nimport com.pulumi.azuread.ApplicationRegistrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ApplicationRegistration(\"example\", ApplicationRegistrationArgs.builder()        \n            .description(\"My example application\")\n            .displayName(\"Example Application\")\n            .homepageUrl(\"https://app.hashitown.com/\")\n            .logoutUrl(\"https://app.hashitown.com/logout\")\n            .marketingUrl(\"https://hashitown.com/\")\n            .privacyStatementUrl(\"https://hashitown.com/privacy\")\n            .signInAudience(\"AzureADMyOrg\")\n            .supportUrl(\"https://support.hashitown.com/\")\n            .termsOfServiceUrl(\"https://hashitown.com/terms\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ApplicationRegistration\n    properties:\n      description: My example application\n      displayName: Example Application\n      homepageUrl: https://app.hashitown.com/\n      logoutUrl: https://app.hashitown.com/logout\n      marketingUrl: https://hashitown.com/\n      privacyStatementUrl: https://hashitown.com/privacy\n      signInAudience: AzureADMyOrg\n      supportUrl: https://support.hashitown.com/\n      termsOfServiceUrl: https://hashitown.com/terms\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApplication Registrations can be imported using the object ID of the application, in the following format.\n\n```sh\n $ pulumi import azuread:index/applicationRegistration:ApplicationRegistration example /applications/00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The Client ID for the application, which is globally unique.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the application, as shown to end users.\n"
                },
                "disabledByMicrosoft": {
                    "type": "string",
                    "description": "Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "groupMembershipClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "Home page or landing page of the application.\n"
                },
                "implicitAccessTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an access token using OAuth implicit flow.\n"
                },
                "implicitIdTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an ID token using OAuth implicit flow.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.\n"
                },
                "marketingUrl": {
                    "type": "string",
                    "description": "URL of the marketing page for the application.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "User-specified notes relevant for the management of the application.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the application within the tenant.\n"
                },
                "privacyStatementUrl": {
                    "type": "string",
                    "description": "URL of the privacy statement for the application.\n"
                },
                "publisherDomain": {
                    "type": "string",
                    "description": "The verified publisher domain for the application.\n"
                },
                "requestedAccessTokenVersion": {
                    "type": "integer",
                    "description": "The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.\n"
                },
                "serviceManagementReference": {
                    "type": "string",
                    "description": "References application context information from a Service or Asset Management database.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "URL of the support page for the application.\n"
                },
                "termsOfServiceUrl": {
                    "type": "string",
                    "description": "URL of the terms of service statement for the application.\n"
                }
            },
            "required": [
                "clientId",
                "disabledByMicrosoft",
                "displayName",
                "objectId",
                "publisherDomain"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the application, as shown to end users.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "groupMembershipClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "Home page or landing page of the application.\n"
                },
                "implicitAccessTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an access token using OAuth implicit flow.\n"
                },
                "implicitIdTokenIssuanceEnabled": {
                    "type": "boolean",
                    "description": "Whether this web application can request an ID token using OAuth implicit flow.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.\n"
                },
                "marketingUrl": {
                    "type": "string",
                    "description": "URL of the marketing page for the application.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "User-specified notes relevant for the management of the application.\n"
                },
                "privacyStatementUrl": {
                    "type": "string",
                    "description": "URL of the privacy statement for the application.\n"
                },
                "requestedAccessTokenVersion": {
                    "type": "integer",
                    "description": "The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.\n"
                },
                "serviceManagementReference": {
                    "type": "string",
                    "description": "References application context information from a Service or Asset Management database.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n"
                },
                "supportUrl": {
                    "type": "string",
                    "description": "URL of the support page for the application.\n"
                },
                "termsOfServiceUrl": {
                    "type": "string",
                    "description": "URL of the terms of service statement for the application.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationRegistration resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The Client ID for the application, which is globally unique.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the application, as shown to end users.\n"
                    },
                    "disabledByMicrosoft": {
                        "type": "string",
                        "description": "Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application.\n"
                    },
                    "groupMembershipClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "Home page or landing page of the application.\n"
                    },
                    "implicitAccessTokenIssuanceEnabled": {
                        "type": "boolean",
                        "description": "Whether this web application can request an access token using OAuth implicit flow.\n"
                    },
                    "implicitIdTokenIssuanceEnabled": {
                        "type": "boolean",
                        "description": "Whether this web application can request an ID token using OAuth implicit flow.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.\n"
                    },
                    "marketingUrl": {
                        "type": "string",
                        "description": "URL of the marketing page for the application.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "User-specified notes relevant for the management of the application.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the application within the tenant.\n"
                    },
                    "privacyStatementUrl": {
                        "type": "string",
                        "description": "URL of the privacy statement for the application.\n"
                    },
                    "publisherDomain": {
                        "type": "string",
                        "description": "The verified publisher domain for the application.\n"
                    },
                    "requestedAccessTokenVersion": {
                        "type": "integer",
                        "description": "The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.\n"
                    },
                    "serviceManagementReference": {
                        "type": "string",
                        "description": "References application context information from a Service or Asset Management database.\n"
                    },
                    "signInAudience": {
                        "type": "string",
                        "description": "The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "URL of the support page for the application.\n"
                    },
                    "termsOfServiceUrl": {
                        "type": "string",
                        "description": "URL of the terms of service statement for the application.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy": {
            "description": "Manages a Authentication Strength Policy within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.AuthenticationStrengthPolicy(\"example\", {\n    allowedCombinations: [\n        \"fido2\",\n        \"password\",\n    ],\n    description: \"Policy for demo purposes\",\n    displayName: \"Example Authentication Strength Policy\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.AuthenticationStrengthPolicy(\"example\",\n    allowed_combinations=[\n        \"fido2\",\n        \"password\",\n    ],\n    description=\"Policy for demo purposes\",\n    display_name=\"Example Authentication Strength Policy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.AuthenticationStrengthPolicy(\"example\", new()\n    {\n        AllowedCombinations = new[]\n        {\n            \"fido2\",\n            \"password\",\n        },\n        Description = \"Policy for demo purposes\",\n        DisplayName = \"Example Authentication Strength Policy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewAuthenticationStrengthPolicy(ctx, \"example\", \u0026azuread.AuthenticationStrengthPolicyArgs{\n\t\t\tAllowedCombinations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"fido2\"),\n\t\t\t\tpulumi.String(\"password\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Policy for demo purposes\"),\n\t\t\tDisplayName: pulumi.String(\"Example Authentication Strength Policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AuthenticationStrengthPolicy;\nimport com.pulumi.azuread.AuthenticationStrengthPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AuthenticationStrengthPolicy(\"example\", AuthenticationStrengthPolicyArgs.builder()        \n            .allowedCombinations(            \n                \"fido2\",\n                \"password\")\n            .description(\"Policy for demo purposes\")\n            .displayName(\"Example Authentication Strength Policy\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:AuthenticationStrengthPolicy\n    properties:\n      allowedCombinations:\n        - fido2\n        - password\n      description: Policy for demo purposes\n      displayName: Example Authentication Strength Policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAuthentication Strength Policies can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy my_policy 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "allowedCombinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed authentication methods for this authentication strength policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this authentication strength policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this authentication strength policy.\n"
                }
            },
            "required": [
                "allowedCombinations",
                "displayName"
            ],
            "inputProperties": {
                "allowedCombinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed authentication methods for this authentication strength policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for this authentication strength policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this authentication strength policy.\n"
                }
            },
            "requiredInputs": [
                "allowedCombinations",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthenticationStrengthPolicy resources.\n",
                "properties": {
                    "allowedCombinations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed authentication methods for this authentication strength policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for this authentication strength policy.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The friendly name for this authentication strength policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/claimsMappingPolicy:ClaimsMappingPolicy": {
            "description": "Manages a Claims Mapping Policy within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ApplicationConfiguration` and `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Application Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst myPolicy = new azuread.ClaimsMappingPolicy(\"myPolicy\", {\n    definitions: [JSON.stringify({\n        ClaimsMappingPolicy: {\n            ClaimsSchema: [\n                {\n                    ID: \"employeeid\",\n                    JwtClaimType: \"name\",\n                    SamlClaimType: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n                    Source: \"user\",\n                },\n                {\n                    ID: \"tenantcountry\",\n                    JwtClaimType: \"country\",\n                    SamlClaimType: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\",\n                    Source: \"company\",\n                },\n            ],\n            IncludeBasicClaimSet: \"true\",\n            Version: 1,\n        },\n    })],\n    displayName: \"My Policy\",\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_azuread as azuread\n\nmy_policy = azuread.ClaimsMappingPolicy(\"myPolicy\",\n    definitions=[json.dumps({\n        \"ClaimsMappingPolicy\": {\n            \"ClaimsSchema\": [\n                {\n                    \"ID\": \"employeeid\",\n                    \"JwtClaimType\": \"name\",\n                    \"SamlClaimType\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n                    \"Source\": \"user\",\n                },\n                {\n                    \"ID\": \"tenantcountry\",\n                    \"JwtClaimType\": \"country\",\n                    \"SamlClaimType\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\",\n                    \"Source\": \"company\",\n                },\n            ],\n            \"IncludeBasicClaimSet\": \"true\",\n            \"Version\": 1,\n        },\n    })],\n    display_name=\"My Policy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPolicy = new AzureAD.ClaimsMappingPolicy(\"myPolicy\", new()\n    {\n        Definitions = new[]\n        {\n            JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"ClaimsMappingPolicy\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"ClaimsSchema\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"ID\"] = \"employeeid\",\n                            [\"JwtClaimType\"] = \"name\",\n                            [\"SamlClaimType\"] = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n                            [\"Source\"] = \"user\",\n                        },\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"ID\"] = \"tenantcountry\",\n                            [\"JwtClaimType\"] = \"country\",\n                            [\"SamlClaimType\"] = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\",\n                            [\"Source\"] = \"company\",\n                        },\n                    },\n                    [\"IncludeBasicClaimSet\"] = \"true\",\n                    [\"Version\"] = 1,\n                },\n            }),\n        },\n        DisplayName = \"My Policy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"ClaimsMappingPolicy\": map[string]interface{}{\n\t\t\t\t\"ClaimsSchema\": []map[string]interface{}{\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"ID\":            \"employeeid\",\n\t\t\t\t\t\t\"JwtClaimType\":  \"name\",\n\t\t\t\t\t\t\"SamlClaimType\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n\t\t\t\t\t\t\"Source\":        \"user\",\n\t\t\t\t\t},\n\t\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\t\"ID\":            \"tenantcountry\",\n\t\t\t\t\t\t\"JwtClaimType\":  \"country\",\n\t\t\t\t\t\t\"SamlClaimType\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\",\n\t\t\t\t\t\t\"Source\":        \"company\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"IncludeBasicClaimSet\": \"true\",\n\t\t\t\t\"Version\":              1,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = azuread.NewClaimsMappingPolicy(ctx, \"myPolicy\", \u0026azuread.ClaimsMappingPolicyArgs{\n\t\t\tDefinitions: pulumi.StringArray{\n\t\t\t\tpulumi.String(json0),\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"My Policy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ClaimsMappingPolicy;\nimport com.pulumi.azuread.ClaimsMappingPolicyArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myPolicy = new ClaimsMappingPolicy(\"myPolicy\", ClaimsMappingPolicyArgs.builder()        \n            .definitions(serializeJson(\n                jsonObject(\n                    jsonProperty(\"ClaimsMappingPolicy\", jsonObject(\n                        jsonProperty(\"ClaimsSchema\", jsonArray(\n                            jsonObject(\n                                jsonProperty(\"ID\", \"employeeid\"),\n                                jsonProperty(\"JwtClaimType\", \"name\"),\n                                jsonProperty(\"SamlClaimType\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"),\n                                jsonProperty(\"Source\", \"user\")\n                            ), \n                            jsonObject(\n                                jsonProperty(\"ID\", \"tenantcountry\"),\n                                jsonProperty(\"JwtClaimType\", \"country\"),\n                                jsonProperty(\"SamlClaimType\", \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\"),\n                                jsonProperty(\"Source\", \"company\")\n                            )\n                        )),\n                        jsonProperty(\"IncludeBasicClaimSet\", \"true\"),\n                        jsonProperty(\"Version\", 1)\n                    ))\n                )))\n            .displayName(\"My Policy\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myPolicy:\n    type: azuread:ClaimsMappingPolicy\n    properties:\n      definitions:\n        - fn::toJSON:\n            ClaimsMappingPolicy:\n              ClaimsSchema:\n                - ID: employeeid\n                  JwtClaimType: name\n                  SamlClaimType: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n                  Source: user\n                - ID: tenantcountry\n                  JwtClaimType: country\n                  SamlClaimType: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country\n                  Source: company\n              IncludeBasicClaimSet: 'true'\n              Version: 1\n      displayName: My Policy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nClaims Mapping Policy can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/claimsMappingPolicy:ClaimsMappingPolicy my_policy 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "definitions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claims mapping policy. This is a JSON formatted string, for which the `jsonencode()` function can be used.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for this Claims Mapping Policy.\n"
                }
            },
            "required": [
                "definitions",
                "displayName"
            ],
            "inputProperties": {
                "definitions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claims mapping policy. This is a JSON formatted string, for which the `jsonencode()` function can be used.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for this Claims Mapping Policy.\n"
                }
            },
            "requiredInputs": [
                "definitions",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClaimsMappingPolicy resources.\n",
                "properties": {
                    "definitions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The claims mapping policy. This is a JSON formatted string, for which the `jsonencode()` function can be used.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for this Claims Mapping Policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy": {
            "description": "Manages a Conditional Access Policy within Azure Active Directory.\n\n\u003e **Licensing Requirements** Specifying `client_applications` property requires the activation of Microsoft Entra on your tenant and the availability of sufficient Workload Identities Premium licences (one per service principal managed by a conditional access).\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### All users except guests or external users\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.ConditionalAccessPolicy(\"example\", {\n    conditions: {\n        applications: {\n            excludedApplications: [],\n            includedApplications: [\"All\"],\n        },\n        clientAppTypes: [\"all\"],\n        devices: {\n            filter: {\n                mode: \"exclude\",\n                rule: \"device.operatingSystem eq \\\"Doors\\\"\",\n            },\n        },\n        locations: {\n            excludedLocations: [\"AllTrusted\"],\n            includedLocations: [\"All\"],\n        },\n        platforms: {\n            excludedPlatforms: [\"iOS\"],\n            includedPlatforms: [\"android\"],\n        },\n        signInRiskLevels: [\"medium\"],\n        userRiskLevels: [\"medium\"],\n        users: {\n            excludedUsers: [\"GuestsOrExternalUsers\"],\n            includedUsers: [\"All\"],\n        },\n    },\n    displayName: \"example policy\",\n    grantControls: {\n        builtInControls: [\"mfa\"],\n        operator: \"OR\",\n    },\n    sessionControls: {\n        applicationEnforcedRestrictionsEnabled: true,\n        cloudAppSecurityPolicy: \"monitorOnly\",\n        disableResilienceDefaults: false,\n        signInFrequency: 10,\n        signInFrequencyPeriod: \"hours\",\n    },\n    state: \"disabled\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.ConditionalAccessPolicy(\"example\",\n    conditions=azuread.ConditionalAccessPolicyConditionsArgs(\n        applications=azuread.ConditionalAccessPolicyConditionsApplicationsArgs(\n            excluded_applications=[],\n            included_applications=[\"All\"],\n        ),\n        client_app_types=[\"all\"],\n        devices=azuread.ConditionalAccessPolicyConditionsDevicesArgs(\n            filter=azuread.ConditionalAccessPolicyConditionsDevicesFilterArgs(\n                mode=\"exclude\",\n                rule=\"device.operatingSystem eq \\\"Doors\\\"\",\n            ),\n        ),\n        locations=azuread.ConditionalAccessPolicyConditionsLocationsArgs(\n            excluded_locations=[\"AllTrusted\"],\n            included_locations=[\"All\"],\n        ),\n        platforms=azuread.ConditionalAccessPolicyConditionsPlatformsArgs(\n            excluded_platforms=[\"iOS\"],\n            included_platforms=[\"android\"],\n        ),\n        sign_in_risk_levels=[\"medium\"],\n        user_risk_levels=[\"medium\"],\n        users=azuread.ConditionalAccessPolicyConditionsUsersArgs(\n            excluded_users=[\"GuestsOrExternalUsers\"],\n            included_users=[\"All\"],\n        ),\n    ),\n    display_name=\"example policy\",\n    grant_controls=azuread.ConditionalAccessPolicyGrantControlsArgs(\n        built_in_controls=[\"mfa\"],\n        operator=\"OR\",\n    ),\n    session_controls=azuread.ConditionalAccessPolicySessionControlsArgs(\n        application_enforced_restrictions_enabled=True,\n        cloud_app_security_policy=\"monitorOnly\",\n        disable_resilience_defaults=False,\n        sign_in_frequency=10,\n        sign_in_frequency_period=\"hours\",\n    ),\n    state=\"disabled\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.ConditionalAccessPolicy(\"example\", new()\n    {\n        Conditions = new AzureAD.Inputs.ConditionalAccessPolicyConditionsArgs\n        {\n            Applications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsApplicationsArgs\n            {\n                ExcludedApplications = new() { },\n                IncludedApplications = new[]\n                {\n                    \"All\",\n                },\n            },\n            ClientAppTypes = new[]\n            {\n                \"all\",\n            },\n            Devices = new AzureAD.Inputs.ConditionalAccessPolicyConditionsDevicesArgs\n            {\n                Filter = new AzureAD.Inputs.ConditionalAccessPolicyConditionsDevicesFilterArgs\n                {\n                    Mode = \"exclude\",\n                    Rule = \"device.operatingSystem eq \\\"Doors\\\"\",\n                },\n            },\n            Locations = new AzureAD.Inputs.ConditionalAccessPolicyConditionsLocationsArgs\n            {\n                ExcludedLocations = new[]\n                {\n                    \"AllTrusted\",\n                },\n                IncludedLocations = new[]\n                {\n                    \"All\",\n                },\n            },\n            Platforms = new AzureAD.Inputs.ConditionalAccessPolicyConditionsPlatformsArgs\n            {\n                ExcludedPlatforms = new[]\n                {\n                    \"iOS\",\n                },\n                IncludedPlatforms = new[]\n                {\n                    \"android\",\n                },\n            },\n            SignInRiskLevels = new[]\n            {\n                \"medium\",\n            },\n            UserRiskLevels = new[]\n            {\n                \"medium\",\n            },\n            Users = new AzureAD.Inputs.ConditionalAccessPolicyConditionsUsersArgs\n            {\n                ExcludedUsers = new[]\n                {\n                    \"GuestsOrExternalUsers\",\n                },\n                IncludedUsers = new[]\n                {\n                    \"All\",\n                },\n            },\n        },\n        DisplayName = \"example policy\",\n        GrantControls = new AzureAD.Inputs.ConditionalAccessPolicyGrantControlsArgs\n        {\n            BuiltInControls = new[]\n            {\n                \"mfa\",\n            },\n            Operator = \"OR\",\n        },\n        SessionControls = new AzureAD.Inputs.ConditionalAccessPolicySessionControlsArgs\n        {\n            ApplicationEnforcedRestrictionsEnabled = true,\n            CloudAppSecurityPolicy = \"monitorOnly\",\n            DisableResilienceDefaults = false,\n            SignInFrequency = 10,\n            SignInFrequencyPeriod = \"hours\",\n        },\n        State = \"disabled\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewConditionalAccessPolicy(ctx, \"example\", \u0026azuread.ConditionalAccessPolicyArgs{\n\t\t\tConditions: \u0026azuread.ConditionalAccessPolicyConditionsArgs{\n\t\t\t\tApplications: \u0026azuread.ConditionalAccessPolicyConditionsApplicationsArgs{\n\t\t\t\t\tExcludedApplications: pulumi.StringArray{},\n\t\t\t\t\tIncludedApplications: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"All\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tClientAppTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t\tDevices: \u0026azuread.ConditionalAccessPolicyConditionsDevicesArgs{\n\t\t\t\t\tFilter: \u0026azuread.ConditionalAccessPolicyConditionsDevicesFilterArgs{\n\t\t\t\t\t\tMode: pulumi.String(\"exclude\"),\n\t\t\t\t\t\tRule: pulumi.String(\"device.operatingSystem eq \\\"Doors\\\"\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tLocations: \u0026azuread.ConditionalAccessPolicyConditionsLocationsArgs{\n\t\t\t\t\tExcludedLocations: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"AllTrusted\"),\n\t\t\t\t\t},\n\t\t\t\t\tIncludedLocations: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"All\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPlatforms: \u0026azuread.ConditionalAccessPolicyConditionsPlatformsArgs{\n\t\t\t\t\tExcludedPlatforms: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"iOS\"),\n\t\t\t\t\t},\n\t\t\t\t\tIncludedPlatforms: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"android\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSignInRiskLevels: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"medium\"),\n\t\t\t\t},\n\t\t\t\tUserRiskLevels: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"medium\"),\n\t\t\t\t},\n\t\t\t\tUsers: \u0026azuread.ConditionalAccessPolicyConditionsUsersArgs{\n\t\t\t\t\tExcludedUsers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"GuestsOrExternalUsers\"),\n\t\t\t\t\t},\n\t\t\t\t\tIncludedUsers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"All\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"example policy\"),\n\t\t\tGrantControls: \u0026azuread.ConditionalAccessPolicyGrantControlsArgs{\n\t\t\t\tBuiltInControls: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"mfa\"),\n\t\t\t\t},\n\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t},\n\t\t\tSessionControls: \u0026azuread.ConditionalAccessPolicySessionControlsArgs{\n\t\t\t\tApplicationEnforcedRestrictionsEnabled: pulumi.Bool(true),\n\t\t\t\tCloudAppSecurityPolicy:                 pulumi.String(\"monitorOnly\"),\n\t\t\t\tDisableResilienceDefaults:              pulumi.Bool(false),\n\t\t\t\tSignInFrequency:                        pulumi.Int(10),\n\t\t\t\tSignInFrequencyPeriod:                  pulumi.String(\"hours\"),\n\t\t\t},\n\t\t\tState: pulumi.String(\"disabled\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ConditionalAccessPolicy;\nimport com.pulumi.azuread.ConditionalAccessPolicyArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsApplicationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsDevicesArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsDevicesFilterArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsLocationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsPlatformsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsUsersArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicySessionControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConditionalAccessPolicy(\"example\", ConditionalAccessPolicyArgs.builder()        \n            .conditions(ConditionalAccessPolicyConditionsArgs.builder()\n                .applications(ConditionalAccessPolicyConditionsApplicationsArgs.builder()\n                    .excludedApplications()\n                    .includedApplications(\"All\")\n                    .build())\n                .clientAppTypes(\"all\")\n                .devices(ConditionalAccessPolicyConditionsDevicesArgs.builder()\n                    .filter(ConditionalAccessPolicyConditionsDevicesFilterArgs.builder()\n                        .mode(\"exclude\")\n                        .rule(\"device.operatingSystem eq \\\"Doors\\\"\")\n                        .build())\n                    .build())\n                .locations(ConditionalAccessPolicyConditionsLocationsArgs.builder()\n                    .excludedLocations(\"AllTrusted\")\n                    .includedLocations(\"All\")\n                    .build())\n                .platforms(ConditionalAccessPolicyConditionsPlatformsArgs.builder()\n                    .excludedPlatforms(\"iOS\")\n                    .includedPlatforms(\"android\")\n                    .build())\n                .signInRiskLevels(\"medium\")\n                .userRiskLevels(\"medium\")\n                .users(ConditionalAccessPolicyConditionsUsersArgs.builder()\n                    .excludedUsers(\"GuestsOrExternalUsers\")\n                    .includedUsers(\"All\")\n                    .build())\n                .build())\n            .displayName(\"example policy\")\n            .grantControls(ConditionalAccessPolicyGrantControlsArgs.builder()\n                .builtInControls(\"mfa\")\n                .operator(\"OR\")\n                .build())\n            .sessionControls(ConditionalAccessPolicySessionControlsArgs.builder()\n                .applicationEnforcedRestrictionsEnabled(true)\n                .cloudAppSecurityPolicy(\"monitorOnly\")\n                .disableResilienceDefaults(false)\n                .signInFrequency(10)\n                .signInFrequencyPeriod(\"hours\")\n                .build())\n            .state(\"disabled\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ConditionalAccessPolicy\n    properties:\n      conditions:\n        applications:\n          excludedApplications: []\n          includedApplications:\n            - All\n        clientAppTypes:\n          - all\n        devices:\n          filter:\n            mode: exclude\n            rule: device.operatingSystem eq \"Doors\"\n        locations:\n          excludedLocations:\n            - AllTrusted\n          includedLocations:\n            - All\n        platforms:\n          excludedPlatforms:\n            - iOS\n          includedPlatforms:\n            - android\n        signInRiskLevels:\n          - medium\n        userRiskLevels:\n          - medium\n        users:\n          excludedUsers:\n            - GuestsOrExternalUsers\n          includedUsers:\n            - All\n      displayName: example policy\n      grantControls:\n        builtInControls:\n          - mfa\n        operator: OR\n      sessionControls:\n        applicationEnforcedRestrictionsEnabled: true\n        cloudAppSecurityPolicy: monitorOnly\n        disableResilienceDefaults: false\n        signInFrequency: 10\n        signInFrequencyPeriod: hours\n      state: disabled\n```\n{{% /example %}}\n{{% example %}}\n### Included client applications / service principals\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst example = new azuread.ConditionalAccessPolicy(\"example\", {\n    displayName: \"example policy\",\n    state: \"disabled\",\n    conditions: {\n        clientAppTypes: [\"all\"],\n        applications: {\n            includedApplications: [\"All\"],\n        },\n        clientApplications: {\n            includedServicePrincipals: [current.then(current =\u003e current.objectId)],\n            excludedServicePrincipals: [],\n        },\n        users: {\n            includedUsers: [\"None\"],\n        },\n    },\n    grantControls: {\n        operator: \"OR\",\n        builtInControls: [\"block\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample = azuread.ConditionalAccessPolicy(\"example\",\n    display_name=\"example policy\",\n    state=\"disabled\",\n    conditions=azuread.ConditionalAccessPolicyConditionsArgs(\n        client_app_types=[\"all\"],\n        applications=azuread.ConditionalAccessPolicyConditionsApplicationsArgs(\n            included_applications=[\"All\"],\n        ),\n        client_applications=azuread.ConditionalAccessPolicyConditionsClientApplicationsArgs(\n            included_service_principals=[current.object_id],\n            excluded_service_principals=[],\n        ),\n        users=azuread.ConditionalAccessPolicyConditionsUsersArgs(\n            included_users=[\"None\"],\n        ),\n    ),\n    grant_controls=azuread.ConditionalAccessPolicyGrantControlsArgs(\n        operator=\"OR\",\n        built_in_controls=[\"block\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var example = new AzureAD.ConditionalAccessPolicy(\"example\", new()\n    {\n        DisplayName = \"example policy\",\n        State = \"disabled\",\n        Conditions = new AzureAD.Inputs.ConditionalAccessPolicyConditionsArgs\n        {\n            ClientAppTypes = new[]\n            {\n                \"all\",\n            },\n            Applications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsApplicationsArgs\n            {\n                IncludedApplications = new[]\n                {\n                    \"All\",\n                },\n            },\n            ClientApplications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsClientApplicationsArgs\n            {\n                IncludedServicePrincipals = new[]\n                {\n                    current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n                },\n                ExcludedServicePrincipals = new() { },\n            },\n            Users = new AzureAD.Inputs.ConditionalAccessPolicyConditionsUsersArgs\n            {\n                IncludedUsers = new[]\n                {\n                    \"None\",\n                },\n            },\n        },\n        GrantControls = new AzureAD.Inputs.ConditionalAccessPolicyGrantControlsArgs\n        {\n            Operator = \"OR\",\n            BuiltInControls = new[]\n            {\n                \"block\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewConditionalAccessPolicy(ctx, \"example\", \u0026azuread.ConditionalAccessPolicyArgs{\n\t\t\tDisplayName: pulumi.String(\"example policy\"),\n\t\t\tState:       pulumi.String(\"disabled\"),\n\t\t\tConditions: \u0026azuread.ConditionalAccessPolicyConditionsArgs{\n\t\t\t\tClientAppTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t\tApplications: \u0026azuread.ConditionalAccessPolicyConditionsApplicationsArgs{\n\t\t\t\t\tIncludedApplications: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"All\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tClientApplications: \u0026azuread.ConditionalAccessPolicyConditionsClientApplicationsArgs{\n\t\t\t\t\tIncludedServicePrincipals: pulumi.StringArray{\n\t\t\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t\t\t},\n\t\t\t\t\tExcludedServicePrincipals: pulumi.StringArray{},\n\t\t\t\t},\n\t\t\t\tUsers: \u0026azuread.ConditionalAccessPolicyConditionsUsersArgs{\n\t\t\t\t\tIncludedUsers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"None\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tGrantControls: \u0026azuread.ConditionalAccessPolicyGrantControlsArgs{\n\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t\tBuiltInControls: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ConditionalAccessPolicy;\nimport com.pulumi.azuread.ConditionalAccessPolicyArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsApplicationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsClientApplicationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsUsersArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var example = new ConditionalAccessPolicy(\"example\", ConditionalAccessPolicyArgs.builder()        \n            .displayName(\"example policy\")\n            .state(\"disabled\")\n            .conditions(ConditionalAccessPolicyConditionsArgs.builder()\n                .clientAppTypes(\"all\")\n                .applications(ConditionalAccessPolicyConditionsApplicationsArgs.builder()\n                    .includedApplications(\"All\")\n                    .build())\n                .clientApplications(ConditionalAccessPolicyConditionsClientApplicationsArgs.builder()\n                    .includedServicePrincipals(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n                    .excludedServicePrincipals()\n                    .build())\n                .users(ConditionalAccessPolicyConditionsUsersArgs.builder()\n                    .includedUsers(\"None\")\n                    .build())\n                .build())\n            .grantControls(ConditionalAccessPolicyGrantControlsArgs.builder()\n                .operator(\"OR\")\n                .builtInControls(\"block\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ConditionalAccessPolicy\n    properties:\n      displayName: example policy\n      state: disabled\n      conditions:\n        clientAppTypes:\n          - all\n        applications:\n          includedApplications:\n            - All\n        clientApplications:\n          includedServicePrincipals:\n            - ${current.objectId}\n          excludedServicePrincipals: []\n        users:\n          includedUsers:\n            - None\n      grantControls:\n        operator: OR\n        builtInControls:\n          - block\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% example %}}\n### Excluded client applications / service principals\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst example = new azuread.ConditionalAccessPolicy(\"example\", {\n    displayName: \"example policy\",\n    state: \"disabled\",\n    conditions: {\n        clientAppTypes: [\"all\"],\n        applications: {\n            includedApplications: [\"All\"],\n        },\n        clientApplications: {\n            includedServicePrincipals: [\"ServicePrincipalsInMyTenant\"],\n            excludedServicePrincipals: [current.then(current =\u003e current.objectId)],\n        },\n        users: {\n            includedUsers: [\"None\"],\n        },\n    },\n    grantControls: {\n        operator: \"OR\",\n        builtInControls: [\"block\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample = azuread.ConditionalAccessPolicy(\"example\",\n    display_name=\"example policy\",\n    state=\"disabled\",\n    conditions=azuread.ConditionalAccessPolicyConditionsArgs(\n        client_app_types=[\"all\"],\n        applications=azuread.ConditionalAccessPolicyConditionsApplicationsArgs(\n            included_applications=[\"All\"],\n        ),\n        client_applications=azuread.ConditionalAccessPolicyConditionsClientApplicationsArgs(\n            included_service_principals=[\"ServicePrincipalsInMyTenant\"],\n            excluded_service_principals=[current.object_id],\n        ),\n        users=azuread.ConditionalAccessPolicyConditionsUsersArgs(\n            included_users=[\"None\"],\n        ),\n    ),\n    grant_controls=azuread.ConditionalAccessPolicyGrantControlsArgs(\n        operator=\"OR\",\n        built_in_controls=[\"block\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var example = new AzureAD.ConditionalAccessPolicy(\"example\", new()\n    {\n        DisplayName = \"example policy\",\n        State = \"disabled\",\n        Conditions = new AzureAD.Inputs.ConditionalAccessPolicyConditionsArgs\n        {\n            ClientAppTypes = new[]\n            {\n                \"all\",\n            },\n            Applications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsApplicationsArgs\n            {\n                IncludedApplications = new[]\n                {\n                    \"All\",\n                },\n            },\n            ClientApplications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsClientApplicationsArgs\n            {\n                IncludedServicePrincipals = new[]\n                {\n                    \"ServicePrincipalsInMyTenant\",\n                },\n                ExcludedServicePrincipals = new[]\n                {\n                    current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n                },\n            },\n            Users = new AzureAD.Inputs.ConditionalAccessPolicyConditionsUsersArgs\n            {\n                IncludedUsers = new[]\n                {\n                    \"None\",\n                },\n            },\n        },\n        GrantControls = new AzureAD.Inputs.ConditionalAccessPolicyGrantControlsArgs\n        {\n            Operator = \"OR\",\n            BuiltInControls = new[]\n            {\n                \"block\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewConditionalAccessPolicy(ctx, \"example\", \u0026azuread.ConditionalAccessPolicyArgs{\n\t\t\tDisplayName: pulumi.String(\"example policy\"),\n\t\t\tState:       pulumi.String(\"disabled\"),\n\t\t\tConditions: \u0026azuread.ConditionalAccessPolicyConditionsArgs{\n\t\t\t\tClientAppTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"all\"),\n\t\t\t\t},\n\t\t\t\tApplications: \u0026azuread.ConditionalAccessPolicyConditionsApplicationsArgs{\n\t\t\t\t\tIncludedApplications: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"All\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tClientApplications: \u0026azuread.ConditionalAccessPolicyConditionsClientApplicationsArgs{\n\t\t\t\t\tIncludedServicePrincipals: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ServicePrincipalsInMyTenant\"),\n\t\t\t\t\t},\n\t\t\t\t\tExcludedServicePrincipals: pulumi.StringArray{\n\t\t\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tUsers: \u0026azuread.ConditionalAccessPolicyConditionsUsersArgs{\n\t\t\t\t\tIncludedUsers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"None\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tGrantControls: \u0026azuread.ConditionalAccessPolicyGrantControlsArgs{\n\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t\tBuiltInControls: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"block\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ConditionalAccessPolicy;\nimport com.pulumi.azuread.ConditionalAccessPolicyArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsApplicationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsClientApplicationsArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsUsersArgs;\nimport com.pulumi.azuread.inputs.ConditionalAccessPolicyGrantControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var example = new ConditionalAccessPolicy(\"example\", ConditionalAccessPolicyArgs.builder()        \n            .displayName(\"example policy\")\n            .state(\"disabled\")\n            .conditions(ConditionalAccessPolicyConditionsArgs.builder()\n                .clientAppTypes(\"all\")\n                .applications(ConditionalAccessPolicyConditionsApplicationsArgs.builder()\n                    .includedApplications(\"All\")\n                    .build())\n                .clientApplications(ConditionalAccessPolicyConditionsClientApplicationsArgs.builder()\n                    .includedServicePrincipals(\"ServicePrincipalsInMyTenant\")\n                    .excludedServicePrincipals(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n                    .build())\n                .users(ConditionalAccessPolicyConditionsUsersArgs.builder()\n                    .includedUsers(\"None\")\n                    .build())\n                .build())\n            .grantControls(ConditionalAccessPolicyGrantControlsArgs.builder()\n                .operator(\"OR\")\n                .builtInControls(\"block\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:ConditionalAccessPolicy\n    properties:\n      displayName: example policy\n      state: disabled\n      conditions:\n        clientAppTypes:\n          - all\n        applications:\n          includedApplications:\n            - All\n        clientApplications:\n          includedServicePrincipals:\n            - ServicePrincipalsInMyTenant\n          excludedServicePrincipals:\n            - ${current.objectId}\n        users:\n          includedUsers:\n            - None\n      grantControls:\n        operator: OR\n        builtInControls:\n          - block\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConditional Access Policies can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy my_location 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "conditions": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditions:ConditionalAccessPolicyConditions",
                    "description": "A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this Conditional Access Policy.\n"
                },
                "grantControls": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyGrantControls:ConditionalAccessPolicyGrantControls",
                    "description": "A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.\n"
                },
                "sessionControls": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicySessionControls:ConditionalAccessPolicySessionControls",
                    "description": "A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.\n\n\u003e Note: At least one of `grant_controls` and/or `session_controls` blocks must be specified.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`\n"
                }
            },
            "required": [
                "conditions",
                "displayName",
                "state"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditions:ConditionalAccessPolicyConditions",
                    "description": "A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this Conditional Access Policy.\n"
                },
                "grantControls": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicyGrantControls:ConditionalAccessPolicyGrantControls",
                    "description": "A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.\n"
                },
                "sessionControls": {
                    "$ref": "#/types/azuread:index/ConditionalAccessPolicySessionControls:ConditionalAccessPolicySessionControls",
                    "description": "A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.\n\n\u003e Note: At least one of `grant_controls` and/or `session_controls` blocks must be specified.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`\n"
                }
            },
            "requiredInputs": [
                "conditions",
                "displayName",
                "state"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConditionalAccessPolicy resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyConditions:ConditionalAccessPolicyConditions",
                        "description": "A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The friendly name for this Conditional Access Policy.\n"
                    },
                    "grantControls": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicyGrantControls:ConditionalAccessPolicyGrantControls",
                        "description": "A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.\n"
                    },
                    "sessionControls": {
                        "$ref": "#/types/azuread:index/ConditionalAccessPolicySessionControls:ConditionalAccessPolicySessionControls",
                        "description": "A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.\n\n\u003e Note: At least one of `grant_controls` and/or `session_controls` blocks must be specified.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/customDirectoryRole:CustomDirectoryRole": {
            "description": "Manages a Custom Directory Role within Azure Active Directory.\n\nThis resource is for managing custom directory roles. For management of built-in roles, see the azuread.DirectoryRole resource.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.CustomDirectoryRole(\"example\", {\n    description: \"Allows reading applications and updating groups\",\n    displayName: \"My Custom Role\",\n    enabled: true,\n    permissions: [\n        {\n            allowedResourceActions: [\n                \"microsoft.directory/applications/basic/update\",\n                \"microsoft.directory/applications/create\",\n                \"microsoft.directory/applications/standard/read\",\n            ],\n        },\n        {\n            allowedResourceActions: [\n                \"microsoft.directory/groups/allProperties/read\",\n                \"microsoft.directory/groups/allProperties/read\",\n                \"microsoft.directory/groups/basic/update\",\n                \"microsoft.directory/groups/create\",\n                \"microsoft.directory/groups/delete\",\n            ],\n        },\n    ],\n    version: \"1.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.CustomDirectoryRole(\"example\",\n    description=\"Allows reading applications and updating groups\",\n    display_name=\"My Custom Role\",\n    enabled=True,\n    permissions=[\n        azuread.CustomDirectoryRolePermissionArgs(\n            allowed_resource_actions=[\n                \"microsoft.directory/applications/basic/update\",\n                \"microsoft.directory/applications/create\",\n                \"microsoft.directory/applications/standard/read\",\n            ],\n        ),\n        azuread.CustomDirectoryRolePermissionArgs(\n            allowed_resource_actions=[\n                \"microsoft.directory/groups/allProperties/read\",\n                \"microsoft.directory/groups/allProperties/read\",\n                \"microsoft.directory/groups/basic/update\",\n                \"microsoft.directory/groups/create\",\n                \"microsoft.directory/groups/delete\",\n            ],\n        ),\n    ],\n    version=\"1.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.CustomDirectoryRole(\"example\", new()\n    {\n        Description = \"Allows reading applications and updating groups\",\n        DisplayName = \"My Custom Role\",\n        Enabled = true,\n        Permissions = new[]\n        {\n            new AzureAD.Inputs.CustomDirectoryRolePermissionArgs\n            {\n                AllowedResourceActions = new[]\n                {\n                    \"microsoft.directory/applications/basic/update\",\n                    \"microsoft.directory/applications/create\",\n                    \"microsoft.directory/applications/standard/read\",\n                },\n            },\n            new AzureAD.Inputs.CustomDirectoryRolePermissionArgs\n            {\n                AllowedResourceActions = new[]\n                {\n                    \"microsoft.directory/groups/allProperties/read\",\n                    \"microsoft.directory/groups/allProperties/read\",\n                    \"microsoft.directory/groups/basic/update\",\n                    \"microsoft.directory/groups/create\",\n                    \"microsoft.directory/groups/delete\",\n                },\n            },\n        },\n        Version = \"1.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewCustomDirectoryRole(ctx, \"example\", \u0026azuread.CustomDirectoryRoleArgs{\n\t\t\tDescription: pulumi.String(\"Allows reading applications and updating groups\"),\n\t\t\tDisplayName: pulumi.String(\"My Custom Role\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tPermissions: azuread.CustomDirectoryRolePermissionArray{\n\t\t\t\t\u0026azuread.CustomDirectoryRolePermissionArgs{\n\t\t\t\t\tAllowedResourceActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/applications/basic/update\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/applications/create\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/applications/standard/read\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026azuread.CustomDirectoryRolePermissionArgs{\n\t\t\t\t\tAllowedResourceActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/groups/allProperties/read\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/groups/allProperties/read\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/groups/basic/update\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/groups/create\"),\n\t\t\t\t\t\tpulumi.String(\"microsoft.directory/groups/delete\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersion: pulumi.String(\"1.0\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.CustomDirectoryRole;\nimport com.pulumi.azuread.CustomDirectoryRoleArgs;\nimport com.pulumi.azuread.inputs.CustomDirectoryRolePermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomDirectoryRole(\"example\", CustomDirectoryRoleArgs.builder()        \n            .description(\"Allows reading applications and updating groups\")\n            .displayName(\"My Custom Role\")\n            .enabled(true)\n            .permissions(            \n                CustomDirectoryRolePermissionArgs.builder()\n                    .allowedResourceActions(                    \n                        \"microsoft.directory/applications/basic/update\",\n                        \"microsoft.directory/applications/create\",\n                        \"microsoft.directory/applications/standard/read\")\n                    .build(),\n                CustomDirectoryRolePermissionArgs.builder()\n                    .allowedResourceActions(                    \n                        \"microsoft.directory/groups/allProperties/read\",\n                        \"microsoft.directory/groups/allProperties/read\",\n                        \"microsoft.directory/groups/basic/update\",\n                        \"microsoft.directory/groups/create\",\n                        \"microsoft.directory/groups/delete\")\n                    .build())\n            .version(\"1.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:CustomDirectoryRole\n    properties:\n      description: Allows reading applications and updating groups\n      displayName: My Custom Role\n      enabled: true\n      permissions:\n        - allowedResourceActions:\n            - microsoft.directory/applications/basic/update\n            - microsoft.directory/applications/create\n            - microsoft.directory/applications/standard/read\n        - allowedResourceActions:\n            - microsoft.directory/groups/allProperties/read\n            - microsoft.directory/groups/allProperties/read\n            - microsoft.directory/groups/basic/update\n            - microsoft.directory/groups/create\n            - microsoft.directory/groups/delete\n      version: '1.0'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the custom directory role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the custom directory role.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the role is enabled for assignment.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the custom directory role.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/CustomDirectoryRolePermission:CustomDirectoryRolePermission"
                    },
                    "description": "A collection of `permissions` blocks as documented below.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the role definition. This can be any arbitrary string between 1-128 characters.\n"
                }
            },
            "required": [
                "displayName",
                "enabled",
                "objectId",
                "permissions",
                "templateId",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the custom directory role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the custom directory role.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether the role is enabled for assignment.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/CustomDirectoryRolePermission:CustomDirectoryRolePermission"
                    },
                    "description": "A collection of `permissions` blocks as documented below.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version of the role definition. This can be any arbitrary string between 1-128 characters.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "enabled",
                "permissions",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDirectoryRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the custom directory role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the custom directory role.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the role is enabled for assignment.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the custom directory role.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/CustomDirectoryRolePermission:CustomDirectoryRolePermission"
                        },
                        "description": "A collection of `permissions` blocks as documented below.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the role definition. This can be any arbitrary string between 1-128 characters.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/directoryRole:DirectoryRole": {
            "description": "Manages a Directory Role within Azure Active Directory. Directory Roles are also known as Administrator Roles.\n\nDirectory Roles are built-in to Azure Active Directory and are immutable. However, by default they are not activated in a tenant (except for the Global Administrator role). This resource ensures a directory role is activated from its associated role template, and exports the object ID of the role, so that role assignments can be made for it.\n\nOnce activated, directory roles cannot be deactivated and so this resource does not perform any actions on destroy.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Activate a directory role by its template ID*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.DirectoryRole(\"example\", {templateId: \"00000000-0000-0000-0000-000000000000\"});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.DirectoryRole(\"example\", template_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.DirectoryRole(\"example\", new()\n    {\n        TemplateId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewDirectoryRole(ctx, \"example\", \u0026azuread.DirectoryRoleArgs{\n\t\t\tTemplateId: pulumi.String(\"00000000-0000-0000-0000-000000000000\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.DirectoryRole;\nimport com.pulumi.azuread.DirectoryRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DirectoryRole(\"example\", DirectoryRoleArgs.builder()        \n            .templateId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:DirectoryRole\n    properties:\n      templateId: 00000000-0000-0000-0000-000000000000\n```\n\n*Activate a directory role by display name*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.DirectoryRole(\"example\", {displayName: \"Printer administrator\"});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.DirectoryRole(\"example\", display_name=\"Printer administrator\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.DirectoryRole(\"example\", new()\n    {\n        DisplayName = \"Printer administrator\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewDirectoryRole(ctx, \"example\", \u0026azuread.DirectoryRoleArgs{\n\t\t\tDisplayName: pulumi.String(\"Printer administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.DirectoryRole;\nimport com.pulumi.azuread.DirectoryRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DirectoryRole(\"example\", DirectoryRoleArgs.builder()        \n            .displayName(\"Printer administrator\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:DirectoryRole\n    properties:\n      displayName: Printer administrator\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the directory role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the directory role to activate. Changing this forces a new resource to be created.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the directory role.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "The object ID of the role template from which to activate the directory role. Changing this forces a new resource to be created.\n\n\u003e Either `display_name` or `template_id` must be specified.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "objectId",
                "templateId"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the directory role to activate. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "templateId": {
                    "type": "string",
                    "description": "The object ID of the role template from which to activate the directory role. Changing this forces a new resource to be created.\n\n\u003e Either `display_name` or `template_id` must be specified.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the directory role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the directory role to activate. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the directory role.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The object ID of the role template from which to activate the directory role. Changing this forces a new resource to be created.\n\n\u003e Either `display_name` or `template_id` must be specified.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/directoryRoleAssignment:DirectoryRoleAssignment": {
            "description": "Manages a single directory role assignment within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n\n## Import\n\nDirectory role assignments can be imported using the ID of the assignment, e.g.\n\n```sh\n $ pulumi import azuread:index/directoryRoleAssignment:DirectoryRoleAssignment example ePROZI_iKE653D_d6aoLHyr-lKgHI8ZGiIdz8CLVcng-1\n```\n\n ",
            "properties": {
                "appScopeId": {
                    "type": "string",
                    "description": "Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n"
                },
                "appScopeObjectId": {
                    "type": "string",
                    "description": "Identifier of the app-specific scope when the assignment scope is app-specific\n",
                    "deprecationMessage": "`app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider"
                },
                "directoryScopeId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the assignment. Cannot be used with `app_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n"
                },
                "directoryScopeObjectId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the assignment\n"
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "appScopeId",
                "appScopeObjectId",
                "directoryScopeId",
                "directoryScopeObjectId",
                "principalObjectId",
                "roleId"
            ],
            "inputProperties": {
                "appScopeId": {
                    "type": "string",
                    "description": "Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "appScopeObjectId": {
                    "type": "string",
                    "description": "Identifier of the app-specific scope when the assignment scope is app-specific\n",
                    "deprecationMessage": "`app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider",
                    "willReplaceOnChanges": true
                },
                "directoryScopeId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the assignment. Cannot be used with `app_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "directoryScopeObjectId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the assignment\n",
                    "willReplaceOnChanges": true
                },
                "principalObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "string",
                    "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "principalObjectId",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryRoleAssignment resources.\n",
                "properties": {
                    "appScopeId": {
                        "type": "string",
                        "description": "Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "appScopeObjectId": {
                        "type": "string",
                        "description": "Identifier of the app-specific scope when the assignment scope is app-specific\n",
                        "deprecationMessage": "`app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider",
                        "willReplaceOnChanges": true
                    },
                    "directoryScopeId": {
                        "type": "string",
                        "description": "Identifier of the directory object representing the scope of the assignment. Cannot be used with `app_scope_id`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0\u0026tabs=http) for example usage. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "directoryScopeObjectId": {
                        "type": "string",
                        "description": "Identifier of the directory object representing the scope of the assignment\n",
                        "willReplaceOnChanges": true
                    },
                    "principalObjectId": {
                        "type": "string",
                        "description": "The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest": {
            "description": "Manages a single directory role eligibility schedule request within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nThe calling principal requires one of the following application roles: `RoleEligibilitySchedule.ReadWrite.Directory` or `RoleManagement.ReadWrite.Directory`.\n\nThe calling principal requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleDirectoryRole = new azuread.DirectoryRole(\"exampleDirectoryRole\", {displayName: \"Application Administrator\"});\nconst exampleDirectoryRoleEligibilityScheduleRequest = new azuread.DirectoryRoleEligibilityScheduleRequest(\"exampleDirectoryRoleEligibilityScheduleRequest\", {\n    roleDefinitionId: exampleDirectoryRole.templateId,\n    principalId: azuread_user.example.object_id,\n    directoryScopeId: \"/\",\n    justification: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_directory_role = azuread.DirectoryRole(\"exampleDirectoryRole\", display_name=\"Application Administrator\")\nexample_directory_role_eligibility_schedule_request = azuread.DirectoryRoleEligibilityScheduleRequest(\"exampleDirectoryRoleEligibilityScheduleRequest\",\n    role_definition_id=example_directory_role.template_id,\n    principal_id=azuread_user[\"example\"][\"object_id\"],\n    directory_scope_id=\"/\",\n    justification=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleDirectoryRole = new AzureAD.DirectoryRole(\"exampleDirectoryRole\", new()\n    {\n        DisplayName = \"Application Administrator\",\n    });\n\n    var exampleDirectoryRoleEligibilityScheduleRequest = new AzureAD.DirectoryRoleEligibilityScheduleRequest(\"exampleDirectoryRoleEligibilityScheduleRequest\", new()\n    {\n        RoleDefinitionId = exampleDirectoryRole.TemplateId,\n        PrincipalId = azuread_user.Example.Object_id,\n        DirectoryScopeId = \"/\",\n        Justification = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDirectoryRole, err := azuread.NewDirectoryRole(ctx, \"exampleDirectoryRole\", \u0026azuread.DirectoryRoleArgs{\n\t\t\tDisplayName: pulumi.String(\"Application Administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewDirectoryRoleEligibilityScheduleRequest(ctx, \"exampleDirectoryRoleEligibilityScheduleRequest\", \u0026azuread.DirectoryRoleEligibilityScheduleRequestArgs{\n\t\t\tRoleDefinitionId: exampleDirectoryRole.TemplateId,\n\t\t\tPrincipalId:      pulumi.Any(azuread_user.Example.Object_id),\n\t\t\tDirectoryScopeId: pulumi.String(\"/\"),\n\t\t\tJustification:    pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.DirectoryRole;\nimport com.pulumi.azuread.DirectoryRoleArgs;\nimport com.pulumi.azuread.DirectoryRoleEligibilityScheduleRequest;\nimport com.pulumi.azuread.DirectoryRoleEligibilityScheduleRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleDirectoryRole = new DirectoryRole(\"exampleDirectoryRole\", DirectoryRoleArgs.builder()        \n            .displayName(\"Application Administrator\")\n            .build());\n\n        var exampleDirectoryRoleEligibilityScheduleRequest = new DirectoryRoleEligibilityScheduleRequest(\"exampleDirectoryRoleEligibilityScheduleRequest\", DirectoryRoleEligibilityScheduleRequestArgs.builder()        \n            .roleDefinitionId(exampleDirectoryRole.templateId())\n            .principalId(azuread_user.example().object_id())\n            .directoryScopeId(\"/\")\n            .justification(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDirectoryRole:\n    type: azuread:DirectoryRole\n    properties:\n      displayName: Application Administrator\n  exampleDirectoryRoleEligibilityScheduleRequest:\n    type: azuread:DirectoryRoleEligibilityScheduleRequest\n    properties:\n      roleDefinitionId: ${exampleDirectoryRole.templateId}\n      principalId: ${azuread_user.example.object_id}\n      directoryScopeId: /\n      justification: Example\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n```\n\n\u003e Note the use of the `template_id` attribute when referencing built-in roles.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDirectory role eligibility schedule requests can be imported using the ID of the assignment, e.g.\n\n```sh\n $ pulumi import azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest example 822ec710-4c9f-4f71-a27a-451759cc7522\n```\n\n ",
            "properties": {
                "directoryScopeId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.\n"
                },
                "justification": {
                    "type": "string",
                    "description": "Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.\n"
                },
                "principalId": {
                    "type": "string",
                    "description": "The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.\n"
                },
                "roleDefinitionId": {
                    "type": "string",
                    "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "directoryScopeId",
                "justification",
                "principalId",
                "roleDefinitionId"
            ],
            "inputProperties": {
                "directoryScopeId": {
                    "type": "string",
                    "description": "Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "justification": {
                    "type": "string",
                    "description": "Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "principalId": {
                    "type": "string",
                    "description": "The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleDefinitionId": {
                    "type": "string",
                    "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "directoryScopeId",
                "justification",
                "principalId",
                "roleDefinitionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryRoleEligibilityScheduleRequest resources.\n",
                "properties": {
                    "directoryScopeId": {
                        "type": "string",
                        "description": "Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "justification": {
                        "type": "string",
                        "description": "Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "principalId": {
                        "type": "string",
                        "description": "The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleDefinitionId": {
                        "type": "string",
                        "description": "The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/directoryRoleMember:DirectoryRoleMember": {
            "description": "Manages a single directory role membership (assignment) within Azure Active Directory.\n\n\u003e **Deprecation Warning:** This resource has been superseded by the azuread.DirectoryRoleAssignment resource and will be removed in version 3.0 of the AzureAD provider\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleDirectoryRole = new azuread.DirectoryRole(\"exampleDirectoryRole\", {displayName: \"Security administrator\"});\nconst exampleDirectoryRoleMember = new azuread.DirectoryRoleMember(\"exampleDirectoryRoleMember\", {\n    roleObjectId: exampleDirectoryRole.objectId,\n    memberObjectId: exampleUser.then(exampleUser =\u003e exampleUser.objectId),\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_directory_role = azuread.DirectoryRole(\"exampleDirectoryRole\", display_name=\"Security administrator\")\nexample_directory_role_member = azuread.DirectoryRoleMember(\"exampleDirectoryRoleMember\",\n    role_object_id=example_directory_role.object_id,\n    member_object_id=example_user.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleDirectoryRole = new AzureAD.DirectoryRole(\"exampleDirectoryRole\", new()\n    {\n        DisplayName = \"Security administrator\",\n    });\n\n    var exampleDirectoryRoleMember = new AzureAD.DirectoryRoleMember(\"exampleDirectoryRoleMember\", new()\n    {\n        RoleObjectId = exampleDirectoryRole.ObjectId,\n        MemberObjectId = exampleUser.Apply(getUserResult =\u003e getUserResult.ObjectId),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDirectoryRole, err := azuread.NewDirectoryRole(ctx, \"exampleDirectoryRole\", \u0026azuread.DirectoryRoleArgs{\n\t\t\tDisplayName: pulumi.String(\"Security administrator\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewDirectoryRoleMember(ctx, \"exampleDirectoryRoleMember\", \u0026azuread.DirectoryRoleMemberArgs{\n\t\t\tRoleObjectId:   exampleDirectoryRole.ObjectId,\n\t\t\tMemberObjectId: *pulumi.String(exampleUser.ObjectId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.DirectoryRole;\nimport com.pulumi.azuread.DirectoryRoleArgs;\nimport com.pulumi.azuread.DirectoryRoleMember;\nimport com.pulumi.azuread.DirectoryRoleMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleDirectoryRole = new DirectoryRole(\"exampleDirectoryRole\", DirectoryRoleArgs.builder()        \n            .displayName(\"Security administrator\")\n            .build());\n\n        var exampleDirectoryRoleMember = new DirectoryRoleMember(\"exampleDirectoryRoleMember\", DirectoryRoleMemberArgs.builder()        \n            .roleObjectId(exampleDirectoryRole.objectId())\n            .memberObjectId(exampleUser.applyValue(getUserResult -\u003e getUserResult.objectId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDirectoryRole:\n    type: azuread:DirectoryRole\n    properties:\n      displayName: Security administrator\n  exampleDirectoryRoleMember:\n    type: azuread:DirectoryRoleMember\n    properties:\n      roleObjectId: ${exampleDirectoryRole.objectId}\n      memberObjectId: ${exampleUser.objectId}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDirectory role members can be imported using the object ID of the role and the object ID of the member, e.g.\n\n```sh\n $ pulumi import azuread:index/directoryRoleMember:DirectoryRoleMember example 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Directory Role Object ID and the target Member Object ID in the format `{RoleObjectID}/member/{MemberObjectID}`. ",
            "properties": {
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal you want to add as a member to the directory role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                },
                "roleObjectId": {
                    "type": "string",
                    "description": "The object ID of the directory role you want to add the member to. Changing this forces a new resource to be created.\n"
                }
            },
            "inputProperties": {
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal you want to add as a member to the directory role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "roleObjectId": {
                    "type": "string",
                    "description": "The object ID of the directory role you want to add the member to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryRoleMember resources.\n",
                "properties": {
                    "memberObjectId": {
                        "type": "string",
                        "description": "The object ID of the principal you want to add as a member to the directory role. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleObjectId": {
                        "type": "string",
                        "description": "The object ID of the directory role you want to add the member to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/group:Group": {
            "description": "Manages a group within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Group.ReadWrite.All` or `Directory.ReadWrite.All`.\n\nAlternatively, if the authenticated service principal is also an owner of the group being managed, this resource can use the application role: `Group.Create`.\n\nIf using the `assignable_to_role` property, this resource additionally requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`\n\nIf specifying owners for a group, which are user principals, this resource additionally requires one of the following application roles: `User.Read.All`, `User.ReadWrite.All`, `Directory.Read.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Groups Administrator`, `User Administrator` or `Global Administrator`\n\nWhen creating this resource in administrative units exclusively, the role `Groups Administrator` is required to be scoped on any administrative unit used.\n\nThe `external_senders_allowed`, `auto_subscribe_new_members`, `hide_from_address_lists` and `hide_from_outlook_clients` properties can only be configured when authenticating as a user and cannot be configured when authenticating as a service principal. Additionally, the user being used for authentication must be a Member of the tenant where the group is being managed and _not_ a Guest. This is a known API issue; please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst example = new azuread.Group(\"example\", {\n    displayName: \"example\",\n    owners: [current.then(current =\u003e current.objectId)],\n    securityEnabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample = azuread.Group(\"example\",\n    display_name=\"example\",\n    owners=[current.object_id],\n    security_enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var example = new AzureAD.Group(\"example\", new()\n    {\n        DisplayName = \"example\",\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n        SecurityEnabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroup(ctx, \"example\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .displayName(\"example\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .securityEnabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Group\n    properties:\n      displayName: example\n      owners:\n        - ${current.objectId}\n      securityEnabled: true\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n\n*Microsoft 365 group*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst groupOwner = new azuread.User(\"groupOwner\", {\n    userPrincipalName: \"example-group-owner@hashicorp.com\",\n    displayName: \"Group Owner\",\n    mailNickname: \"example-group-owner\",\n    password: \"SecretP@sswd99!\",\n});\nconst example = new azuread.Group(\"example\", {\n    displayName: \"example\",\n    mailEnabled: true,\n    mailNickname: \"ExampleGroup\",\n    securityEnabled: true,\n    types: [\"Unified\"],\n    owners: [\n        current.then(current =\u003e current.objectId),\n        groupOwner.objectId,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\ngroup_owner = azuread.User(\"groupOwner\",\n    user_principal_name=\"example-group-owner@hashicorp.com\",\n    display_name=\"Group Owner\",\n    mail_nickname=\"example-group-owner\",\n    password=\"SecretP@sswd99!\")\nexample = azuread.Group(\"example\",\n    display_name=\"example\",\n    mail_enabled=True,\n    mail_nickname=\"ExampleGroup\",\n    security_enabled=True,\n    types=[\"Unified\"],\n    owners=[\n        current.object_id,\n        group_owner.object_id,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var groupOwner = new AzureAD.User(\"groupOwner\", new()\n    {\n        UserPrincipalName = \"example-group-owner@hashicorp.com\",\n        DisplayName = \"Group Owner\",\n        MailNickname = \"example-group-owner\",\n        Password = \"SecretP@sswd99!\",\n    });\n\n    var example = new AzureAD.Group(\"example\", new()\n    {\n        DisplayName = \"example\",\n        MailEnabled = true,\n        MailNickname = \"ExampleGroup\",\n        SecurityEnabled = true,\n        Types = new[]\n        {\n            \"Unified\",\n        },\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n            groupOwner.ObjectId,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgroupOwner, err := azuread.NewUser(ctx, \"groupOwner\", \u0026azuread.UserArgs{\n\t\t\tUserPrincipalName: pulumi.String(\"example-group-owner@hashicorp.com\"),\n\t\t\tDisplayName:       pulumi.String(\"Group Owner\"),\n\t\t\tMailNickname:      pulumi.String(\"example-group-owner\"),\n\t\t\tPassword:          pulumi.String(\"SecretP@sswd99!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroup(ctx, \"example\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"example\"),\n\t\t\tMailEnabled:     pulumi.Bool(true),\n\t\t\tMailNickname:    pulumi.String(\"ExampleGroup\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t\tTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Unified\"),\n\t\t\t},\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t\tgroupOwner.ObjectId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var groupOwner = new User(\"groupOwner\", UserArgs.builder()        \n            .userPrincipalName(\"example-group-owner@hashicorp.com\")\n            .displayName(\"Group Owner\")\n            .mailNickname(\"example-group-owner\")\n            .password(\"SecretP@sswd99!\")\n            .build());\n\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .displayName(\"example\")\n            .mailEnabled(true)\n            .mailNickname(\"ExampleGroup\")\n            .securityEnabled(true)\n            .types(\"Unified\")\n            .owners(            \n                current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()),\n                groupOwner.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  groupOwner:\n    type: azuread:User\n    properties:\n      userPrincipalName: example-group-owner@hashicorp.com\n      displayName: Group Owner\n      mailNickname: example-group-owner\n      password: SecretP@sswd99!\n  example:\n    type: azuread:Group\n    properties:\n      displayName: example\n      mailEnabled: true\n      mailNickname: ExampleGroup\n      securityEnabled: true\n      types:\n        - Unified\n      owners:\n        - ${current.objectId}\n        - ${groupOwner.objectId}\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n\n*Group with members*\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .displayName(\"J Doe\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .password(\"notSecure123\")\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"MyGroup\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .securityEnabled(true)\n            .members(exampleUser.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUser:\n    type: azuread:User\n    properties:\n      displayName: J Doe\n      owners:\n        - ${current.objectId}\n      password: notSecure123\n      userPrincipalName: jdoe@hashicorp.com\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: MyGroup\n      owners:\n        - ${current.objectId}\n      securityEnabled: true\n      members:\n        - ${exampleUser.objectId}\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n\n*Group with dynamic membership*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst example = new azuread.Group(\"example\", {\n    displayName: \"MyGroup\",\n    owners: [current.then(current =\u003e current.objectId)],\n    securityEnabled: true,\n    types: [\"DynamicMembership\"],\n    dynamicMembership: {\n        enabled: true,\n        rule: \"user.department -eq \\\"Sales\\\"\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample = azuread.Group(\"example\",\n    display_name=\"MyGroup\",\n    owners=[current.object_id],\n    security_enabled=True,\n    types=[\"DynamicMembership\"],\n    dynamic_membership=azuread.GroupDynamicMembershipArgs(\n        enabled=True,\n        rule=\"user.department -eq \\\"Sales\\\"\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var example = new AzureAD.Group(\"example\", new()\n    {\n        DisplayName = \"MyGroup\",\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n        SecurityEnabled = true,\n        Types = new[]\n        {\n            \"DynamicMembership\",\n        },\n        DynamicMembership = new AzureAD.Inputs.GroupDynamicMembershipArgs\n        {\n            Enabled = true,\n            Rule = \"user.department -eq \\\"Sales\\\"\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroup(ctx, \"example\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName: pulumi.String(\"MyGroup\"),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t\tTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"DynamicMembership\"),\n\t\t\t},\n\t\t\tDynamicMembership: \u0026azuread.GroupDynamicMembershipArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tRule:    pulumi.String(\"user.department -eq \\\"Sales\\\"\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.inputs.GroupDynamicMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var example = new Group(\"example\", GroupArgs.builder()        \n            .displayName(\"MyGroup\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .securityEnabled(true)\n            .types(\"DynamicMembership\")\n            .dynamicMembership(GroupDynamicMembershipArgs.builder()\n                .enabled(true)\n                .rule(\"user.department -eq \\\"Sales\\\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Group\n    properties:\n      displayName: MyGroup\n      owners:\n        - ${current.objectId}\n      securityEnabled: true\n      types:\n        - DynamicMembership\n      dynamicMembership:\n        enabled: true\n        rule: user.department -eq \"Sales\"\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGroups can be imported using their object ID, e.g.\n\n```sh\n $ pulumi import azuread:index/group:Group my_group 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "administrativeUnitIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.\n\n!\u003e **Warning** Do not use the `administrative_unit_ids` property at the same time as the azuread.AdministrativeUnitMember resource, _for the same group_. Doing so will cause a conflict and administrative unit members will be removed.\n"
                },
                "assignableToRole": {
                    "type": "boolean",
                    "description": "Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.\n"
                },
                "autoSubscribeNewMembers": {
                    "type": "boolean",
                    "description": "Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `auto_subscribe_new_members` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "behaviors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the group.\n"
                },
                "dynamicMembership": {
                    "$ref": "#/types/azuread:index/GroupDynamicMembership:GroupDynamicMembership",
                    "description": "A `dynamic_membership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.\n"
                },
                "externalSendersAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `external_senders_allowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "hideFromAddressLists": {
                    "type": "boolean",
                    "description": "Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_address_lists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "hideFromOutlookClients": {
                    "type": "boolean",
                    "description": "Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_outlook_clients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The SMTP address for the group.\n"
                },
                "mailEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals. Cannot be used with the `dynamic_membership` block.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.GroupMember resource for the same group. Doing so will cause a conflict and group members will be removed.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the group.\n"
                },
                "onpremisesDomainName": {
                    "type": "string",
                    "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesGroupType": {
                    "type": "string",
                    "description": "The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.\n"
                },
                "onpremisesNetbiosName": {
                    "type": "string",
                    "description": "The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesSamAccountName": {
                    "type": "string",
                    "description": "The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesSecurityIdentifier": {
                    "type": "string",
                    "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of owners who own this group. Supported object types are Users or Service Principals\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "The preferred language for a Microsoft 365 group, in ISO 639-1 notation.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.\n"
                },
                "provisioningOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.\n"
                },
                "proxyAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses for the group that direct to the same group mailbox.\n"
                },
                "securityEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or `mail_enabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.\n"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mail_enabled` is true. Changing this forces a new resource to be created.\n\n\u003e **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.\n"
                },
                "visibility": {
                    "type": "string",
                    "description": "The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.\n\n\u003e **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing groups if you want to avoid name collisions.\n"
                },
                "writebackEnabled": {
                    "type": "boolean",
                    "description": "Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.\n"
                }
            },
            "required": [
                "autoSubscribeNewMembers",
                "displayName",
                "externalSendersAllowed",
                "hideFromAddressLists",
                "hideFromOutlookClients",
                "mail",
                "mailNickname",
                "members",
                "objectId",
                "onpremisesDomainName",
                "onpremisesGroupType",
                "onpremisesNetbiosName",
                "onpremisesSamAccountName",
                "onpremisesSecurityIdentifier",
                "onpremisesSyncEnabled",
                "owners",
                "preferredLanguage",
                "proxyAddresses",
                "visibility"
            ],
            "inputProperties": {
                "administrativeUnitIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.\n\n!\u003e **Warning** Do not use the `administrative_unit_ids` property at the same time as the azuread.AdministrativeUnitMember resource, _for the same group_. Doing so will cause a conflict and administrative unit members will be removed.\n"
                },
                "assignableToRole": {
                    "type": "boolean",
                    "description": "Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "autoSubscribeNewMembers": {
                    "type": "boolean",
                    "description": "Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `auto_subscribe_new_members` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "behaviors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description for the group.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the group.\n"
                },
                "dynamicMembership": {
                    "$ref": "#/types/azuread:index/GroupDynamicMembership:GroupDynamicMembership",
                    "description": "A `dynamic_membership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.\n"
                },
                "externalSendersAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `external_senders_allowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "hideFromAddressLists": {
                    "type": "boolean",
                    "description": "Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_address_lists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "hideFromOutlookClients": {
                    "type": "boolean",
                    "description": "Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_outlook_clients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                },
                "mailEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals. Cannot be used with the `dynamic_membership` block.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.GroupMember resource for the same group. Doing so will cause a conflict and group members will be removed.\n"
                },
                "onpremisesGroupType": {
                    "type": "string",
                    "description": "The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of owners who own this group. Supported object types are Users or Service Principals\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.\n"
                },
                "provisioningOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "securityEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or `mail_enabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.\n"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mail_enabled` is true. Changing this forces a new resource to be created.\n\n\u003e **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.\n",
                    "willReplaceOnChanges": true
                },
                "visibility": {
                    "type": "string",
                    "description": "The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.\n\n\u003e **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing groups if you want to avoid name collisions.\n"
                },
                "writebackEnabled": {
                    "type": "boolean",
                    "description": "Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "administrativeUnitIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.\n\n!\u003e **Warning** Do not use the `administrative_unit_ids` property at the same time as the azuread.AdministrativeUnitMember resource, _for the same group_. Doing so will cause a conflict and administrative unit members will be removed.\n"
                    },
                    "assignableToRole": {
                        "type": "boolean",
                        "description": "Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "autoSubscribeNewMembers": {
                        "type": "boolean",
                        "description": "Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `auto_subscribe_new_members` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                    },
                    "behaviors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the group.\n"
                    },
                    "dynamicMembership": {
                        "$ref": "#/types/azuread:index/GroupDynamicMembership:GroupDynamicMembership",
                        "description": "A `dynamic_membership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.\n"
                    },
                    "externalSendersAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `external_senders_allowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                    },
                    "hideFromAddressLists": {
                        "type": "boolean",
                        "description": "Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_address_lists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                    },
                    "hideFromOutlookClients": {
                        "type": "boolean",
                        "description": "Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.\n\n\u003e **Known Permissions Issue** The `hide_from_outlook_clients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The SMTP address for the group.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals. Cannot be used with the `dynamic_membership` block.\n\n!\u003e **Warning** Do not use the `members` property at the same time as the azuread.GroupMember resource for the same group. Doing so will cause a conflict and group members will be removed.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the group.\n"
                    },
                    "onpremisesDomainName": {
                        "type": "string",
                        "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesGroupType": {
                        "type": "string",
                        "description": "The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.\n"
                    },
                    "onpremisesNetbiosName": {
                        "type": "string",
                        "description": "The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSecurityIdentifier": {
                        "type": "string",
                        "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of owners who own this group. Supported object types are Users or Service Principals\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The preferred language for a Microsoft 365 group, in ISO 639-1 notation.\n"
                    },
                    "preventDuplicateNames": {
                        "type": "boolean",
                        "description": "If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.\n"
                    },
                    "provisioningOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "proxyAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses for the group that direct to the same group mailbox.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or `mail_enabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).\n"
                    },
                    "theme": {
                        "type": "string",
                        "description": "The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mail_enabled` is true. Changing this forces a new resource to be created.\n\n\u003e **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.\n",
                        "willReplaceOnChanges": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.\n\n\u003e **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing groups if you want to avoid name collisions.\n"
                    },
                    "writebackEnabled": {
                        "type": "boolean",
                        "description": "Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/groupMember:GroupMember": {
            "description": "Manages a single group membership within Azure Active Directory.\n\n\u003e **Warning** Do not use this resource at the same time as the `members` property of the `azuread.Group` resource for the same group. Doing so will cause a conflict and group members will be removed.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Group.ReadWrite.All` or `Directory.ReadWrite.All`.\n\nHowever, if the authenticated service principal is an owner of the group being managed, an application role is not required.\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Groups Administrator`, `User Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"my_group\",\n    securityEnabled: true,\n});\nconst exampleGroupMember = new azuread.GroupMember(\"exampleGroupMember\", {\n    groupObjectId: exampleGroup.id,\n    memberObjectId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"my_group\",\n    security_enabled=True)\nexample_group_member = azuread.GroupMember(\"exampleGroupMember\",\n    group_object_id=example_group.id,\n    member_object_id=example_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n    var exampleGroup = new AzureAD.Group(\"exampleGroup\", new()\n    {\n        DisplayName = \"my_group\",\n        SecurityEnabled = true,\n    });\n\n    var exampleGroupMember = new AzureAD.GroupMember(\"exampleGroupMember\", new()\n    {\n        GroupObjectId = exampleGroup.Id,\n        MemberObjectId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"jdoe@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName:     pulumi.String(\"my_group\"),\n\t\t\tSecurityEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroupMember(ctx, \"exampleGroupMember\", \u0026azuread.GroupMemberArgs{\n\t\t\tGroupObjectId:  exampleGroup.ID(),\n\t\t\tMemberObjectId: *pulumi.String(exampleUser.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport com.pulumi.azuread.Group;\nimport com.pulumi.azuread.GroupArgs;\nimport com.pulumi.azuread.GroupMember;\nimport com.pulumi.azuread.GroupMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n        var exampleGroup = new Group(\"exampleGroup\", GroupArgs.builder()        \n            .displayName(\"my_group\")\n            .securityEnabled(true)\n            .build());\n\n        var exampleGroupMember = new GroupMember(\"exampleGroupMember\", GroupMemberArgs.builder()        \n            .groupObjectId(exampleGroup.id())\n            .memberObjectId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGroup:\n    type: azuread:Group\n    properties:\n      displayName: my_group\n      securityEnabled: true\n  exampleGroupMember:\n    type: azuread:GroupMember\n    properties:\n      groupObjectId: ${exampleGroup.id}\n      memberObjectId: ${exampleUser.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: jdoe@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGroup members can be imported using the object ID of the group and the object ID of the member, e.g.\n\n```sh\n $ pulumi import azuread:index/groupMember:GroupMember example 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Azure AD Group Object ID and the target Member Object ID in the format `{GroupObjectID}/member/{MemberObjectID}`. ",
            "properties": {
                "groupObjectId": {
                    "type": "string",
                    "description": "The object ID of the group you want to add the member to. Changing this forces a new resource to be created.\n"
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal you want to add as a member to the group. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "groupObjectId",
                "memberObjectId"
            ],
            "inputProperties": {
                "groupObjectId": {
                    "type": "string",
                    "description": "The object ID of the group you want to add the member to. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The object ID of the principal you want to add as a member to the group. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupObjectId",
                "memberObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMember resources.\n",
                "properties": {
                    "groupObjectId": {
                        "type": "string",
                        "description": "The object ID of the group you want to add the member to. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "memberObjectId": {
                        "type": "string",
                        "description": "The object ID of the principal you want to add as a member to the group. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/invitation:Invitation": {
            "description": "Manages an invitation of a guest user within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `User.Invite.All`, `User.ReadWrite.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Guest Inviter`, `User Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Invitation(\"example\", {\n    redirectUrl: \"https://portal.azure.com\",\n    userEmailAddress: \"jdoe@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Invitation(\"example\",\n    redirect_url=\"https://portal.azure.com\",\n    user_email_address=\"jdoe@hashicorp.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.Invitation(\"example\", new()\n    {\n        RedirectUrl = \"https://portal.azure.com\",\n        UserEmailAddress = \"jdoe@hashicorp.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewInvitation(ctx, \"example\", \u0026azuread.InvitationArgs{\n\t\t\tRedirectUrl:      pulumi.String(\"https://portal.azure.com\"),\n\t\t\tUserEmailAddress: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Invitation;\nimport com.pulumi.azuread.InvitationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Invitation(\"example\", InvitationArgs.builder()        \n            .redirectUrl(\"https://portal.azure.com\")\n            .userEmailAddress(\"jdoe@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Invitation\n    properties:\n      redirectUrl: https://portal.azure.com\n      userEmailAddress: jdoe@hashicorp.com\n```\n\n*Invitation with standard message*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Invitation(\"example\", {\n    message: {\n        language: \"en-US\",\n    },\n    redirectUrl: \"https://portal.azure.com\",\n    userEmailAddress: \"jdoe@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Invitation(\"example\",\n    message=azuread.InvitationMessageArgs(\n        language=\"en-US\",\n    ),\n    redirect_url=\"https://portal.azure.com\",\n    user_email_address=\"jdoe@hashicorp.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.Invitation(\"example\", new()\n    {\n        Message = new AzureAD.Inputs.InvitationMessageArgs\n        {\n            Language = \"en-US\",\n        },\n        RedirectUrl = \"https://portal.azure.com\",\n        UserEmailAddress = \"jdoe@hashicorp.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewInvitation(ctx, \"example\", \u0026azuread.InvitationArgs{\n\t\t\tMessage: \u0026azuread.InvitationMessageArgs{\n\t\t\t\tLanguage: pulumi.String(\"en-US\"),\n\t\t\t},\n\t\t\tRedirectUrl:      pulumi.String(\"https://portal.azure.com\"),\n\t\t\tUserEmailAddress: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Invitation;\nimport com.pulumi.azuread.InvitationArgs;\nimport com.pulumi.azuread.inputs.InvitationMessageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Invitation(\"example\", InvitationArgs.builder()        \n            .message(InvitationMessageArgs.builder()\n                .language(\"en-US\")\n                .build())\n            .redirectUrl(\"https://portal.azure.com\")\n            .userEmailAddress(\"jdoe@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Invitation\n    properties:\n      message:\n        language: en-US\n      redirectUrl: https://portal.azure.com\n      userEmailAddress: jdoe@hashicorp.com\n```\n\n*Invitation with custom message body and an additional recipient*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Invitation(\"example\", {\n    message: {\n        additionalRecipients: \"aaliceberg@hashicorp.com\",\n        body: \"Hello there! You are invited to join my Azure tenant!\",\n    },\n    redirectUrl: \"https://portal.azure.com\",\n    userDisplayName: \"Bob Bobson\",\n    userEmailAddress: \"bbobson@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Invitation(\"example\",\n    message=azuread.InvitationMessageArgs(\n        additional_recipients=\"aaliceberg@hashicorp.com\",\n        body=\"Hello there! You are invited to join my Azure tenant!\",\n    ),\n    redirect_url=\"https://portal.azure.com\",\n    user_display_name=\"Bob Bobson\",\n    user_email_address=\"bbobson@hashicorp.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.Invitation(\"example\", new()\n    {\n        Message = new AzureAD.Inputs.InvitationMessageArgs\n        {\n            AdditionalRecipients = \"aaliceberg@hashicorp.com\",\n            Body = \"Hello there! You are invited to join my Azure tenant!\",\n        },\n        RedirectUrl = \"https://portal.azure.com\",\n        UserDisplayName = \"Bob Bobson\",\n        UserEmailAddress = \"bbobson@hashicorp.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewInvitation(ctx, \"example\", \u0026azuread.InvitationArgs{\n\t\t\tMessage: \u0026azuread.InvitationMessageArgs{\n\t\t\t\tAdditionalRecipients: pulumi.String(\"aaliceberg@hashicorp.com\"),\n\t\t\t\tBody:                 pulumi.String(\"Hello there! You are invited to join my Azure tenant!\"),\n\t\t\t},\n\t\t\tRedirectUrl:      pulumi.String(\"https://portal.azure.com\"),\n\t\t\tUserDisplayName:  pulumi.String(\"Bob Bobson\"),\n\t\t\tUserEmailAddress: pulumi.String(\"bbobson@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Invitation;\nimport com.pulumi.azuread.InvitationArgs;\nimport com.pulumi.azuread.inputs.InvitationMessageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Invitation(\"example\", InvitationArgs.builder()        \n            .message(InvitationMessageArgs.builder()\n                .additionalRecipients(\"aaliceberg@hashicorp.com\")\n                .body(\"Hello there! You are invited to join my Azure tenant!\")\n                .build())\n            .redirectUrl(\"https://portal.azure.com\")\n            .userDisplayName(\"Bob Bobson\")\n            .userEmailAddress(\"bbobson@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:Invitation\n    properties:\n      message:\n        additionalRecipients: aaliceberg@hashicorp.com\n        body: Hello there! You are invited to join my Azure tenant!\n      redirectUrl: https://portal.azure.com\n      userDisplayName: Bob Bobson\n      userEmailAddress: bbobson@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "message": {
                    "$ref": "#/types/azuread:index/InvitationMessage:InvitationMessage",
                    "description": "A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.\n"
                },
                "redeemUrl": {
                    "type": "string",
                    "description": "The URL the user can use to redeem their invitation.\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "The URL that the user should be redirected to once the invitation is redeemed.\n"
                },
                "userDisplayName": {
                    "type": "string",
                    "description": "The display name of the user being invited.\n"
                },
                "userEmailAddress": {
                    "type": "string",
                    "description": "The email address of the user being invited.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Object ID of the invited user.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.\n"
                }
            },
            "required": [
                "redeemUrl",
                "redirectUrl",
                "userEmailAddress",
                "userId"
            ],
            "inputProperties": {
                "message": {
                    "$ref": "#/types/azuread:index/InvitationMessage:InvitationMessage",
                    "description": "A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.\n",
                    "willReplaceOnChanges": true
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "The URL that the user should be redirected to once the invitation is redeemed.\n",
                    "willReplaceOnChanges": true
                },
                "userDisplayName": {
                    "type": "string",
                    "description": "The display name of the user being invited.\n",
                    "willReplaceOnChanges": true
                },
                "userEmailAddress": {
                    "type": "string",
                    "description": "The email address of the user being invited.\n",
                    "willReplaceOnChanges": true
                },
                "userType": {
                    "type": "string",
                    "description": "The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "redirectUrl",
                "userEmailAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Invitation resources.\n",
                "properties": {
                    "message": {
                        "$ref": "#/types/azuread:index/InvitationMessage:InvitationMessage",
                        "description": "A `message` block as documented below, which configures the message being sent to the invited user. If this block is omitted, no message will be sent.\n",
                        "willReplaceOnChanges": true
                    },
                    "redeemUrl": {
                        "type": "string",
                        "description": "The URL the user can use to redeem their invitation.\n"
                    },
                    "redirectUrl": {
                        "type": "string",
                        "description": "The URL that the user should be redirected to once the invitation is redeemed.\n",
                        "willReplaceOnChanges": true
                    },
                    "userDisplayName": {
                        "type": "string",
                        "description": "The display name of the user being invited.\n",
                        "willReplaceOnChanges": true
                    },
                    "userEmailAddress": {
                        "type": "string",
                        "description": "The email address of the user being invited.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "Object ID of the invited user.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "The user type of the user being invited. Must be one of `Guest` or `Member`. Only Global Administrators can invite users as members. Defaults to `Guest`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/namedLocation:NamedLocation": {
            "description": "Manages a Named Location within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example_ip = new azuread.NamedLocation(\"example-ip\", {\n    displayName: \"IP Named Location\",\n    ip: {\n        ipRanges: [\n            \"1.1.1.1/32\",\n            \"2.2.2.2/32\",\n        ],\n        trusted: true,\n    },\n});\nconst example_country = new azuread.NamedLocation(\"example-country\", {\n    country: {\n        countriesAndRegions: [\n            \"GB\",\n            \"US\",\n        ],\n        includeUnknownCountriesAndRegions: false,\n    },\n    displayName: \"Country Named Location\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_ip = azuread.NamedLocation(\"example-ip\",\n    display_name=\"IP Named Location\",\n    ip=azuread.NamedLocationIpArgs(\n        ip_ranges=[\n            \"1.1.1.1/32\",\n            \"2.2.2.2/32\",\n        ],\n        trusted=True,\n    ))\nexample_country = azuread.NamedLocation(\"example-country\",\n    country=azuread.NamedLocationCountryArgs(\n        countries_and_regions=[\n            \"GB\",\n            \"US\",\n        ],\n        include_unknown_countries_and_regions=False,\n    ),\n    display_name=\"Country Named Location\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example_ip = new AzureAD.NamedLocation(\"example-ip\", new()\n    {\n        DisplayName = \"IP Named Location\",\n        Ip = new AzureAD.Inputs.NamedLocationIpArgs\n        {\n            IpRanges = new[]\n            {\n                \"1.1.1.1/32\",\n                \"2.2.2.2/32\",\n            },\n            Trusted = true,\n        },\n    });\n\n    var example_country = new AzureAD.NamedLocation(\"example-country\", new()\n    {\n        Country = new AzureAD.Inputs.NamedLocationCountryArgs\n        {\n            CountriesAndRegions = new[]\n            {\n                \"GB\",\n                \"US\",\n            },\n            IncludeUnknownCountriesAndRegions = false,\n        },\n        DisplayName = \"Country Named Location\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewNamedLocation(ctx, \"example-ip\", \u0026azuread.NamedLocationArgs{\n\t\t\tDisplayName: pulumi.String(\"IP Named Location\"),\n\t\t\tIp: \u0026azuread.NamedLocationIpArgs{\n\t\t\t\tIpRanges: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"1.1.1.1/32\"),\n\t\t\t\t\tpulumi.String(\"2.2.2.2/32\"),\n\t\t\t\t},\n\t\t\t\tTrusted: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewNamedLocation(ctx, \"example-country\", \u0026azuread.NamedLocationArgs{\n\t\t\tCountry: \u0026azuread.NamedLocationCountryArgs{\n\t\t\t\tCountriesAndRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"GB\"),\n\t\t\t\t\tpulumi.String(\"US\"),\n\t\t\t\t},\n\t\t\t\tIncludeUnknownCountriesAndRegions: pulumi.Bool(false),\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"Country Named Location\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.NamedLocation;\nimport com.pulumi.azuread.NamedLocationArgs;\nimport com.pulumi.azuread.inputs.NamedLocationIpArgs;\nimport com.pulumi.azuread.inputs.NamedLocationCountryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example_ip = new NamedLocation(\"example-ip\", NamedLocationArgs.builder()        \n            .displayName(\"IP Named Location\")\n            .ip(NamedLocationIpArgs.builder()\n                .ipRanges(                \n                    \"1.1.1.1/32\",\n                    \"2.2.2.2/32\")\n                .trusted(true)\n                .build())\n            .build());\n\n        var example_country = new NamedLocation(\"example-country\", NamedLocationArgs.builder()        \n            .country(NamedLocationCountryArgs.builder()\n                .countriesAndRegions(                \n                    \"GB\",\n                    \"US\")\n                .includeUnknownCountriesAndRegions(false)\n                .build())\n            .displayName(\"Country Named Location\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example-ip:\n    type: azuread:NamedLocation\n    properties:\n      displayName: IP Named Location\n      ip:\n        ipRanges:\n          - 1.1.1.1/32\n          - 2.2.2.2/32\n        trusted: true\n  example-country:\n    type: azuread:NamedLocation\n    properties:\n      country:\n        countriesAndRegions:\n          - GB\n          - US\n        includeUnknownCountriesAndRegions: false\n      displayName: Country Named Location\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNamed Locations can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/namedLocation:NamedLocation my_location 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "country": {
                    "$ref": "#/types/azuread:index/NamedLocationCountry:NamedLocationCountry",
                    "description": "A `country` block as documented below, which configures a country-based named location.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this named location.\n"
                },
                "ip": {
                    "$ref": "#/types/azuread:index/NamedLocationIp:NamedLocationIp",
                    "description": "An `ip` block as documented below, which configures an IP-based named location.\n\n\u003e Exactly one of `ip` or `country` must be specified. Changing between these forces a new resource to be created.\n"
                }
            },
            "required": [
                "displayName"
            ],
            "inputProperties": {
                "country": {
                    "$ref": "#/types/azuread:index/NamedLocationCountry:NamedLocationCountry",
                    "description": "A `country` block as documented below, which configures a country-based named location.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The friendly name for this named location.\n"
                },
                "ip": {
                    "$ref": "#/types/azuread:index/NamedLocationIp:NamedLocationIp",
                    "description": "An `ip` block as documented below, which configures an IP-based named location.\n\n\u003e Exactly one of `ip` or `country` must be specified. Changing between these forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NamedLocation resources.\n",
                "properties": {
                    "country": {
                        "$ref": "#/types/azuread:index/NamedLocationCountry:NamedLocationCountry",
                        "description": "A `country` block as documented below, which configures a country-based named location.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The friendly name for this named location.\n"
                    },
                    "ip": {
                        "$ref": "#/types/azuread:index/NamedLocationIp:NamedLocationIp",
                        "description": "An `ip` block as documented below, which configures an IP-based named location.\n\n\u003e Exactly one of `ip` or `country` must be specified. Changing between these forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipal:ServicePrincipal": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Create a service principal for an application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    owners: [current.then(current =\u003e current.objectId)],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    clientId: exampleApplication.clientId,\n    appRoleAssignmentRequired: false,\n    owners: [current.then(current =\u003e current.objectId)],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    owners=[current.object_id])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    client_id=example_application.client_id,\n    app_role_assignment_required=False,\n    owners=[current.object_id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ClientId = exampleApplication.ClientId,\n        AppRoleAssignmentRequired = false,\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tClientId:                  exampleApplication.ClientId,\n\t\t\tAppRoleAssignmentRequired: pulumi.Bool(false),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .clientId(exampleApplication.clientId())\n            .appRoleAssignmentRequired(false)\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      owners:\n        - ${current.objectId}\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      clientId: ${exampleApplication.clientId}\n      appRoleAssignmentRequired: false\n      owners:\n        - ${current.objectId}\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n\n*Create a service principal for an enterprise application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    owners: [current.then(current =\u003e current.objectId)],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    clientId: exampleApplication.clientId,\n    appRoleAssignmentRequired: false,\n    owners: [current.then(current =\u003e current.objectId)],\n    featureTags: [{\n        enterprise: true,\n        gallery: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    owners=[current.object_id])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    client_id=example_application.client_id,\n    app_role_assignment_required=False,\n    owners=[current.object_id],\n    feature_tags=[azuread.ServicePrincipalFeatureTagArgs(\n        enterprise=True,\n        gallery=True,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ClientId = exampleApplication.ClientId,\n        AppRoleAssignmentRequired = false,\n        Owners = new[]\n        {\n            current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n        },\n        FeatureTags = new[]\n        {\n            new AzureAD.Inputs.ServicePrincipalFeatureTagArgs\n            {\n                Enterprise = true,\n                Gallery = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tClientId:                  exampleApplication.ClientId,\n\t\t\tAppRoleAssignmentRequired: pulumi.Bool(false),\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\t*pulumi.String(current.ObjectId),\n\t\t\t},\n\t\t\tFeatureTags: azuread.ServicePrincipalFeatureTagArray{\n\t\t\t\t\u0026azuread.ServicePrincipalFeatureTagArgs{\n\t\t\t\t\tEnterprise: pulumi.Bool(true),\n\t\t\t\t\tGallery:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.inputs.ServicePrincipalFeatureTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .clientId(exampleApplication.clientId())\n            .appRoleAssignmentRequired(false)\n            .owners(current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()))\n            .featureTags(ServicePrincipalFeatureTagArgs.builder()\n                .enterprise(true)\n                .gallery(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      owners:\n        - ${current.objectId}\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      clientId: ${exampleApplication.clientId}\n      appRoleAssignmentRequired: false\n      owners:\n        - ${current.objectId}\n      featureTags:\n        - enterprise: true\n          gallery: true\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\n```\n\n*Manage a service principal for a first-party Microsoft application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = new azuread.ServicePrincipal(\"msgraph\", {\n    clientId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    useExisting: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.ServicePrincipal(\"msgraph\",\n    client_id=well_known.result[\"MicrosoftGraph\"],\n    use_existing=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = new AzureAD.ServicePrincipal(\"msgraph\", new()\n    {\n        ClientId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        UseExisting = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"msgraph\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tClientId:    *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tUseExisting: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        var msgraph = new ServicePrincipal(\"msgraph\", ServicePrincipalArgs.builder()        \n            .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .useExisting(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  msgraph:\n    type: azuread:ServicePrincipal\n    properties:\n      clientId: ${wellKnown.result.MicrosoftGraph}\n      useExisting: true\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n```\n\n*Create a service principal for an application created from a gallery template*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationTemplate = azuread.getApplicationTemplate({\n    displayName: \"Marketo\",\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    templateId: exampleApplicationTemplate.then(exampleApplicationTemplate =\u003e exampleApplicationTemplate.templateId),\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    clientId: exampleApplication.clientId,\n    useExisting: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_template = azuread.get_application_template(display_name=\"Marketo\")\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    template_id=example_application_template.template_id)\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    client_id=example_application.client_id,\n    use_existing=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationTemplate = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Marketo\",\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        TemplateId = exampleApplicationTemplate.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ClientId = exampleApplication.ClientId,\n        UseExisting = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationTemplate, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Marketo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tTemplateId:  *pulumi.String(exampleApplicationTemplate.TemplateId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tClientId:    exampleApplication.ClientId,\n\t\t\tUseExisting: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApplicationTemplate = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Marketo\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .templateId(exampleApplicationTemplate.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()))\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .clientId(exampleApplication.clientId())\n            .useExisting(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      templateId: ${exampleApplicationTemplate.templateId}\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      clientId: ${exampleApplication.clientId}\n      useExisting: true\nvariables:\n  exampleApplicationTemplate:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Marketo\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nService principals can be imported using their object ID, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipal:ServicePrincipal example 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether or not the service principal account is enabled. Defaults to `true`.\n"
                },
                "alternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.\n"
                },
                "appRoleAssignmentRequired": {
                    "type": "boolean",
                    "description": "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                },
                "appRoleIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.\n"
                },
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole"
                    },
                    "description": "A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The application ID (client ID) of the application for which to create a service principal\n",
                    "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider"
                },
                "applicationTenantId": {
                    "type": "string",
                    "description": "The tenant ID where the associated application is registered.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the application for which to create a service principal.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the service principal provided for internal end-users.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                },
                "featureTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalFeatureTag:ServicePrincipalFeatureTag"
                    },
                    "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for a service principal using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for a service principal at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Any tags configured for the linked application will propagate to this service principal.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalFeature:ServicePrincipalFeature"
                    },
                    "description": "Block of features to configure for this service principal using tags\n",
                    "deprecationMessage": "This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider"
                },
                "homepageUrl": {
                    "type": "string",
                    "description": "Home page or landing page of the associated application.\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that will be used by Microsoft's authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to capture information about the service principal, typically used for operational purposes.\n"
                },
                "notificationEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.\n"
                },
                "oauth2PermissionScopeIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                },
                "oauth2PermissionScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalOauth2PermissionScope:ServicePrincipalOauth2PermissionScope"
                    },
                    "description": "A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the service principal.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object IDs of principals that will be granted ownership of the service principal\n"
                },
                "preferredSingleSignOnMode": {
                    "type": "string",
                    "description": "The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.\n"
                },
                "samlMetadataUrl": {
                    "type": "string",
                    "description": "The URL where the service exposes SAML metadata for federation.\n"
                },
                "samlSingleSignOn": {
                    "$ref": "#/types/azuread:index/ServicePrincipalSamlSingleSignOn:ServicePrincipalSamlSingleSignOn",
                    "description": "A `saml_single_sign_on` block as documented below.\n"
                },
                "servicePrincipalNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of identifier URI(s), copied over from the associated application.\n"
                },
                "signInAudience": {
                    "type": "string",
                    "description": "The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to apply to the service principal for configuring specific behaviours of the service principal. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of service principals. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values set for the linked application will also propagate to this service principal.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.\n"
                },
                "useExisting": {
                    "type": "boolean",
                    "description": "When true, the resource will return an existing service principal instead of failing with an error\n"
                }
            },
            "required": [
                "appRoleIds",
                "appRoles",
                "applicationId",
                "applicationTenantId",
                "clientId",
                "displayName",
                "featureTags",
                "features",
                "homepageUrl",
                "logoutUrl",
                "oauth2PermissionScopeIds",
                "oauth2PermissionScopes",
                "objectId",
                "redirectUris",
                "samlMetadataUrl",
                "servicePrincipalNames",
                "signInAudience",
                "tags",
                "type"
            ],
            "inputProperties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether or not the service principal account is enabled. Defaults to `true`.\n"
                },
                "alternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.\n"
                },
                "appRoleAssignmentRequired": {
                    "type": "boolean",
                    "description": "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The application ID (client ID) of the application for which to create a service principal\n",
                    "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider",
                    "willReplaceOnChanges": true
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the application for which to create a service principal.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A description of the service principal provided for internal end-users.\n"
                },
                "featureTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalFeatureTag:ServicePrincipalFeatureTag"
                    },
                    "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for a service principal using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for a service principal at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Any tags configured for the linked application will propagate to this service principal.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalFeature:ServicePrincipalFeature"
                    },
                    "description": "Block of features to configure for this service principal using tags\n",
                    "deprecationMessage": "This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "A free text field to capture information about the service principal, typically used for operational purposes.\n"
                },
                "notificationEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object IDs of principals that will be granted ownership of the service principal\n"
                },
                "preferredSingleSignOnMode": {
                    "type": "string",
                    "description": "The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.\n"
                },
                "samlSingleSignOn": {
                    "$ref": "#/types/azuread:index/ServicePrincipalSamlSingleSignOn:ServicePrincipalSamlSingleSignOn",
                    "description": "A `saml_single_sign_on` block as documented below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags to apply to the service principal for configuring specific behaviours of the service principal. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of service principals. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values set for the linked application will also propagate to this service principal.\n"
                },
                "useExisting": {
                    "type": "boolean",
                    "description": "When true, the resource will return an existing service principal instead of failing with an error\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipal resources.\n",
                "properties": {
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "Whether or not the service principal account is enabled. Defaults to `true`.\n"
                    },
                    "alternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.\n"
                    },
                    "appRoleAssignmentRequired": {
                        "type": "boolean",
                        "description": "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                    },
                    "appRoleIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.\n"
                    },
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole"
                        },
                        "description": "A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The application ID (client ID) of the application for which to create a service principal\n",
                        "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider",
                        "willReplaceOnChanges": true
                    },
                    "applicationTenantId": {
                        "type": "string",
                        "description": "The tenant ID where the associated application is registered.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the application for which to create a service principal.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the service principal provided for internal end-users.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                    },
                    "featureTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalFeatureTag:ServicePrincipalFeatureTag"
                        },
                        "description": "A `feature_tags` block as described below. Cannot be used together with the `tags` property.\n\n\u003e **Features and Tags** Features are configured for a service principal using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for a service principal at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Any tags configured for the linked application will propagate to this service principal.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalFeature:ServicePrincipalFeature"
                        },
                        "description": "Block of features to configure for this service principal using tags\n",
                        "deprecationMessage": "This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "Home page or landing page of the associated application.\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL that will be used by Microsoft's authorization service to log out an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to capture information about the service principal, typically used for operational purposes.\n"
                    },
                    "notificationEmailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.\n"
                    },
                    "oauth2PermissionScopeIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                    },
                    "oauth2PermissionScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalOauth2PermissionScope:ServicePrincipalOauth2PermissionScope"
                        },
                        "description": "A list of OAuth 2.0 delegated permission scopes exposed by the associated application, as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the service principal.\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of object IDs of principals that will be granted ownership of the service principal\n"
                    },
                    "preferredSingleSignOnMode": {
                        "type": "string",
                        "description": "The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. Supported values are `oidc`, `password`, `saml` or `notSupported`. Omit this property or specify a blank string to unset.\n"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.\n"
                    },
                    "samlMetadataUrl": {
                        "type": "string",
                        "description": "The URL where the service exposes SAML metadata for federation.\n"
                    },
                    "samlSingleSignOn": {
                        "$ref": "#/types/azuread:index/ServicePrincipalSamlSingleSignOn:ServicePrincipalSamlSingleSignOn",
                        "description": "A `saml_single_sign_on` block as documented below.\n"
                    },
                    "servicePrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of identifier URI(s), copied over from the associated application.\n"
                    },
                    "signInAudience": {
                        "type": "string",
                        "description": "The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags to apply to the service principal for configuring specific behaviours of the service principal. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.\n\n\u003e **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of service principals. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it's recommended to use the `tags` property. Tag values set for the linked application will also propagate to this service principal.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.\n"
                    },
                    "useExisting": {
                        "type": "boolean",
                        "description": "When true, the resource will return an existing service principal instead of failing with an error\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate": {
            "description": "\n\n## Import\n\nCertificates can be imported using the object ID of the associated service principal and the key ID of the certificate credential, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate example 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the service principal's object ID, the string \"certificate\" and the certificate's key ID in the format `{ServicePrincipalObjectId}/certificate/{CertificateKeyId}`. ",
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be set. The maximum duration is determined by Azure AD.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                    "secret": true
                }
            },
            "required": [
                "endDate",
                "keyId",
                "servicePrincipalId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n",
                    "willReplaceOnChanges": true
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be set. The maximum duration is determined by Azure AD.\n",
                    "willReplaceOnChanges": true
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "servicePrincipalId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalCertificate resources.\n",
                "properties": {
                    "encoding": {
                        "type": "string",
                        "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n\n\u003e **Tip for Azure Key Vault** The `hex` encoding option is useful for consuming certificate data from the azurerm_key_vault_certificate resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n\n\u003e One of `end_date` or `end_date_relative` must be set. The maximum duration is determined by Azure AD.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the value is determined by Azure Active Directory and is usually the start date of the certificate for asymmetric keys, or the current timestamp for symmetric keys. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalClaimsMappingPolicyAssignment:ServicePrincipalClaimsMappingPolicyAssignment": {
            "description": "Manages a Claims Mapping Policy Assignment within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ApplicationConfiguration` and `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Application Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst app = new azuread.ServicePrincipalClaimsMappingPolicyAssignment(\"app\", {\n    claimsMappingPolicyId: azuread_claims_mapping_policy.my_policy.id,\n    servicePrincipalId: azuread_service_principal.my_principal.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\napp = azuread.ServicePrincipalClaimsMappingPolicyAssignment(\"app\",\n    claims_mapping_policy_id=azuread_claims_mapping_policy[\"my_policy\"][\"id\"],\n    service_principal_id=azuread_service_principal[\"my_principal\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new AzureAD.ServicePrincipalClaimsMappingPolicyAssignment(\"app\", new()\n    {\n        ClaimsMappingPolicyId = azuread_claims_mapping_policy.My_policy.Id,\n        ServicePrincipalId = azuread_service_principal.My_principal.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewServicePrincipalClaimsMappingPolicyAssignment(ctx, \"app\", \u0026azuread.ServicePrincipalClaimsMappingPolicyAssignmentArgs{\n\t\t\tClaimsMappingPolicyId: pulumi.Any(azuread_claims_mapping_policy.My_policy.Id),\n\t\t\tServicePrincipalId:    pulumi.Any(azuread_service_principal.My_principal.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.ServicePrincipalClaimsMappingPolicyAssignment;\nimport com.pulumi.azuread.ServicePrincipalClaimsMappingPolicyAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new ServicePrincipalClaimsMappingPolicyAssignment(\"app\", ServicePrincipalClaimsMappingPolicyAssignmentArgs.builder()        \n            .claimsMappingPolicyId(azuread_claims_mapping_policy.my_policy().id())\n            .servicePrincipalId(azuread_service_principal.my_principal().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: azuread:ServicePrincipalClaimsMappingPolicyAssignment\n    properties:\n      claimsMappingPolicyId: ${azuread_claims_mapping_policy.my_policy.id}\n      servicePrincipalId: ${azuread_service_principal.my_principal.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nClaims Mapping Policy can be imported using the `id`, in the form `service-principal-uuid/claimsMappingPolicy/claims-mapping-policy-uuid`, e.g\n\n```sh\n $ pulumi import azuread:index/servicePrincipalClaimsMappingPolicyAssignment:ServicePrincipalClaimsMappingPolicyAssignment app 00000000-0000-0000-0000-000000000000/claimsMappingPolicy/11111111-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "claimsMappingPolicyId": {
                    "type": "string",
                    "description": "The ID of the claims mapping policy to assign.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for the policy assignment.\n"
                }
            },
            "required": [
                "claimsMappingPolicyId",
                "servicePrincipalId"
            ],
            "inputProperties": {
                "claimsMappingPolicyId": {
                    "type": "string",
                    "description": "The ID of the claims mapping policy to assign.\n",
                    "willReplaceOnChanges": true
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for the policy assignment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "claimsMappingPolicyId",
                "servicePrincipalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalClaimsMappingPolicyAssignment resources.\n",
                "properties": {
                    "claimsMappingPolicyId": {
                        "type": "string",
                        "description": "The ID of the claims mapping policy to assign.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for the policy assignment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant": {
            "description": "Manages a delegated permission grant for a service principal, on behalf of a single user, or all users.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one the following directory role: `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Delegated permission grant for all users*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = new azuread.ServicePrincipal(\"msgraph\", {\n    applicationId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    useExisting: true,\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    requiredResourceAccesses: [{\n        resourceAppId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n        resourceAccesses: [\n            {\n                id: msgraph.oauth2PermissionScopeIds.openid,\n                type: \"Scope\",\n            },\n            {\n                id: msgraph.oauth2PermissionScopeIds[\"User.Read\"],\n                type: \"Scope\",\n            },\n        ],\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleServicePrincipalDelegatedPermissionGrant = new azuread.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", {\n    servicePrincipalObjectId: exampleServicePrincipal.objectId,\n    resourceServicePrincipalObjectId: msgraph.objectId,\n    claimValues: [\n        \"openid\",\n        \"User.Read.All\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.ServicePrincipal(\"msgraph\",\n    application_id=well_known.result[\"MicrosoftGraph\"],\n    use_existing=True)\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    required_resource_accesses=[azuread.ApplicationRequiredResourceAccessArgs(\n        resource_app_id=well_known.result[\"MicrosoftGraph\"],\n        resource_accesses=[\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"openid\"],\n                type=\"Scope\",\n            ),\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"User.Read\"],\n                type=\"Scope\",\n            ),\n        ],\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_service_principal_delegated_permission_grant = azuread.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\",\n    service_principal_object_id=example_service_principal.object_id,\n    resource_service_principal_object_id=msgraph.object_id,\n    claim_values=[\n        \"openid\",\n        \"User.Read.All\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = new AzureAD.ServicePrincipal(\"msgraph\", new()\n    {\n        ApplicationId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        UseExisting = true,\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.Openid),\n                        Type = \"Scope\",\n                    },\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.User_Read),\n                        Type = \"Scope\",\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleServicePrincipalDelegatedPermissionGrant = new AzureAD.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", new()\n    {\n        ServicePrincipalObjectId = exampleServicePrincipal.ObjectId,\n        ResourceServicePrincipalObjectId = msgraph.ObjectId,\n        ClaimValues = new[]\n        {\n            \"openid\",\n            \"User.Read.All\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmsgraph, err := azuread.NewServicePrincipal(ctx, \"msgraph\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.Openid, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.User.Read, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalDelegatedPermissionGrant(ctx, \"exampleServicePrincipalDelegatedPermissionGrant\", \u0026azuread.ServicePrincipalDelegatedPermissionGrantArgs{\n\t\t\tServicePrincipalObjectId:         exampleServicePrincipal.ObjectId,\n\t\t\tResourceServicePrincipalObjectId: msgraph.ObjectId,\n\t\t\tClaimValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"User.Read.All\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport com.pulumi.azuread.ServicePrincipalDelegatedPermissionGrant;\nimport com.pulumi.azuread.ServicePrincipalDelegatedPermissionGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        var msgraph = new ServicePrincipal(\"msgraph\", ServicePrincipalArgs.builder()        \n            .applicationId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .useExisting(true)\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()\n                .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n                .resourceAccesses(                \n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.openid()))\n                        .type(\"Scope\")\n                        .build(),\n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.User.Read()))\n                        .type(\"Scope\")\n                        .build())\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleServicePrincipalDelegatedPermissionGrant = new ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", ServicePrincipalDelegatedPermissionGrantArgs.builder()        \n            .servicePrincipalObjectId(exampleServicePrincipal.objectId())\n            .resourceServicePrincipalObjectId(msgraph.objectId())\n            .claimValues(            \n                \"openid\",\n                \"User.Read.All\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  msgraph:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${wellKnown.result.MicrosoftGraph}\n      useExisting: true\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      requiredResourceAccesses:\n        - resourceAppId: ${wellKnown.result.MicrosoftGraph}\n          resourceAccesses:\n            - id: ${msgraph.oauth2PermissionScopeIds.openid}\n              type: Scope\n            - id: ${msgraph.oauth2PermissionScopeIds\"User.Read\"[%!s(MISSING)]}\n              type: Scope\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleServicePrincipalDelegatedPermissionGrant:\n    type: azuread:ServicePrincipalDelegatedPermissionGrant\n    properties:\n      servicePrincipalObjectId: ${exampleServicePrincipal.objectId}\n      resourceServicePrincipalObjectId: ${msgraph.objectId}\n      claimValues:\n        - openid\n        - User.Read.All\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n```\n\n*Delegated permission grant for a single user*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = new azuread.ServicePrincipal(\"msgraph\", {\n    applicationId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    useExisting: true,\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    requiredResourceAccesses: [{\n        resourceAppId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n        resourceAccesses: [\n            {\n                id: msgraph.oauth2PermissionScopeIds.openid,\n                type: \"Scope\",\n            },\n            {\n                id: msgraph.oauth2PermissionScopeIds[\"User.Read\"],\n                type: \"Scope\",\n            },\n        ],\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleUser = new azuread.User(\"exampleUser\", {\n    displayName: \"J. Doe\",\n    userPrincipalName: \"jdoe@hashicorp.com\",\n    mailNickname: \"jdoe\",\n    password: \"SecretP@sswd99!\",\n});\nconst exampleServicePrincipalDelegatedPermissionGrant = new azuread.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", {\n    servicePrincipalObjectId: exampleServicePrincipal.objectId,\n    resourceServicePrincipalObjectId: msgraph.objectId,\n    claimValues: [\n        \"openid\",\n        \"User.Read.All\",\n    ],\n    userObjectId: exampleUser.objectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.ServicePrincipal(\"msgraph\",\n    application_id=well_known.result[\"MicrosoftGraph\"],\n    use_existing=True)\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    required_resource_accesses=[azuread.ApplicationRequiredResourceAccessArgs(\n        resource_app_id=well_known.result[\"MicrosoftGraph\"],\n        resource_accesses=[\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"openid\"],\n                type=\"Scope\",\n            ),\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"User.Read\"],\n                type=\"Scope\",\n            ),\n        ],\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_user = azuread.User(\"exampleUser\",\n    display_name=\"J. Doe\",\n    user_principal_name=\"jdoe@hashicorp.com\",\n    mail_nickname=\"jdoe\",\n    password=\"SecretP@sswd99!\")\nexample_service_principal_delegated_permission_grant = azuread.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\",\n    service_principal_object_id=example_service_principal.object_id,\n    resource_service_principal_object_id=msgraph.object_id,\n    claim_values=[\n        \"openid\",\n        \"User.Read.All\",\n    ],\n    user_object_id=example_user.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = new AzureAD.ServicePrincipal(\"msgraph\", new()\n    {\n        ApplicationId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        UseExisting = true,\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.Openid),\n                        Type = \"Scope\",\n                    },\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.User_Read),\n                        Type = \"Scope\",\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleUser = new AzureAD.User(\"exampleUser\", new()\n    {\n        DisplayName = \"J. Doe\",\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n        MailNickname = \"jdoe\",\n        Password = \"SecretP@sswd99!\",\n    });\n\n    var exampleServicePrincipalDelegatedPermissionGrant = new AzureAD.ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", new()\n    {\n        ServicePrincipalObjectId = exampleServicePrincipal.ObjectId,\n        ResourceServicePrincipalObjectId = msgraph.ObjectId,\n        ClaimValues = new[]\n        {\n            \"openid\",\n            \"User.Read.All\",\n        },\n        UserObjectId = exampleUser.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmsgraph, err := azuread.NewServicePrincipal(ctx, \"msgraph\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.Openid, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.User.Read, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := azuread.NewUser(ctx, \"exampleUser\", \u0026azuread.UserArgs{\n\t\t\tDisplayName:       pulumi.String(\"J. Doe\"),\n\t\t\tUserPrincipalName: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t\tMailNickname:      pulumi.String(\"jdoe\"),\n\t\t\tPassword:          pulumi.String(\"SecretP@sswd99!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalDelegatedPermissionGrant(ctx, \"exampleServicePrincipalDelegatedPermissionGrant\", \u0026azuread.ServicePrincipalDelegatedPermissionGrantArgs{\n\t\t\tServicePrincipalObjectId:         exampleServicePrincipal.ObjectId,\n\t\t\tResourceServicePrincipalObjectId: msgraph.ObjectId,\n\t\t\tClaimValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"User.Read.All\"),\n\t\t\t},\n\t\t\tUserObjectId: exampleUser.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport com.pulumi.azuread.ServicePrincipalDelegatedPermissionGrant;\nimport com.pulumi.azuread.ServicePrincipalDelegatedPermissionGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        var msgraph = new ServicePrincipal(\"msgraph\", ServicePrincipalArgs.builder()        \n            .applicationId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .useExisting(true)\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()\n                .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n                .resourceAccesses(                \n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.openid()))\n                        .type(\"Scope\")\n                        .build(),\n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.User.Read()))\n                        .type(\"Scope\")\n                        .build())\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()        \n            .displayName(\"J. Doe\")\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .mailNickname(\"jdoe\")\n            .password(\"SecretP@sswd99!\")\n            .build());\n\n        var exampleServicePrincipalDelegatedPermissionGrant = new ServicePrincipalDelegatedPermissionGrant(\"exampleServicePrincipalDelegatedPermissionGrant\", ServicePrincipalDelegatedPermissionGrantArgs.builder()        \n            .servicePrincipalObjectId(exampleServicePrincipal.objectId())\n            .resourceServicePrincipalObjectId(msgraph.objectId())\n            .claimValues(            \n                \"openid\",\n                \"User.Read.All\")\n            .userObjectId(exampleUser.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  msgraph:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${wellKnown.result.MicrosoftGraph}\n      useExisting: true\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      requiredResourceAccesses:\n        - resourceAppId: ${wellKnown.result.MicrosoftGraph}\n          resourceAccesses:\n            - id: ${msgraph.oauth2PermissionScopeIds.openid}\n              type: Scope\n            - id: ${msgraph.oauth2PermissionScopeIds\"User.Read\"[%!s(MISSING)]}\n              type: Scope\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleUser:\n    type: azuread:User\n    properties:\n      displayName: J. Doe\n      userPrincipalName: jdoe@hashicorp.com\n      mailNickname: jdoe\n      password: SecretP@sswd99!\n  exampleServicePrincipalDelegatedPermissionGrant:\n    type: azuread:ServicePrincipalDelegatedPermissionGrant\n    properties:\n      servicePrincipalObjectId: ${exampleServicePrincipal.objectId}\n      resourceServicePrincipalObjectId: ${msgraph.objectId}\n      claimValues:\n        - openid\n        - User.Read.All\n      userObjectId: ${exampleUser.objectId}\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDelegated permission grants can be imported using their ID, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant example aaBBcDDeFG6h5JKLMN2PQrrssTTUUvWWxxxxxyyyzzz\n```\n\n ",
            "properties": {
                "claimValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of claim values for delegated permission scopes which should be included in access tokens for the resource.\n"
                },
                "resourceServicePrincipalObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal representing the resource to be accessed. Changing this forces a new resource to be created.\n"
                },
                "servicePrincipalObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this delegated permission grant should be created. Changing this forces a new resource to be created.\n"
                },
                "userObjectId": {
                    "type": "string",
                    "description": "The object ID of the user on behalf of whom the service principal is authorized to access the resource. When omitted, the delegated permission grant will be consented for all users. Changing this forces a new resource to be created.\n\n\u003e **Granting Admin Consent** To grant admin consent for the service principal to impersonate all users, just omit the `user_object_id` property.\n"
                }
            },
            "required": [
                "claimValues",
                "resourceServicePrincipalObjectId",
                "servicePrincipalObjectId"
            ],
            "inputProperties": {
                "claimValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of claim values for delegated permission scopes which should be included in access tokens for the resource.\n"
                },
                "resourceServicePrincipalObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal representing the resource to be accessed. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "servicePrincipalObjectId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this delegated permission grant should be created. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "userObjectId": {
                    "type": "string",
                    "description": "The object ID of the user on behalf of whom the service principal is authorized to access the resource. When omitted, the delegated permission grant will be consented for all users. Changing this forces a new resource to be created.\n\n\u003e **Granting Admin Consent** To grant admin consent for the service principal to impersonate all users, just omit the `user_object_id` property.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "claimValues",
                "resourceServicePrincipalObjectId",
                "servicePrincipalObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalDelegatedPermissionGrant resources.\n",
                "properties": {
                    "claimValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of claim values for delegated permission scopes which should be included in access tokens for the resource.\n"
                    },
                    "resourceServicePrincipalObjectId": {
                        "type": "string",
                        "description": "The object ID of the service principal representing the resource to be accessed. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalObjectId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this delegated permission grant should be created. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "userObjectId": {
                        "type": "string",
                        "description": "The object ID of the user on behalf of whom the service principal is authorized to access the resource. When omitted, the delegated permission grant will be consented for all users. Changing this forces a new resource to be created.\n\n\u003e **Granting Admin Consent** To grant admin consent for the service principal to impersonate all users, just omit the `user_object_id` property.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalPassword:ServicePrincipalPassword": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleServicePrincipalPassword = new azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", {servicePrincipalId: exampleServicePrincipal.objectId});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_service_principal_password = azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", service_principal_id=example_service_principal.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleServicePrincipalPassword = new AzureAD.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.ObjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalPassword(ctx, \"exampleServicePrincipalPassword\", \u0026azuread.ServicePrincipalPasswordArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ObjectId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.ServicePrincipalPassword;\nimport com.pulumi.azuread.ServicePrincipalPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleServicePrincipalPassword = new ServicePrincipalPassword(\"exampleServicePrincipalPassword\", ServicePrincipalPasswordArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.objectId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleServicePrincipalPassword:\n    type: azuread:ServicePrincipalPassword\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.objectId}\n```\n\n*Time-based rotation*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\nimport * as time from \"@pulumiverse/time\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleRotating = new time.Rotating(\"exampleRotating\", {rotationDays: 7});\nconst exampleServicePrincipalPassword = new azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", {\n    servicePrincipalId: exampleServicePrincipal.objectId,\n    rotateWhenChanged: {\n        rotation: exampleRotating.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\nimport pulumiverse_time as time\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_rotating = time.Rotating(\"exampleRotating\", rotation_days=7)\nexample_service_principal_password = azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\",\n    service_principal_id=example_service_principal.object_id,\n    rotate_when_changed={\n        \"rotation\": example_rotating.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\nusing Time = Pulumiverse.Time;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleRotating = new Time.Rotating(\"exampleRotating\", new()\n    {\n        RotationDays = 7,\n    });\n\n    var exampleServicePrincipalPassword = new AzureAD.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.ObjectId,\n        RotateWhenChanged = \n        {\n            { \"rotation\", exampleRotating.Id },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi-time/sdk/go/time\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleRotating, err := time.NewRotating(ctx, \"exampleRotating\", \u0026time.RotatingArgs{\n\t\t\tRotationDays: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalPassword(ctx, \"exampleServicePrincipalPassword\", \u0026azuread.ServicePrincipalPasswordArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ObjectId,\n\t\t\tRotateWhenChanged: pulumi.StringMap{\n\t\t\t\t\"rotation\": exampleRotating.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.time.Rotating;\nimport com.pulumi.time.RotatingArgs;\nimport com.pulumi.azuread.ServicePrincipalPassword;\nimport com.pulumi.azuread.ServicePrincipalPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleRotating = new Rotating(\"exampleRotating\", RotatingArgs.builder()        \n            .rotationDays(7)\n            .build());\n\n        var exampleServicePrincipalPassword = new ServicePrincipalPassword(\"exampleServicePrincipalPassword\", ServicePrincipalPasswordArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.objectId())\n            .rotateWhenChanged(Map.of(\"rotation\", exampleRotating.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleRotating:\n    type: time:Rotating\n    properties:\n      rotationDays: 7\n  exampleServicePrincipalPassword:\n    type: azuread:ServicePrincipalPassword\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.objectId}\n      rotateWhenChanged:\n        rotation: ${exampleRotating.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "A display name for the password.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify this password credential.\n"
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The password for this service principal, which is generated by Azure Active Directory.\n",
                    "secret": true
                }
            },
            "required": [
                "displayName",
                "endDate",
                "keyId",
                "servicePrincipalId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "A display name for the password.\n",
                    "willReplaceOnChanges": true
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "rotateWhenChanged": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this password should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "servicePrincipalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalPassword resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "A display name for the password.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The end date until which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify this password credential.\n"
                    },
                    "rotateWhenChanged": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of arbitrary key/value pairs that will force recreation of the password when they change, enabling password rotation based on external conditions such as a rotating timestamp. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this password should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date from which the password is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The password for this service principal, which is generated by Azure Active Directory.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Using default settings*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleServicePrincipalTokenSigningCertificate = new azuread.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", {servicePrincipalId: exampleServicePrincipal.id});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_service_principal_token_signing_certificate = azuread.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", service_principal_id=example_service_principal.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleServicePrincipalTokenSigningCertificate = new AzureAD.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalTokenSigningCertificate(ctx, \"exampleServicePrincipalTokenSigningCertificate\", \u0026azuread.ServicePrincipalTokenSigningCertificateArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.ServicePrincipalTokenSigningCertificate;\nimport com.pulumi.azuread.ServicePrincipalTokenSigningCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleServicePrincipalTokenSigningCertificate = new ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", ServicePrincipalTokenSigningCertificateArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleServicePrincipalTokenSigningCertificate:\n    type: azuread:ServicePrincipalTokenSigningCertificate\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.id}\n```\n\n*Using custom settings*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {displayName: \"example\"});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleServicePrincipalTokenSigningCertificate = new azuread.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", {\n    servicePrincipalId: exampleServicePrincipal.id,\n    displayName: \"CN=example.com\",\n    endDate: \"2023-05-01T01:02:03Z\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\", display_name=\"example\")\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_service_principal_token_signing_certificate = azuread.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\",\n    service_principal_id=example_service_principal.id,\n    display_name=\"CN=example.com\",\n    end_date=\"2023-05-01T01:02:03Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n    });\n\n    var exampleServicePrincipalTokenSigningCertificate = new AzureAD.ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.Id,\n        DisplayName = \"CN=example.com\",\n        EndDate = \"2023-05-01T01:02:03Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalTokenSigningCertificate(ctx, \"exampleServicePrincipalTokenSigningCertificate\", \u0026azuread.ServicePrincipalTokenSigningCertificateArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t\tDisplayName:        pulumi.String(\"CN=example.com\"),\n\t\t\tEndDate:            pulumi.String(\"2023-05-01T01:02:03Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.ServicePrincipalTokenSigningCertificate;\nimport com.pulumi.azuread.ServicePrincipalTokenSigningCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .build());\n\n        var exampleServicePrincipalTokenSigningCertificate = new ServicePrincipalTokenSigningCertificate(\"exampleServicePrincipalTokenSigningCertificate\", ServicePrincipalTokenSigningCertificateArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.id())\n            .displayName(\"CN=example.com\")\n            .endDate(\"2023-05-01T01:02:03Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n  exampleServicePrincipalTokenSigningCertificate:\n    type: azuread:ServicePrincipalTokenSigningCertificate\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.id}\n      displayName: CN=example.com\n      endDate: 2023-05-01T01:02:03Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nToken signing certificates can be imported using the object ID of the associated service principal and the key ID of the verify certificate credential, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate example 00000000-0000-0000-0000-000000000000/tokenSigningCertificate/11111111-1111-1111-1111-111111111111\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the service principal's object ID, the string \"tokenSigningCertificate\" and the verify certificate's key ID in the format `{ServicePrincipalObjectId}/tokenSigningCertificate/{CertificateKeyId}`. ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Specifies a friendly name for the certificate.\nMust start with `CN=`. Changing this field forces a new resource to be created.\n\n\u003e If not specified, it will default to `CN=Microsoft Azure Federated SSO Certificate`.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A UUID used to uniquely identify the verify certificate.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                },
                "thumbprint": {
                    "type": "string",
                    "description": "A SHA-1 generated thumbprint of the token signing certificate, which can be used to set the preferred signing certificate for a service principal.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which is PEM encoded but does not include the\nheader `-----BEGIN CERTIFICATE-----\\n` or the footer `\\n-----END CERTIFICATE-----`.\n",
                    "secret": true
                }
            },
            "required": [
                "displayName",
                "endDate",
                "keyId",
                "servicePrincipalId",
                "startDate",
                "thumbprint",
                "value"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Specifies a friendly name for the certificate.\nMust start with `CN=`. Changing this field forces a new resource to be created.\n\n\u003e If not specified, it will default to `CN=Microsoft Azure Federated SSO Certificate`.\n",
                    "willReplaceOnChanges": true
                },
                "endDate": {
                    "type": "string",
                    "description": "The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "servicePrincipalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalTokenSigningCertificate resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Specifies a friendly name for the certificate.\nMust start with `CN=`. Changing this field forces a new resource to be created.\n\n\u003e If not specified, it will default to `CN=Microsoft Azure Federated SSO Certificate`.\n",
                        "willReplaceOnChanges": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A UUID used to uniquely identify the verify certificate.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).\n"
                    },
                    "thumbprint": {
                        "type": "string",
                        "description": "A SHA-1 generated thumbprint of the token signing certificate, which can be used to set the preferred signing certificate for a service principal.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The certificate data, which is PEM encoded but does not include the\nheader `-----BEGIN CERTIFICATE-----\\n` or the footer `\\n-----END CERTIFICATE-----`.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/synchronizationJob:SynchronizationJob": {
            "description": "Manages a synchronization job associated with a service principal (enterprise application) within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.All` or `Directory.ReadWrite.All`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationTemplate = azuread.getApplicationTemplate({\n    displayName: \"Azure Databricks SCIM Provisioning Connector\",\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    templateId: exampleApplicationTemplate.then(exampleApplicationTemplate =\u003e exampleApplicationTemplate.templateId),\n    featureTags: [{\n        enterprise: true,\n        gallery: true,\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    applicationId: exampleApplication.applicationId,\n    useExisting: true,\n});\nconst exampleSynchronizationSecret = new azuread.SynchronizationSecret(\"exampleSynchronizationSecret\", {\n    servicePrincipalId: exampleServicePrincipal.id,\n    credentials: [\n        {\n            key: \"BaseAddress\",\n            value: \"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\",\n        },\n        {\n            key: \"SecretToken\",\n            value: \"some-token\",\n        },\n    ],\n});\nconst exampleSynchronizationJob = new azuread.SynchronizationJob(\"exampleSynchronizationJob\", {\n    servicePrincipalId: exampleServicePrincipal.id,\n    templateId: \"dataBricks\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_template = azuread.get_application_template(display_name=\"Azure Databricks SCIM Provisioning Connector\")\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    template_id=example_application_template.template_id,\n    feature_tags=[azuread.ApplicationFeatureTagArgs(\n        enterprise=True,\n        gallery=True,\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    application_id=example_application.application_id,\n    use_existing=True)\nexample_synchronization_secret = azuread.SynchronizationSecret(\"exampleSynchronizationSecret\",\n    service_principal_id=example_service_principal.id,\n    credentials=[\n        azuread.SynchronizationSecretCredentialArgs(\n            key=\"BaseAddress\",\n            value=\"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\",\n        ),\n        azuread.SynchronizationSecretCredentialArgs(\n            key=\"SecretToken\",\n            value=\"some-token\",\n        ),\n    ])\nexample_synchronization_job = azuread.SynchronizationJob(\"exampleSynchronizationJob\",\n    service_principal_id=example_service_principal.id,\n    template_id=\"dataBricks\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationTemplate = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Azure Databricks SCIM Provisioning Connector\",\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        TemplateId = exampleApplicationTemplate.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n        FeatureTags = new[]\n        {\n            new AzureAD.Inputs.ApplicationFeatureTagArgs\n            {\n                Enterprise = true,\n                Gallery = true,\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n        UseExisting = true,\n    });\n\n    var exampleSynchronizationSecret = new AzureAD.SynchronizationSecret(\"exampleSynchronizationSecret\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.Id,\n        Credentials = new[]\n        {\n            new AzureAD.Inputs.SynchronizationSecretCredentialArgs\n            {\n                Key = \"BaseAddress\",\n                Value = \"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\",\n            },\n            new AzureAD.Inputs.SynchronizationSecretCredentialArgs\n            {\n                Key = \"SecretToken\",\n                Value = \"some-token\",\n            },\n        },\n    });\n\n    var exampleSynchronizationJob = new AzureAD.SynchronizationJob(\"exampleSynchronizationJob\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.Id,\n        TemplateId = \"dataBricks\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationTemplate, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Azure Databricks SCIM Provisioning Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tTemplateId:  *pulumi.String(exampleApplicationTemplate.TemplateId),\n\t\t\tFeatureTags: azuread.ApplicationFeatureTagArray{\n\t\t\t\t\u0026azuread.ApplicationFeatureTagArgs{\n\t\t\t\t\tEnterprise: pulumi.Bool(true),\n\t\t\t\t\tGallery:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewSynchronizationSecret(ctx, \"exampleSynchronizationSecret\", \u0026azuread.SynchronizationSecretArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t\tCredentials: azuread.SynchronizationSecretCredentialArray{\n\t\t\t\t\u0026azuread.SynchronizationSecretCredentialArgs{\n\t\t\t\t\tKey:   pulumi.String(\"BaseAddress\"),\n\t\t\t\t\tValue: pulumi.String(\"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.SynchronizationSecretCredentialArgs{\n\t\t\t\t\tKey:   pulumi.String(\"SecretToken\"),\n\t\t\t\t\tValue: pulumi.String(\"some-token\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewSynchronizationJob(ctx, \"exampleSynchronizationJob\", \u0026azuread.SynchronizationJobArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t\tTemplateId:         pulumi.String(\"dataBricks\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationFeatureTagArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.SynchronizationSecret;\nimport com.pulumi.azuread.SynchronizationSecretArgs;\nimport com.pulumi.azuread.inputs.SynchronizationSecretCredentialArgs;\nimport com.pulumi.azuread.SynchronizationJob;\nimport com.pulumi.azuread.SynchronizationJobArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApplicationTemplate = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Azure Databricks SCIM Provisioning Connector\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .templateId(exampleApplicationTemplate.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()))\n            .featureTags(ApplicationFeatureTagArgs.builder()\n                .enterprise(true)\n                .gallery(true)\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .useExisting(true)\n            .build());\n\n        var exampleSynchronizationSecret = new SynchronizationSecret(\"exampleSynchronizationSecret\", SynchronizationSecretArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.id())\n            .credentials(            \n                SynchronizationSecretCredentialArgs.builder()\n                    .key(\"BaseAddress\")\n                    .value(\"https://adb-example.azuredatabricks.net/api/2.0/preview/scim\")\n                    .build(),\n                SynchronizationSecretCredentialArgs.builder()\n                    .key(\"SecretToken\")\n                    .value(\"some-token\")\n                    .build())\n            .build());\n\n        var exampleSynchronizationJob = new SynchronizationJob(\"exampleSynchronizationJob\", SynchronizationJobArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.id())\n            .templateId(\"dataBricks\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      templateId: ${exampleApplicationTemplate.templateId}\n      featureTags:\n        - enterprise: true\n          gallery: true\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n      useExisting: true\n  exampleSynchronizationSecret:\n    type: azuread:SynchronizationSecret\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.id}\n      credentials:\n        - key: BaseAddress\n          value: https://adb-example.azuredatabricks.net/api/2.0/preview/scim\n        - key: SecretToken\n          value: some-token\n  exampleSynchronizationJob:\n    type: azuread:SynchronizationJob\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.id}\n      templateId: dataBricks\n      enabled: true\nvariables:\n  exampleApplicationTemplate:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Azure Databricks SCIM Provisioning Connector\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSynchronization jobs can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/synchronizationJob:SynchronizationJob example 00000000-0000-0000-0000-000000000000/job/dataBricks.f5532fc709734b1a90e8a1fa9fd03a82.8442fd39-2183-419c-8732-74b6ce866bd5\n```\n\n -\u003e This ID format is unique to Terraform and is composed of the Service Principal Object ID and the ID of the Synchronization Job Id in the format `{servicePrincipalId}/job/{jobId}`. ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the provisioning job is enabled. Default state is `true`.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/SynchronizationJobSchedule:SynchronizationJobSchedule"
                    },
                    "description": "A `schedule` list as documented below.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Identifier of the synchronization template this job is based on.\n"
                }
            },
            "required": [
                "schedules",
                "servicePrincipalId",
                "templateId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not the provisioning job is enabled. Default state is `true`.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "templateId": {
                    "type": "string",
                    "description": "Identifier of the synchronization template this job is based on.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "servicePrincipalId",
                "templateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SynchronizationJob resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not the provisioning job is enabled. Default state is `true`.\n"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/SynchronizationJobSchedule:SynchronizationJobSchedule"
                        },
                        "description": "A `schedule` list as documented below.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Identifier of the synchronization template this job is based on.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/synchronizationSecret:SynchronizationSecret": {
            "description": "Manages synchronization secrets associated with a service principal (enterprise application) within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.All` or `Directory.ReadWrite.All`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplicationTemplate = azuread.getApplicationTemplate({\n    displayName: \"Azure Databricks SCIM Provisioning Connector\",\n});\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    displayName: \"example\",\n    templateId: exampleApplicationTemplate.then(exampleApplicationTemplate =\u003e exampleApplicationTemplate.templateId),\n    featureTags: [{\n        enterprise: true,\n        gallery: true,\n    }],\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    applicationId: exampleApplication.applicationId,\n    useExisting: true,\n});\nconst exampleSynchronizationSecret = new azuread.SynchronizationSecret(\"exampleSynchronizationSecret\", {\n    servicePrincipalId: exampleServicePrincipal.id,\n    credentials: [\n        {\n            key: \"BaseAddress\",\n            value: \"abc\",\n        },\n        {\n            key: \"SecretToken\",\n            value: \"some-token\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application_template = azuread.get_application_template(display_name=\"Azure Databricks SCIM Provisioning Connector\")\nexample_application = azuread.Application(\"exampleApplication\",\n    display_name=\"example\",\n    template_id=example_application_template.template_id,\n    feature_tags=[azuread.ApplicationFeatureTagArgs(\n        enterprise=True,\n        gallery=True,\n    )])\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    application_id=example_application.application_id,\n    use_existing=True)\nexample_synchronization_secret = azuread.SynchronizationSecret(\"exampleSynchronizationSecret\",\n    service_principal_id=example_service_principal.id,\n    credentials=[\n        azuread.SynchronizationSecretCredentialArgs(\n            key=\"BaseAddress\",\n            value=\"abc\",\n        ),\n        azuread.SynchronizationSecretCredentialArgs(\n            key=\"SecretToken\",\n            value=\"some-token\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleApplicationTemplate = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Azure Databricks SCIM Provisioning Connector\",\n    });\n\n    var exampleApplication = new AzureAD.Application(\"exampleApplication\", new()\n    {\n        DisplayName = \"example\",\n        TemplateId = exampleApplicationTemplate.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n        FeatureTags = new[]\n        {\n            new AzureAD.Inputs.ApplicationFeatureTagArgs\n            {\n                Enterprise = true,\n                Gallery = true,\n            },\n        },\n    });\n\n    var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new()\n    {\n        ApplicationId = exampleApplication.ApplicationId,\n        UseExisting = true,\n    });\n\n    var exampleSynchronizationSecret = new AzureAD.SynchronizationSecret(\"exampleSynchronizationSecret\", new()\n    {\n        ServicePrincipalId = exampleServicePrincipal.Id,\n        Credentials = new[]\n        {\n            new AzureAD.Inputs.SynchronizationSecretCredentialArgs\n            {\n                Key = \"BaseAddress\",\n                Value = \"abc\",\n            },\n            new AzureAD.Inputs.SynchronizationSecretCredentialArgs\n            {\n                Key = \"SecretToken\",\n                Value = \"some-token\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplicationTemplate, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Azure Databricks SCIM Provisioning Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tTemplateId:  *pulumi.String(exampleApplicationTemplate.TemplateId),\n\t\t\tFeatureTags: azuread.ApplicationFeatureTagArray{\n\t\t\t\t\u0026azuread.ApplicationFeatureTagArgs{\n\t\t\t\t\tEnterprise: pulumi.Bool(true),\n\t\t\t\t\tGallery:    pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t\tUseExisting:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewSynchronizationSecret(ctx, \"exampleSynchronizationSecret\", \u0026azuread.SynchronizationSecretArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t\tCredentials: azuread.SynchronizationSecretCredentialArray{\n\t\t\t\t\u0026azuread.SynchronizationSecretCredentialArgs{\n\t\t\t\t\tKey:   pulumi.String(\"BaseAddress\"),\n\t\t\t\t\tValue: pulumi.String(\"abc\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.SynchronizationSecretCredentialArgs{\n\t\t\t\t\tKey:   pulumi.String(\"SecretToken\"),\n\t\t\t\t\tValue: pulumi.String(\"some-token\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationFeatureTagArgs;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.SynchronizationSecret;\nimport com.pulumi.azuread.SynchronizationSecretArgs;\nimport com.pulumi.azuread.inputs.SynchronizationSecretCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleApplicationTemplate = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Azure Databricks SCIM Provisioning Connector\")\n            .build());\n\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .templateId(exampleApplicationTemplate.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()))\n            .featureTags(ApplicationFeatureTagArgs.builder()\n                .enterprise(true)\n                .gallery(true)\n                .build())\n            .build());\n\n        var exampleServicePrincipal = new ServicePrincipal(\"exampleServicePrincipal\", ServicePrincipalArgs.builder()        \n            .applicationId(exampleApplication.applicationId())\n            .useExisting(true)\n            .build());\n\n        var exampleSynchronizationSecret = new SynchronizationSecret(\"exampleSynchronizationSecret\", SynchronizationSecretArgs.builder()        \n            .servicePrincipalId(exampleServicePrincipal.id())\n            .credentials(            \n                SynchronizationSecretCredentialArgs.builder()\n                    .key(\"BaseAddress\")\n                    .value(\"abc\")\n                    .build(),\n                SynchronizationSecretCredentialArgs.builder()\n                    .key(\"SecretToken\")\n                    .value(\"some-token\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApplication:\n    type: azuread:Application\n    properties:\n      displayName: example\n      templateId: ${exampleApplicationTemplate.templateId}\n      featureTags:\n        - enterprise: true\n          gallery: true\n  exampleServicePrincipal:\n    type: azuread:ServicePrincipal\n    properties:\n      applicationId: ${exampleApplication.applicationId}\n      useExisting: true\n  exampleSynchronizationSecret:\n    type: azuread:SynchronizationSecret\n    properties:\n      servicePrincipalId: ${exampleServicePrincipal.id}\n      credentials:\n        - key: BaseAddress\n          value: abc\n        - key: SecretToken\n          value: some-token\nvariables:\n  exampleApplicationTemplate:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Azure Databricks SCIM Provisioning Connector\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource does not support importing. ",
            "properties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/SynchronizationSecretCredential:SynchronizationSecretCredential"
                    },
                    "description": "One or more `credential` blocks as documented below.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this synchronization secrets should be stored. Changing this field forces a new resource to be created.\n"
                }
            },
            "required": [
                "servicePrincipalId"
            ],
            "inputProperties": {
                "credentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/SynchronizationSecretCredential:SynchronizationSecretCredential"
                    },
                    "description": "One or more `credential` blocks as documented below.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The object ID of the service principal for which this synchronization secrets should be stored. Changing this field forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "servicePrincipalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SynchronizationSecret resources.\n",
                "properties": {
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/SynchronizationSecretCredential:SynchronizationSecretCredential"
                        },
                        "description": "One or more `credential` blocks as documented below.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The object ID of the service principal for which this synchronization secrets should be stored. Changing this field forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/user:User": {
            "description": "Manages a user within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `User.ReadWrite.All` or `Directory.ReadWrite.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `User Administrator` or `Global Administrator`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.User(\"example\", {\n    displayName: \"J. Doe\",\n    mailNickname: \"jdoe\",\n    password: \"SecretP@sswd99!\",\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.User(\"example\",\n    display_name=\"J. Doe\",\n    mail_nickname=\"jdoe\",\n    password=\"SecretP@sswd99!\",\n    user_principal_name=\"jdoe@hashicorp.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.User(\"example\", new()\n    {\n        DisplayName = \"J. Doe\",\n        MailNickname = \"jdoe\",\n        Password = \"SecretP@sswd99!\",\n        UserPrincipalName = \"jdoe@hashicorp.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewUser(ctx, \"example\", \u0026azuread.UserArgs{\n\t\t\tDisplayName:       pulumi.String(\"J. Doe\"),\n\t\t\tMailNickname:      pulumi.String(\"jdoe\"),\n\t\t\tPassword:          pulumi.String(\"SecretP@sswd99!\"),\n\t\t\tUserPrincipalName: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.User;\nimport com.pulumi.azuread.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new User(\"example\", UserArgs.builder()        \n            .displayName(\"J. Doe\")\n            .mailNickname(\"jdoe\")\n            .password(\"SecretP@sswd99!\")\n            .userPrincipalName(\"jdoe@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:User\n    properties:\n      displayName: J. Doe\n      mailNickname: jdoe\n      password: SecretP@sswd99!\n      userPrincipalName: jdoe@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using their object ID, e.g.\n\n```sh\n $ pulumi import azuread:index/user:User my_user 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "aboutMe": {
                    "type": "string",
                    "description": "A freeform field for the user to describe themselves\n"
                },
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether or not the account should be enabled.\n"
                },
                "ageGroup": {
                    "type": "string",
                    "description": "The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.\n"
                },
                "businessPhones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city in which the user is located.\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                },
                "consentProvidedForMinor": {
                    "type": "string",
                    "description": "Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.\n"
                },
                "costCenter": {
                    "type": "string",
                    "description": "The cost center associated with the user.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country/region in which the user is located. Examples include: `NO`, `JP`, and `GB`.\n"
                },
                "creationType": {
                    "type": "string",
                    "description": "Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).\n"
                },
                "department": {
                    "type": "string",
                    "description": "The name for the department in which the user works.\n"
                },
                "disablePasswordExpiration": {
                    "type": "boolean",
                    "description": "Whether the user's password is exempt from expiring. Defaults to `false`.\n"
                },
                "disableStrongPassword": {
                    "type": "boolean",
                    "description": "Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name to display in the address book for the user.\n"
                },
                "division": {
                    "type": "string",
                    "description": "The name of the division in which the user works.\n"
                },
                "employeeId": {
                    "type": "string",
                    "description": "The employee identifier assigned to the user by the organisation.\n"
                },
                "employeeType": {
                    "type": "string",
                    "description": "Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.\n"
                },
                "externalUserState": {
                    "type": "string",
                    "description": "For an external user invited to the tenant, this property represents the invited user's invitation status. Possible values are `PendingAcceptance` or `Accepted`.\n"
                },
                "faxNumber": {
                    "type": "string",
                    "description": "The fax number of the user.\n"
                },
                "forcePasswordChange": {
                    "type": "boolean",
                    "description": "Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "The given name (first name) of the user.\n"
                },
                "imAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user’s job title.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The SMTP address for the user. This property cannot be unset once specified.\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the user. Defaults to the user name part of the user principal name (UPN).\n"
                },
                "managerId": {
                    "type": "string",
                    "description": "The object ID of the user's manager.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The primary cellular telephone number for the user.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The object ID of the user.\n"
                },
                "officeLocation": {
                    "type": "string",
                    "description": "The office location in the user's place of business.\n"
                },
                "onpremisesDistinguishedName": {
                    "type": "string",
                    "description": "The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesDomainName": {
                    "type": "string",
                    "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesImmutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.\n"
                },
                "onpremisesSamAccountName": {
                    "type": "string",
                    "description": "The on-premise SAM account name of the user.\n"
                },
                "onpremisesSecurityIdentifier": {
                    "type": "string",
                    "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                },
                "onpremisesSyncEnabled": {
                    "type": "boolean",
                    "description": "Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                },
                "onpremisesUserPrincipalName": {
                    "type": "string",
                    "description": "The on-premise user principal name of the user.\n"
                },
                "otherMails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of additional email addresses for the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the user. The password must satisfy minimum requirements as specified by the password policy. The\nmaximum length is 256 characters. This property is required when creating a new user\n",
                    "secret": true
                },
                "postalCode": {
                    "type": "string",
                    "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "The user's preferred language, in ISO 639-1 notation.\n"
                },
                "proxyAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of email addresses for the user that direct to the same mailbox.\n"
                },
                "showInAddressList": {
                    "type": "boolean",
                    "description": "Whether or not the Outlook global address list should include this user. Defaults to `true`.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state or province in the user's address.\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "The street address of the user's place of business.\n"
                },
                "surname": {
                    "type": "string",
                    "description": "The user's surname (family name or last name).\n"
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The user principal name (UPN) of the user.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The user type in the directory. Possible values are `Guest` or `Member`.\n"
                }
            },
            "required": [
                "aboutMe",
                "businessPhones",
                "creationType",
                "displayName",
                "externalUserState",
                "imAddresses",
                "mail",
                "mailNickname",
                "objectId",
                "onpremisesDistinguishedName",
                "onpremisesDomainName",
                "onpremisesImmutableId",
                "onpremisesSamAccountName",
                "onpremisesSecurityIdentifier",
                "onpremisesSyncEnabled",
                "onpremisesUserPrincipalName",
                "password",
                "proxyAddresses",
                "userPrincipalName",
                "userType"
            ],
            "inputProperties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "Whether or not the account should be enabled.\n"
                },
                "ageGroup": {
                    "type": "string",
                    "description": "The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.\n"
                },
                "businessPhones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city in which the user is located.\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                },
                "consentProvidedForMinor": {
                    "type": "string",
                    "description": "Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.\n"
                },
                "costCenter": {
                    "type": "string",
                    "description": "The cost center associated with the user.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country/region in which the user is located. Examples include: `NO`, `JP`, and `GB`.\n"
                },
                "department": {
                    "type": "string",
                    "description": "The name for the department in which the user works.\n"
                },
                "disablePasswordExpiration": {
                    "type": "boolean",
                    "description": "Whether the user's password is exempt from expiring. Defaults to `false`.\n"
                },
                "disableStrongPassword": {
                    "type": "boolean",
                    "description": "Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name to display in the address book for the user.\n"
                },
                "division": {
                    "type": "string",
                    "description": "The name of the division in which the user works.\n"
                },
                "employeeId": {
                    "type": "string",
                    "description": "The employee identifier assigned to the user by the organisation.\n"
                },
                "employeeType": {
                    "type": "string",
                    "description": "Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.\n"
                },
                "faxNumber": {
                    "type": "string",
                    "description": "The fax number of the user.\n"
                },
                "forcePasswordChange": {
                    "type": "boolean",
                    "description": "Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "The given name (first name) of the user.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user’s job title.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The SMTP address for the user. This property cannot be unset once specified.\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the user. Defaults to the user name part of the user principal name (UPN).\n"
                },
                "managerId": {
                    "type": "string",
                    "description": "The object ID of the user's manager.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The primary cellular telephone number for the user.\n"
                },
                "officeLocation": {
                    "type": "string",
                    "description": "The office location in the user's place of business.\n"
                },
                "onpremisesImmutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.\n"
                },
                "otherMails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of additional email addresses for the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the user. The password must satisfy minimum requirements as specified by the password policy. The\nmaximum length is 256 characters. This property is required when creating a new user\n",
                    "secret": true
                },
                "postalCode": {
                    "type": "string",
                    "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "The user's preferred language, in ISO 639-1 notation.\n"
                },
                "showInAddressList": {
                    "type": "boolean",
                    "description": "Whether or not the Outlook global address list should include this user. Defaults to `true`.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state or province in the user's address.\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "The street address of the user's place of business.\n"
                },
                "surname": {
                    "type": "string",
                    "description": "The user's surname (family name or last name).\n"
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The user principal name (UPN) of the user.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "userPrincipalName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "aboutMe": {
                        "type": "string",
                        "description": "A freeform field for the user to describe themselves\n"
                    },
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "Whether or not the account should be enabled.\n"
                    },
                    "ageGroup": {
                        "type": "string",
                        "description": "The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`. Omit this property or specify a blank string to unset.\n"
                    },
                    "businessPhones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of telephone numbers for the user. Only one number can be set for this property. Read-only for users synced with Azure AD Connect.\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city in which the user is located.\n"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                    },
                    "consentProvidedForMinor": {
                        "type": "string",
                        "description": "Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`. Omit this property or specify a blank string to unset.\n"
                    },
                    "costCenter": {
                        "type": "string",
                        "description": "The cost center associated with the user.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country/region in which the user is located. Examples include: `NO`, `JP`, and `GB`.\n"
                    },
                    "creationType": {
                        "type": "string",
                        "description": "Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "The name for the department in which the user works.\n"
                    },
                    "disablePasswordExpiration": {
                        "type": "boolean",
                        "description": "Whether the user's password is exempt from expiring. Defaults to `false`.\n"
                    },
                    "disableStrongPassword": {
                        "type": "boolean",
                        "description": "Whether the user is allowed weaker passwords than the default policy to be specified. Defaults to `false`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name to display in the address book for the user.\n"
                    },
                    "division": {
                        "type": "string",
                        "description": "The name of the division in which the user works.\n"
                    },
                    "employeeId": {
                        "type": "string",
                        "description": "The employee identifier assigned to the user by the organisation.\n"
                    },
                    "employeeType": {
                        "type": "string",
                        "description": "Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.\n"
                    },
                    "externalUserState": {
                        "type": "string",
                        "description": "For an external user invited to the tenant, this property represents the invited user's invitation status. Possible values are `PendingAcceptance` or `Accepted`.\n"
                    },
                    "faxNumber": {
                        "type": "string",
                        "description": "The fax number of the user.\n"
                    },
                    "forcePasswordChange": {
                        "type": "boolean",
                        "description": "Whether the user is forced to change the password during the next sign-in. Only takes effect when also changing the password. Defaults to `false`.\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name (first name) of the user.\n"
                    },
                    "imAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user’s job title.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The SMTP address for the user. This property cannot be unset once specified.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The mail alias for the user. Defaults to the user name part of the user principal name (UPN).\n"
                    },
                    "managerId": {
                        "type": "string",
                        "description": "The object ID of the user's manager.\n"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "The primary cellular telephone number for the user.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the user.\n"
                    },
                    "officeLocation": {
                        "type": "string",
                        "description": "The office location in the user's place of business.\n"
                    },
                    "onpremisesDistinguishedName": {
                        "type": "string",
                        "description": "The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesDomainName": {
                        "type": "string",
                        "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesImmutableId": {
                        "type": "string",
                        "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's `user_principal_name` property when creating a new user account.\n"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premise SAM account name of the user.\n"
                    },
                    "onpremisesSecurityIdentifier": {
                        "type": "string",
                        "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                    },
                    "onpremisesUserPrincipalName": {
                        "type": "string",
                        "description": "The on-premise user principal name of the user.\n"
                    },
                    "otherMails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of additional email addresses for the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the user. The password must satisfy minimum requirements as specified by the password policy. The\nmaximum length is 256 characters. This property is required when creating a new user\n",
                        "secret": true
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The user's preferred language, in ISO 639-1 notation.\n"
                    },
                    "proxyAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses for the user that direct to the same mailbox.\n"
                    },
                    "showInAddressList": {
                        "type": "boolean",
                        "description": "Whether or not the Outlook global address list should include this user. Defaults to `true`.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state or province in the user's address.\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address of the user's place of business.\n"
                    },
                    "surname": {
                        "type": "string",
                        "description": "The user's surname (family name or last name).\n"
                    },
                    "usageLocation": {
                        "type": "string",
                        "description": "The usage location of the user. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The user principal name (UPN) of the user.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "The user type in the directory. Possible values are `Guest` or `Member`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/userFlowAttribute:UserFlowAttribute": {
            "description": "Manages user flow attributes in an Azure Active Directory (Azure AD) tenant.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires the following application role: `IdentityUserFlow.ReadWrite.All`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.UserFlowAttribute(\"example\", {\n    dataType: \"string\",\n    description: \"Your hobby\",\n    displayName: \"Hobby\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.UserFlowAttribute(\"example\",\n    data_type=\"string\",\n    description=\"Your hobby\",\n    display_name=\"Hobby\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new AzureAD.UserFlowAttribute(\"example\", new()\n    {\n        DataType = \"string\",\n        Description = \"Your hobby\",\n        DisplayName = \"Hobby\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewUserFlowAttribute(ctx, \"example\", \u0026azuread.UserFlowAttributeArgs{\n\t\t\tDataType:    pulumi.String(\"string\"),\n\t\t\tDescription: pulumi.String(\"Your hobby\"),\n\t\t\tDisplayName: pulumi.String(\"Hobby\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.UserFlowAttribute;\nimport com.pulumi.azuread.UserFlowAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserFlowAttribute(\"example\", UserFlowAttributeArgs.builder()        \n            .dataType(\"string\")\n            .description(\"Your hobby\")\n            .displayName(\"Hobby\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: azuread:UserFlowAttribute\n    properties:\n      dataType: string\n      description: Your hobby\n      displayName: Hobby\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUser flow attributes can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import azuread:index/userFlowAttribute:UserFlowAttribute example extension_ecc9f88db2924942b8a96f44873616fe_Hobbyjkorv\n```\n\n -\u003e This ID can be queried using the [User Flow Attributes API](https://learn.microsoft.com/en-us/graph/api/identityuserflowattribute-list?view=graph-rest-1.0\u0026tabs=http). ",
            "properties": {
                "attributeType": {
                    "type": "string",
                    "description": "The type of the user flow attribute. Values include `builtIn`, `custom` or `required`.\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "The data type of the user flow attribute. Possible values are `boolean`, `dateTime`, `int64`, `string` or `stringCollection`. Changing this forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user flow attribute that is shown to the user at the time of sign-up.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user flow attribute. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "attributeType",
                "dataType",
                "description",
                "displayName"
            ],
            "inputProperties": {
                "dataType": {
                    "type": "string",
                    "description": "The data type of the user flow attribute. Possible values are `boolean`, `dateTime`, `int64`, `string` or `stringCollection`. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user flow attribute that is shown to the user at the time of sign-up.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user flow attribute. Changing this forces a new resource to be created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataType",
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserFlowAttribute resources.\n",
                "properties": {
                    "attributeType": {
                        "type": "string",
                        "description": "The type of the user flow attribute. Values include `builtIn`, `custom` or `required`.\n"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the user flow attribute. Possible values are `boolean`, `dateTime`, `int64`, `string` or `stringCollection`. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the user flow attribute that is shown to the user at the time of sign-up.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user flow attribute. Changing this forces a new resource to be created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "azuread:index/getAccessPackage:getAccessPackage": {
            "description": "Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up by ID*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackage({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackage.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAccessPackage(ctx, \u0026azuread.LookupAccessPackageArgs{\n\t\t\tObjectId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackage\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\n```\n\n*Look up by DisplayName*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackage({\n    catalogId: \"00000000-0000-0000-0000-000000000000\",\n    displayName: \"My access package Catalog\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package(catalog_id=\"00000000-0000-0000-0000-000000000000\",\n    display_name=\"My access package Catalog\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackage.Invoke(new()\n    {\n        CatalogId = \"00000000-0000-0000-0000-000000000000\",\n        DisplayName = \"My access package Catalog\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAccessPackage(ctx, \u0026azuread.LookupAccessPackageArgs{\n\t\t\tCatalogId:   pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t\tDisplayName: pulumi.StringRef(\"My access package Catalog\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()\n            .catalogId(\"00000000-0000-0000-0000-000000000000\")\n            .displayName(\"My access package Catalog\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackage\n      Arguments:\n        catalogId: 00000000-0000-0000-0000-000000000000\n        displayName: My access package Catalog\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessPackage.\n",
                "properties": {
                    "catalogId": {
                        "type": "string",
                        "description": "The ID of the Catalog this access package is in.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the access package.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of this access package.\n\n\u003e Either `object_id`, or both `catalog_id` and `display_name`, must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessPackage.\n",
                "properties": {
                    "catalogId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the access package.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Whether the access package is hidden from the requestor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "hidden",
                    "objectId",
                    "id"
                ]
            }
        },
        "azuread:index/getAccessPackageCatalog:getAccessPackageCatalog": {
            "description": "i\nUse this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.\n\nWhen authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up by ID*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackageCatalog({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package_catalog(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackageCatalog.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAccessPackageCatalog(ctx, \u0026azuread.LookupAccessPackageCatalogArgs{\n\t\t\tObjectId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackageCatalog\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\n```\n\n*Look up by DisplayName*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackageCatalog({\n    displayName: \"My access package Catalog\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package_catalog(display_name=\"My access package Catalog\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackageCatalog.Invoke(new()\n    {\n        DisplayName = \"My access package Catalog\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAccessPackageCatalog(ctx, \u0026azuread.LookupAccessPackageCatalogArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My access package Catalog\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()\n            .displayName(\"My access package Catalog\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackageCatalog\n      Arguments:\n        displayName: My access package Catalog\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessPackageCatalog.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the access package catalog.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of this access package catalog.\n\n\u003e One of `display_name` or `object_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessPackageCatalog.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the access package catalog.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "externallyVisible": {
                        "type": "boolean",
                        "description": "Whether the access packages in this catalog can be requested by users outside the tenant.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "published": {
                        "type": "boolean",
                        "description": "Whether the access packages in this catalog are available for management.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "externallyVisible",
                    "objectId",
                    "published",
                    "id"
                ]
            }
        },
        "azuread:index/getAccessPackageCatalogRole:getAccessPackageCatalogRole": {
            "description": "Gets information about an access package catalog role.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Group Display Name)\n\n*Look up by display name*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackageCatalogRole({\n    displayName: \"Catalog owner\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package_catalog_role(display_name=\"Catalog owner\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackageCatalogRole.Invoke(new()\n    {\n        DisplayName = \"Catalog owner\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetAccessPackageCatalogRole(ctx, \u0026azuread.GetAccessPackageCatalogRoleArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Catalog owner\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()\n            .displayName(\"Catalog owner\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackageCatalogRole\n      Arguments:\n        displayName: Catalog owner\n```\n\n*Look up by object ID*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAccessPackageCatalogRole({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_access_package_catalog_role(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAccessPackageCatalogRole.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetAccessPackageCatalogRole(ctx, \u0026azuread.GetAccessPackageCatalogRoleArgs{\n\t\t\tObjectId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAccessPackageCatalogRole\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccessPackageCatalogRole.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display name of the role.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the object ID of the role.\n\n\u003e One of `display_name` or `object_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccessPackageCatalogRole.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the role.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the role.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The object ID of the role.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "objectId",
                    "templateId",
                    "id"
                ]
            }
        },
        "azuread:index/getAdministrativeUnit:getAdministrativeUnit": {
            "description": "Gets information about an adminisrative unit in Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Group Display Name)\n\n*Look up by display name*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAdministrativeUnit({\n    displayName: \"Example-AU\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_administrative_unit(display_name=\"Example-AU\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAdministrativeUnit.Invoke(new()\n    {\n        DisplayName = \"Example-AU\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAdministrativeUnit(ctx, \u0026azuread.LookupAdministrativeUnitArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Example-AU\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()\n            .displayName(\"Example-AU\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAdministrativeUnit\n      Arguments:\n        displayName: Example-AU\n```\n\n*Look up by object ID*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getAdministrativeUnit({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_administrative_unit(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetAdministrativeUnit.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupAdministrativeUnit(ctx, \u0026azuread.LookupAdministrativeUnitArgs{\n\t\t\tObjectId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getAdministrativeUnit\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAdministrativeUnit.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display name of the administrative unit.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the object ID of the administrative unit.\n\n\u003e One of `display_name` or `object_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdministrativeUnit.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the administrative unit.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the administrative unit.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of object IDs of members who are present in this administrative unit.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the administrative unit.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "Whether the administrative unit _and_ its members are hidden or publicly viewable in the directory. One of: `Hiddenmembership` or `Public`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "members",
                    "objectId",
                    "visibility",
                    "id"
                ]
            }
        },
        "azuread:index/getApplication:getApplication": {
            "description": "Use this data source to access information about an existing Application within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getApplication({\n    displayName: \"My First AzureAD Application\",\n});\nexport const applicationObjectId = example.then(example =\u003e example.objectId);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_application(display_name=\"My First AzureAD Application\")\npulumi.export(\"applicationObjectId\", example.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetApplication.Invoke(new()\n    {\n        DisplayName = \"My First AzureAD Application\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"applicationObjectId\"] = example.Apply(getApplicationResult =\u003e getApplicationResult.ObjectId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.LookupApplication(ctx, \u0026azuread.LookupApplicationArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"My First AzureAD Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"applicationObjectId\", example.ObjectId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()\n            .displayName(\"My First AzureAD Application\")\n            .build());\n\n        ctx.export(\"applicationObjectId\", example.applyValue(getApplicationResult -\u003e getApplicationResult.objectId()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getApplication\n      Arguments:\n        displayName: My First AzureAD Application\noutputs:\n  applicationObjectId: ${example.objectId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Specifies the Client ID of the application.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display name of the application.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the Object ID of the application.\n\n\u003e One of `client_id`, `display_name`, or `object_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "apis": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationApi:getApplicationApi"
                        },
                        "description": "An `api` block as documented below.\n"
                    },
                    "appRoleIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.\n"
                    },
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationAppRole:getApplicationAppRole"
                        },
                        "description": "A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The Client ID for the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.\n"
                    },
                    "deviceOnlyAuthEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether this application supports device authentication without a user.\n"
                    },
                    "disabledByMicrosoft": {
                        "type": "string",
                        "description": "Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the app role that appears during app role assignment and in consent experiences.\n"
                    },
                    "fallbackPublicClientEnabled": {
                        "type": "boolean",
                        "description": "The fallback application type as public client, such as an installed application running on a mobile device.\n"
                    },
                    "featureTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationFeatureTag:getApplicationFeatureTag"
                        },
                        "description": "A `features` block as described below.\n"
                    },
                    "groupMembershipClaims": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifierUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "CDN URL to the application's logo.\n"
                    },
                    "marketingUrl": {
                        "type": "string",
                        "description": "URL of the application's marketing page.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "User-specified notes relevant for the management of the application.\n"
                    },
                    "oauth2PermissionScopeIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                    },
                    "oauth2PostResponseRequired": {
                        "type": "boolean",
                        "description": "Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. When `false`, only GET requests are allowed.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The application's object ID.\n"
                    },
                    "optionalClaims": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationOptionalClaim:getApplicationOptionalClaim"
                        },
                        "description": "An `optional_claims` block as documented below.\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of object IDs of principals that are assigned ownership of the application.\n"
                    },
                    "privacyStatementUrl": {
                        "type": "string",
                        "description": "URL of the application's privacy statement.\n"
                    },
                    "publicClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationPublicClient:getApplicationPublicClient"
                        },
                        "description": "A `public_client` block as documented below.\n"
                    },
                    "publisherDomain": {
                        "type": "string",
                        "description": "The verified publisher domain for the application.\n"
                    },
                    "requiredResourceAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationRequiredResourceAccess:getApplicationRequiredResourceAccess"
                        },
                        "description": "A collection of `required_resource_access` blocks as documented below.\n"
                    },
                    "serviceManagementReference": {
                        "type": "string",
                        "description": "References application context information from a Service or Asset Management database.\n"
                    },
                    "signInAudience": {
                        "type": "string",
                        "description": "The Microsoft account types that are supported for the current application. One of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.\n"
                    },
                    "singlePageApplications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationSinglePageApplication:getApplicationSinglePageApplication"
                        },
                        "description": "A `single_page_application` block as documented below.\n"
                    },
                    "supportUrl": {
                        "type": "string",
                        "description": "URL of the application's support page.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to the application.\n"
                    },
                    "termsOfServiceUrl": {
                        "type": "string",
                        "description": "URL of the application's terms of service statement.\n"
                    },
                    "webs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationWeb:getApplicationWeb"
                        },
                        "description": "A `web` block as documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apis",
                    "appRoleIds",
                    "appRoles",
                    "applicationId",
                    "clientId",
                    "description",
                    "deviceOnlyAuthEnabled",
                    "disabledByMicrosoft",
                    "displayName",
                    "fallbackPublicClientEnabled",
                    "featureTags",
                    "groupMembershipClaims",
                    "identifierUris",
                    "logoUrl",
                    "marketingUrl",
                    "notes",
                    "oauth2PermissionScopeIds",
                    "oauth2PostResponseRequired",
                    "objectId",
                    "optionalClaims",
                    "owners",
                    "privacyStatementUrl",
                    "publicClients",
                    "publisherDomain",
                    "requiredResourceAccesses",
                    "serviceManagementReference",
                    "signInAudience",
                    "singlePageApplications",
                    "supportUrl",
                    "tags",
                    "termsOfServiceUrl",
                    "webs",
                    "id"
                ]
            }
        },
        "azuread:index/getApplicationPublishedAppIds:getApplicationPublishedAppIds": {
            "description": "Use this data source to discover application IDs for APIs published by Microsoft.\n\nThis data source uses an [unofficial source of application IDs](https://github.com/hashicorp/go-azure-sdk/blob/main/sdk/environments/application_ids.go), as there is currently no available official indexed source for applications or APIs published by Microsoft.\n\nThe app IDs returned by this data source are sourced from the Azure Global (Public) Cloud, however some of them are known to work in government and national clouds.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Listing well-known application IDs*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nexport const publishedAppIds = wellKnown.then(wellKnown =\u003e wellKnown.result);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\npulumi.export(\"publishedAppIds\", well_known.result)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"publishedAppIds\"] = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"publishedAppIds\", wellKnown.Result)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        ctx.export(\"publishedAppIds\", wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result()));\n    }\n}\n```\n```yaml\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\noutputs:\n  publishedAppIds: ${wellKnown.result}\n```\n\n*Granting access to an application*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst wellKnown = azuread.getApplicationPublishedAppIds({});\nconst msgraph = new azuread.ServicePrincipal(\"msgraph\", {\n    clientId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n    useExisting: true,\n});\nconst example = new azuread.Application(\"example\", {\n    displayName: \"example\",\n    requiredResourceAccesses: [{\n        resourceAppId: wellKnown.then(wellKnown =\u003e wellKnown.result?.MicrosoftGraph),\n        resourceAccesses: [\n            {\n                id: msgraph.appRoleIds[\"User.Read.All\"],\n                type: \"Role\",\n            },\n            {\n                id: msgraph.oauth2PermissionScopeIds[\"User.ReadWrite\"],\n                type: \"Scope\",\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nwell_known = azuread.get_application_published_app_ids()\nmsgraph = azuread.ServicePrincipal(\"msgraph\",\n    client_id=well_known.result[\"MicrosoftGraph\"],\n    use_existing=True)\nexample = azuread.Application(\"example\",\n    display_name=\"example\",\n    required_resource_accesses=[azuread.ApplicationRequiredResourceAccessArgs(\n        resource_app_id=well_known.result[\"MicrosoftGraph\"],\n        resource_accesses=[\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.app_role_ids[\"User.Read.All\"],\n                type=\"Role\",\n            ),\n            azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=msgraph.oauth2_permission_scope_ids[\"User.ReadWrite\"],\n                type=\"Scope\",\n            ),\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wellKnown = AzureAD.GetApplicationPublishedAppIds.Invoke();\n\n    var msgraph = new AzureAD.ServicePrincipal(\"msgraph\", new()\n    {\n        ClientId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n        UseExisting = true,\n    });\n\n    var example = new AzureAD.Application(\"example\", new()\n    {\n        DisplayName = \"example\",\n        RequiredResourceAccesses = new[]\n        {\n            new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n            {\n                ResourceAppId = wellKnown.Apply(getApplicationPublishedAppIdsResult =\u003e getApplicationPublishedAppIdsResult.Result?.MicrosoftGraph),\n                ResourceAccesses = new[]\n                {\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.AppRoleIds.Apply(appRoleIds =\u003e appRoleIds.User_Read_All),\n                        Type = \"Role\",\n                    },\n                    new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                    {\n                        Id = msgraph.Oauth2PermissionScopeIds.Apply(oauth2PermissionScopeIds =\u003e oauth2PermissionScopeIds.User_ReadWrite),\n                        Type = \"Scope\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\twellKnown, err := azuread.GetApplicationPublishedAppIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmsgraph, err := azuread.NewServicePrincipal(ctx, \"msgraph\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tClientId:    *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\tUseExisting: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplication(ctx, \"example\", \u0026azuread.ApplicationArgs{\n\t\t\tDisplayName: pulumi.String(\"example\"),\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAppId: *pulumi.String(wellKnown.Result.MicrosoftGraph),\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.AppRoleIds.ApplyT(func(appRoleIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn appRoleIds.User.Read.All, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId: msgraph.Oauth2PermissionScopeIds.ApplyT(func(oauth2PermissionScopeIds map[string]string) (string, error) {\n\t\t\t\t\t\t\t\treturn oauth2PermissionScopeIds.User.ReadWrite, nil\n\t\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.ServicePrincipal;\nimport com.pulumi.azuread.ServicePrincipalArgs;\nimport com.pulumi.azuread.Application;\nimport com.pulumi.azuread.ApplicationArgs;\nimport com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();\n\n        var msgraph = new ServicePrincipal(\"msgraph\", ServicePrincipalArgs.builder()        \n            .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n            .useExisting(true)\n            .build());\n\n        var example = new Application(\"example\", ApplicationArgs.builder()        \n            .displayName(\"example\")\n            .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()\n                .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -\u003e getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))\n                .resourceAccesses(                \n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.appRoleIds().applyValue(appRoleIds -\u003e appRoleIds.User.Read.All()))\n                        .type(\"Role\")\n                        .build(),\n                    ApplicationRequiredResourceAccessResourceAccessArgs.builder()\n                        .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -\u003e oauth2PermissionScopeIds.User.ReadWrite()))\n                        .type(\"Scope\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  msgraph:\n    type: azuread:ServicePrincipal\n    properties:\n      clientId: ${wellKnown.result.MicrosoftGraph}\n      useExisting: true\n  example:\n    type: azuread:Application\n    properties:\n      displayName: example\n      requiredResourceAccesses:\n        - resourceAppId: ${wellKnown.result.MicrosoftGraph}\n          resourceAccesses:\n            - id: ${msgraph.appRoleIds\"User.Read.All\"[%!s(MISSING)]}\n              type: Role\n            - id: ${msgraph.oauth2PermissionScopeIds\"User.ReadWrite\"[%!s(MISSING)]}\n              type: Scope\nvariables:\n  wellKnown:\n    fn::invoke:\n      Function: azuread:getApplicationPublishedAppIds\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getApplicationPublishedAppIds.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "result": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of application names to application IDs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "result",
                    "id"
                ]
            }
        },
        "azuread:index/getApplicationTemplate:getApplicationTemplate": {
            "description": "Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).\n\n## API Permissions\n\nThis data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getApplicationTemplate({\n    displayName: \"Marketo\",\n});\nexport const applicationTemplateId = example.then(example =\u003e example.templateId);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_application_template(display_name=\"Marketo\")\npulumi.export(\"applicationTemplateId\", example.template_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetApplicationTemplate.Invoke(new()\n    {\n        DisplayName = \"Marketo\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"applicationTemplateId\"] = example.Apply(getApplicationTemplateResult =\u003e getApplicationTemplateResult.TemplateId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.GetApplicationTemplate(ctx, \u0026azuread.GetApplicationTemplateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Marketo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"applicationTemplateId\", example.TemplateId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetApplicationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()\n            .displayName(\"Marketo\")\n            .build());\n\n        ctx.export(\"applicationTemplateId\", example.applyValue(getApplicationTemplateResult -\u003e getApplicationTemplateResult.templateId()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getApplicationTemplate\n      Arguments:\n        displayName: Marketo\noutputs:\n  applicationTemplateId: ${example.templateId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationTemplate.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display name of the templated application.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Specifies the ID of the templated application.\n\n\u003e One of `template_id` or `display_name` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationTemplate.\n",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of categories for this templated application.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the templated application.\n"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "Home page URL of the templated application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logoUrl": {
                        "type": "string",
                        "description": "URL to retrieve the logo for this templated application.\n"
                    },
                    "publisher": {
                        "type": "string",
                        "description": "Name of the publisher for this templated application.\n"
                    },
                    "supportedProvisioningTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of provisioning modes supported by this templated application.\n"
                    },
                    "supportedSingleSignOnModes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of single sign on modes supported by this templated application.\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "The ID of the templated application.\n"
                    }
                },
                "type": "object",
                "required": [
                    "categories",
                    "displayName",
                    "homepageUrl",
                    "logoUrl",
                    "publisher",
                    "supportedProvisioningTypes",
                    "supportedSingleSignOnModes",
                    "templateId",
                    "id"
                ]
            }
        },
        "azuread:index/getClientConfig:getClientConfig": {
            "description": "Use this data source to access the configuration of the AzureAD provider.\n\n## API Permissions\n\nNo additional roles are required to use this data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nexport const objectId = current.then(current =\u003e current.objectId);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\npulumi.export(\"objectId\", current.object_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetClientConfig.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"objectId\"] = current.Apply(getClientConfigResult =\u003e getClientConfigResult.ObjectId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"objectId\", current.ObjectId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getClientConfig();\n\n        ctx.export(\"objectId\", current.applyValue(getClientConfigResult -\u003e getClientConfigResult.objectId()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getClientConfig\n      Arguments: {}\noutputs:\n  objectId: ${current.objectId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The client ID (application ID) linked to the authenticated principal, or the application used for delegated authentication.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the authenticated principal.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant ID of the authenticated principal.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "objectId",
                    "tenantId",
                    "id"
                ]
            }
        },
        "azuread:index/getDirectoryObject:getDirectoryObject": {
            "description": "Retrieves the OData type for a generic directory object having the provided object ID.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up and output type of object by ID*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getDirectoryObject({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\nexport const objectType = example.then(example =\u003e example.type);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_directory_object(object_id=\"00000000-0000-0000-0000-000000000000\")\npulumi.export(\"objectType\", example.type)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetDirectoryObject.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"objectType\"] = example.Apply(getDirectoryObjectResult =\u003e getDirectoryObjectResult.Type),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := azuread.GetDirectoryObject(ctx, \u0026azuread.GetDirectoryObjectArgs{\n\t\t\tObjectId: \"00000000-0000-0000-0000-000000000000\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"objectType\", example.Type)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetDirectoryObjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n        ctx.export(\"objectType\", example.applyValue(getDirectoryObjectResult -\u003e getDirectoryObjectResult.type()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getDirectoryObject\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\noutputs:\n  objectType: ${example.type}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes Reference \n\nThe following attributes are exported:\n\n*`object_id` - The object ID of the directory object.\n*`type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDirectoryObject.\n",
                "properties": {
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the Object ID of the directory object to look up.\n"
                    }
                },
                "type": "object",
                "required": [
                    "objectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDirectoryObject.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "objectId",
                    "type",
                    "id"
                ]
            }
        },
        "azuread:index/getDirectoryRoleTemplates:getDirectoryRoleTemplates": {
            "description": "Use this data source to access information about directory role templates within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getDirectoryRoleTemplates({});\nexport const roles = current.then(current =\u003e current.objectIds);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_directory_role_templates()\npulumi.export(\"roles\", current.object_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetDirectoryRoleTemplates.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roles\"] = current.Apply(getDirectoryRoleTemplatesResult =\u003e getDirectoryRoleTemplatesResult.ObjectIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetDirectoryRoleTemplates(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roles\", current.ObjectIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getDirectoryRoleTemplates();\n\n        ctx.export(\"roles\", current.applyValue(getDirectoryRoleTemplatesResult -\u003e getDirectoryRoleTemplatesResult.objectIds()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getDirectoryRoleTemplates\n      Arguments: {}\noutputs:\n  roles: ${current.objectIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDirectoryRoleTemplates.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the role templates.\n"
                    },
                    "roleTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getDirectoryRoleTemplatesRoleTemplate:getDirectoryRoleTemplatesRoleTemplate"
                        },
                        "description": "A list of role templates. Each `role_template` object provides the attributes documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "objectIds",
                    "roleTemplates",
                    "id"
                ]
            }
        },
        "azuread:index/getDirectoryRoles:getDirectoryRoles": {
            "description": "Use this data source to access information about activated directory roles within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this resource.\n\nWhen authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getDirectoryRoles({});\nexport const roles = current.then(current =\u003e current.objectIds);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_directory_roles()\npulumi.export(\"roles\", current.object_ids)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = AzureAD.GetDirectoryRoles.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"roles\"] = current.Apply(getDirectoryRolesResult =\u003e getDirectoryRolesResult.ObjectIds),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetDirectoryRoles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"roles\", current.ObjectIds)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = AzureadFunctions.getDirectoryRoles();\n\n        ctx.export(\"roles\", current.applyValue(getDirectoryRolesResult -\u003e getDirectoryRolesResult.objectIds()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: azuread:getDirectoryRoles\n      Arguments: {}\noutputs:\n  roles: ${current.objectIds}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDirectoryRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the roles.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getDirectoryRolesRole:getDirectoryRolesRole"
                        },
                        "description": "A list of users. Each `role` object provides the attributes documented below.\n"
                    },
                    "templateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The template IDs of the roles.\n"
                    }
                },
                "type": "object",
                "required": [
                    "objectIds",
                    "roles",
                    "templateIds",
                    "id"
                ]
            }
        },
        "azuread:index/getDomains:getDomains": {
            "description": "Use this data source to access information about existing Domains within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst aadDomains = azuread.getDomains({});\nexport const domainNames = aadDomains.then(aadDomains =\u003e aadDomains.domains.map(__item =\u003e __item.domainName));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\naad_domains = azuread.get_domains()\npulumi.export(\"domainNames\", [__item.domain_name for __item in aad_domains.domains])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aadDomains = AzureAD.GetDomains.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"domainNames\"] = aadDomains.Apply(getDomainsResult =\u003e getDomainsResult.Domains).Select(__item =\u003e __item.DomainName).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taadDomains, err := azuread.GetDomains(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range aadDomains.Domains {\n\t\t\tsplat0 = append(splat0, val0.DomainName)\n\t\t}\n\t\tctx.Export(\"domainNames\", splat0)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetDomainsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var aadDomains = AzureadFunctions.getDomains();\n\n        ctx.export(\"domainNames\", aadDomains.applyValue(getDomainsResult -\u003e getDomainsResult.domains()).stream().map(element -\u003e element.domainName()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomains.\n",
                "properties": {
                    "adminManaged": {
                        "type": "boolean",
                        "description": "Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.\n"
                    },
                    "includeUnverified": {
                        "type": "boolean",
                        "description": "Set to `true` if unverified Azure AD domains should be included. Defaults to `false`.\n"
                    },
                    "onlyDefault": {
                        "type": "boolean",
                        "description": "Set to `true` to only return the default domain.\n"
                    },
                    "onlyInitial": {
                        "type": "boolean",
                        "description": "Set to `true` to only return the initial domain, which is your primary Azure Active Directory tenant domain. Defaults to `false`.\n"
                    },
                    "onlyRoot": {
                        "type": "boolean",
                        "description": "Set to `true` to only return verified root domains. Excludes subdomains and unverified domains.\n"
                    },
                    "supportsServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of supported services that must be supported by a domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.\n\n\u003e **Note on filters** If `include_unverified` is set to `true`, you cannot specify `only_default` or `only_initial`. Additionally, you cannot combine `only_default` with `only_initial`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomains.\n",
                "properties": {
                    "adminManaged": {
                        "type": "boolean",
                        "description": "Whether the DNS for the domain is managed by Microsoft 365.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getDomainsDomain:getDomainsDomain"
                        },
                        "description": "A list of tenant domains. Each `domain` object provides the attributes documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeUnverified": {
                        "type": "boolean"
                    },
                    "onlyDefault": {
                        "type": "boolean"
                    },
                    "onlyInitial": {
                        "type": "boolean"
                    },
                    "onlyRoot": {
                        "type": "boolean"
                    },
                    "supportsServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "domains",
                    "id"
                ]
            }
        },
        "azuread:index/getGroup:getGroup": {
            "description": "Gets information about an Azure Active Directory group.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Group Display Name)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getGroup({\n    displayName: \"MyGroupName\",\n    securityEnabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_group(display_name=\"MyGroupName\",\n    security_enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetGroup.Invoke(new()\n    {\n        DisplayName = \"MyGroupName\",\n        SecurityEnabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupGroup(ctx, \u0026azuread.LookupGroupArgs{\n\t\t\tDisplayName:     pulumi.StringRef(\"MyGroupName\"),\n\t\t\tSecurityEnabled: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()\n            .displayName(\"MyGroupName\")\n            .securityEnabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getGroup\n      Arguments:\n        displayName: MyGroupName\n        securityEnabled: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the group.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is mail-enabled.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The mail alias for the group, unique in the organisation.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the object ID of the group.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group.\n\n\u003e One of `display_name`, `object_id` or `mail_nickname` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "assignableToRole": {
                        "type": "boolean",
                        "description": "Indicates whether this group can be assigned to an Azure Active Directory role.\n"
                    },
                    "autoSubscribeNewMembers": {
                        "type": "boolean",
                        "description": "Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Only set for Unified groups.\n"
                    },
                    "behaviors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of behaviors for a Microsoft 365 group, such as `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The optional description of the group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the group.\n"
                    },
                    "dynamicMemberships": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getGroupDynamicMembership:getGroupDynamicMembership"
                        },
                        "description": "A `dynamic_membership` block as documented below.\n"
                    },
                    "externalSendersAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether people external to the organization can send messages to the group. Only set for Unified groups.\n"
                    },
                    "hideFromAddressLists": {
                        "type": "boolean",
                        "description": "Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Only set for Unified groups.\n"
                    },
                    "hideFromOutlookClients": {
                        "type": "boolean",
                        "description": "Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Only set for Unified groups.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The SMTP address for the group.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is mail-enabled.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The mail alias for the group, unique in the organisation.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of object IDs of the group members.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the group.\n"
                    },
                    "onpremisesDomainName": {
                        "type": "string",
                        "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesGroupType": {
                        "type": "string",
                        "description": "The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.\n"
                    },
                    "onpremisesNetbiosName": {
                        "type": "string",
                        "description": "The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSecurityIdentifier": {
                        "type": "string",
                        "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of object IDs of the group owners.\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The preferred language for a Microsoft 365 group, in ISO 639-1 notation.\n"
                    },
                    "provisioningOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of provisioning options for a Microsoft 365 group, such as `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details.\n"
                    },
                    "proxyAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses for the group that direct to the same group mailbox.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group.\n"
                    },
                    "theme": {
                        "type": "string",
                        "description": "The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. When no theme is set, the value is `null`.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of group types configured for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility.\n"
                    },
                    "writebackEnabled": {
                        "type": "boolean",
                        "description": "Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignableToRole",
                    "autoSubscribeNewMembers",
                    "behaviors",
                    "description",
                    "displayName",
                    "dynamicMemberships",
                    "externalSendersAllowed",
                    "hideFromAddressLists",
                    "hideFromOutlookClients",
                    "mail",
                    "mailEnabled",
                    "mailNickname",
                    "members",
                    "objectId",
                    "onpremisesDomainName",
                    "onpremisesGroupType",
                    "onpremisesNetbiosName",
                    "onpremisesSamAccountName",
                    "onpremisesSecurityIdentifier",
                    "onpremisesSyncEnabled",
                    "owners",
                    "preferredLanguage",
                    "provisioningOptions",
                    "proxyAddresses",
                    "securityEnabled",
                    "theme",
                    "types",
                    "visibility",
                    "writebackEnabled",
                    "id"
                ]
            }
        },
        "azuread:index/getGroups:getGroups": {
            "description": "Gets Object IDs or Display Names for multiple Azure Active Directory groups.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up by group name*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getGroups({\n    displayNames: [\n        \"group-a\",\n        \"group-b\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_groups(display_names=[\n    \"group-a\",\n    \"group-b\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetGroups.Invoke(new()\n    {\n        DisplayNames = new[]\n        {\n            \"group-a\",\n            \"group-b\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tDisplayNames: []string{\n\t\t\t\t\"group-a\",\n\t\t\t\t\"group-b\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()\n            .displayNames(            \n                \"group-a\",\n                \"group-b\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getGroups\n      Arguments:\n        displayNames:\n          - group-a\n          - group-b\n```\n\n*Look up by display name prefix*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst sales = azuread.getGroups({\n    displayNamePrefix: \"sales-\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nsales = azuread.get_groups(display_name_prefix=\"sales-\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sales = AzureAD.GetGroups.Invoke(new()\n    {\n        DisplayNamePrefix = \"sales-\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tDisplayNamePrefix: pulumi.StringRef(\"sales-\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()\n            .displayNamePrefix(\"sales-\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sales:\n    fn::invoke:\n      Function: azuread:getGroups\n      Arguments:\n        displayNamePrefix: sales-\n```\n\n*Look up all groups*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst all = azuread.getGroups({\n    returnAll: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nall = azuread.get_groups(return_all=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = AzureAD.GetGroups.Invoke(new()\n    {\n        ReturnAll = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tReturnAll: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()\n            .returnAll(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: azuread:getGroups\n      Arguments:\n        returnAll: true\n```\n\n*Look up all mail-enabled groups*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst mailEnabled = azuread.getGroups({\n    mailEnabled: true,\n    returnAll: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nmail_enabled = azuread.get_groups(mail_enabled=True,\n    return_all=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mailEnabled = AzureAD.GetGroups.Invoke(new()\n    {\n        MailEnabled = true,\n        ReturnAll = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tMailEnabled: pulumi.BoolRef(true),\n\t\t\tReturnAll:   pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()\n            .mailEnabled(true)\n            .returnAll(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mailEnabled:\n    fn::invoke:\n      Function: azuread:getGroups\n      Arguments:\n        mailEnabled: true\n        returnAll: true\n```\n\n*Look up all security-enabled groups that are not mail-enabled*\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst securityOnly = azuread.getGroups({\n    mailEnabled: false,\n    returnAll: true,\n    securityEnabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nsecurity_only = azuread.get_groups(mail_enabled=False,\n    return_all=True,\n    security_enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var securityOnly = AzureAD.GetGroups.Invoke(new()\n    {\n        MailEnabled = false,\n        ReturnAll = true,\n        SecurityEnabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tMailEnabled:     pulumi.BoolRef(false),\n\t\t\tReturnAll:       pulumi.BoolRef(true),\n\t\t\tSecurityEnabled: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()\n            .mailEnabled(false)\n            .returnAll(true)\n            .securityEnabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  securityOnly:\n    fn::invoke:\n      Function: azuread:getGroups\n      Arguments:\n        mailEnabled: false\n        returnAll: true\n        securityEnabled: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroups.\n",
                "properties": {
                    "displayNamePrefix": {
                        "type": "string",
                        "description": "A common display name prefix to match when returning groups.\n"
                    },
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The display names of the groups.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "Ignore missing groups and return groups that were found. The data source will still fail if no groups are found. Cannot be specified with `return_all`. Defaults to `false`.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the returned groups should be mail-enabled. By itself this does not exclude security-enabled groups. Setting this to `true` ensures all groups are mail-enabled, and setting to `false` ensures that all groups are _not_ mail-enabled. To ignore this filter, omit the property or set it to null. Cannot be specified together with `object_ids`.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the groups.\n"
                    },
                    "returnAll": {
                        "type": "boolean",
                        "description": "A flag to denote if all groups should be fetched and returned. Cannot be specified wth `ignore_missing`. Defaults to `false`.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the returned groups should be security-enabled. By itself this does not exclude mail-enabled groups. Setting this to `true` ensures all groups are security-enabled, and setting to `false` ensures that all groups are _not_ security-enabled. To ignore this filter, omit the property or set it to null. Cannot be specified together with `object_ids`.\n\n\u003e One of `display_names`, `display_name_prefix`, `object_ids` or `return_all` should be specified. Either `display_name` or `object_ids` _may_ be specified as an empty list, in which case no results will be returned.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "displayNamePrefix": {
                        "type": "string"
                    },
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The display names of the groups.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean"
                    },
                    "mailEnabled": {
                        "type": "boolean"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the groups.\n"
                    },
                    "returnAll": {
                        "type": "boolean"
                    },
                    "securityEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "displayNamePrefix",
                    "displayNames",
                    "mailEnabled",
                    "objectIds",
                    "securityEnabled",
                    "id"
                ]
            }
        },
        "azuread:index/getNamedLocation:getNamedLocation": {
            "description": "Gets information about a Named Location within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`\n\nWhen authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getNamedLocation({\n    displayName: \"My Named Location\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_named_location(display_name=\"My Named Location\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetNamedLocation.Invoke(new()\n    {\n        DisplayName = \"My Named Location\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupNamedLocation(ctx, \u0026azuread.LookupNamedLocationArgs{\n\t\t\tDisplayName: \"My Named Location\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetNamedLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()\n            .displayName(\"My Named Location\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getNamedLocation\n      Arguments:\n        displayName: My Named Location\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes Reference \n\nThe following attributes are exported:\n\n* `country` - A `country` block as documented below, which describes a country-based named location.\n* `id` - The ID of the named location.\n* `ip` - An `ip` block as documented below, which describes an IP-based named location.\n* \n---\n\n`country` block exports the following:\n\n* `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.\n* `include_unknown_countries_and_regions` - Whether IP addresses that don't map to a country or region are included in the named location.\n\n---\n\n`ip` block exports the following:\n\n* `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.\n* `trusted` - Whether the named location is trusted.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNamedLocation.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display named of the named location to look up.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNamedLocation.\n",
                "properties": {
                    "countries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getNamedLocationCountry:getNamedLocationCountry"
                        }
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getNamedLocationIp:getNamedLocationIp"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "countries",
                    "displayName",
                    "ips",
                    "id"
                ]
            }
        },
        "azuread:index/getServicePrincipal:getServicePrincipal": {
            "description": "Gets information about an existing service principal associated with an application within Azure Active Directory.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up by application display name*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipal({\n    displayName: \"my-awesome-application\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(display_name=\"my-awesome-application\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipal.Invoke(new()\n    {\n        DisplayName = \"my-awesome-application\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my-awesome-application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()\n            .displayName(\"my-awesome-application\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipal\n      Arguments:\n        displayName: my-awesome-application\n```\n\n*Look up by client ID*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipal({\n    clientId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(client_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipal.Invoke(new()\n    {\n        ClientId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tClientId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()\n            .clientId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipal\n      Arguments:\n        clientId: 00000000-0000-0000-0000-000000000000\n```\n\n*Look up by service principal object ID*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipal({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipal.Invoke(new()\n    {\n        ObjectId = \"00000000-0000-0000-0000-000000000000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tObjectId: pulumi.StringRef(\"00000000-0000-0000-0000-000000000000\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()\n            .objectId(\"00000000-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipal\n      Arguments:\n        objectId: 00000000-0000-0000-0000-000000000000\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServicePrincipal.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the application associated with this service principal.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the application associated with this service principal.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the service principal.\n\n\u003e One of `client_id`, `display_name` or `object_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServicePrincipal.\n",
                "properties": {
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "Whether the service principal account is enabled.\n"
                    },
                    "alternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities.\n"
                    },
                    "appRoleAssignmentRequired": {
                        "type": "boolean",
                        "description": "Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application.\n"
                    },
                    "appRoleIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of app role values to app role IDs, as published by the associated application, intended to be useful when referencing app roles in other resources in your configuration.\n"
                    },
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalAppRole:getServicePrincipalAppRole"
                        },
                        "description": "A list of app roles published by the associated application, as documented below. For more information [official documentation](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "deprecationMessage": "The `application_id` property has been replaced with the `client_id` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "applicationTenantId": {
                        "type": "string",
                        "description": "The tenant ID where the associated application is registered.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID of the application associated with this service principal.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Permission help text that appears in the admin app assignment and consent experiences.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                    },
                    "featureTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalFeatureTag:getServicePrincipalFeatureTag"
                        }
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalFeature:getServicePrincipalFeature"
                        },
                        "description": "A `features` block as described below.\n",
                        "deprecationMessage": "This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider"
                    },
                    "homepageUrl": {
                        "type": "string",
                        "description": "Home page or landing page of the associated application.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL that will be used by Microsoft's authorization service to logout an user using OpenId Connect front-channel, back-channel or SAML logout protocols, taken from the associated application.\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "A free text field to capture information about the service principal, typically used for operational purposes.\n"
                    },
                    "notificationEmailAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.\n"
                    },
                    "oauth2PermissionScopeIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping of OAuth2.0 permission scope values to scope IDs, as exposed by the associated application, intended to be useful when referencing permission scopes in other resources in your configuration.\n"
                    },
                    "oauth2PermissionScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalOauth2PermissionScope:getServicePrincipalOauth2PermissionScope"
                        },
                        "description": "A collection of OAuth 2.0 delegated permissions exposed by the associated application. Each permission is covered by an `oauth2_permission_scopes` block as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the service principal.\n"
                    },
                    "preferredSingleSignOnMode": {
                        "type": "string",
                        "description": "The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps.\n"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application.\n"
                    },
                    "samlMetadataUrl": {
                        "type": "string",
                        "description": "The URL where the service exposes SAML metadata for federation.\n"
                    },
                    "samlSingleSignOns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalSamlSingleSignOn:getServicePrincipalSamlSingleSignOn"
                        },
                        "description": "A `saml_single_sign_on` block as documented below.\n"
                    },
                    "servicePrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of identifier URI(s), copied over from the associated application.\n"
                    },
                    "signInAudience": {
                        "type": "string",
                        "description": "The Microsoft account types that are supported for the associated application. Possible values include `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to the service principal.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Possible values are `User` or `Admin`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountEnabled",
                    "alternativeNames",
                    "appRoleAssignmentRequired",
                    "appRoleIds",
                    "appRoles",
                    "applicationId",
                    "applicationTenantId",
                    "clientId",
                    "description",
                    "displayName",
                    "featureTags",
                    "features",
                    "homepageUrl",
                    "loginUrl",
                    "logoutUrl",
                    "notes",
                    "notificationEmailAddresses",
                    "oauth2PermissionScopeIds",
                    "oauth2PermissionScopes",
                    "objectId",
                    "preferredSingleSignOnMode",
                    "redirectUris",
                    "samlMetadataUrl",
                    "samlSingleSignOns",
                    "servicePrincipalNames",
                    "signInAudience",
                    "tags",
                    "type",
                    "id"
                ]
            }
        },
        "azuread:index/getServicePrincipals:getServicePrincipals": {
            "description": "Gets basic information for multiple Azure Active Directory service principals.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Look up by application display names*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipals({\n    displayNames: [\n        \"example-app\",\n        \"another-app\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principals(display_names=[\n    \"example-app\",\n    \"another-app\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipals.Invoke(new()\n    {\n        DisplayNames = new[]\n        {\n            \"example-app\",\n            \"another-app\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetServicePrincipals(ctx, \u0026azuread.GetServicePrincipalsArgs{\n\t\t\tDisplayNames: []string{\n\t\t\t\t\"example-app\",\n\t\t\t\t\"another-app\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()\n            .displayNames(            \n                \"example-app\",\n                \"another-app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipals\n      Arguments:\n        displayNames:\n          - example-app\n          - another-app\n```\n\n*Look up by application IDs (client IDs*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipals({\n    clientIds: [\n        \"11111111-0000-0000-0000-000000000000\",\n        \"22222222-0000-0000-0000-000000000000\",\n        \"33333333-0000-0000-0000-000000000000\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principals(client_ids=[\n    \"11111111-0000-0000-0000-000000000000\",\n    \"22222222-0000-0000-0000-000000000000\",\n    \"33333333-0000-0000-0000-000000000000\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipals.Invoke(new()\n    {\n        ClientIds = new[]\n        {\n            \"11111111-0000-0000-0000-000000000000\",\n            \"22222222-0000-0000-0000-000000000000\",\n            \"33333333-0000-0000-0000-000000000000\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetServicePrincipals(ctx, \u0026azuread.GetServicePrincipalsArgs{\n\t\t\tClientIds: []string{\n\t\t\t\t\"11111111-0000-0000-0000-000000000000\",\n\t\t\t\t\"22222222-0000-0000-0000-000000000000\",\n\t\t\t\t\"33333333-0000-0000-0000-000000000000\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()\n            .clientIds(            \n                \"11111111-0000-0000-0000-000000000000\",\n                \"22222222-0000-0000-0000-000000000000\",\n                \"33333333-0000-0000-0000-000000000000\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipals\n      Arguments:\n        clientIds:\n          - 11111111-0000-0000-0000-000000000000\n          - 22222222-0000-0000-0000-000000000000\n          - 33333333-0000-0000-0000-000000000000\n```\n\n*Look up by service principal object IDs*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getServicePrincipals({\n    objectIds: [\n        \"00000000-0000-0000-0000-000000000000\",\n        \"00000000-0000-0000-0000-111111111111\",\n        \"00000000-0000-0000-0000-222222222222\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principals(object_ids=[\n    \"00000000-0000-0000-0000-000000000000\",\n    \"00000000-0000-0000-0000-111111111111\",\n    \"00000000-0000-0000-0000-222222222222\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetServicePrincipals.Invoke(new()\n    {\n        ObjectIds = new[]\n        {\n            \"00000000-0000-0000-0000-000000000000\",\n            \"00000000-0000-0000-0000-111111111111\",\n            \"00000000-0000-0000-0000-222222222222\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetServicePrincipals(ctx, \u0026azuread.GetServicePrincipalsArgs{\n\t\t\tObjectIds: []string{\n\t\t\t\t\"00000000-0000-0000-0000-000000000000\",\n\t\t\t\t\"00000000-0000-0000-0000-111111111111\",\n\t\t\t\t\"00000000-0000-0000-0000-222222222222\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetServicePrincipalsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()\n            .objectIds(            \n                \"00000000-0000-0000-0000-000000000000\",\n                \"00000000-0000-0000-0000-111111111111\",\n                \"00000000-0000-0000-0000-222222222222\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getServicePrincipals\n      Arguments:\n        objectIds:\n          - 00000000-0000-0000-0000-000000000000\n          - 00000000-0000-0000-0000-111111111111\n          - 00000000-0000-0000-0000-222222222222\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServicePrincipals.\n",
                "properties": {
                    "applicationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of client IDs of the applications associated with the service principals.\n",
                        "deprecationMessage": "The `application_ids` property has been replaced with the `client_ids` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of client IDs of the applications associated with the service principals.\n"
                    },
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of display names of the applications associated with the service principals.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "Ignore missing service principals and return all service principals that are found. The data source will still fail if no service principals are found. Defaults to false.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the service principals.\n"
                    },
                    "returnAll": {
                        "type": "boolean",
                        "description": "When `true`, the data source will return all service principals. Cannot be used with `ignore_missing`. Defaults to false.\n\n\u003e Either `return_all`, or one of `client_ids`, `display_names` or `object_ids` must be specified. These _may_ be specified as an empty list, in which case no results will be returned.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServicePrincipals.\n",
                "properties": {
                    "applicationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of client IDs of the applications associated with the service principals.\n",
                        "deprecationMessage": "The `application_ids` property has been replaced with the `client_ids` property and will be removed in version 3.0 of the AzureAD provider"
                    },
                    "clientIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The client ID of the application associated with this service principal.\n"
                    },
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of display names of the applications associated with the service principals.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the service principals.\n"
                    },
                    "returnAll": {
                        "type": "boolean"
                    },
                    "servicePrincipals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalsServicePrincipal:getServicePrincipalsServicePrincipal"
                        },
                        "description": "A list of service principals. Each `service_principal` object provides the attributes documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "applicationIds",
                    "clientIds",
                    "displayNames",
                    "objectIds",
                    "servicePrincipals",
                    "id"
                ]
            }
        },
        "azuread:index/getUser:getUser": {
            "description": "Gets information about an Azure Active Directory user.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getUser({\n    userPrincipalName: \"user@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_user(user_principal_name=\"user@hashicorp.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = AzureAD.GetUser.Invoke(new()\n    {\n        UserPrincipalName = \"user@hashicorp.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: pulumi.StringRef(\"user@hashicorp.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AzureadFunctions.getUser(GetUserArgs.builder()\n            .userPrincipalName(\"user@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: azuread:getUser\n      Arguments:\n        userPrincipalName: user@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "employeeId": {
                        "type": "string",
                        "description": "The employee identifier assigned to the user by the organisation.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The SMTP address for the user.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The email alias of the user.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the user.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The user principal name (UPN) of the user.\n\n\u003e One of `user_principal_name`, `object_id`, `mail`, `mail_nickname` or `employee_id` must be specified.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "Whether or not the account is enabled.\n"
                    },
                    "ageGroup": {
                        "type": "string",
                        "description": "The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`.\n"
                    },
                    "businessPhones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of telephone numbers for the user.\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city in which the user is located.\n"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                    },
                    "consentProvidedForMinor": {
                        "type": "string",
                        "description": "Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`.\n"
                    },
                    "costCenter": {
                        "type": "string",
                        "description": "The cost center associated with the user.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country/region in which the user is located, e.g. `US` or `UK`.\n"
                    },
                    "creationType": {
                        "type": "string",
                        "description": "Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "The name for the department in which the user works.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user.\n"
                    },
                    "division": {
                        "type": "string",
                        "description": "The name of the division in which the user works.\n"
                    },
                    "employeeId": {
                        "type": "string",
                        "description": "The employee identifier assigned to the user by the organisation.\n"
                    },
                    "employeeType": {
                        "type": "string",
                        "description": "Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.\n"
                    },
                    "externalUserState": {
                        "type": "string",
                        "description": "For an external user invited to the tenant, this property represents the invited user's invitation status. Possible values are `PendingAcceptance` or `Accepted`.\n"
                    },
                    "faxNumber": {
                        "type": "string",
                        "description": "The fax number of the user.\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name (first name) of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user’s job title.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The SMTP address for the user.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The email alias of the user.\n"
                    },
                    "managerId": {
                        "type": "string",
                        "description": "The object ID of the user's manager.\n"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "The primary cellular telephone number for the user.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The object ID of the user.\n"
                    },
                    "officeLocation": {
                        "type": "string",
                        "description": "The office location in the user's place of business.\n"
                    },
                    "onpremisesDistinguishedName": {
                        "type": "string",
                        "description": "The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesDomainName": {
                        "type": "string",
                        "description": "The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesImmutableId": {
                        "type": "string",
                        "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object.\n"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premise SAM account name of the user.\n"
                    },
                    "onpremisesSecurityIdentifier": {
                        "type": "string",
                        "description": "The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.\n"
                    },
                    "onpremisesSyncEnabled": {
                        "type": "boolean",
                        "description": "Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).\n"
                    },
                    "onpremisesUserPrincipalName": {
                        "type": "string",
                        "description": "The on-premise user principal name of the user.\n"
                    },
                    "otherMails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of additional email addresses for the user.\n"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "The user's preferred language, in ISO 639-1 notation.\n"
                    },
                    "proxyAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of email addresses for the user that direct to the same mailbox.\n"
                    },
                    "showInAddressList": {
                        "type": "boolean",
                        "description": "Whether or not the Outlook global address list should include this user.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state or province in the user's address.\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address of the user's place of business.\n"
                    },
                    "surname": {
                        "type": "string",
                        "description": "The user's surname (family name or last name).\n"
                    },
                    "usageLocation": {
                        "type": "string",
                        "description": "The usage location of the user.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The user principal name (UPN) of the user.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "The user type in the directory. Possible values are `Guest` or `Member`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountEnabled",
                    "ageGroup",
                    "businessPhones",
                    "city",
                    "companyName",
                    "consentProvidedForMinor",
                    "costCenter",
                    "country",
                    "creationType",
                    "department",
                    "displayName",
                    "division",
                    "employeeId",
                    "employeeType",
                    "externalUserState",
                    "faxNumber",
                    "givenName",
                    "imAddresses",
                    "jobTitle",
                    "mail",
                    "mailNickname",
                    "managerId",
                    "mobilePhone",
                    "objectId",
                    "officeLocation",
                    "onpremisesDistinguishedName",
                    "onpremisesDomainName",
                    "onpremisesImmutableId",
                    "onpremisesSamAccountName",
                    "onpremisesSecurityIdentifier",
                    "onpremisesSyncEnabled",
                    "onpremisesUserPrincipalName",
                    "otherMails",
                    "postalCode",
                    "preferredLanguage",
                    "proxyAddresses",
                    "showInAddressList",
                    "state",
                    "streetAddress",
                    "surname",
                    "usageLocation",
                    "userPrincipalName",
                    "userType",
                    "id"
                ]
            }
        },
        "azuread:index/getUsers:getUsers": {
            "description": "Gets basic information for multiple Azure Active Directory users.\n\n## API Permissions\n\nThe following API permissions are required in order to use this data source.\n\nWhen authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`\n\nWhen authenticated with a user principal, this data source does not require any additional roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst users = azuread.getUsers({\n    userPrincipalNames: [\n        \"kat@hashicorp.com\",\n        \"byte@hashicorp.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nusers = azuread.get_users(user_principal_names=[\n    \"kat@hashicorp.com\",\n    \"byte@hashicorp.com\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var users = AzureAD.GetUsers.Invoke(new()\n    {\n        UserPrincipalNames = new[]\n        {\n            \"kat@hashicorp.com\",\n            \"byte@hashicorp.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetUsers(ctx, \u0026azuread.GetUsersArgs{\n\t\t\tUserPrincipalNames: []string{\n\t\t\t\t\"kat@hashicorp.com\",\n\t\t\t\t\"byte@hashicorp.com\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.azuread.AzureadFunctions;\nimport com.pulumi.azuread.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()\n            .userPrincipalNames(            \n                \"kat@hashicorp.com\",\n                \"byte@hashicorp.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  users:\n    fn::invoke:\n      Function: azuread:getUsers\n      Arguments:\n        userPrincipalNames:\n          - kat@hashicorp.com\n          - byte@hashicorp.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "employeeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The employee identifiers assigned to the users by the organisation.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "Ignore missing users and return users that were found. The data source will still fail if no users are found. Cannot be specified with `return_all`. Defaults to `false`.\n"
                    },
                    "mailNicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email aliases of the users.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the users.\n"
                    },
                    "returnAll": {
                        "type": "boolean",
                        "description": "When `true`, the data source will return all users. Cannot be used with `ignore_missing`. Defaults to `false`.\n"
                    },
                    "userPrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user principal names (UPNs) of the users.\n\n\u003e Either `return_all`, or one of `user_principal_names`, `object_ids`, `mail_nicknames` or `employee_ids` must be specified. These _may_ be specified as an empty list, in which case no results will be returned.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "employeeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The employee identifiers assigned to the users by the organisation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean"
                    },
                    "mailNicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email aliases of the users.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The object IDs of the users.\n"
                    },
                    "returnAll": {
                        "type": "boolean"
                    },
                    "userPrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user principal names (UPNs) of the users.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getUsersUser:getUsersUser"
                        },
                        "description": "A list of users. Each `user` object provides the attributes documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "employeeIds",
                    "mailNicknames",
                    "objectIds",
                    "userPrincipalNames",
                    "users",
                    "id"
                ]
            }
        }
    }
}