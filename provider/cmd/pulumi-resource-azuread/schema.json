{
    "name": "azuread",
    "description": "A Pulumi package for creating and managing azuread cloud resources.",
    "keywords": [
        "pulumi",
        "azuread"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`azuread` Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuread).",
    "repository": "https://github.com/pulumi/pulumi-azuread",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "clientCertificatePassword": {
                "type": "string"
            },
            "clientCertificatePath": {
                "type": "string",
                "description": "The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service\nPrincipal using a Client Certificate.\n"
            },
            "clientId": {
                "type": "string",
                "description": "The Client ID which should be used for service principal authentication.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client\nCertificate\n"
            },
            "disableTerraformPartnerId": {
                "type": "boolean",
                "description": "Disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.\n"
            },
            "environment": {
                "type": "string",
                "description": "The Cloud Environment which should be used. Possible values are `public`, `usgovernment`, `german`, and `china`.\nDefaults to `public`.\n",
                "default": "public",
                "defaultInfo": {
                    "environment": [
                        "ARM_ENVIRONMENT"
                    ]
                }
            },
            "metadataHost": {
                "type": "string",
                "description": "The Hostname which should be used for the Azure Metadata Service.\n"
            },
            "msiEndpoint": {
                "type": "string",
                "description": "The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected\nautomatically.\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "ARM_MSI_ENDPOINT"
                    ]
                }
            },
            "partnerId": {
                "type": "string",
                "description": "A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.\n"
            },
            "tenantId": {
                "type": "string",
                "description": "The Tenant ID which should be used. Works with all authentication methods except MSI.\n"
            },
            "useMsi": {
                "type": "boolean",
                "description": "Allow Managed Service Identity to be used for Authentication.\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "ARM_USE_MSI"
                    ]
                }
            }
        },
        "defaults": [
            "environment",
            "metadataHost"
        ]
    },
    "types": {
        "azuread:index/ApplicationAppRole:ApplicationAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the permision. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the azuread.ApplicationOAuth2Permission resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the permission is enabled: defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMemberTypes",
                        "description",
                        "displayName",
                        "id",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/ApplicationOauth2Permission:ApplicationOauth2Permission": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin consent and app assignment experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the azuread.ApplicationAppRole resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled: Defaults to `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the end user consent experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the end user consent experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the roles claim that the application should expect in the authentication and access tokens.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminConsentDescription",
                        "adminConsentDisplayName",
                        "id",
                        "isEnabled",
                        "type",
                        "userConsentDescription",
                        "userConsentDisplayName",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims": {
            "properties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuread:index/ApplicationOptionalClaimsAccessToken:ApplicationOptionalClaimsAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/ApplicationOptionalClaimsIdToken:ApplicationOptionalClaimsIdToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess": {
            "properties": {
                "resourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccessResourceAccess:ApplicationRequiredResourceAccessResourceAccess"
                    },
                    "description": "A collection of `resource_access` blocks as documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceAppId": {
                    "type": "string",
                    "description": "The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceAccesses",
                "resourceAppId"
            ]
        },
        "azuread:index/ApplicationRequiredResourceAccessResourceAccess:ApplicationRequiredResourceAccessResourceAccess": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Application associated with this Service Principal.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMemberTypes",
                        "description",
                        "displayName",
                        "id",
                        "isEnabled",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/ServicePrincipalOauth2Permission:ServicePrincipalOauth2Permission": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "The description of the admin consent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the admin consent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the permission.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "The description of the user consent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the user consent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminConsentDescription",
                        "adminConsentDisplayName",
                        "id",
                        "isEnabled",
                        "type",
                        "userConsentDescription",
                        "userConsentDisplayName",
                        "value"
                    ]
                }
            }
        },
        "azuread:index/getApplicationAppRole:getApplicationAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "Specifies the display name of the Application within Azure Active Directory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName",
                "id",
                "isEnabled",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationOauth2Permission:getApplicationOauth2Permission": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "The description of the admin consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the admin consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the id property references an `OAuth2Permission` or an `AppRole`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "The description of the user consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the user consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "id",
                "isEnabled",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationOptionalClaims:getApplicationOptionalClaims": {
            "properties": {
                "accessTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaimsAccessToken:getApplicationOptionalClaimsAccessToken"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaimsIdToken:getApplicationOptionalClaimsIdToken"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "azuread:index/getApplicationOptionalClaimsAccessToken:getApplicationOptionalClaimsAccessToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/getApplicationOptionalClaimsIdToken:getApplicationOptionalClaimsIdToken": {
            "properties": {
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "essential": {
                    "type": "boolean",
                    "description": "Whether the claim specified by the client is necessary to ensure a smooth authorization experience.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "azuread:index/getApplicationRequiredResourceAccess:getApplicationRequiredResourceAccess": {
            "properties": {
                "resourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/getApplicationRequiredResourceAccessResourceAccess:getApplicationRequiredResourceAccessResourceAccess"
                    },
                    "description": "A collection of `resource_access` blocks as documented below\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceAppId": {
                    "type": "string",
                    "description": "The unique identifier for the resource that the application requires access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceAccesses",
                "resourceAppId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getApplicationRequiredResourceAccessResourceAccess:getApplicationRequiredResourceAccessResourceAccess": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether the id property references an `OAuth2Permission` or an `AppRole`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getDomainsDomain:getDomainsDomain": {
            "properties": {
                "authenticationType": {
                    "type": "string",
                    "description": "The authentication type of the domain (Managed or Federated).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "The name of the domain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "`True` if this is the default domain that is used for user creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isInitial": {
                    "type": "boolean",
                    "description": "`True` if this is the initial domain created by Azure Active Directory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isVerified": {
                    "type": "boolean",
                    "description": "`True` if the domain has completed domain ownership verification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationType",
                "domainName",
                "isDefault",
                "isInitial",
                "isVerified"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalAppRole:getServicePrincipalAppRole": {
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Azure AD Application associated with this Service Principal.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMemberTypes",
                "description",
                "displayName",
                "id",
                "isEnabled",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getServicePrincipalOauth2Permission:getServicePrincipalOauth2Permission": {
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "The description of the admin consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the admin consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Is this permission enabled?\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "The description of the user consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "The display name of the user consent\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The name of this permission\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "id",
                "isEnabled",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "azuread:index/getUsersUser:getUsersUser": {
            "properties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "`True` if the account is enabled; otherwise `False`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "immutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premises Active Directory user account with their Azure AD user object.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mail": {
                    "type": "string",
                    "description": "The primary email address of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The email alias of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectId": {
                    "type": "string",
                    "description": "The Object ID of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onpremisesSamAccountName": {
                    "type": "string",
                    "description": "The on-premise SAM account name of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onpremisesUserPrincipalName": {
                    "type": "string",
                    "description": "The on-premise user principal name of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The User Principal Name of the Azure AD User.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountEnabled",
                "displayName",
                "immutableId",
                "mail",
                "mailNickname",
                "objectId",
                "onpremisesSamAccountName",
                "onpremisesUserPrincipalName",
                "usageLocation",
                "userPrincipalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the azuread package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "clientCertificatePassword": {
                "type": "string"
            },
            "clientCertificatePath": {
                "type": "string",
                "description": "The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service\nPrincipal using a Client Certificate.\n"
            },
            "clientId": {
                "type": "string",
                "description": "The Client ID which should be used for service principal authentication.\n"
            },
            "clientSecret": {
                "type": "string",
                "description": "The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client\nCertificate\n"
            },
            "disableTerraformPartnerId": {
                "type": "boolean",
                "description": "Disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.\n"
            },
            "environment": {
                "type": "string",
                "description": "The Cloud Environment which should be used. Possible values are `public`, `usgovernment`, `german`, and `china`.\nDefaults to `public`.\n",
                "default": "public",
                "defaultInfo": {
                    "environment": [
                        "ARM_ENVIRONMENT"
                    ]
                }
            },
            "metadataHost": {
                "type": "string",
                "description": "The Hostname which should be used for the Azure Metadata Service.\n"
            },
            "msiEndpoint": {
                "type": "string",
                "description": "The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected\nautomatically.\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "ARM_MSI_ENDPOINT"
                    ]
                }
            },
            "partnerId": {
                "type": "string",
                "description": "A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.\n"
            },
            "tenantId": {
                "type": "string",
                "description": "The Tenant ID which should be used. Works with all authentication methods except MSI.\n"
            },
            "useMsi": {
                "type": "boolean",
                "description": "Allow Managed Service Identity to be used for Authentication.\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "ARM_USE_MSI"
                    ]
                }
            }
        },
        "requiredInputs": [
            "metadataHost"
        ]
    },
    "resources": {
        "azuread:index/application:Application": {
            "description": "Manages an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write owned by applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Application(\"example\", {\n    appRoles: [{\n        allowedMemberTypes: [\n            \"User\",\n            \"Application\",\n        ],\n        description: \"Admins can manage roles and perform all task actions\",\n        displayName: \"Admin\",\n        isEnabled: true,\n        value: \"Admin\",\n    }],\n    availableToOtherTenants: false,\n    displayName: \"example\",\n    homepage: \"https://homepage\",\n    identifierUris: [\"https://uri\"],\n    oauth2AllowImplicitFlow: true,\n    oauth2Permissions: [\n        {\n            adminConsentDescription: \"Allow the application to access example on behalf of the signed-in user.\",\n            adminConsentDisplayName: \"Access example\",\n            isEnabled: true,\n            type: \"User\",\n            userConsentDescription: \"Allow the application to access example on your behalf.\",\n            userConsentDisplayName: \"Access example\",\n            value: \"user_impersonation\",\n        },\n        {\n            adminConsentDescription: \"Administer the example application\",\n            adminConsentDisplayName: \"Administer\",\n            isEnabled: true,\n            type: \"Admin\",\n            value: \"administer\",\n        },\n    ],\n    optionalClaims: {\n        accessTokens: [\n            {\n                name: \"myclaim\",\n            },\n            {\n                name: \"otherclaim\",\n            },\n        ],\n        idTokens: [{\n            additionalProperties: [\"emit_as_roles\"],\n            essential: true,\n            name: \"userclaim\",\n            source: \"user\",\n        }],\n    },\n    owners: [\"00000004-0000-0000-c000-000000000000\"],\n    replyUrls: [\"https://replyurl\"],\n    requiredResourceAccesses: [\n        {\n            resourceAccesses: [\n                {\n                    id: \"...\",\n                    type: \"Role\",\n                },\n                {\n                    id: \"...\",\n                    type: \"Scope\",\n                },\n                {\n                    id: \"...\",\n                    type: \"Scope\",\n                },\n            ],\n            resourceAppId: \"00000003-0000-0000-c000-000000000000\",\n        },\n        {\n            resourceAccesses: [{\n                id: \"...\",\n                type: \"Scope\",\n            }],\n            resourceAppId: \"00000002-0000-0000-c000-000000000000\",\n        },\n    ],\n    type: \"webapp/api\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Application(\"example\",\n    app_roles=[azuread.ApplicationAppRoleArgs(\n        allowed_member_types=[\n            \"User\",\n            \"Application\",\n        ],\n        description=\"Admins can manage roles and perform all task actions\",\n        display_name=\"Admin\",\n        is_enabled=True,\n        value=\"Admin\",\n    )],\n    available_to_other_tenants=False,\n    display_name=\"example\",\n    homepage=\"https://homepage\",\n    identifier_uris=[\"https://uri\"],\n    oauth2_allow_implicit_flow=True,\n    oauth2_permissions=[\n        azuread.ApplicationOauth2PermissionArgs(\n            admin_consent_description=\"Allow the application to access example on behalf of the signed-in user.\",\n            admin_consent_display_name=\"Access example\",\n            is_enabled=True,\n            type=\"User\",\n            user_consent_description=\"Allow the application to access example on your behalf.\",\n            user_consent_display_name=\"Access example\",\n            value=\"user_impersonation\",\n        ),\n        azuread.ApplicationOauth2PermissionArgs(\n            admin_consent_description=\"Administer the example application\",\n            admin_consent_display_name=\"Administer\",\n            is_enabled=True,\n            type=\"Admin\",\n            value=\"administer\",\n        ),\n    ],\n    optional_claims=azuread.ApplicationOptionalClaimsArgs(\n        access_tokens=[\n            azuread.ApplicationOptionalClaimsAccessTokenArgs(\n                name=\"myclaim\",\n            ),\n            azuread.ApplicationOptionalClaimsAccessTokenArgs(\n                name=\"otherclaim\",\n            ),\n        ],\n        id_tokens=[azuread.ApplicationOptionalClaimsIdTokenArgs(\n            additional_properties=[\"emit_as_roles\"],\n            essential=True,\n            name=\"userclaim\",\n            source=\"user\",\n        )],\n    ),\n    owners=[\"00000004-0000-0000-c000-000000000000\"],\n    reply_urls=[\"https://replyurl\"],\n    required_resource_accesses=[\n        azuread.ApplicationRequiredResourceAccessArgs(\n            resource_accesses=[\n                azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                    id=\"...\",\n                    type=\"Role\",\n                ),\n                azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                    id=\"...\",\n                    type=\"Scope\",\n                ),\n                azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                    id=\"...\",\n                    type=\"Scope\",\n                ),\n            ],\n            resource_app_id=\"00000003-0000-0000-c000-000000000000\",\n        ),\n        azuread.ApplicationRequiredResourceAccessArgs(\n            resource_accesses=[azuread.ApplicationRequiredResourceAccessResourceAccessArgs(\n                id=\"...\",\n                type=\"Scope\",\n            )],\n            resource_app_id=\"00000002-0000-0000-c000-000000000000\",\n        ),\n    ],\n    type=\"webapp/api\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new AzureAD.Application(\"example\", new AzureAD.ApplicationArgs\n        {\n            AppRoles = \n            {\n                new AzureAD.Inputs.ApplicationAppRoleArgs\n                {\n                    AllowedMemberTypes = \n                    {\n                        \"User\",\n                        \"Application\",\n                    },\n                    Description = \"Admins can manage roles and perform all task actions\",\n                    DisplayName = \"Admin\",\n                    IsEnabled = true,\n                    Value = \"Admin\",\n                },\n            },\n            AvailableToOtherTenants = false,\n            DisplayName = \"example\",\n            Homepage = \"https://homepage\",\n            IdentifierUris = \n            {\n                \"https://uri\",\n            },\n            Oauth2AllowImplicitFlow = true,\n            Oauth2Permissions = \n            {\n                new AzureAD.Inputs.ApplicationOauth2PermissionArgs\n                {\n                    AdminConsentDescription = \"Allow the application to access example on behalf of the signed-in user.\",\n                    AdminConsentDisplayName = \"Access example\",\n                    IsEnabled = true,\n                    Type = \"User\",\n                    UserConsentDescription = \"Allow the application to access example on your behalf.\",\n                    UserConsentDisplayName = \"Access example\",\n                    Value = \"user_impersonation\",\n                },\n                new AzureAD.Inputs.ApplicationOauth2PermissionArgs\n                {\n                    AdminConsentDescription = \"Administer the example application\",\n                    AdminConsentDisplayName = \"Administer\",\n                    IsEnabled = true,\n                    Type = \"Admin\",\n                    Value = \"administer\",\n                },\n            },\n            OptionalClaims = new AzureAD.Inputs.ApplicationOptionalClaimsArgs\n            {\n                AccessTokens = \n                {\n                    new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n                    {\n                        Name = \"myclaim\",\n                    },\n                    new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs\n                    {\n                        Name = \"otherclaim\",\n                    },\n                },\n                IdTokens = \n                {\n                    new AzureAD.Inputs.ApplicationOptionalClaimsIdTokenArgs\n                    {\n                        AdditionalProperties = \n                        {\n                            \"emit_as_roles\",\n                        },\n                        Essential = true,\n                        Name = \"userclaim\",\n                        Source = \"user\",\n                    },\n                },\n            },\n            Owners = \n            {\n                \"00000004-0000-0000-c000-000000000000\",\n            },\n            ReplyUrls = \n            {\n                \"https://replyurl\",\n            },\n            RequiredResourceAccesses = \n            {\n                new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n                {\n                    ResourceAccesses = \n                    {\n                        new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                        {\n                            Id = \"...\",\n                            Type = \"Role\",\n                        },\n                        new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                        {\n                            Id = \"...\",\n                            Type = \"Scope\",\n                        },\n                        new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                        {\n                            Id = \"...\",\n                            Type = \"Scope\",\n                        },\n                    },\n                    ResourceAppId = \"00000003-0000-0000-c000-000000000000\",\n                },\n                new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs\n                {\n                    ResourceAccesses = \n                    {\n                        new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs\n                        {\n                            Id = \"...\",\n                            Type = \"Scope\",\n                        },\n                    },\n                    ResourceAppId = \"00000002-0000-0000-c000-000000000000\",\n                },\n            },\n            Type = \"webapp/api\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewApplication(ctx, \"example\", \u0026azuread.ApplicationArgs{\n\t\t\tAppRoles: azuread.ApplicationAppRoleArray{\n\t\t\t\t\u0026azuread.ApplicationAppRoleArgs{\n\t\t\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"User\"),\n\t\t\t\t\t\tpulumi.String(\"Application\"),\n\t\t\t\t\t},\n\t\t\t\t\tDescription: pulumi.String(\"Admins can manage roles and perform all task actions\"),\n\t\t\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t\t\t\tIsEnabled:   pulumi.Bool(true),\n\t\t\t\t\tValue:       pulumi.String(\"Admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAvailableToOtherTenants: pulumi.Bool(false),\n\t\t\tDisplayName:             pulumi.String(\"example\"),\n\t\t\tHomepage:                pulumi.String(\"https://homepage\"),\n\t\t\tIdentifierUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://uri\"),\n\t\t\t},\n\t\t\tOauth2AllowImplicitFlow: pulumi.Bool(true),\n\t\t\tOauth2Permissions: azuread.ApplicationOauth2PermissionArray{\n\t\t\t\t\u0026azuread.ApplicationOauth2PermissionArgs{\n\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Allow the application to access example on behalf of the signed-in user.\"),\n\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Access example\"),\n\t\t\t\t\tIsEnabled:               pulumi.Bool(true),\n\t\t\t\t\tType:                    pulumi.String(\"User\"),\n\t\t\t\t\tUserConsentDescription:  pulumi.String(\"Allow the application to access example on your behalf.\"),\n\t\t\t\t\tUserConsentDisplayName:  pulumi.String(\"Access example\"),\n\t\t\t\t\tValue:                   pulumi.String(\"user_impersonation\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.ApplicationOauth2PermissionArgs{\n\t\t\t\t\tAdminConsentDescription: pulumi.String(\"Administer the example application\"),\n\t\t\t\t\tAdminConsentDisplayName: pulumi.String(\"Administer\"),\n\t\t\t\t\tIsEnabled:               pulumi.Bool(true),\n\t\t\t\t\tType:                    pulumi.String(\"Admin\"),\n\t\t\t\t\tValue:                   pulumi.String(\"administer\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tOptionalClaims: \u0026azuread.ApplicationOptionalClaimsArgs{\n\t\t\t\tAccessTokens: azuread.ApplicationOptionalClaimsAccessTokenArray{\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\t\tName: pulumi.String(\"myclaim\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsAccessTokenArgs{\n\t\t\t\t\t\tName: pulumi.String(\"otherclaim\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIdTokens: azuread.ApplicationOptionalClaimsIdTokenArray{\n\t\t\t\t\t\u0026azuread.ApplicationOptionalClaimsIdTokenArgs{\n\t\t\t\t\t\tAdditionalProperties: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"emit_as_roles\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tEssential: pulumi.Bool(true),\n\t\t\t\t\t\tName:      pulumi.String(\"userclaim\"),\n\t\t\t\t\t\tSource:    pulumi.String(\"user\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOwners: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"00000004-0000-0000-c000-000000000000\"),\n\t\t\t},\n\t\t\tReplyUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://replyurl\"),\n\t\t\t},\n\t\t\tRequiredResourceAccesses: azuread.ApplicationRequiredResourceAccessArray{\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"...\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Role\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"...\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"...\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResourceAppId: pulumi.String(\"00000003-0000-0000-c000-000000000000\"),\n\t\t\t\t},\n\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessArgs{\n\t\t\t\t\tResourceAccesses: azuread.ApplicationRequiredResourceAccessResourceAccessArray{\n\t\t\t\t\t\t\u0026azuread.ApplicationRequiredResourceAccessResourceAccessArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(\"...\"),\n\t\t\t\t\t\t\tType: pulumi.String(\"Scope\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResourceAppId: pulumi.String(\"00000002-0000-0000-c000-000000000000\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"webapp/api\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Active Directory Applications can be imported using the `object id`, e.g.\n\n```sh\n $ pulumi import azuread:index/application:Application test 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                    },
                    "description": "A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The Application ID (Client ID).\n"
                },
                "availableToOtherTenants": {
                    "type": "boolean",
                    "description": "Is this Azure AD Application available to other tenants? Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "groupMembershipClaims": {
                    "type": "string",
                    "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "homepage": {
                    "type": "string",
                    "description": "The URL to the application's home page.\n"
                },
                "identifierUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL of the logout page.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "deprecationMessage": "This property has been renamed to `display_name` and will be removed in version 2.0 of this provider."
                },
                "oauth2AllowImplicitFlow": {
                    "type": "boolean",
                    "description": "Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.\n"
                },
                "oauth2Permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOauth2Permission:ApplicationOauth2Permission"
                    },
                    "description": "A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The Application's Object ID.\n"
                },
                "optionalClaims": {
                    "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                    "description": "A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure AD Object IDs that will be granted ownership of the application. Defaults to the Object ID of the caller creating the application. If a list is specified the caller Object ID will no longer be included unless explicitly added to the list.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.\n"
                },
                "publicClient": {
                    "type": "boolean",
                    "description": "Is this Azure AD Application a public client? Defaults to `false`.\n"
                },
                "replyUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.\n"
                },
                "requiredResourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                    },
                    "description": "A collection of `required_resource_access` blocks as documented below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.\n",
                    "deprecationMessage": "This property is deprecated and will be removed in version 2.0 of this provider."
                }
            },
            "required": [
                "appRoles",
                "applicationId",
                "displayName",
                "homepage",
                "identifierUris",
                "name",
                "oauth2Permissions",
                "objectId",
                "owners",
                "publicClient",
                "replyUrls"
            ],
            "inputProperties": {
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                    },
                    "description": "A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles\n"
                },
                "availableToOtherTenants": {
                    "type": "boolean",
                    "description": "Is this Azure AD Application available to other tenants? Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the application.\n"
                },
                "groupMembershipClaims": {
                    "type": "string",
                    "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                },
                "homepage": {
                    "type": "string",
                    "description": "The URL to the application's home page.\n"
                },
                "identifierUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL of the logout page.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the optional claim.\n",
                    "deprecationMessage": "This property has been renamed to `display_name` and will be removed in version 2.0 of this provider."
                },
                "oauth2AllowImplicitFlow": {
                    "type": "boolean",
                    "description": "Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.\n"
                },
                "oauth2Permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationOauth2Permission:ApplicationOauth2Permission"
                    },
                    "description": "A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below.\n"
                },
                "optionalClaims": {
                    "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                    "description": "A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Azure AD Object IDs that will be granted ownership of the application. Defaults to the Object ID of the caller creating the application. If a list is specified the caller Object ID will no longer be included unless explicitly added to the list.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.\n"
                },
                "publicClient": {
                    "type": "boolean",
                    "description": "Is this Azure AD Application a public client? Defaults to `false`.\n"
                },
                "replyUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.\n"
                },
                "requiredResourceAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                    },
                    "description": "A collection of `required_resource_access` blocks as documented below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.\n",
                    "deprecationMessage": "This property is deprecated and will be removed in version 2.0 of this provider."
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationAppRole:ApplicationAppRole"
                        },
                        "description": "A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The Application ID (Client ID).\n"
                    },
                    "availableToOtherTenants": {
                        "type": "boolean",
                        "description": "Is this Azure AD Application available to other tenants? Defaults to `false`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the application.\n"
                    },
                    "groupMembershipClaims": {
                        "type": "string",
                        "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.\n"
                    },
                    "homepage": {
                        "type": "string",
                        "description": "The URL to the application's home page.\n"
                    },
                    "identifierUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL of the logout page.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the optional claim.\n",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in version 2.0 of this provider."
                    },
                    "oauth2AllowImplicitFlow": {
                        "type": "boolean",
                        "description": "Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.\n"
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationOauth2Permission:ApplicationOauth2Permission"
                        },
                        "description": "A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The Application's Object ID.\n"
                    },
                    "optionalClaims": {
                        "$ref": "#/types/azuread:index/ApplicationOptionalClaims:ApplicationOptionalClaims",
                        "description": "A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Azure AD Object IDs that will be granted ownership of the application. Defaults to the Object ID of the caller creating the application. If a list is specified the caller Object ID will no longer be included unless explicitly added to the list.\n"
                    },
                    "preventDuplicateNames": {
                        "type": "boolean",
                        "description": "If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.\n"
                    },
                    "publicClient": {
                        "type": "boolean",
                        "description": "Is this Azure AD Application a public client? Defaults to `false`.\n"
                    },
                    "replyUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.\n"
                    },
                    "requiredResourceAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ApplicationRequiredResourceAccess:ApplicationRequiredResourceAccess"
                        },
                        "description": "A collection of `required_resource_access` blocks as documented below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set.\n",
                        "deprecationMessage": "This property is deprecated and will be removed in version 2.0 of this provider."
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationAppRole:ApplicationAppRole": {
            "description": "Manages an App Role associated with an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {});\nconst exampleApplicationAppRole = new azuread.ApplicationAppRole(\"exampleApplicationAppRole\", {\n    applicationObjectId: exampleApplication.id,\n    allowedMemberTypes: [\"User\"],\n    description: \"Admins can manage roles and perform all task actions\",\n    displayName: \"Admin\",\n    isEnabled: true,\n    value: \"administer\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\")\nexample_application_app_role = azuread.ApplicationAppRole(\"exampleApplicationAppRole\",\n    application_object_id=example_application.id,\n    allowed_member_types=[\"User\"],\n    description=\"Admins can manage roles and perform all task actions\",\n    display_name=\"Admin\",\n    is_enabled=True,\n    value=\"administer\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new AzureAD.Application(\"exampleApplication\", new AzureAD.ApplicationArgs\n        {\n        });\n        var exampleApplicationAppRole = new AzureAD.ApplicationAppRole(\"exampleApplicationAppRole\", new AzureAD.ApplicationAppRoleArgs\n        {\n            ApplicationObjectId = exampleApplication.Id,\n            AllowedMemberTypes = \n            {\n                \"User\",\n            },\n            Description = \"Admins can manage roles and perform all task actions\",\n            DisplayName = \"Admin\",\n            IsEnabled = true,\n            Value = \"administer\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationAppRole(ctx, \"exampleApplicationAppRole\", \u0026azuread.ApplicationAppRoleArgs{\n\t\t\tApplicationObjectId: exampleApplication.ID(),\n\t\t\tAllowedMemberTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"User\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Admins can manage roles and perform all task actions\"),\n\t\t\tDisplayName: pulumi.String(\"Admin\"),\n\t\t\tIsEnabled:   pulumi.Bool(true),\n\t\t\tValue:       pulumi.String(\"administer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp Roles can be imported using the `object id` of an Application and the `id` of the App Role, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationAppRole:ApplicationAppRole test 00000000-0000-0000-0000-000000000000/role/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled. Defaults to `true`.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "Specifies a custom UUID for the app role. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the roles claim that the application should expect in the authentication and access tokens.\n"
                }
            },
            "required": [
                "allowedMemberTypes",
                "applicationObjectId",
                "description",
                "displayName",
                "roleId"
            ],
            "inputProperties": {
                "allowedMemberTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled. Defaults to `true`.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "Specifies a custom UUID for the app role. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Specifies the value of the roles claim that the application should expect in the authentication and access tokens.\n"
                }
            },
            "requiredInputs": [
                "allowedMemberTypes",
                "applicationObjectId",
                "description",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationAppRole resources.\n",
                "properties": {
                    "allowedMemberTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.\n"
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Permission help text that appears in the admin app assignment and consent experiences.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Determines if the app role is enabled. Defaults to `true`.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "Specifies a custom UUID for the app role. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Specifies the value of the roles claim that the application should expect in the authentication and access tokens.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationCertificate:ApplicationCertificate": {
            "description": "Manages a Certificate associated with an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n\n## Import\n\nCertificates can be imported using the `object id` of an Application and the `key id` of the certificate, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationCertificate:ApplicationCertificate test 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this Certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                }
            },
            "required": [
                "applicationObjectId",
                "endDate",
                "keyId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this Certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                }
            },
            "requiredInputs": [
                "applicationObjectId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationCertificate resources.\n",
                "properties": {
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Application for which this Certificate should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission": {
            "description": "Manages an OAuth2 Permission (also known as a Scope) associated with an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {});\nconst exampleApplicationOAuth2Permission = new azuread.ApplicationOAuth2Permission(\"exampleApplicationOAuth2Permission\", {\n    applicationObjectId: exampleApplication.id,\n    adminConsentDescription: \"Administer the application\",\n    adminConsentDisplayName: \"Administer\",\n    isEnabled: true,\n    type: \"User\",\n    userConsentDescription: \"Administer the application\",\n    userConsentDisplayName: \"Administer\",\n    value: \"administer\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\")\nexample_application_o_auth2_permission = azuread.ApplicationOAuth2Permission(\"exampleApplicationOAuth2Permission\",\n    application_object_id=example_application.id,\n    admin_consent_description=\"Administer the application\",\n    admin_consent_display_name=\"Administer\",\n    is_enabled=True,\n    type=\"User\",\n    user_consent_description=\"Administer the application\",\n    user_consent_display_name=\"Administer\",\n    value=\"administer\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new AzureAD.Application(\"exampleApplication\", new AzureAD.ApplicationArgs\n        {\n        });\n        var exampleApplicationOAuth2Permission = new AzureAD.ApplicationOAuth2Permission(\"exampleApplicationOAuth2Permission\", new AzureAD.ApplicationOAuth2PermissionArgs\n        {\n            ApplicationObjectId = exampleApplication.Id,\n            AdminConsentDescription = \"Administer the application\",\n            AdminConsentDisplayName = \"Administer\",\n            IsEnabled = true,\n            Type = \"User\",\n            UserConsentDescription = \"Administer the application\",\n            UserConsentDisplayName = \"Administer\",\n            Value = \"administer\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationOAuth2Permission(ctx, \"exampleApplicationOAuth2Permission\", \u0026azuread.ApplicationOAuth2PermissionArgs{\n\t\t\tApplicationObjectId:     exampleApplication.ID(),\n\t\t\tAdminConsentDescription: pulumi.String(\"Administer the application\"),\n\t\t\tAdminConsentDisplayName: pulumi.String(\"Administer\"),\n\t\t\tIsEnabled:               pulumi.Bool(true),\n\t\t\tType:                    pulumi.String(\"User\"),\n\t\t\tUserConsentDescription:  pulumi.String(\"Administer the application\"),\n\t\t\tUserConsentDisplayName:  pulumi.String(\"Administer\"),\n\t\t\tValue:                   pulumi.String(\"administer\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nOAuth2 Permissions can be imported using the `object id` of an Application and the `id` of the Permission, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationOAuth2Permission:ApplicationOAuth2Permission test 00000000-0000-0000-0000-000000000000/scope/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin consent and app assignment experiences.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the Permission is enabled. Defaults to `true`.\n"
                },
                "permissionId": {
                    "type": "string",
                    "description": "Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are \"User\" or \"Admin\".\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the end user consent experience.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.\n"
                }
            },
            "required": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "applicationObjectId",
                "permissionId",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "inputProperties": {
                "adminConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin consent and app assignment experiences.\n"
                },
                "adminConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                },
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Determines if the Permission is enabled. Defaults to `true`.\n"
                },
                "permissionId": {
                    "type": "string",
                    "description": "Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are \"User\" or \"Admin\".\n"
                },
                "userConsentDescription": {
                    "type": "string",
                    "description": "Permission help text that appears in the end user consent experience.\n"
                },
                "userConsentDisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the end user consent experience.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.\n"
                }
            },
            "requiredInputs": [
                "adminConsentDescription",
                "adminConsentDisplayName",
                "applicationObjectId",
                "type",
                "userConsentDescription",
                "userConsentDisplayName",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationOAuth2Permission resources.\n",
                "properties": {
                    "adminConsentDescription": {
                        "type": "string",
                        "description": "Permission help text that appears in the admin consent and app assignment experiences.\n"
                    },
                    "adminConsentDisplayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                    },
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Determines if the Permission is enabled. Defaults to `true`.\n"
                    },
                    "permissionId": {
                        "type": "string",
                        "description": "Specifies a custom UUID for the Permission. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies whether this scope permission can be consented to by an end user, or whether it is a tenant-wide permission that must be consented to by an Administrator. Possible values are \"User\" or \"Admin\".\n"
                    },
                    "userConsentDescription": {
                        "type": "string",
                        "description": "Permission help text that appears in the end user consent experience.\n"
                    },
                    "userConsentDisplayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the end user consent experience.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/applicationPassword:ApplicationPassword": {
            "description": "Manages a Password associated with an Application within Azure Active Directory. Also can be referred to as Client secrets.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {});\nconst exampleApplicationPassword = new azuread.ApplicationPassword(\"exampleApplicationPassword\", {\n    applicationObjectId: exampleApplication.id,\n    description: \"My managed password\",\n    value: `VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#`,\n    endDate: \"2099-01-01T01:02:03Z\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\")\nexample_application_password = azuread.ApplicationPassword(\"exampleApplicationPassword\",\n    application_object_id=example_application.id,\n    description=\"My managed password\",\n    value=\"VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#\",\n    end_date=\"2099-01-01T01:02:03Z\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new AzureAD.Application(\"exampleApplication\", new AzureAD.ApplicationArgs\n        {\n        });\n        var exampleApplicationPassword = new AzureAD.ApplicationPassword(\"exampleApplicationPassword\", new AzureAD.ApplicationPasswordArgs\n        {\n            ApplicationObjectId = exampleApplication.Id,\n            Description = \"My managed password\",\n            Value = \"VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#\",\n            EndDate = \"2099-01-01T01:02:03Z\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewApplicationPassword(ctx, \"exampleApplicationPassword\", \u0026azuread.ApplicationPasswordArgs{\n\t\t\tApplicationObjectId: exampleApplication.ID(),\n\t\t\tDescription:         pulumi.String(\"My managed password\"),\n\t\t\tValue:               pulumi.String(fmt.Sprintf(\"%v%v%v\", \"VT=uSgbTanZhyz@\", \"%\", \"nL9Hpd+Tfay_MRV#\")),\n\t\t\tEndDate:             pulumi.String(\"2099-01-01T01:02:03Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPasswords can be imported using the `object id` of an Application and the `key id` of the password, e.g.\n\n```sh\n $ pulumi import azuread:index/applicationPassword:ApplicationPassword test 00000000-0000-0000-0000-000000000000/password/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Password.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Password. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Password for this Application.\n"
                }
            },
            "required": [
                "applicationObjectId",
                "description",
                "endDate",
                "keyId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "applicationObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Application for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Password.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Password. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Password for this Application.\n"
                }
            },
            "requiredInputs": [
                "applicationObjectId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationPassword resources.\n",
                "properties": {
                    "applicationObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Application for which this password should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Password.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Changing this field forces a new resource to be created.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A GUID used to uniquely identify this Password. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The Password for this Application.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/group:Group": {
            "description": "Manages a Group within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read and write all groups` within the `Windows Azure Active Directory` API. In addition it must also have either the `Company Administrator` or `User Account Administrator` Azure Active Directory roles assigned in order to be able to delete groups. You can assign one of the required Azure Active Directory Roles with the **AzureAD PowerShell Module**, which is available for Windows PowerShell or in the Azure Cloud Shell. Please refer to [this documentation](https://docs.microsoft.com/en-us/powershell/module/azuread/add-azureaddirectoryrolemember) for more details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n*Basic example*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.Group(\"example\", {\n    displayName: \"A-AD-Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.Group(\"example\", display_name=\"A-AD-Group\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new AzureAD.Group(\"example\", new AzureAD.GroupArgs\n        {\n            DisplayName = \"A-AD-Group\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewGroup(ctx, \"example\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName: pulumi.String(\"A-AD-Group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n*A group with members*\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = new azuread.User(\"exampleUser\", {\n    displayName: \"J Doe\",\n    password: \"notSecure123\",\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {\n    displayName: \"MyGroup\",\n    members: [exampleUser.objectId],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.User(\"exampleUser\",\n    display_name=\"J Doe\",\n    password=\"notSecure123\",\n    user_principal_name=\"jdoe@hashicorp.com\")\nexample_group = azuread.Group(\"exampleGroup\",\n    display_name=\"MyGroup\",\n    members=[example_user.object_id])\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = new AzureAD.User(\"exampleUser\", new AzureAD.UserArgs\n        {\n            DisplayName = \"J Doe\",\n            Password = \"notSecure123\",\n            UserPrincipalName = \"jdoe@hashicorp.com\",\n        });\n        var exampleGroup = new AzureAD.Group(\"exampleGroup\", new AzureAD.GroupArgs\n        {\n            DisplayName = \"MyGroup\",\n            Members = \n            {\n                exampleUser.ObjectId,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := azuread.NewUser(ctx, \"exampleUser\", \u0026azuread.UserArgs{\n\t\t\tDisplayName:       pulumi.String(\"J Doe\"),\n\t\t\tPassword:          pulumi.String(\"notSecure123\"),\n\t\t\tUserPrincipalName: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroup(ctx, \"exampleGroup\", \u0026azuread.GroupArgs{\n\t\t\tDisplayName: pulumi.String(\"MyGroup\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\texampleUser.ObjectId,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Active Directory Groups can be imported using the `object id`, e.g.\n\n```sh\n $ pulumi import azuread:index/group:Group my_group 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description for the Group.  Changing this forces a new resource to be created.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Group. Changing this forces a new resource to be created.\n"
                },
                "mailEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is mail-enabled.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members who should be present in this Group. Supported Object types are Users, Groups or Service Principals.\n"
                },
                "name": {
                    "type": "string",
                    "deprecationMessage": "This property has been renamed to `display_name` and will be removed in v2.0 of this provider."
                },
                "objectId": {
                    "type": "string",
                    "description": "The Object ID of the Group.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of owners who own this Group. Supported Object types are Users or Service Principals.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error when an existing Group is found with the same name. Defaults to `false`.\n"
                },
                "securityEnabled": {
                    "type": "boolean",
                    "description": "Whether the group is a security group.\n"
                }
            },
            "required": [
                "displayName",
                "mailEnabled",
                "members",
                "name",
                "objectId",
                "owners",
                "securityEnabled"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for the Group.  Changing this forces a new resource to be created.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Group. Changing this forces a new resource to be created.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members who should be present in this Group. Supported Object types are Users, Groups or Service Principals.\n"
                },
                "name": {
                    "type": "string",
                    "deprecationMessage": "This property has been renamed to `display_name` and will be removed in v2.0 of this provider."
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of owners who own this Group. Supported Object types are Users or Service Principals.\n"
                },
                "preventDuplicateNames": {
                    "type": "boolean",
                    "description": "If `true`, will return an error when an existing Group is found with the same name. Defaults to `false`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description for the Group.  Changing this forces a new resource to be created.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the Group. Changing this forces a new resource to be created.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is mail-enabled.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of members who should be present in this Group. Supported Object types are Users, Groups or Service Principals.\n"
                    },
                    "name": {
                        "type": "string",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in v2.0 of this provider."
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The Object ID of the Group.\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of owners who own this Group. Supported Object types are Users or Service Principals.\n"
                    },
                    "preventDuplicateNames": {
                        "type": "boolean",
                        "description": "If `true`, will return an error when an existing Group is found with the same name. Defaults to `false`.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/groupMember:GroupMember": {
            "description": "Manages a single Group Membership within Azure Active Directory.\n\n\u003e **NOTE:** Do not use this resource at the same time as `azuread_group.members`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleUser = azuread.getUser({\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\nconst exampleGroup = new azuread.Group(\"exampleGroup\", {});\nconst exampleGroupMember = new azuread.GroupMember(\"exampleGroupMember\", {\n    groupObjectId: exampleGroup.id,\n    memberObjectId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_user = azuread.get_user(user_principal_name=\"jdoe@hashicorp.com\")\nexample_group = azuread.Group(\"exampleGroup\")\nexample_group_member = azuread.GroupMember(\"exampleGroupMember\",\n    group_object_id=example_group.id,\n    member_object_id=example_user.id)\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleUser = Output.Create(AzureAD.GetUser.InvokeAsync(new AzureAD.GetUserArgs\n        {\n            UserPrincipalName = \"jdoe@hashicorp.com\",\n        }));\n        var exampleGroup = new AzureAD.Group(\"exampleGroup\", new AzureAD.GroupArgs\n        {\n        });\n        var exampleGroupMember = new AzureAD.GroupMember(\"exampleGroupMember\", new AzureAD.GroupMemberArgs\n        {\n            GroupObjectId = exampleGroup.Id,\n            MemberObjectId = exampleUser.Apply(exampleUser =\u003e exampleUser.Id),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"jdoe@hashicorp.com\"\n\t\texampleUser, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := azuread.NewGroup(ctx, \"exampleGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewGroupMember(ctx, \"exampleGroupMember\", \u0026azuread.GroupMemberArgs{\n\t\t\tGroupObjectId:  exampleGroup.ID(),\n\t\t\tMemberObjectId: pulumi.String(exampleUser.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Active Directory Group Members can be imported using the `object id`, e.g.\n\n```sh\n $ pulumi import azuread:index/groupMember:GroupMember test 00000000-0000-0000-0000-000000000000/member/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "groupObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Azure AD Group you want to add the Member to.  Changing this forces a new resource to be created.\n"
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Azure AD Object you want to add as a Member to the Group. Supported Object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "groupObjectId",
                "memberObjectId"
            ],
            "inputProperties": {
                "groupObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Azure AD Group you want to add the Member to.  Changing this forces a new resource to be created.\n"
                },
                "memberObjectId": {
                    "type": "string",
                    "description": "The Object ID of the Azure AD Object you want to add as a Member to the Group. Supported Object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "groupObjectId",
                "memberObjectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMember resources.\n",
                "properties": {
                    "groupObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Azure AD Group you want to add the Member to.  Changing this forces a new resource to be created.\n"
                    },
                    "memberObjectId": {
                        "type": "string",
                        "description": "The Object ID of the Azure AD Object you want to add as a Member to the Group. Supported Object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipal:ServicePrincipal": {
            "description": "Manages a Service Principal associated with an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API. Please see The Granting a Service Principal permission to manage AAD for the required steps.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {\n    homepage: \"http://homepage\",\n    identifierUris: [\"http://uri\"],\n    replyUrls: [\"http://replyurl\"],\n    availableToOtherTenants: false,\n    oauth2AllowImplicitFlow: true,\n});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {\n    applicationId: exampleApplication.applicationId,\n    appRoleAssignmentRequired: false,\n    tags: [\n        \"example\",\n        \"tags\",\n        \"here\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\",\n    homepage=\"http://homepage\",\n    identifier_uris=[\"http://uri\"],\n    reply_urls=[\"http://replyurl\"],\n    available_to_other_tenants=False,\n    oauth2_allow_implicit_flow=True)\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\",\n    application_id=example_application.application_id,\n    app_role_assignment_required=False,\n    tags=[\n        \"example\",\n        \"tags\",\n        \"here\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new AzureAD.Application(\"exampleApplication\", new AzureAD.ApplicationArgs\n        {\n            Homepage = \"http://homepage\",\n            IdentifierUris = \n            {\n                \"http://uri\",\n            },\n            ReplyUrls = \n            {\n                \"http://replyurl\",\n            },\n            AvailableToOtherTenants = false,\n            Oauth2AllowImplicitFlow = true,\n        });\n        var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new AzureAD.ServicePrincipalArgs\n        {\n            ApplicationId = exampleApplication.ApplicationId,\n            AppRoleAssignmentRequired = false,\n            Tags = \n            {\n                \"example\",\n                \"tags\",\n                \"here\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", \u0026azuread.ApplicationArgs{\n\t\t\tHomepage: pulumi.String(\"http://homepage\"),\n\t\t\tIdentifierUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"http://uri\"),\n\t\t\t},\n\t\t\tReplyUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"http://replyurl\"),\n\t\t\t},\n\t\t\tAvailableToOtherTenants: pulumi.Bool(false),\n\t\t\tOauth2AllowImplicitFlow: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId:             exampleApplication.ApplicationId,\n\t\t\tAppRoleAssignmentRequired: pulumi.Bool(false),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"example\"),\n\t\t\t\tpulumi.String(\"tags\"),\n\t\t\t\tpulumi.String(\"here\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Active Directory Service Principals can be imported using the `object id`, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipal:ServicePrincipal test 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "appRoleAssignmentRequired": {
                    "type": "boolean",
                    "description": "Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                },
                "appRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole"
                    }
                },
                "applicationId": {
                    "type": "string",
                    "description": "The App ID of the Application for which to create a Service Principal.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Application associated with this Service Principal.\n"
                },
                "oauth2Permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalOauth2Permission:ServicePrincipalOauth2Permission"
                    },
                    "description": "A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2_permission` block as documented below.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The Object ID of the Service Principal.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the Service Principal.\n"
                }
            },
            "required": [
                "appRoles",
                "applicationId",
                "displayName",
                "oauth2Permissions",
                "objectId"
            ],
            "inputProperties": {
                "appRoleAssignmentRequired": {
                    "type": "boolean",
                    "description": "Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The App ID of the Application for which to create a Service Principal.\n"
                },
                "oauth2Permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuread:index/ServicePrincipalOauth2Permission:ServicePrincipalOauth2Permission"
                    },
                    "description": "A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2_permission` block as documented below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags to apply to the Service Principal.\n"
                }
            },
            "requiredInputs": [
                "applicationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipal resources.\n",
                "properties": {
                    "appRoleAssignmentRequired": {
                        "type": "boolean",
                        "description": "Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.\n"
                    },
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalAppRole:ServicePrincipalAppRole"
                        }
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The App ID of the Application for which to create a Service Principal.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Application associated with this Service Principal.\n"
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/ServicePrincipalOauth2Permission:ServicePrincipalOauth2Permission"
                        },
                        "description": "A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2_permission` block as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The Object ID of the Service Principal.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to apply to the Service Principal.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate": {
            "description": "Manages a Certificate associated with a Service Principal within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n\n## Import\n\nCertificates can be imported using the `object id` of the Service Principal and the `key id` of the certificate, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate test 00000000-0000-0000-0000-000000000000/certificate/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The ID of the Service Principal for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                }
            },
            "required": [
                "endDate",
                "keyId",
                "servicePrincipalId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "encoding": {
                    "type": "string",
                    "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The ID of the Service Principal for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                }
            },
            "requiredInputs": [
                "servicePrincipalId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalCertificate resources.\n",
                "properties": {
                    "encoding": {
                        "type": "string",
                        "description": "Specifies the encoding used for the supplied certificate data. Must be one of `pem`, `base64` or `hex`. Defaults to `pem`.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The End Date which the Certificate is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the Certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A GUID used to uniquely identify this Certificate. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The ID of the Service Principal for which this certificate should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The Start Date which the Certificate is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of key/certificate. Must be one of `AsymmetricX509Cert` or `Symmetric`. Changing this fields forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER. See also the `encoding` argument.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/servicePrincipalPassword:ServicePrincipalPassword": {
            "description": "Manages a Password associated with a Service Principal within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst exampleApplication = new azuread.Application(\"exampleApplication\", {});\nconst exampleServicePrincipal = new azuread.ServicePrincipal(\"exampleServicePrincipal\", {applicationId: exampleApplication.applicationId});\nconst exampleServicePrincipalPassword = new azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", {\n    servicePrincipalId: exampleServicePrincipal.id,\n    description: \"My managed password\",\n    value: `VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#`,\n    endDate: \"2099-01-01T01:02:03Z\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample_application = azuread.Application(\"exampleApplication\")\nexample_service_principal = azuread.ServicePrincipal(\"exampleServicePrincipal\", application_id=example_application.application_id)\nexample_service_principal_password = azuread.ServicePrincipalPassword(\"exampleServicePrincipalPassword\",\n    service_principal_id=example_service_principal.id,\n    description=\"My managed password\",\n    value=\"VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#\",\n    end_date=\"2099-01-01T01:02:03Z\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new AzureAD.Application(\"exampleApplication\", new AzureAD.ApplicationArgs\n        {\n        });\n        var exampleServicePrincipal = new AzureAD.ServicePrincipal(\"exampleServicePrincipal\", new AzureAD.ServicePrincipalArgs\n        {\n            ApplicationId = exampleApplication.ApplicationId,\n        });\n        var exampleServicePrincipalPassword = new AzureAD.ServicePrincipalPassword(\"exampleServicePrincipalPassword\", new AzureAD.ServicePrincipalPasswordArgs\n        {\n            ServicePrincipalId = exampleServicePrincipal.Id,\n            Description = \"My managed password\",\n            Value = \"VT=uSgbTanZhyz@%nL9Hpd+Tfay_MRV#\",\n            EndDate = \"2099-01-01T01:02:03Z\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := azuread.NewApplication(ctx, \"exampleApplication\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, \"exampleServicePrincipal\", \u0026azuread.ServicePrincipalArgs{\n\t\t\tApplicationId: exampleApplication.ApplicationId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuread.NewServicePrincipalPassword(ctx, \"exampleServicePrincipalPassword\", \u0026azuread.ServicePrincipalPasswordArgs{\n\t\t\tServicePrincipalId: exampleServicePrincipal.ID(),\n\t\t\tDescription:        pulumi.String(\"My managed password\"),\n\t\t\tValue:              pulumi.String(fmt.Sprintf(\"%v%v%v\", \"VT=uSgbTanZhyz@\", \"%\", \"nL9Hpd+Tfay_MRV#\")),\n\t\t\tEndDate:            pulumi.String(\"2099-01-01T01:02:03Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPasswords can be imported using the `object id` of a Service Principal and the `key id` of the password, e.g.\n\n```sh\n $ pulumi import azuread:index/servicePrincipalPassword:ServicePrincipalPassword test 00000000-0000-0000-0000-000000000000/password/11111111-1111-1111-1111-111111111111\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Password.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Key. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The ID of the Service Principal for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Password for this Service Principal.\n"
                }
            },
            "required": [
                "description",
                "endDate",
                "keyId",
                "servicePrincipalId",
                "startDate",
                "value"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Password.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                },
                "endDateRelative": {
                    "type": "string",
                    "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "A GUID used to uniquely identify this Key. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                },
                "servicePrincipalId": {
                    "type": "string",
                    "description": "The ID of the Service Principal for which this password should be created. Changing this field forces a new resource to be created.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Password for this Service Principal.\n"
                }
            },
            "requiredInputs": [
                "servicePrincipalId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServicePrincipalPassword resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description for the Password.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "The End Date which the Password is valid until, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Changing this field forces a new resource to be created.\n"
                    },
                    "endDateRelative": {
                        "type": "string",
                        "description": "A relative duration for which the Password is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Changing this field forces a new resource to be created.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "A GUID used to uniquely identify this Key. If not specified a GUID will be created. Changing this field forces a new resource to be created.\n"
                    },
                    "servicePrincipalId": {
                        "type": "string",
                        "description": "The ID of the Service Principal for which this password should be created. Changing this field forces a new resource to be created.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "The Start Date which the Password is valid from, formatted as a RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used.  Changing this field forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The Password for this Service Principal.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuread:index/user:User": {
            "description": "Manages a User within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Directory.ReadWrite.All` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = new azuread.User(\"example\", {\n    displayName: \"J. Doe\",\n    mailNickname: \"jdoe\",\n    password: \"SecretP@sswd99!\",\n    userPrincipalName: \"jdoe@hashicorp.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.User(\"example\",\n    display_name=\"J. Doe\",\n    mail_nickname=\"jdoe\",\n    password=\"SecretP@sswd99!\",\n    user_principal_name=\"jdoe@hashicorp.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new AzureAD.User(\"example\", new AzureAD.UserArgs\n        {\n            DisplayName = \"J. Doe\",\n            MailNickname = \"jdoe\",\n            Password = \"SecretP@sswd99!\",\n            UserPrincipalName = \"jdoe@hashicorp.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.NewUser(ctx, \"example\", \u0026azuread.UserArgs{\n\t\t\tDisplayName:       pulumi.String(\"J. Doe\"),\n\t\t\tMailNickname:      pulumi.String(\"jdoe\"),\n\t\t\tPassword:          pulumi.String(\"SecretP@sswd99!\"),\n\t\t\tUserPrincipalName: pulumi.String(\"jdoe@hashicorp.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAzure Active Directory Users can be imported using the `object id`, e.g.\n\n```sh\n $ pulumi import azuread:index/user:User my_user 00000000-0000-0000-0000-000000000000\n```\n\n ",
            "properties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "`true` if the account should be enabled, otherwise `false`. Defaults to `true`.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city in which the user is located.\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country/region in which the user is located; for example, “US” or “UK”.\n"
                },
                "department": {
                    "type": "string",
                    "description": "The name for the department in which the user works.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name to display in the address book for the user.\n"
                },
                "forcePasswordChange": {
                    "type": "boolean",
                    "description": "`true` if the User is forced to change the password during the next sign-in. Defaults to `false`.\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "The given name (first name) of the user.\n"
                },
                "immutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user’s job title.\n"
                },
                "mail": {
                    "type": "string",
                    "description": "The primary email address of the User.\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the user. Defaults to the user name part of the User Principal Name.\n"
                },
                "mobile": {
                    "type": "string",
                    "description": "The primary cellular telephone number for the user.\n"
                },
                "objectId": {
                    "type": "string",
                    "description": "The Object ID of the User.\n"
                },
                "onpremisesSamAccountName": {
                    "type": "string",
                    "description": "The on-premise SAM account name of the User.\n"
                },
                "onpremisesUserPrincipalName": {
                    "type": "string",
                    "description": "The on-premise user principal name of the User.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the User. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters.\n"
                },
                "physicalDeliveryOfficeName": {
                    "type": "string",
                    "description": "The office location in the user's place of business.\n"
                },
                "postalCode": {
                    "type": "string",
                    "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state or province in the user's address.\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "The street address of the user's place of business.\n"
                },
                "surname": {
                    "type": "string",
                    "description": "The user's surname (family name or last name).\n"
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the User. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The User Principal Name of the User.\n"
                }
            },
            "required": [
                "city",
                "companyName",
                "country",
                "department",
                "displayName",
                "givenName",
                "immutableId",
                "jobTitle",
                "mail",
                "mailNickname",
                "mobile",
                "objectId",
                "onpremisesSamAccountName",
                "onpremisesUserPrincipalName",
                "password",
                "physicalDeliveryOfficeName",
                "postalCode",
                "state",
                "streetAddress",
                "surname",
                "usageLocation",
                "userPrincipalName"
            ],
            "inputProperties": {
                "accountEnabled": {
                    "type": "boolean",
                    "description": "`true` if the account should be enabled, otherwise `false`. Defaults to `true`.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city in which the user is located.\n"
                },
                "companyName": {
                    "type": "string",
                    "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country/region in which the user is located; for example, “US” or “UK”.\n"
                },
                "department": {
                    "type": "string",
                    "description": "The name for the department in which the user works.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name to display in the address book for the user.\n"
                },
                "forcePasswordChange": {
                    "type": "boolean",
                    "description": "`true` if the User is forced to change the password during the next sign-in. Defaults to `false`.\n"
                },
                "givenName": {
                    "type": "string",
                    "description": "The given name (first name) of the user.\n"
                },
                "immutableId": {
                    "type": "string",
                    "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account.\n"
                },
                "jobTitle": {
                    "type": "string",
                    "description": "The user’s job title.\n"
                },
                "mailNickname": {
                    "type": "string",
                    "description": "The mail alias for the user. Defaults to the user name part of the User Principal Name.\n"
                },
                "mobile": {
                    "type": "string",
                    "description": "The primary cellular telephone number for the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the User. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters.\n"
                },
                "physicalDeliveryOfficeName": {
                    "type": "string",
                    "description": "The office location in the user's place of business.\n"
                },
                "postalCode": {
                    "type": "string",
                    "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The state or province in the user's address.\n"
                },
                "streetAddress": {
                    "type": "string",
                    "description": "The street address of the user's place of business.\n"
                },
                "surname": {
                    "type": "string",
                    "description": "The user's surname (family name or last name).\n"
                },
                "usageLocation": {
                    "type": "string",
                    "description": "The usage location of the User. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                },
                "userPrincipalName": {
                    "type": "string",
                    "description": "The User Principal Name of the User.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "password",
                "userPrincipalName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "`true` if the account should be enabled, otherwise `false`. Defaults to `true`.\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city in which the user is located.\n"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country/region in which the user is located; for example, “US” or “UK”.\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "The name for the department in which the user works.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name to display in the address book for the user.\n"
                    },
                    "forcePasswordChange": {
                        "type": "boolean",
                        "description": "`true` if the User is forced to change the password during the next sign-in. Defaults to `false`.\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name (first name) of the user.\n"
                    },
                    "immutableId": {
                        "type": "string",
                        "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object. This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user’s job title.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The primary email address of the User.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The mail alias for the user. Defaults to the user name part of the User Principal Name.\n"
                    },
                    "mobile": {
                        "type": "string",
                        "description": "The primary cellular telephone number for the user.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The Object ID of the User.\n"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premise SAM account name of the User.\n"
                    },
                    "onpremisesUserPrincipalName": {
                        "type": "string",
                        "description": "The on-premise user principal name of the User.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the User. The password must satisfy minimum requirements as specified by the password policy. The maximum length is 256 characters.\n"
                    },
                    "physicalDeliveryOfficeName": {
                        "type": "string",
                        "description": "The office location in the user's place of business.\n"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state or province in the user's address.\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address of the user's place of business.\n"
                    },
                    "surname": {
                        "type": "string",
                        "description": "The user's surname (family name or last name).\n"
                    },
                    "usageLocation": {
                        "type": "string",
                        "description": "The usage location of the User. Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. The usage location is a two letter country code (ISO standard 3166). Examples include: `NO`, `JP`, and `GB`. Cannot be reset to null once set.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The User Principal Name of the User.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "azuread:index/getApplication:getApplication": {
            "description": "Use this data source to access information about an existing Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all (or owned by) applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = azuread.getApplication({\n    displayName: \"My First AzureAD Application\",\n});\nexport const azureAdObjectId = example.then(example =\u003e example.id);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_application(display_name=\"My First AzureAD Application\")\npulumi.export(\"azureAdObjectId\", example.id)\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetApplication.InvokeAsync(new AzureAD.GetApplicationArgs\n        {\n            DisplayName = \"My First AzureAD Application\",\n        }));\n        this.AzureAdObjectId = example.Apply(example =\u003e example.Id);\n    }\n\n    [Output(\"azureAdObjectId\")]\n    public Output\u003cstring\u003e AzureAdObjectId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"My First AzureAD Application\"\n\t\texample, err := azuread.LookupApplication(ctx, \u0026azuread.LookupApplicationArgs{\n\t\t\tDisplayName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"azureAdObjectId\", example.Id)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Specifies the Application ID of the Azure Active Directory Application.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Specifies the display name of the Application within Azure Active Directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the optional claim.\n",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in version 2.0 of this provider."
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationOauth2Permission:getApplicationOauth2Permission"
                        },
                        "description": "A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the Object ID of the Application within Azure Active Directory.\n"
                    },
                    "optionalClaims": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaims:getApplicationOptionalClaims",
                        "description": "A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationAppRole:getApplicationAppRole"
                        },
                        "description": "A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "the Application ID of the Azure Active Directory Application.\n"
                    },
                    "availableToOtherTenants": {
                        "type": "boolean",
                        "description": "Is this Azure AD Application available to other tenants?\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                    },
                    "groupMembershipClaims": {
                        "type": "string",
                        "description": "The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.\n"
                    },
                    "homepage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "identifierUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL of the logout page.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the optional claim.\n",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in version 2.0 of this provider."
                    },
                    "oauth2AllowImplicitFlow": {
                        "type": "boolean",
                        "description": "Does this Azure AD Application allow OAuth2.0 implicit flow tokens?\n"
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationOauth2Permission:getApplicationOauth2Permission"
                        },
                        "description": "A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "the Object ID of the Azure Active Directory Application.\n"
                    },
                    "optionalClaims": {
                        "$ref": "#/types/azuread:index/getApplicationOptionalClaims:getApplicationOptionalClaims",
                        "description": "A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of User Object IDs that are assigned ownership of the application registration.\n"
                    },
                    "replyUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.\n"
                    },
                    "requiredResourceAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getApplicationRequiredResourceAccess:getApplicationRequiredResourceAccess"
                        },
                        "description": "A collection of `required_resource_access` blocks as documented below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies whether the id property references an `OAuth2Permission` or an `AppRole`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appRoles",
                    "applicationId",
                    "availableToOtherTenants",
                    "displayName",
                    "groupMembershipClaims",
                    "homepage",
                    "identifierUris",
                    "logoutUrl",
                    "name",
                    "oauth2AllowImplicitFlow",
                    "oauth2Permissions",
                    "objectId",
                    "owners",
                    "replyUrls",
                    "requiredResourceAccesses",
                    "type",
                    "id"
                ]
            }
        },
        "azuread:index/getClientConfig:getClientConfig": {
            "description": "Use this data source to access the configuration of the AzureAD provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst current = azuread.getClientConfig({});\nexport const accountId = current.then(current =\u003e current.clientId);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ncurrent = azuread.get_client_config()\npulumi.export(\"accountId\", current.client_id)\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var current = Output.Create(AzureAD.GetClientConfig.InvokeAsync());\n        this.AccountId = current.Apply(current =\u003e current.ClientId);\n    }\n\n    [Output(\"accountId\")]\n    public Output\u003cstring\u003e AccountId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := azuread.GetClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"accountId\", current.ClientId)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "clientId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "objectId",
                    "tenantId",
                    "id"
                ]
            }
        },
        "azuread:index/getDomains:getDomains": {
            "description": "Use this data source to access information about existing Domains within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Directory.Read.All` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst aadDomains = azuread.getDomains({});\nexport const domains = aadDomains.then(aadDomains =\u003e aadDomains.domains);\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\naad_domains = azuread.get_domains()\npulumi.export(\"domains\", aad_domains.domains)\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var aadDomains = Output.Create(AzureAD.GetDomains.InvokeAsync());\n        this.Domains = aadDomains.Apply(aadDomains =\u003e aadDomains.Domains);\n    }\n\n    [Output(\"domains\")]\n    public Output\u003cstring\u003e Domains { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taadDomains, err := azuread.GetDomains(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"domains\", aadDomains.Domains)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomains.\n",
                "properties": {
                    "includeUnverified": {
                        "type": "boolean",
                        "description": "Set to `true` if unverified Azure AD domains should be included. Defaults to `false`.\n"
                    },
                    "onlyDefault": {
                        "type": "boolean",
                        "description": "Set to `true` to only return the default domain.\n"
                    },
                    "onlyInitial": {
                        "type": "boolean",
                        "description": "Set to `true` to only return the initial domain, which is your primary Azure Active Directory tenant domain. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomains.\n",
                "properties": {
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getDomainsDomain:getDomainsDomain"
                        },
                        "description": "A list of domains. Each `domain` object provides the attributes documented below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "includeUnverified": {
                        "type": "boolean"
                    },
                    "onlyDefault": {
                        "type": "boolean"
                    },
                    "onlyInitial": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "domains",
                    "id"
                ]
            }
        },
        "azuread:index/getGroup:getGroup": {
            "description": "Gets information about an Azure Active Directory group.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read directory data` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Group Display Name)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = pulumi.output(azuread.getGroup({\n    displayName: \"MyGroupName\",\n    securityEnabled: true,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_group(display_name=\"MyGroupName\",\n    security_enabled=True)\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetGroup.InvokeAsync(new AzureAD.GetGroupArgs\n        {\n            DisplayName = \"MyGroupName\",\n            SecurityEnabled = true,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"MyGroupName\"\n\t\topt1 := true\n\t\t_, err := azuread.LookupGroup(ctx, \u0026azuread.LookupGroupArgs{\n\t\t\tDisplayName:     \u0026opt0,\n\t\t\tSecurityEnabled: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the Group.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is mail-enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in v2.0 of this provider."
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the Object ID of the Group.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The optional description of the Group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the Group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mailEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is mail-enabled.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Group members.\n"
                    },
                    "name": {
                        "type": "string",
                        "deprecationMessage": "This property has been renamed to `display_name` and will be removed in v2.0 of this provider."
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Group owners.\n"
                    },
                    "securityEnabled": {
                        "type": "boolean",
                        "description": "Whether the group is a security group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "mailEnabled",
                    "members",
                    "name",
                    "objectId",
                    "owners",
                    "securityEnabled",
                    "id"
                ]
            }
        },
        "azuread:index/getGroups:getGroups": {
            "description": "Gets Object IDs or Display Names for multiple Azure Active Directory groups.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read directory data` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst groups = pulumi.output(azuread.getGroups({\n    names: [\n        \"group-a\",\n        \"group-b\",\n    ],\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\ngroups = azuread.get_groups(names=[\n    \"group-a\",\n    \"group-b\",\n])\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var groups = Output.Create(AzureAD.GetGroups.InvokeAsync(new AzureAD.GetGroupsArgs\n        {\n            Names = \n            {\n                \"group-a\",\n                \"group-b\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetGroups(ctx, \u0026azuread.GetGroupsArgs{\n\t\t\tNames: []string{\n\t\t\t\t\"group-a\",\n\t\t\t\t\"group-b\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroups.\n",
                "properties": {
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Display Names of the Azure AD Groups.\n",
                        "deprecationMessage": "This property has been renamed to `display_names` and will be removed in v2.0 of this provider."
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Azure AD Groups.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "displayNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Display Names of the Azure AD Groups.\n",
                        "deprecationMessage": "This property has been renamed to `display_names` and will be removed in v2.0 of this provider."
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Azure AD Groups.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayNames",
                    "names",
                    "objectIds",
                    "id"
                ]
            }
        },
        "azuread:index/getServicePrincipal:getServicePrincipal": {
            "description": "Gets information about an existing Service Principal associated with an Application within Azure Active Directory.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### By Application Display Name)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = pulumi.output(azuread.getServicePrincipal({\n    displayName: \"my-awesome-application\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(display_name=\"my-awesome-application\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs\n        {\n            DisplayName = \"my-awesome-application\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my-awesome-application\"\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tDisplayName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### By Application ID)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = pulumi.output(azuread.getServicePrincipal({\n    applicationId: \"00000000-0000-0000-0000-000000000000\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(application_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs\n        {\n            ApplicationId = \"00000000-0000-0000-0000-000000000000\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"00000000-0000-0000-0000-000000000000\"\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tApplicationId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### By Object ID)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = pulumi.output(azuread.getServicePrincipal({\n    objectId: \"00000000-0000-0000-0000-000000000000\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_service_principal(object_id=\"00000000-0000-0000-0000-000000000000\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs\n        {\n            ObjectId = \"00000000-0000-0000-0000-000000000000\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"00000000-0000-0000-0000-000000000000\"\n\t\t_, err := azuread.LookupServicePrincipal(ctx, \u0026azuread.LookupServicePrincipalArgs{\n\t\t\tObjectId: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServicePrincipal.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the Azure AD Application.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Azure AD Application associated with this Service Principal.\n"
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalOauth2Permission:getServicePrincipalOauth2Permission"
                        },
                        "description": "A collection of OAuth 2.0 permissions exposed by the associated application. Each permission is covered by a `oauth2_permission` block as documented below.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "The ID of the Azure AD Service Principal.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServicePrincipal.\n",
                "properties": {
                    "appRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalAppRole:getServicePrincipalAppRole"
                        }
                    },
                    "applicationId": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the permission that appears in the admin consent and app assignment experiences.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "oauth2Permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getServicePrincipalOauth2Permission:getServicePrincipalOauth2Permission"
                        }
                    },
                    "objectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "appRoles",
                    "applicationId",
                    "displayName",
                    "oauth2Permissions",
                    "objectId",
                    "id"
                ]
            }
        },
        "azuread:index/getUser:getUser": {
            "description": "Gets information about an Azure Active Directory user.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read directory data` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst example = pulumi.output(azuread.getUser({\n    userPrincipalName: \"user@hashicorp.com\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nexample = azuread.get_user(user_principal_name=\"user@hashicorp.com\")\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(AzureAD.GetUser.InvokeAsync(new AzureAD.GetUserArgs\n        {\n            UserPrincipalName = \"user@hashicorp.com\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"user@hashicorp.com\"\n\t\t_, err := azuread.LookupUser(ctx, \u0026azuread.LookupUserArgs{\n\t\t\tUserPrincipalName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "mailNickname": {
                        "type": "string",
                        "description": "The email alias of the Azure AD User.\n"
                    },
                    "objectId": {
                        "type": "string",
                        "description": "Specifies the Object ID of the User within Azure Active Directory.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The User Principal Name of the Azure AD User.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accountEnabled": {
                        "type": "boolean",
                        "description": "`True` if the account is enabled; otherwise `False`.\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city in which the user is located.\n"
                    },
                    "companyName": {
                        "type": "string",
                        "description": "The company name which the user is associated. This property can be useful for describing the company that an external user comes from.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country/region in which the user is located; for example, “US” or “UK”.\n"
                    },
                    "department": {
                        "type": "string",
                        "description": "The name for the department in which the user works.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Azure AD User.\n"
                    },
                    "givenName": {
                        "type": "string",
                        "description": "The given name (first name) of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "immutableId": {
                        "type": "string",
                        "description": "The value used to associate an on-premise Active Directory user account with their Azure AD user object.\n"
                    },
                    "jobTitle": {
                        "type": "string",
                        "description": "The user’s job title.\n"
                    },
                    "mail": {
                        "type": "string",
                        "description": "The primary email address of the Azure AD User.\n"
                    },
                    "mailNickname": {
                        "type": "string",
                        "description": "The email alias of the Azure AD User.\n"
                    },
                    "mobile": {
                        "type": "string",
                        "description": "The primary cellular telephone number for the user.\n"
                    },
                    "objectId": {
                        "type": "string"
                    },
                    "onpremisesSamAccountName": {
                        "type": "string",
                        "description": "The on-premise SAM account name of the Azure AD User.\n"
                    },
                    "onpremisesUserPrincipalName": {
                        "type": "string",
                        "description": "The on-premise user principal name of the Azure AD User.\n"
                    },
                    "physicalDeliveryOfficeName": {
                        "type": "string",
                        "description": "The office location in the user's place of business.\n"
                    },
                    "postalCode": {
                        "type": "string",
                        "description": "The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state or province in the user's address.\n"
                    },
                    "streetAddress": {
                        "type": "string",
                        "description": "The street address of the user's place of business.\n"
                    },
                    "surname": {
                        "type": "string",
                        "description": "The user's surname (family name or last name).\n"
                    },
                    "usageLocation": {
                        "type": "string",
                        "description": "The usage location of the Azure AD User.\n"
                    },
                    "userPrincipalName": {
                        "type": "string",
                        "description": "The User Principal Name of the Azure AD User.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountEnabled",
                    "city",
                    "companyName",
                    "country",
                    "department",
                    "displayName",
                    "givenName",
                    "immutableId",
                    "jobTitle",
                    "mail",
                    "mailNickname",
                    "mobile",
                    "objectId",
                    "onpremisesSamAccountName",
                    "onpremisesUserPrincipalName",
                    "physicalDeliveryOfficeName",
                    "postalCode",
                    "state",
                    "streetAddress",
                    "surname",
                    "usageLocation",
                    "userPrincipalName",
                    "id"
                ]
            }
        },
        "azuread:index/getUsers:getUsers": {
            "description": "Gets Object IDs or UPNs for multiple Azure Active Directory users.\n\n\u003e **NOTE:** If you're authenticating using a Service Principal then it must have permissions to `Read directory data` within the `Windows Azure Active Directory` API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuread from \"@pulumi/azuread\";\n\nconst users = pulumi.output(azuread.getUsers({\n    userPrincipalNames: [\n        \"kat@hashicorp.com\",\n        \"byte@hashicorp.com\",\n    ],\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_azuread as azuread\n\nusers = azuread.get_users(user_principal_names=[\n    \"kat@hashicorp.com\",\n    \"byte@hashicorp.com\",\n])\n```\n```csharp\nusing Pulumi;\nusing AzureAD = Pulumi.AzureAD;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var users = Output.Create(AzureAD.GetUsers.InvokeAsync(new AzureAD.GetUsersArgs\n        {\n            UserPrincipalNames = \n            {\n                \"kat@hashicorp.com\",\n                \"byte@hashicorp.com\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := azuread.GetUsers(ctx, \u0026azuread.GetUsersArgs{\n\t\t\tUserPrincipalNames: []string{\n\t\t\t\t\"kat@hashicorp.com\",\n\t\t\t\t\"byte@hashicorp.com\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "Ignore missing users and return users that were found. The data source will still fail if no users are found. Defaults to false.\n"
                    },
                    "mailNicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email aliases of the Azure AD Users.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Azure AD Users.\n"
                    },
                    "userPrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The User Principal Names of the Azure AD Users.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean"
                    },
                    "mailNicknames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email aliases of the Azure AD Users.\n"
                    },
                    "objectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Object IDs of the Azure AD Users.\n"
                    },
                    "userPrincipalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The User Principal Names of the Azure AD Users.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/azuread:index/getUsersUser:getUsersUser"
                        },
                        "description": "A list of Azure AD Users. Each `user` object provides the attributes documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "mailNicknames",
                    "objectIds",
                    "userPrincipalNames",
                    "users",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "azuread": "AzureAD"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.15.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing azuread cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuread)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuread` repo](https://github.com/pulumi/pulumi-azuread/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-azuread` repo](https://github.com/terraform-providers/terraform-provider-azuread/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-azuread)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-azuread` repo](https://github.com/pulumi/pulumi-azuread/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-azuread` repo](https://github.com/terraform-providers/terraform-provider-azuread/issues).",
            "requires": {
                "pulumi": "\u003e=2.15.0,\u003c3.0.0"
            }
        }
    }
}