// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.AzureAD
{
    public static class GetDomains
    {
        /// <summary>
        /// Use this data source to access information about existing Domains within Azure Active Directory.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var aadDomains = Output.Create(AzureAD.GetDomains.InvokeAsync());
        ///         this.DomainNames = 
        ///         {
        ///             aadDomains.Apply(aadDomains =&gt; aadDomains.Domains),
        ///         }.Select(__item =&gt; __item?.DomainName).ToList();
        ///     }
        /// 
        ///     [Output("domainNames")]
        ///     public Output&lt;string&gt; DomainNames { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDomainsResult> InvokeAsync(GetDomainsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainsResult>("azuread:index/getDomains:getDomains", args ?? new GetDomainsArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about existing Domains within Azure Active Directory.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var aadDomains = Output.Create(AzureAD.GetDomains.InvokeAsync());
        ///         this.DomainNames = 
        ///         {
        ///             aadDomains.Apply(aadDomains =&gt; aadDomains.Domains),
        ///         }.Select(__item =&gt; __item?.DomainName).ToList();
        ///     }
        /// 
        ///     [Output("domainNames")]
        ///     public Output&lt;string&gt; DomainNames { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDomainsResult> Invoke(GetDomainsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainsResult>("azuread:index/getDomains:getDomains", args ?? new GetDomainsInvokeArgs(), options.WithVersion());
    }


    public sealed class GetDomainsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.
        /// </summary>
        [Input("adminManaged")]
        public bool? AdminManaged { get; set; }

        /// <summary>
        /// Set to `true` if unverified Azure AD domains should be included. Defaults to `false`.
        /// </summary>
        [Input("includeUnverified")]
        public bool? IncludeUnverified { get; set; }

        /// <summary>
        /// Set to `true` to only return the default domain.
        /// </summary>
        [Input("onlyDefault")]
        public bool? OnlyDefault { get; set; }

        /// <summary>
        /// Set to `true` to only return the initial domain, which is your primary Azure Active Directory tenant domain. Defaults to `false`.
        /// </summary>
        [Input("onlyInitial")]
        public bool? OnlyInitial { get; set; }

        /// <summary>
        /// Set to `true` to only return verified root domains. Excludes subdomains and unverified domains.
        /// </summary>
        [Input("onlyRoot")]
        public bool? OnlyRoot { get; set; }

        [Input("supportsServices")]
        private List<string>? _supportsServices;

        /// <summary>
        /// A list of supported services that must be supported by a domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.
        /// </summary>
        public List<string> SupportsServices
        {
            get => _supportsServices ?? (_supportsServices = new List<string>());
            set => _supportsServices = value;
        }

        public GetDomainsArgs()
        {
        }
    }

    public sealed class GetDomainsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Set to `true` to only return domains whose DNS is managed by Microsoft 365. Defaults to `false`.
        /// </summary>
        [Input("adminManaged")]
        public Input<bool>? AdminManaged { get; set; }

        /// <summary>
        /// Set to `true` if unverified Azure AD domains should be included. Defaults to `false`.
        /// </summary>
        [Input("includeUnverified")]
        public Input<bool>? IncludeUnverified { get; set; }

        /// <summary>
        /// Set to `true` to only return the default domain.
        /// </summary>
        [Input("onlyDefault")]
        public Input<bool>? OnlyDefault { get; set; }

        /// <summary>
        /// Set to `true` to only return the initial domain, which is your primary Azure Active Directory tenant domain. Defaults to `false`.
        /// </summary>
        [Input("onlyInitial")]
        public Input<bool>? OnlyInitial { get; set; }

        /// <summary>
        /// Set to `true` to only return verified root domains. Excludes subdomains and unverified domains.
        /// </summary>
        [Input("onlyRoot")]
        public Input<bool>? OnlyRoot { get; set; }

        [Input("supportsServices")]
        private InputList<string>? _supportsServices;

        /// <summary>
        /// A list of supported services that must be supported by a domain. Possible values include `Email`, `Sharepoint`, `EmailInternalRelayOnly`, `OfficeCommunicationsOnline`, `SharePointDefaultDomain`, `FullRedelegation`, `SharePointPublic`, `OrgIdAuthentication`, `Yammer` and `Intune`.
        /// </summary>
        public InputList<string> SupportsServices
        {
            get => _supportsServices ?? (_supportsServices = new InputList<string>());
            set => _supportsServices = value;
        }

        public GetDomainsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainsResult
    {
        /// <summary>
        /// Whether the DNS for the domain is managed by Microsoft 365.
        /// </summary>
        public readonly bool? AdminManaged;
        /// <summary>
        /// A list of tenant domains. Each `domain` object provides the attributes documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsDomainResult> Domains;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeUnverified;
        public readonly bool? OnlyDefault;
        public readonly bool? OnlyInitial;
        public readonly bool? OnlyRoot;
        public readonly ImmutableArray<string> SupportsServices;

        [OutputConstructor]
        private GetDomainsResult(
            bool? adminManaged,

            ImmutableArray<Outputs.GetDomainsDomainResult> domains,

            string id,

            bool? includeUnverified,

            bool? onlyDefault,

            bool? onlyInitial,

            bool? onlyRoot,

            ImmutableArray<string> supportsServices)
        {
            AdminManaged = adminManaged;
            Domains = domains;
            Id = id;
            IncludeUnverified = includeUnverified;
            OnlyDefault = onlyDefault;
            OnlyInitial = onlyInitial;
            OnlyRoot = onlyRoot;
            SupportsServices = supportsServices;
        }
    }
}
