// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azuread
{
    /// <summary>
    /// Manages an Application within Azure Active Directory.
    /// 
    /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write owned by applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azuread/blob/master/website/docs/r/application.html.markdown.
    /// </summary>
    public partial class Application : Pulumi.CustomResource
    {
        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles
        /// </summary>
        [Output("appRoles")]
        public Output<ImmutableArray<Outputs.ApplicationAppRoles>> AppRoles { get; private set; } = null!;

        /// <summary>
        /// The Application ID.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`.
        /// </summary>
        [Output("availableToOtherTenants")]
        public Output<bool?> AvailableToOtherTenants { get; private set; } = null!;

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup` or `All`.
        /// </summary>
        [Output("groupMembershipClaims")]
        public Output<string?> GroupMembershipClaims { get; private set; } = null!;

        /// <summary>
        /// The URL to the application's home page. If no homepage is specified this defaults to `https://{name}`.
        /// </summary>
        [Output("homepage")]
        public Output<string> Homepage { get; private set; } = null!;

        /// <summary>
        /// A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        [Output("identifierUris")]
        public Output<ImmutableArray<string>> IdentifierUris { get; private set; } = null!;

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.
        /// </summary>
        [Output("oauth2AllowImplicitFlow")]
        public Output<bool?> Oauth2AllowImplicitFlow { get; private set; } = null!;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        [Output("oauth2Permissions")]
        public Output<ImmutableArray<Outputs.ApplicationOauth2Permissions>> Oauth2Permissions { get; private set; } = null!;

        /// <summary>
        /// The Application's Object ID.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`.
        /// </summary>
        [Output("publicClient")]
        public Output<bool> PublicClient { get; private set; } = null!;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.
        /// </summary>
        [Output("replyUrls")]
        public Output<ImmutableArray<string>> ReplyUrls { get; private set; } = null!;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        [Output("requiredResourceAccesses")]
        public Output<ImmutableArray<Outputs.ApplicationRequiredResourceAccesses>> RequiredResourceAccesses { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs? args = null, CustomResourceOptions? options = null)
            : base("azuread:index/application:Application", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : Pulumi.ResourceArgs
    {
        [Input("appRoles")]
        private InputList<Inputs.ApplicationAppRolesArgs>? _appRoles;

        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles
        /// </summary>
        public InputList<Inputs.ApplicationAppRolesArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ApplicationAppRolesArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`.
        /// </summary>
        [Input("availableToOtherTenants")]
        public Input<bool>? AvailableToOtherTenants { get; set; }

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup` or `All`.
        /// </summary>
        [Input("groupMembershipClaims")]
        public Input<string>? GroupMembershipClaims { get; set; }

        /// <summary>
        /// The URL to the application's home page. If no homepage is specified this defaults to `https://{name}`.
        /// </summary>
        [Input("homepage")]
        public Input<string>? Homepage { get; set; }

        [Input("identifierUris")]
        private InputList<string>? _identifierUris;

        /// <summary>
        /// A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public InputList<string> IdentifierUris
        {
            get => _identifierUris ?? (_identifierUris = new InputList<string>());
            set => _identifierUris = value;
        }

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.
        /// </summary>
        [Input("oauth2AllowImplicitFlow")]
        public Input<bool>? Oauth2AllowImplicitFlow { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.ApplicationOauth2PermissionsArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationOauth2PermissionsArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ApplicationOauth2PermissionsArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`.
        /// </summary>
        [Input("publicClient")]
        public Input<bool>? PublicClient { get; set; }

        [Input("replyUrls")]
        private InputList<string>? _replyUrls;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.
        /// </summary>
        public InputList<string> ReplyUrls
        {
            get => _replyUrls ?? (_replyUrls = new InputList<string>());
            set => _replyUrls = value;
        }

        [Input("requiredResourceAccesses")]
        private InputList<Inputs.ApplicationRequiredResourceAccessesArgs>? _requiredResourceAccesses;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationRequiredResourceAccessesArgs> RequiredResourceAccesses
        {
            get => _requiredResourceAccesses ?? (_requiredResourceAccesses = new InputList<Inputs.ApplicationRequiredResourceAccessesArgs>());
            set => _requiredResourceAccesses = value;
        }

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApplicationArgs()
        {
        }
    }

    public sealed class ApplicationState : Pulumi.ResourceArgs
    {
        [Input("appRoles")]
        private InputList<Inputs.ApplicationAppRolesGetArgs>? _appRoles;

        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles
        /// </summary>
        public InputList<Inputs.ApplicationAppRolesGetArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ApplicationAppRolesGetArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// The Application ID.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`.
        /// </summary>
        [Input("availableToOtherTenants")]
        public Input<bool>? AvailableToOtherTenants { get; set; }

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup` or `All`.
        /// </summary>
        [Input("groupMembershipClaims")]
        public Input<string>? GroupMembershipClaims { get; set; }

        /// <summary>
        /// The URL to the application's home page. If no homepage is specified this defaults to `https://{name}`.
        /// </summary>
        [Input("homepage")]
        public Input<string>? Homepage { get; set; }

        [Input("identifierUris")]
        private InputList<string>? _identifierUris;

        /// <summary>
        /// A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public InputList<string> IdentifierUris
        {
            get => _identifierUris ?? (_identifierUris = new InputList<string>());
            set => _identifierUris = value;
        }

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`.
        /// </summary>
        [Input("oauth2AllowImplicitFlow")]
        public Input<bool>? Oauth2AllowImplicitFlow { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.ApplicationOauth2PermissionsGetArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationOauth2PermissionsGetArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ApplicationOauth2PermissionsGetArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// The Application's Object ID.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`.
        /// </summary>
        [Input("publicClient")]
        public Input<bool>? PublicClient { get; set; }

        [Input("replyUrls")]
        private InputList<string>? _replyUrls;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.
        /// </summary>
        public InputList<string> ReplyUrls
        {
            get => _replyUrls ?? (_replyUrls = new InputList<string>());
            set => _replyUrls = value;
        }

        [Input("requiredResourceAccesses")]
        private InputList<Inputs.ApplicationRequiredResourceAccessesGetArgs>? _requiredResourceAccesses;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationRequiredResourceAccessesGetArgs> RequiredResourceAccesses
        {
            get => _requiredResourceAccesses ?? (_requiredResourceAccesses = new InputList<Inputs.ApplicationRequiredResourceAccessesGetArgs>());
            set => _requiredResourceAccesses = value;
        }

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApplicationState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ApplicationAppRolesArgs : Pulumi.ResourceArgs
    {
        [Input("allowedMemberTypes", required: true)]
        private InputList<string>? _allowedMemberTypes;

        /// <summary>
        /// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        /// </summary>
        public InputList<string> AllowedMemberTypes
        {
            get => _allowedMemberTypes ?? (_allowedMemberTypes = new InputList<string>());
            set => _allowedMemberTypes = value;
        }

        /// <summary>
        /// Permission help text that appears in the admin app assignment and consent experiences.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Display name for the permission that appears in the admin consent and app assignment experiences.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationAppRolesArgs()
        {
        }
    }

    public sealed class ApplicationAppRolesGetArgs : Pulumi.ResourceArgs
    {
        [Input("allowedMemberTypes", required: true)]
        private InputList<string>? _allowedMemberTypes;

        /// <summary>
        /// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        /// </summary>
        public InputList<string> AllowedMemberTypes
        {
            get => _allowedMemberTypes ?? (_allowedMemberTypes = new InputList<string>());
            set => _allowedMemberTypes = value;
        }

        /// <summary>
        /// Permission help text that appears in the admin app assignment and consent experiences.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Display name for the permission that appears in the admin consent and app assignment experiences.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationAppRolesGetArgs()
        {
        }
    }

    public sealed class ApplicationOauth2PermissionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the admin consent.
        /// </summary>
        [Input("adminConsentDescription")]
        public Input<string>? AdminConsentDescription { get; set; }

        /// <summary>
        /// The display name of the admin consent.
        /// </summary>
        [Input("adminConsentDisplayName")]
        public Input<string>? AdminConsentDisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The description of the user consent.
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// The display name of the user consent.
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public ApplicationOauth2PermissionsArgs()
        {
        }
    }

    public sealed class ApplicationOauth2PermissionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the admin consent.
        /// </summary>
        [Input("adminConsentDescription")]
        public Input<string>? AdminConsentDescription { get; set; }

        /// <summary>
        /// The display name of the admin consent.
        /// </summary>
        [Input("adminConsentDisplayName")]
        public Input<string>? AdminConsentDisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The description of the user consent.
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// The display name of the user consent.
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public ApplicationOauth2PermissionsGetArgs()
        {
        }
    }

    public sealed class ApplicationRequiredResourceAccessesArgs : Pulumi.ResourceArgs
    {
        [Input("resourceAccesses", required: true)]
        private InputList<ApplicationRequiredResourceAccessesResourceAccessesArgs>? _resourceAccesses;

        /// <summary>
        /// A collection of `resource_access` blocks as documented below.
        /// </summary>
        public InputList<ApplicationRequiredResourceAccessesResourceAccessesArgs> ResourceAccesses
        {
            get => _resourceAccesses ?? (_resourceAccesses = new InputList<ApplicationRequiredResourceAccessesResourceAccessesArgs>());
            set => _resourceAccesses = value;
        }

        /// <summary>
        /// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        /// </summary>
        [Input("resourceAppId", required: true)]
        public Input<string> ResourceAppId { get; set; } = null!;

        public ApplicationRequiredResourceAccessesArgs()
        {
        }
    }

    public sealed class ApplicationRequiredResourceAccessesGetArgs : Pulumi.ResourceArgs
    {
        [Input("resourceAccesses", required: true)]
        private InputList<ApplicationRequiredResourceAccessesResourceAccessesGetArgs>? _resourceAccesses;

        /// <summary>
        /// A collection of `resource_access` blocks as documented below.
        /// </summary>
        public InputList<ApplicationRequiredResourceAccessesResourceAccessesGetArgs> ResourceAccesses
        {
            get => _resourceAccesses ?? (_resourceAccesses = new InputList<ApplicationRequiredResourceAccessesResourceAccessesGetArgs>());
            set => _resourceAccesses = value;
        }

        /// <summary>
        /// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        /// </summary>
        [Input("resourceAppId", required: true)]
        public Input<string> ResourceAppId { get; set; } = null!;

        public ApplicationRequiredResourceAccessesGetArgs()
        {
        }
    }

    public sealed class ApplicationRequiredResourceAccessesResourceAccessesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApplicationRequiredResourceAccessesResourceAccessesArgs()
        {
        }
    }

    public sealed class ApplicationRequiredResourceAccessesResourceAccessesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApplicationRequiredResourceAccessesResourceAccessesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ApplicationAppRoles
    {
        /// <summary>
        /// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
        /// </summary>
        public readonly ImmutableArray<string> AllowedMemberTypes;
        /// <summary>
        /// Permission help text that appears in the admin app assignment and consent experiences.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name for the permission that appears in the admin consent and app assignment experiences.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        public readonly bool? IsEnabled;
        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private ApplicationAppRoles(
            ImmutableArray<string> allowedMemberTypes,
            string description,
            string displayName,
            string id,
            bool? isEnabled,
            string value)
        {
            AllowedMemberTypes = allowedMemberTypes;
            Description = description;
            DisplayName = displayName;
            Id = id;
            IsEnabled = isEnabled;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ApplicationOauth2Permissions
    {
        /// <summary>
        /// The description of the admin consent.
        /// </summary>
        public readonly string AdminConsentDescription;
        /// <summary>
        /// The display name of the admin consent.
        /// </summary>
        public readonly string AdminConsentDisplayName;
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines if the app role is enabled: Defaults to `true`.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The description of the user consent.
        /// </summary>
        public readonly string UserConsentDescription;
        /// <summary>
        /// The display name of the user consent.
        /// </summary>
        public readonly string UserConsentDisplayName;
        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private ApplicationOauth2Permissions(
            string adminConsentDescription,
            string adminConsentDisplayName,
            string id,
            bool isEnabled,
            string type,
            string userConsentDescription,
            string userConsentDisplayName,
            string value)
        {
            AdminConsentDescription = adminConsentDescription;
            AdminConsentDisplayName = adminConsentDisplayName;
            Id = id;
            IsEnabled = isEnabled;
            Type = type;
            UserConsentDescription = userConsentDescription;
            UserConsentDisplayName = userConsentDisplayName;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ApplicationRequiredResourceAccesses
    {
        /// <summary>
        /// A collection of `resource_access` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<ApplicationRequiredResourceAccessesResourceAccesses> ResourceAccesses;
        /// <summary>
        /// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
        /// </summary>
        public readonly string ResourceAppId;

        [OutputConstructor]
        private ApplicationRequiredResourceAccesses(
            ImmutableArray<ApplicationRequiredResourceAccessesResourceAccesses> resourceAccesses,
            string resourceAppId)
        {
            ResourceAccesses = resourceAccesses;
            ResourceAppId = resourceAppId;
        }
    }

    [OutputType]
    public sealed class ApplicationRequiredResourceAccessesResourceAccesses
    {
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ApplicationRequiredResourceAccessesResourceAccesses(
            string id,
            string type)
        {
            Id = id;
            Type = type;
        }
    }
    }
}
