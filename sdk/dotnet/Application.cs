// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages an Application within Azure Active Directory.
    /// 
    /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write owned by applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var current = Output.Create(AzureAD.GetClientConfig.InvokeAsync());
    ///         var example = new AzureAD.Application("example", new AzureAD.ApplicationArgs
    ///         {
    ///             DisplayName = "example",
    ///             IdentifierUris = 
    ///             {
    ///                 "api://example-app",
    ///             },
    ///             Owners = 
    ///             {
    ///                 current.Apply(current =&gt; current.ObjectId),
    ///             },
    ///             SignInAudience = "AzureADMultipleOrgs",
    ///             Api = new AzureAD.Inputs.ApplicationApiArgs
    ///             {
    ///                 Oauth2PermissionScopes = 
    ///                 {
    ///                     new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs
    ///                     {
    ///                         AdminConsentDescription = "Allow the application to access example on behalf of the signed-in user.",
    ///                         AdminConsentDisplayName = "Access example",
    ///                         Enabled = true,
    ///                         Id = "96183846-204b-4b43-82e1-5d2222eb4b9b",
    ///                         Type = "User",
    ///                         UserConsentDescription = "Allow the application to access example on your behalf.",
    ///                         UserConsentDisplayName = "Access example",
    ///                         Value = "user_impersonation",
    ///                     },
    ///                     new AzureAD.Inputs.ApplicationApiOauth2PermissionScopeArgs
    ///                     {
    ///                         AdminConsentDescription = "Administer the example application",
    ///                         AdminConsentDisplayName = "Administer",
    ///                         Enabled = true,
    ///                         Id = "be98fa3e-ab5b-4b11-83d9-04ba2b7946bc",
    ///                         Type = "Admin",
    ///                         Value = "administer",
    ///                     },
    ///                 },
    ///             },
    ///             AppRoles = 
    ///             {
    ///                 new AzureAD.Inputs.ApplicationAppRoleArgs
    ///                 {
    ///                     AllowedMemberTypes = 
    ///                     {
    ///                         "User",
    ///                         "Application",
    ///                     },
    ///                     Description = "Admins can manage roles and perform all task actions",
    ///                     DisplayName = "Admin",
    ///                     IsEnabled = true,
    ///                     Value = "admin",
    ///                 },
    ///             },
    ///             OptionalClaims = new AzureAD.Inputs.ApplicationOptionalClaimsArgs
    ///             {
    ///                 AccessTokens = 
    ///                 {
    ///                     new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs
    ///                     {
    ///                         Name = "myclaim",
    ///                     },
    ///                     new AzureAD.Inputs.ApplicationOptionalClaimsAccessTokenArgs
    ///                     {
    ///                         Name = "otherclaim",
    ///                     },
    ///                 },
    ///                 IdTokens = 
    ///                 {
    ///                     new AzureAD.Inputs.ApplicationOptionalClaimsIdTokenArgs
    ///                     {
    ///                         Name = "userclaim",
    ///                         Source = "user",
    ///                         Essential = true,
    ///                         AdditionalProperties = 
    ///                         {
    ///                             "emit_as_roles",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             RequiredResourceAccesses = 
    ///             {
    ///                 new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs
    ///                 {
    ///                     ResourceAppId = "00000003-0000-0000-c000-000000000000",
    ///                     ResourceAccesses = 
    ///                     {
    ///                         new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs
    ///                         {
    ///                             Id = "...",
    ///                             Type = "Role",
    ///                         },
    ///                         new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs
    ///                         {
    ///                             Id = "...",
    ///                             Type = "Scope",
    ///                         },
    ///                         new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs
    ///                         {
    ///                             Id = "...",
    ///                             Type = "Scope",
    ///                         },
    ///                     },
    ///                 },
    ///                 new AzureAD.Inputs.ApplicationRequiredResourceAccessArgs
    ///                 {
    ///                     ResourceAppId = "00000002-0000-0000-c000-000000000000",
    ///                     ResourceAccesses = 
    ///                     {
    ///                         new AzureAD.Inputs.ApplicationRequiredResourceAccessResourceAccessArgs
    ///                         {
    ///                             Id = "...",
    ///                             Type = "Scope",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Web = new AzureAD.Inputs.ApplicationWebArgs
    ///             {
    ///                 HomepageUrl = "https://app.example.net",
    ///                 LogoutUrl = "https://app.example.net/logout",
    ///                 RedirectUris = 
    ///                 {
    ///                     "https://app.example.net/account",
    ///                 },
    ///                 ImplicitGrant = new AzureAD.Inputs.ApplicationWebImplicitGrantArgs
    ///                 {
    ///                     AccessTokenIssuanceEnabled = true,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Azure Active Directory Applications can be imported using the `object id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azuread:index/application:Application test 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/application:Application")]
    public partial class Application : Pulumi.CustomResource
    {
        /// <summary>
        /// An `api` block as documented below, which configures API related settings for this Application.
        /// </summary>
        [Output("api")]
        public Output<Outputs.ApplicationApi> Api { get; private set; } = null!;

        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
        /// </summary>
        [Output("appRoles")]
        public Output<ImmutableArray<Outputs.ApplicationAppRole>> AppRoles { get; private set; } = null!;

        /// <summary>
        /// The Application ID (Also called Client ID).
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`. This property is deprecated and has been replaced by the `sign_in_audience` property.
        /// </summary>
        [Output("availableToOtherTenants")]
        public Output<bool> AvailableToOtherTenants { get; private set; } = null!;

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The fallback application type as public client, such as an installed application running on a mobile device. Defaults to `false`.
        /// </summary>
        [Output("fallbackPublicClientEnabled")]
        public Output<bool> FallbackPublicClientEnabled { get; private set; } = null!;

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
        /// </summary>
        [Output("groupMembershipClaims")]
        public Output<string?> GroupMembershipClaims { get; private set; } = null!;

        /// <summary>
        /// The URL to the application's home page. This property is deprecated and has been replaced by the `homepage_url` property in the `web` block.
        /// </summary>
        [Output("homepage")]
        public Output<string> Homepage { get; private set; } = null!;

        /// <summary>
        /// The user-defined URI(s) that uniquely identify an application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        [Output("identifierUris")]
        public Output<ImmutableArray<string>> IdentifierUris { get; private set; } = null!;

        /// <summary>
        /// The URL of the logout page. This property is deprecated and has been replaced by the `logout_url` property in the `web` block.
        /// </summary>
        [Output("logoutUrl")]
        public Output<string> LogoutUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the optional claim.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Does this Azure AD Application allow OAuth 2.0 implicit flow tokens? Defaults to `false`. This property is deprecated and has been replaced by the `access_token_issuance_enabled` property in the `implicit_grant` block.
        /// </summary>
        [Output("oauth2AllowImplicitFlow")]
        public Output<bool> Oauth2AllowImplicitFlow { get; private set; } = null!;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below. This block is deprecated and has been replaced by the `oauth2_permission_scope` block in the `api` block.
        /// </summary>
        [Output("oauth2Permissions")]
        public Output<ImmutableArray<Outputs.ApplicationOauth2Permission>> Oauth2Permissions { get; private set; } = null!;

        /// <summary>
        /// The application's Object ID.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims
        /// </summary>
        [Output("optionalClaims")]
        public Output<Outputs.ApplicationOptionalClaims?> OptionalClaims { get; private set; } = null!;

        [Output("owners")]
        public Output<ImmutableArray<string>> Owners { get; private set; } = null!;

        /// <summary>
        /// If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.
        /// </summary>
        [Output("preventDuplicateNames")]
        public Output<bool?> PreventDuplicateNames { get; private set; } = null!;

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`. This property is deprecated and has been replaced by the `fallback_public_client_enabled` property.
        /// </summary>
        [Output("publicClient")]
        public Output<bool> PublicClient { get; private set; } = null!;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to. This property is deprecated and has been replaced by the `redirect_uris` property in the `web` block.
        /// </summary>
        [Output("replyUrls")]
        public Output<ImmutableArray<string>> ReplyUrls { get; private set; } = null!;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        [Output("requiredResourceAccesses")]
        public Output<ImmutableArray<Outputs.ApplicationRequiredResourceAccess>> RequiredResourceAccesses { get; private set; } = null!;

        /// <summary>
        /// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg` or `AzureADMultipleOrgs`. Defaults to `AzureADMyOrg`.
        /// </summary>
        [Output("signInAudience")]
        public Output<string> SignInAudience { get; private set; } = null!;

        /// <summary>
        /// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// A `web` block as documented below, which configures web related settings for this Application.
        /// </summary>
        [Output("web")]
        public Output<Outputs.ApplicationWeb> Web { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs? args = null, CustomResourceOptions? options = null)
            : base("azuread:index/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `api` block as documented below, which configures API related settings for this Application.
        /// </summary>
        [Input("api")]
        public Input<Inputs.ApplicationApiArgs>? Api { get; set; }

        [Input("appRoles")]
        private InputList<Inputs.ApplicationAppRoleArgs>? _appRoles;

        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
        /// </summary>
        public InputList<Inputs.ApplicationAppRoleArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ApplicationAppRoleArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`. This property is deprecated and has been replaced by the `sign_in_audience` property.
        /// </summary>
        [Input("availableToOtherTenants")]
        public Input<bool>? AvailableToOtherTenants { get; set; }

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fallback application type as public client, such as an installed application running on a mobile device. Defaults to `false`.
        /// </summary>
        [Input("fallbackPublicClientEnabled")]
        public Input<bool>? FallbackPublicClientEnabled { get; set; }

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
        /// </summary>
        [Input("groupMembershipClaims")]
        public Input<string>? GroupMembershipClaims { get; set; }

        /// <summary>
        /// The URL to the application's home page. This property is deprecated and has been replaced by the `homepage_url` property in the `web` block.
        /// </summary>
        [Input("homepage")]
        public Input<string>? Homepage { get; set; }

        [Input("identifierUris")]
        private InputList<string>? _identifierUris;

        /// <summary>
        /// The user-defined URI(s) that uniquely identify an application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public InputList<string> IdentifierUris
        {
            get => _identifierUris ?? (_identifierUris = new InputList<string>());
            set => _identifierUris = value;
        }

        /// <summary>
        /// The URL of the logout page. This property is deprecated and has been replaced by the `logout_url` property in the `web` block.
        /// </summary>
        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        /// <summary>
        /// The name of the optional claim.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Does this Azure AD Application allow OAuth 2.0 implicit flow tokens? Defaults to `false`. This property is deprecated and has been replaced by the `access_token_issuance_enabled` property in the `implicit_grant` block.
        /// </summary>
        [Input("oauth2AllowImplicitFlow")]
        public Input<bool>? Oauth2AllowImplicitFlow { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.ApplicationOauth2PermissionArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below. This block is deprecated and has been replaced by the `oauth2_permission_scope` block in the `api` block.
        /// </summary>
        [Obsolete(@"[NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scope` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.")]
        public InputList<Inputs.ApplicationOauth2PermissionArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ApplicationOauth2PermissionArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims
        /// </summary>
        [Input("optionalClaims")]
        public Input<Inputs.ApplicationOptionalClaimsArgs>? OptionalClaims { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.
        /// </summary>
        [Input("preventDuplicateNames")]
        public Input<bool>? PreventDuplicateNames { get; set; }

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`. This property is deprecated and has been replaced by the `fallback_public_client_enabled` property.
        /// </summary>
        [Input("publicClient")]
        public Input<bool>? PublicClient { get; set; }

        [Input("replyUrls")]
        private InputList<string>? _replyUrls;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to. This property is deprecated and has been replaced by the `redirect_uris` property in the `web` block.
        /// </summary>
        [Obsolete(@"[NOTE] This attribute will be replaced by a new attribute `redirect_uris` in the `web` block in version 2.0 of the AzureAD provider")]
        public InputList<string> ReplyUrls
        {
            get => _replyUrls ?? (_replyUrls = new InputList<string>());
            set => _replyUrls = value;
        }

        [Input("requiredResourceAccesses")]
        private InputList<Inputs.ApplicationRequiredResourceAccessArgs>? _requiredResourceAccesses;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationRequiredResourceAccessArgs> RequiredResourceAccesses
        {
            get => _requiredResourceAccesses ?? (_requiredResourceAccesses = new InputList<Inputs.ApplicationRequiredResourceAccessArgs>());
            set => _requiredResourceAccesses = value;
        }

        /// <summary>
        /// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg` or `AzureADMultipleOrgs`. Defaults to `AzureADMyOrg`.
        /// </summary>
        [Input("signInAudience")]
        public Input<string>? SignInAudience { get; set; }

        /// <summary>
        /// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A `web` block as documented below, which configures web related settings for this Application.
        /// </summary>
        [Input("web")]
        public Input<Inputs.ApplicationWebArgs>? Web { get; set; }

        public ApplicationArgs()
        {
        }
    }

    public sealed class ApplicationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `api` block as documented below, which configures API related settings for this Application.
        /// </summary>
        [Input("api")]
        public Input<Inputs.ApplicationApiGetArgs>? Api { get; set; }

        [Input("appRoles")]
        private InputList<Inputs.ApplicationAppRoleGetArgs>? _appRoles;

        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
        /// </summary>
        public InputList<Inputs.ApplicationAppRoleGetArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ApplicationAppRoleGetArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// The Application ID (Also called Client ID).
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Is this Azure AD Application available to other tenants? Defaults to `false`. This property is deprecated and has been replaced by the `sign_in_audience` property.
        /// </summary>
        [Input("availableToOtherTenants")]
        public Input<bool>? AvailableToOtherTenants { get; set; }

        /// <summary>
        /// The display name for the application.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The fallback application type as public client, such as an installed application running on a mobile device. Defaults to `false`.
        /// </summary>
        [Input("fallbackPublicClientEnabled")]
        public Input<bool>? FallbackPublicClientEnabled { get; set; }

        /// <summary>
        /// Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
        /// </summary>
        [Input("groupMembershipClaims")]
        public Input<string>? GroupMembershipClaims { get; set; }

        /// <summary>
        /// The URL to the application's home page. This property is deprecated and has been replaced by the `homepage_url` property in the `web` block.
        /// </summary>
        [Input("homepage")]
        public Input<string>? Homepage { get; set; }

        [Input("identifierUris")]
        private InputList<string>? _identifierUris;

        /// <summary>
        /// The user-defined URI(s) that uniquely identify an application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public InputList<string> IdentifierUris
        {
            get => _identifierUris ?? (_identifierUris = new InputList<string>());
            set => _identifierUris = value;
        }

        /// <summary>
        /// The URL of the logout page. This property is deprecated and has been replaced by the `logout_url` property in the `web` block.
        /// </summary>
        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        /// <summary>
        /// The name of the optional claim.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Does this Azure AD Application allow OAuth 2.0 implicit flow tokens? Defaults to `false`. This property is deprecated and has been replaced by the `access_token_issuance_enabled` property in the `implicit_grant` block.
        /// </summary>
        [Input("oauth2AllowImplicitFlow")]
        public Input<bool>? Oauth2AllowImplicitFlow { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.ApplicationOauth2PermissionGetArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by `oauth2_permissions` blocks as documented below. This block is deprecated and has been replaced by the `oauth2_permission_scope` block in the `api` block.
        /// </summary>
        [Obsolete(@"[NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scope` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.")]
        public InputList<Inputs.ApplicationOauth2PermissionGetArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ApplicationOauth2PermissionGetArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// The application's Object ID.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims
        /// </summary>
        [Input("optionalClaims")]
        public Input<Inputs.ApplicationOptionalClaimsGetArgs>? OptionalClaims { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// If `true`, will return an error when an existing Application is found with the same name. Defaults to `false`.
        /// </summary>
        [Input("preventDuplicateNames")]
        public Input<bool>? PreventDuplicateNames { get; set; }

        /// <summary>
        /// Is this Azure AD Application a public client? Defaults to `false`. This property is deprecated and has been replaced by the `fallback_public_client_enabled` property.
        /// </summary>
        [Input("publicClient")]
        public Input<bool>? PublicClient { get; set; }

        [Input("replyUrls")]
        private InputList<string>? _replyUrls;

        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to. This property is deprecated and has been replaced by the `redirect_uris` property in the `web` block.
        /// </summary>
        [Obsolete(@"[NOTE] This attribute will be replaced by a new attribute `redirect_uris` in the `web` block in version 2.0 of the AzureAD provider")]
        public InputList<string> ReplyUrls
        {
            get => _replyUrls ?? (_replyUrls = new InputList<string>());
            set => _replyUrls = value;
        }

        [Input("requiredResourceAccesses")]
        private InputList<Inputs.ApplicationRequiredResourceAccessGetArgs>? _requiredResourceAccesses;

        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public InputList<Inputs.ApplicationRequiredResourceAccessGetArgs> RequiredResourceAccesses
        {
            get => _requiredResourceAccesses ?? (_requiredResourceAccesses = new InputList<Inputs.ApplicationRequiredResourceAccessGetArgs>());
            set => _requiredResourceAccesses = value;
        }

        /// <summary>
        /// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg` or `AzureADMultipleOrgs`. Defaults to `AzureADMyOrg`.
        /// </summary>
        [Input("signInAudience")]
        public Input<string>? SignInAudience { get; set; }

        /// <summary>
        /// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A `web` block as documented below, which configures web related settings for this Application.
        /// </summary>
        [Input("web")]
        public Input<Inputs.ApplicationWebGetArgs>? Web { get; set; }

        public ApplicationState()
        {
        }
    }
}
