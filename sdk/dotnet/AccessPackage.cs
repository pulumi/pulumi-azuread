// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages an Access Package within Identity Governance in Azure Active Directory.
    /// 
    /// ## API Permissions
    /// 
    /// The following API permissions are required in order to use this resource.
    /// 
    /// When authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.
    /// 
    /// When authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner`, `Access package manager` or `Global Administrator`
    /// 
    /// ## Import
    /// 
    /// Access Packages can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azuread:index/accessPackage:AccessPackage example_package 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/accessPackage:AccessPackage")]
    public partial class AccessPackage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Catalog this access package will be created in.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// The description of the access package.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the access package.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether the access package is hidden from the requestor.
        /// </summary>
        [Output("hidden")]
        public Output<bool?> Hidden { get; private set; } = null!;


        /// <summary>
        /// Create a AccessPackage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessPackage(string name, AccessPackageArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/accessPackage:AccessPackage", name, args ?? new AccessPackageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessPackage(string name, Input<string> id, AccessPackageState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/accessPackage:AccessPackage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessPackage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessPackage Get(string name, Input<string> id, AccessPackageState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessPackage(name, id, state, options);
        }
    }

    public sealed class AccessPackageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Catalog this access package will be created in.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// The description of the access package.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The display name of the access package.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Whether the access package is hidden from the requestor.
        /// </summary>
        [Input("hidden")]
        public Input<bool>? Hidden { get; set; }

        public AccessPackageArgs()
        {
        }
        public static new AccessPackageArgs Empty => new AccessPackageArgs();
    }

    public sealed class AccessPackageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Catalog this access package will be created in.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// The description of the access package.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the access package.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether the access package is hidden from the requestor.
        /// </summary>
        [Input("hidden")]
        public Input<bool>? Hidden { get; set; }

        public AccessPackageState()
        {
        }
        public static new AccessPackageState Empty => new AccessPackageState();
    }
}
