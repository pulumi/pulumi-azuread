// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    [AzureADResourceType("azuread:index/servicePrincipal:ServicePrincipal")]
    public partial class ServicePrincipal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not the service principal account is enabled
        /// </summary>
        [Output("accountEnabled")]
        public Output<bool?> AccountEnabled { get; private set; } = null!;

        /// <summary>
        /// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
        /// resource ids for managed identities
        /// </summary>
        [Output("alternativeNames")]
        public Output<ImmutableArray<string>> AlternativeNames { get; private set; } = null!;

        /// <summary>
        /// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
        /// access token to the application
        /// </summary>
        [Output("appRoleAssignmentRequired")]
        public Output<bool?> AppRoleAssignmentRequired { get; private set; } = null!;

        /// <summary>
        /// Mapping of app role names to UUIDs
        /// </summary>
        [Output("appRoleIds")]
        public Output<ImmutableDictionary<string, string>> AppRoleIds { get; private set; } = null!;

        [Output("appRoles")]
        public Output<ImmutableArray<Outputs.ServicePrincipalAppRole>> AppRoles { get; private set; } = null!;

        /// <summary>
        /// The application ID (client ID) of the application for which to create a service principal
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The tenant ID where the associated application is registered
        /// </summary>
        [Output("applicationTenantId")]
        public Output<string> ApplicationTenantId { get; private set; } = null!;

        /// <summary>
        /// Description of the service principal provided for internal end-users
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the application associated with this service principal
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        [Output("featureTags")]
        public Output<ImmutableArray<Outputs.ServicePrincipalFeatureTag>> FeatureTags { get; private set; } = null!;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        [Output("features")]
        public Output<ImmutableArray<Outputs.ServicePrincipalFeature>> Features { get; private set; } = null!;

        /// <summary>
        /// Home page or landing page of the application
        /// </summary>
        [Output("homepageUrl")]
        public Output<string> HomepageUrl { get; private set; } = null!;

        /// <summary>
        /// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
        /// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
        /// applications configured with SAML-based single sign-on
        /// </summary>
        [Output("loginUrl")]
        public Output<string?> LoginUrl { get; private set; } = null!;

        /// <summary>
        /// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
        /// SAML logout protocols
        /// </summary>
        [Output("logoutUrl")]
        public Output<string> LogoutUrl { get; private set; } = null!;

        /// <summary>
        /// Free text field to capture information about the service principal, typically used for operational purposes
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
        /// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
        /// </summary>
        [Output("notificationEmailAddresses")]
        public Output<ImmutableArray<string>> NotificationEmailAddresses { get; private set; } = null!;

        /// <summary>
        /// Mapping of OAuth2.0 permission scope names to UUIDs
        /// </summary>
        [Output("oauth2PermissionScopeIds")]
        public Output<ImmutableDictionary<string, string>> Oauth2PermissionScopeIds { get; private set; } = null!;

        [Output("oauth2PermissionScopes")]
        public Output<ImmutableArray<Outputs.ServicePrincipalOauth2PermissionScope>> Oauth2PermissionScopes { get; private set; } = null!;

        /// <summary>
        /// The object ID of the service principal
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// A list of object IDs of principals that will be granted ownership of the service principal
        /// </summary>
        [Output("owners")]
        public Output<ImmutableArray<string>> Owners { get; private set; } = null!;

        /// <summary>
        /// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
        /// application from Microsoft 365 or the Azure AD My Apps
        /// </summary>
        [Output("preferredSingleSignOnMode")]
        public Output<string?> PreferredSingleSignOnMode { get; private set; } = null!;

        /// <summary>
        /// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
        /// authorization codes and access tokens are sent for the associated application
        /// </summary>
        [Output("redirectUris")]
        public Output<ImmutableArray<string>> RedirectUris { get; private set; } = null!;

        /// <summary>
        /// The URL where the service exposes SAML metadata for federation
        /// </summary>
        [Output("samlMetadataUrl")]
        public Output<string> SamlMetadataUrl { get; private set; } = null!;

        /// <summary>
        /// Settings related to SAML single sign-on
        /// </summary>
        [Output("samlSingleSignOn")]
        public Output<Outputs.ServicePrincipalSamlSingleSignOn?> SamlSingleSignOn { get; private set; } = null!;

        /// <summary>
        /// A list of identifier URI(s), copied over from the associated application
        /// </summary>
        [Output("servicePrincipalNames")]
        public Output<ImmutableArray<string>> ServicePrincipalNames { get; private set; } = null!;

        /// <summary>
        /// The Microsoft account types that are supported for the associated application
        /// </summary>
        [Output("signInAudience")]
        public Output<string> SignInAudience { get; private set; } = null!;

        /// <summary>
        /// A set of tags to apply to the service principal
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Identifies whether the service principal represents an application or a managed identity
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// When true, the resource will return an existing service principal instead of failing with an error
        /// </summary>
        [Output("useExisting")]
        public Output<bool?> UseExisting { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePrincipal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePrincipal(string name, ServicePrincipalArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipal:ServicePrincipal", name, args ?? new ServicePrincipalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePrincipal(string name, Input<string> id, ServicePrincipalState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipal:ServicePrincipal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePrincipal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePrincipal Get(string name, Input<string> id, ServicePrincipalState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePrincipal(name, id, state, options);
        }
    }

    public sealed class ServicePrincipalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the service principal account is enabled
        /// </summary>
        [Input("accountEnabled")]
        public Input<bool>? AccountEnabled { get; set; }

        [Input("alternativeNames")]
        private InputList<string>? _alternativeNames;

        /// <summary>
        /// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
        /// resource ids for managed identities
        /// </summary>
        public InputList<string> AlternativeNames
        {
            get => _alternativeNames ?? (_alternativeNames = new InputList<string>());
            set => _alternativeNames = value;
        }

        /// <summary>
        /// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
        /// access token to the application
        /// </summary>
        [Input("appRoleAssignmentRequired")]
        public Input<bool>? AppRoleAssignmentRequired { get; set; }

        /// <summary>
        /// The application ID (client ID) of the application for which to create a service principal
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// Description of the service principal provided for internal end-users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("featureTags")]
        private InputList<Inputs.ServicePrincipalFeatureTagArgs>? _featureTags;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        public InputList<Inputs.ServicePrincipalFeatureTagArgs> FeatureTags
        {
            get => _featureTags ?? (_featureTags = new InputList<Inputs.ServicePrincipalFeatureTagArgs>());
            set => _featureTags = value;
        }

        [Input("features")]
        private InputList<Inputs.ServicePrincipalFeatureArgs>? _features;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        [Obsolete(@"This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider")]
        public InputList<Inputs.ServicePrincipalFeatureArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.ServicePrincipalFeatureArgs>());
            set => _features = value;
        }

        /// <summary>
        /// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
        /// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
        /// applications configured with SAML-based single sign-on
        /// </summary>
        [Input("loginUrl")]
        public Input<string>? LoginUrl { get; set; }

        /// <summary>
        /// Free text field to capture information about the service principal, typically used for operational purposes
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("notificationEmailAddresses")]
        private InputList<string>? _notificationEmailAddresses;

        /// <summary>
        /// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
        /// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
        /// </summary>
        public InputList<string> NotificationEmailAddresses
        {
            get => _notificationEmailAddresses ?? (_notificationEmailAddresses = new InputList<string>());
            set => _notificationEmailAddresses = value;
        }

        [Input("owners")]
        private InputList<string>? _owners;

        /// <summary>
        /// A list of object IDs of principals that will be granted ownership of the service principal
        /// </summary>
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
        /// application from Microsoft 365 or the Azure AD My Apps
        /// </summary>
        [Input("preferredSingleSignOnMode")]
        public Input<string>? PreferredSingleSignOnMode { get; set; }

        /// <summary>
        /// Settings related to SAML single sign-on
        /// </summary>
        [Input("samlSingleSignOn")]
        public Input<Inputs.ServicePrincipalSamlSingleSignOnArgs>? SamlSingleSignOn { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to apply to the service principal
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When true, the resource will return an existing service principal instead of failing with an error
        /// </summary>
        [Input("useExisting")]
        public Input<bool>? UseExisting { get; set; }

        public ServicePrincipalArgs()
        {
        }
        public static new ServicePrincipalArgs Empty => new ServicePrincipalArgs();
    }

    public sealed class ServicePrincipalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not the service principal account is enabled
        /// </summary>
        [Input("accountEnabled")]
        public Input<bool>? AccountEnabled { get; set; }

        [Input("alternativeNames")]
        private InputList<string>? _alternativeNames;

        /// <summary>
        /// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
        /// resource ids for managed identities
        /// </summary>
        public InputList<string> AlternativeNames
        {
            get => _alternativeNames ?? (_alternativeNames = new InputList<string>());
            set => _alternativeNames = value;
        }

        /// <summary>
        /// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
        /// access token to the application
        /// </summary>
        [Input("appRoleAssignmentRequired")]
        public Input<bool>? AppRoleAssignmentRequired { get; set; }

        [Input("appRoleIds")]
        private InputMap<string>? _appRoleIds;

        /// <summary>
        /// Mapping of app role names to UUIDs
        /// </summary>
        public InputMap<string> AppRoleIds
        {
            get => _appRoleIds ?? (_appRoleIds = new InputMap<string>());
            set => _appRoleIds = value;
        }

        [Input("appRoles")]
        private InputList<Inputs.ServicePrincipalAppRoleGetArgs>? _appRoles;
        public InputList<Inputs.ServicePrincipalAppRoleGetArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ServicePrincipalAppRoleGetArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// The application ID (client ID) of the application for which to create a service principal
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The tenant ID where the associated application is registered
        /// </summary>
        [Input("applicationTenantId")]
        public Input<string>? ApplicationTenantId { get; set; }

        /// <summary>
        /// Description of the service principal provided for internal end-users
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the application associated with this service principal
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("featureTags")]
        private InputList<Inputs.ServicePrincipalFeatureTagGetArgs>? _featureTags;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        public InputList<Inputs.ServicePrincipalFeatureTagGetArgs> FeatureTags
        {
            get => _featureTags ?? (_featureTags = new InputList<Inputs.ServicePrincipalFeatureTagGetArgs>());
            set => _featureTags = value;
        }

        [Input("features")]
        private InputList<Inputs.ServicePrincipalFeatureGetArgs>? _features;

        /// <summary>
        /// Block of features to configure for this service principal using tags
        /// </summary>
        [Obsolete(@"This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider")]
        public InputList<Inputs.ServicePrincipalFeatureGetArgs> Features
        {
            get => _features ?? (_features = new InputList<Inputs.ServicePrincipalFeatureGetArgs>());
            set => _features = value;
        }

        /// <summary>
        /// Home page or landing page of the application
        /// </summary>
        [Input("homepageUrl")]
        public Input<string>? HomepageUrl { get; set; }

        /// <summary>
        /// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
        /// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
        /// applications configured with SAML-based single sign-on
        /// </summary>
        [Input("loginUrl")]
        public Input<string>? LoginUrl { get; set; }

        /// <summary>
        /// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
        /// SAML logout protocols
        /// </summary>
        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        /// <summary>
        /// Free text field to capture information about the service principal, typically used for operational purposes
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("notificationEmailAddresses")]
        private InputList<string>? _notificationEmailAddresses;

        /// <summary>
        /// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
        /// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
        /// </summary>
        public InputList<string> NotificationEmailAddresses
        {
            get => _notificationEmailAddresses ?? (_notificationEmailAddresses = new InputList<string>());
            set => _notificationEmailAddresses = value;
        }

        [Input("oauth2PermissionScopeIds")]
        private InputMap<string>? _oauth2PermissionScopeIds;

        /// <summary>
        /// Mapping of OAuth2.0 permission scope names to UUIDs
        /// </summary>
        public InputMap<string> Oauth2PermissionScopeIds
        {
            get => _oauth2PermissionScopeIds ?? (_oauth2PermissionScopeIds = new InputMap<string>());
            set => _oauth2PermissionScopeIds = value;
        }

        [Input("oauth2PermissionScopes")]
        private InputList<Inputs.ServicePrincipalOauth2PermissionScopeGetArgs>? _oauth2PermissionScopes;
        public InputList<Inputs.ServicePrincipalOauth2PermissionScopeGetArgs> Oauth2PermissionScopes
        {
            get => _oauth2PermissionScopes ?? (_oauth2PermissionScopes = new InputList<Inputs.ServicePrincipalOauth2PermissionScopeGetArgs>());
            set => _oauth2PermissionScopes = value;
        }

        /// <summary>
        /// The object ID of the service principal
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;

        /// <summary>
        /// A list of object IDs of principals that will be granted ownership of the service principal
        /// </summary>
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
        /// application from Microsoft 365 or the Azure AD My Apps
        /// </summary>
        [Input("preferredSingleSignOnMode")]
        public Input<string>? PreferredSingleSignOnMode { get; set; }

        [Input("redirectUris")]
        private InputList<string>? _redirectUris;

        /// <summary>
        /// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
        /// authorization codes and access tokens are sent for the associated application
        /// </summary>
        public InputList<string> RedirectUris
        {
            get => _redirectUris ?? (_redirectUris = new InputList<string>());
            set => _redirectUris = value;
        }

        /// <summary>
        /// The URL where the service exposes SAML metadata for federation
        /// </summary>
        [Input("samlMetadataUrl")]
        public Input<string>? SamlMetadataUrl { get; set; }

        /// <summary>
        /// Settings related to SAML single sign-on
        /// </summary>
        [Input("samlSingleSignOn")]
        public Input<Inputs.ServicePrincipalSamlSingleSignOnGetArgs>? SamlSingleSignOn { get; set; }

        [Input("servicePrincipalNames")]
        private InputList<string>? _servicePrincipalNames;

        /// <summary>
        /// A list of identifier URI(s), copied over from the associated application
        /// </summary>
        public InputList<string> ServicePrincipalNames
        {
            get => _servicePrincipalNames ?? (_servicePrincipalNames = new InputList<string>());
            set => _servicePrincipalNames = value;
        }

        /// <summary>
        /// The Microsoft account types that are supported for the associated application
        /// </summary>
        [Input("signInAudience")]
        public Input<string>? SignInAudience { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags to apply to the service principal
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifies whether the service principal represents an application or a managed identity
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// When true, the resource will return an existing service principal instead of failing with an error
        /// </summary>
        [Input("useExisting")]
        public Input<bool>? UseExisting { get; set; }

        public ServicePrincipalState()
        {
        }
        public static new ServicePrincipalState Empty => new ServicePrincipalState();
    }
}
