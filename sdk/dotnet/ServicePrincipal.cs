// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages a Service Principal associated with an Application within Azure Active Directory.
    /// 
    /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API. Please see The Granting a Service Principal permission to manage AAD for the required steps.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleApplication = new AzureAD.Application("exampleApplication", new AzureAD.ApplicationArgs
    ///         {
    ///             Homepage = "http://homepage",
    ///             IdentifierUris = 
    ///             {
    ///                 "http://uri",
    ///             },
    ///             ReplyUrls = 
    ///             {
    ///                 "http://replyurl",
    ///             },
    ///             AvailableToOtherTenants = false,
    ///             Oauth2AllowImplicitFlow = true,
    ///         });
    ///         var exampleServicePrincipal = new AzureAD.ServicePrincipal("exampleServicePrincipal", new AzureAD.ServicePrincipalArgs
    ///         {
    ///             ApplicationId = exampleApplication.ApplicationId,
    ///             AppRoleAssignmentRequired = false,
    ///             Tags = 
    ///             {
    ///                 "example",
    ///                 "tags",
    ///                 "here",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Azure Active Directory Service Principals can be imported using the `object id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azuread:index/servicePrincipal:ServicePrincipal test 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/servicePrincipal:ServicePrincipal")]
    public partial class ServicePrincipal : Pulumi.CustomResource
    {
        /// <summary>
        /// Does this Service Principal require an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application? Defaults to `false`.
        /// </summary>
        [Output("appRoleAssignmentRequired")]
        public Output<bool?> AppRoleAssignmentRequired { get; private set; } = null!;

        [Output("appRoles")]
        public Output<ImmutableArray<Outputs.ServicePrincipalAppRole>> AppRoles { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure AD Application for which to create a Service Principal.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The Display Name of the Azure Active Directory Application associated with this Service Principal.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A collection of OAuth 2.0 permissions exposed by the associated application. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        [Output("oauth2Permissions")]
        public Output<ImmutableArray<Outputs.ServicePrincipalOauth2Permission>> Oauth2Permissions { get; private set; } = null!;

        /// <summary>
        /// The Service Principal's Object ID.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// A list of tags to apply to the Service Principal.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePrincipal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePrincipal(string name, ServicePrincipalArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipal:ServicePrincipal", name, args ?? new ServicePrincipalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePrincipal(string name, Input<string> id, ServicePrincipalState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipal:ServicePrincipal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePrincipal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePrincipal Get(string name, Input<string> id, ServicePrincipalState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePrincipal(name, id, state, options);
        }
    }

    public sealed class ServicePrincipalArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Does this Service Principal require an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application? Defaults to `false`.
        /// </summary>
        [Input("appRoleAssignmentRequired")]
        public Input<bool>? AppRoleAssignmentRequired { get; set; }

        /// <summary>
        /// The ID of the Azure AD Application for which to create a Service Principal.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        [Input("oauth2Permissions")]
        private InputList<Inputs.ServicePrincipalOauth2PermissionArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permissions exposed by the associated application. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public InputList<Inputs.ServicePrincipalOauth2PermissionArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ServicePrincipalOauth2PermissionArgs>());
            set => _oauth2Permissions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to apply to the Service Principal.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServicePrincipalArgs()
        {
        }
    }

    public sealed class ServicePrincipalState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Does this Service Principal require an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application? Defaults to `false`.
        /// </summary>
        [Input("appRoleAssignmentRequired")]
        public Input<bool>? AppRoleAssignmentRequired { get; set; }

        [Input("appRoles")]
        private InputList<Inputs.ServicePrincipalAppRoleGetArgs>? _appRoles;
        public InputList<Inputs.ServicePrincipalAppRoleGetArgs> AppRoles
        {
            get => _appRoles ?? (_appRoles = new InputList<Inputs.ServicePrincipalAppRoleGetArgs>());
            set => _appRoles = value;
        }

        /// <summary>
        /// The ID of the Azure AD Application for which to create a Service Principal.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The Display Name of the Azure Active Directory Application associated with this Service Principal.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.ServicePrincipalOauth2PermissionGetArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permissions exposed by the associated application. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public InputList<Inputs.ServicePrincipalOauth2PermissionGetArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.ServicePrincipalOauth2PermissionGetArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// The Service Principal's Object ID.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to apply to the Service Principal.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public ServicePrincipalState()
        {
        }
    }
}
