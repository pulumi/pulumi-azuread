// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD.Inputs
{

    public sealed class ConditionalAccessPolicyConditionsClientApplicationsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("excludedServicePrincipals")]
        private InputList<string>? _excludedServicePrincipals;

        /// <summary>
        /// A list of service principal IDs explicitly excluded in the policy.
        /// </summary>
        public InputList<string> ExcludedServicePrincipals
        {
            get => _excludedServicePrincipals ?? (_excludedServicePrincipals = new InputList<string>());
            set => _excludedServicePrincipals = value;
        }

        /// <summary>
        /// A `filter` block as documented below.
        /// 
        /// &gt; **Note:** Specifying `filter` requires the `Attribute Definition Reader` role, this is not included in the `Global Administrator` or other administrator roles and must be separately assigned.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.ConditionalAccessPolicyConditionsClientApplicationsFilterGetArgs>? Filter { get; set; }

        [Input("includedServicePrincipals")]
        private InputList<string>? _includedServicePrincipals;

        /// <summary>
        /// A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excluded_service_principals` is set.
        /// </summary>
        public InputList<string> IncludedServicePrincipals
        {
            get => _includedServicePrincipals ?? (_includedServicePrincipals = new InputList<string>());
            set => _includedServicePrincipals = value;
        }

        public ConditionalAccessPolicyConditionsClientApplicationsGetArgs()
        {
        }
        public static new ConditionalAccessPolicyConditionsClientApplicationsGetArgs Empty => new ConditionalAccessPolicyConditionsClientApplicationsGetArgs();
    }
}
