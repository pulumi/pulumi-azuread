// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD.Inputs
{

    public sealed class AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If no action taken, forward to alternate approvers?
        /// </summary>
        [Input("alternativeApprovalEnabled")]
        public Input<bool>? AlternativeApprovalEnabled { get; set; }

        [Input("alternativeApprovers")]
        private InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs>? _alternativeApprovers;

        /// <summary>
        /// If escalation is enabled and the primary approvers do not respond before the escalation time, the escalationApprovers are the users who will be asked to approve requests. This can be a collection of singleUser, groupMembers, requestorManager, internalSponsors and externalSponsors. When creating or updating a policy, if there are no escalation approvers, or escalation approvers are not required for the stage, the value of this property should be an empty collection
        /// </summary>
        public InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs> AlternativeApprovers
        {
            get => _alternativeApprovers ?? (_alternativeApprovers = new InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs>());
            set => _alternativeApprovers = value;
        }

        /// <summary>
        /// Decision must be made in how many days? If a request is not approved within this time period after it is made, it will be automatically rejected
        /// </summary>
        [Input("approvalTimeoutInDays", required: true)]
        public Input<int> ApprovalTimeoutInDays { get; set; } = null!;

        /// <summary>
        /// Whether an approver must provide a justification for their decision. Justification is visible to other approvers and the requestor
        /// </summary>
        [Input("approverJustificationRequired")]
        public Input<bool>? ApproverJustificationRequired { get; set; }

        /// <summary>
        /// Forward to alternate approver(s) after how many days?
        /// </summary>
        [Input("enableAlternativeApprovalInDays")]
        public Input<int>? EnableAlternativeApprovalInDays { get; set; }

        [Input("primaryApprovers")]
        private InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs>? _primaryApprovers;

        /// <summary>
        /// The users who will be asked to approve requests. A collection of singleUser, groupMembers, requestorManager, internalSponsors and externalSponsors. When creating or updating a policy, include at least one userSet in this collection
        /// </summary>
        public InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs> PrimaryApprovers
        {
            get => _primaryApprovers ?? (_primaryApprovers = new InputList<Inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs>());
            set => _primaryApprovers = value;
        }

        public AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs()
        {
        }
        public static new AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs Empty => new AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs();
    }
}
