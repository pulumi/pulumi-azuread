// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages a Conditional Access Policy within Azure Active Directory.
    /// 
    /// ## API Permissions
    /// 
    /// The following API permissions are required in order to use this resource.
    /// 
    /// When authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`
    /// 
    /// When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new AzureAD.ConditionalAccessPolicy("example", new AzureAD.ConditionalAccessPolicyArgs
    ///         {
    ///             Conditions = new AzureAD.Inputs.ConditionalAccessPolicyConditionsArgs
    ///             {
    ///                 Applications = new AzureAD.Inputs.ConditionalAccessPolicyConditionsApplicationsArgs
    ///                 {
    ///                     ExcludedApplications = {},
    ///                     IncludedApplications = 
    ///                     {
    ///                         "All",
    ///                     },
    ///                 },
    ///                 ClientAppTypes = 
    ///                 {
    ///                     "all",
    ///                 },
    ///                 Devices = new AzureAD.Inputs.ConditionalAccessPolicyConditionsDevicesArgs
    ///                 {
    ///                     Filter = new AzureAD.Inputs.ConditionalAccessPolicyConditionsDevicesFilterArgs
    ///                     {
    ///                         Mode = "exclude",
    ///                         Rule = "device.operatingSystem eq \"Doors\"",
    ///                     },
    ///                 },
    ///                 Locations = new AzureAD.Inputs.ConditionalAccessPolicyConditionsLocationsArgs
    ///                 {
    ///                     ExcludedLocations = 
    ///                     {
    ///                         "AllTrusted",
    ///                     },
    ///                     IncludedLocations = 
    ///                     {
    ///                         "All",
    ///                     },
    ///                 },
    ///                 Platforms = new AzureAD.Inputs.ConditionalAccessPolicyConditionsPlatformsArgs
    ///                 {
    ///                     ExcludedPlatforms = 
    ///                     {
    ///                         "iOS",
    ///                     },
    ///                     IncludedPlatforms = 
    ///                     {
    ///                         "android",
    ///                     },
    ///                 },
    ///                 SignInRiskLevels = 
    ///                 {
    ///                     "medium",
    ///                 },
    ///                 UserRiskLevels = 
    ///                 {
    ///                     "medium",
    ///                 },
    ///                 Users = new AzureAD.Inputs.ConditionalAccessPolicyConditionsUsersArgs
    ///                 {
    ///                     ExcludedUsers = 
    ///                     {
    ///                         "GuestsOrExternalUsers",
    ///                     },
    ///                     IncludedUsers = 
    ///                     {
    ///                         "All",
    ///                     },
    ///                 },
    ///             },
    ///             DisplayName = "example policy",
    ///             GrantControls = new AzureAD.Inputs.ConditionalAccessPolicyGrantControlsArgs
    ///             {
    ///                 BuiltInControls = 
    ///                 {
    ///                     "mfa",
    ///                 },
    ///                 Operator = "OR",
    ///             },
    ///             SessionControls = new AzureAD.Inputs.ConditionalAccessPolicySessionControlsArgs
    ///             {
    ///                 ApplicationEnforcedRestrictionsEnabled = true,
    ///                 CloudAppSecurityPolicy = "monitorOnly",
    ///                 SignInFrequency = 10,
    ///                 SignInFrequencyPeriod = "hours",
    ///             },
    ///             State = "disabled",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Conditional Access Policies can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy my_location 00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy")]
    public partial class ConditionalAccessPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
        /// </summary>
        [Output("conditions")]
        public Output<Outputs.ConditionalAccessPolicyConditions> Conditions { get; private set; } = null!;

        /// <summary>
        /// The friendly name for this Conditional Access Policy.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
        /// </summary>
        [Output("grantControls")]
        public Output<Outputs.ConditionalAccessPolicyGrantControls> GrantControls { get; private set; } = null!;

        /// <summary>
        /// A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
        /// </summary>
        [Output("sessionControls")]
        public Output<Outputs.ConditionalAccessPolicySessionControls?> SessionControls { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a ConditionalAccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConditionalAccessPolicy(string name, ConditionalAccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy", name, args ?? new ConditionalAccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConditionalAccessPolicy(string name, Input<string> id, ConditionalAccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConditionalAccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConditionalAccessPolicy Get(string name, Input<string> id, ConditionalAccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ConditionalAccessPolicy(name, id, state, options);
        }
    }

    public sealed class ConditionalAccessPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
        /// </summary>
        [Input("conditions", required: true)]
        public Input<Inputs.ConditionalAccessPolicyConditionsArgs> Conditions { get; set; } = null!;

        /// <summary>
        /// The friendly name for this Conditional Access Policy.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
        /// </summary>
        [Input("grantControls", required: true)]
        public Input<Inputs.ConditionalAccessPolicyGrantControlsArgs> GrantControls { get; set; } = null!;

        /// <summary>
        /// A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
        /// </summary>
        [Input("sessionControls")]
        public Input<Inputs.ConditionalAccessPolicySessionControlsArgs>? SessionControls { get; set; }

        /// <summary>
        /// Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        public ConditionalAccessPolicyArgs()
        {
        }
    }

    public sealed class ConditionalAccessPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `conditions` block as documented below, which specifies the rules that must be met for the policy to apply.
        /// </summary>
        [Input("conditions")]
        public Input<Inputs.ConditionalAccessPolicyConditionsGetArgs>? Conditions { get; set; }

        /// <summary>
        /// The friendly name for this Conditional Access Policy.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A `grant_controls` block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
        /// </summary>
        [Input("grantControls")]
        public Input<Inputs.ConditionalAccessPolicyGrantControlsGetArgs>? GrantControls { get; set; }

        /// <summary>
        /// A `session_controls` block as documented below, which specifies the session controls that are enforced after sign-in.
        /// </summary>
        [Input("sessionControls")]
        public Input<Inputs.ConditionalAccessPolicySessionControlsGetArgs>? SessionControls { get; set; }

        /// <summary>
        /// Specifies the state of the policy object. Possible values are: `enabled`, `disabled` and `enabledForReportingButNotEnforced`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public ConditionalAccessPolicyState()
        {
        }
    }
}
