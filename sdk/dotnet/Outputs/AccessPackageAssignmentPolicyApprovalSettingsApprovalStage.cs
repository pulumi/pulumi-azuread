// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD.Outputs
{

    [OutputType]
    public sealed class AccessPackageAssignmentPolicyApprovalSettingsApprovalStage
    {
        /// <summary>
        /// If no action taken, forward to alternate approvers?
        /// </summary>
        public readonly bool? AlternativeApprovalEnabled;
        /// <summary>
        /// If escalation is enabled and the primary approvers do not respond before the escalation time, the escalationApprovers are the users who will be asked to approve requests. This can be a collection of singleUser, groupMembers, requestorManager, internalSponsors and externalSponsors. When creating or updating a policy, if there are no escalation approvers, or escalation approvers are not required for the stage, the value of this property should be an empty collection
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover> AlternativeApprovers;
        /// <summary>
        /// Decision must be made in how many days? If a request is not approved within this time period after it is made, it will be automatically rejected
        /// </summary>
        public readonly int ApprovalTimeoutInDays;
        /// <summary>
        /// Whether an approver must provide a justification for their decision. Justification is visible to other approvers and the requestor
        /// </summary>
        public readonly bool? ApproverJustificationRequired;
        /// <summary>
        /// Forward to alternate approver(s) after how many days?
        /// </summary>
        public readonly int? EnableAlternativeApprovalInDays;
        /// <summary>
        /// The users who will be asked to approve requests. A collection of singleUser, groupMembers, requestorManager, internalSponsors and externalSponsors. When creating or updating a policy, include at least one userSet in this collection
        /// </summary>
        public readonly ImmutableArray<Outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover> PrimaryApprovers;

        [OutputConstructor]
        private AccessPackageAssignmentPolicyApprovalSettingsApprovalStage(
            bool? alternativeApprovalEnabled,

            ImmutableArray<Outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover> alternativeApprovers,

            int approvalTimeoutInDays,

            bool? approverJustificationRequired,

            int? enableAlternativeApprovalInDays,

            ImmutableArray<Outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover> primaryApprovers)
        {
            AlternativeApprovalEnabled = alternativeApprovalEnabled;
            AlternativeApprovers = alternativeApprovers;
            ApprovalTimeoutInDays = approvalTimeoutInDays;
            ApproverJustificationRequired = approverJustificationRequired;
            EnableAlternativeApprovalInDays = enableAlternativeApprovalInDays;
            PrimaryApprovers = primaryApprovers;
        }
    }
}
