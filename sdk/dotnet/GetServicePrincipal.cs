// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetServicePrincipal
    {
        /// <summary>
        /// Gets information about an existing Service Principal associated with an Application within Azure Active Directory.
        /// 
        /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### By Application Display Name)
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
        ///         {
        ///             DisplayName = "my-awesome-application",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% example %}}
        /// ### By Application ID)
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
        ///         {
        ///             ApplicationId = "00000000-0000-0000-0000-000000000000",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% example %}}
        /// ### By Object ID)
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
        ///         {
        ///             ObjectId = "00000000-0000-0000-0000-000000000000",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServicePrincipalResult> InvokeAsync(GetServicePrincipalArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServicePrincipalResult>("azuread:index/getServicePrincipal:getServicePrincipal", args ?? new GetServicePrincipalArgs(), options.WithVersion());
    }


    public sealed class GetServicePrincipalArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure AD Application.
        /// </summary>
        [Input("applicationId")]
        public string? ApplicationId { get; set; }

        /// <summary>
        /// The Display Name of the Azure AD Application associated with this Service Principal.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("oauth2Permissions")]
        private List<Inputs.GetServicePrincipalOauth2PermissionArgs>? _oauth2Permissions;

        /// <summary>
        /// A collection of OAuth 2.0 permissions exposed by the associated application. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public List<Inputs.GetServicePrincipalOauth2PermissionArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new List<Inputs.GetServicePrincipalOauth2PermissionArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// The ID of the Azure AD Service Principal.
        /// </summary>
        [Input("objectId")]
        public string? ObjectId { get; set; }

        public GetServicePrincipalArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServicePrincipalResult
    {
        public readonly ImmutableArray<Outputs.GetServicePrincipalAppRoleResult> AppRoles;
        public readonly string ApplicationId;
        /// <summary>
        /// Display name for the permission that appears in the admin consent and app assignment experiences.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetServicePrincipalOauth2PermissionResult> Oauth2Permissions;
        public readonly string ObjectId;

        [OutputConstructor]
        private GetServicePrincipalResult(
            ImmutableArray<Outputs.GetServicePrincipalAppRoleResult> appRoles,

            string applicationId,

            string displayName,

            string id,

            ImmutableArray<Outputs.GetServicePrincipalOauth2PermissionResult> oauth2Permissions,

            string objectId)
        {
            AppRoles = appRoles;
            ApplicationId = applicationId;
            DisplayName = displayName;
            Id = id;
            Oauth2Permissions = oauth2Permissions;
            ObjectId = objectId;
        }
    }
}
