// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetServicePrincipal
    {
        public static Task<GetServicePrincipalResult> InvokeAsync(GetServicePrincipalArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServicePrincipalResult>("azuread:index/getServicePrincipal:getServicePrincipal", args ?? new GetServicePrincipalArgs(), options.WithDefaults());

        public static Output<GetServicePrincipalResult> Invoke(GetServicePrincipalInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServicePrincipalResult>("azuread:index/getServicePrincipal:getServicePrincipal", args ?? new GetServicePrincipalInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServicePrincipalArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId")]
        public string? ApplicationId { get; set; }

        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("objectId")]
        public string? ObjectId { get; set; }

        public GetServicePrincipalArgs()
        {
        }
        public static new GetServicePrincipalArgs Empty => new GetServicePrincipalArgs();
    }

    public sealed class GetServicePrincipalInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        public GetServicePrincipalInvokeArgs()
        {
        }
        public static new GetServicePrincipalInvokeArgs Empty => new GetServicePrincipalInvokeArgs();
    }


    [OutputType]
    public sealed class GetServicePrincipalResult
    {
        public readonly bool AccountEnabled;
        public readonly ImmutableArray<string> AlternativeNames;
        public readonly bool AppRoleAssignmentRequired;
        public readonly ImmutableDictionary<string, string> AppRoleIds;
        public readonly ImmutableArray<Outputs.GetServicePrincipalAppRoleResult> AppRoles;
        public readonly string ApplicationId;
        public readonly string ApplicationTenantId;
        public readonly string Description;
        public readonly string DisplayName;
        public readonly ImmutableArray<Outputs.GetServicePrincipalFeatureTagResult> FeatureTags;
        public readonly ImmutableArray<Outputs.GetServicePrincipalFeatureResult> Features;
        public readonly string HomepageUrl;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LoginUrl;
        public readonly string LogoutUrl;
        public readonly string Notes;
        public readonly ImmutableArray<string> NotificationEmailAddresses;
        public readonly ImmutableDictionary<string, string> Oauth2PermissionScopeIds;
        public readonly ImmutableArray<Outputs.GetServicePrincipalOauth2PermissionScopeResult> Oauth2PermissionScopes;
        public readonly string ObjectId;
        public readonly string PreferredSingleSignOnMode;
        public readonly ImmutableArray<string> RedirectUris;
        public readonly string SamlMetadataUrl;
        public readonly ImmutableArray<Outputs.GetServicePrincipalSamlSingleSignOnResult> SamlSingleSignOns;
        public readonly ImmutableArray<string> ServicePrincipalNames;
        public readonly string SignInAudience;
        public readonly ImmutableArray<string> Tags;
        public readonly string Type;

        [OutputConstructor]
        private GetServicePrincipalResult(
            bool accountEnabled,

            ImmutableArray<string> alternativeNames,

            bool appRoleAssignmentRequired,

            ImmutableDictionary<string, string> appRoleIds,

            ImmutableArray<Outputs.GetServicePrincipalAppRoleResult> appRoles,

            string applicationId,

            string applicationTenantId,

            string description,

            string displayName,

            ImmutableArray<Outputs.GetServicePrincipalFeatureTagResult> featureTags,

            ImmutableArray<Outputs.GetServicePrincipalFeatureResult> features,

            string homepageUrl,

            string id,

            string loginUrl,

            string logoutUrl,

            string notes,

            ImmutableArray<string> notificationEmailAddresses,

            ImmutableDictionary<string, string> oauth2PermissionScopeIds,

            ImmutableArray<Outputs.GetServicePrincipalOauth2PermissionScopeResult> oauth2PermissionScopes,

            string objectId,

            string preferredSingleSignOnMode,

            ImmutableArray<string> redirectUris,

            string samlMetadataUrl,

            ImmutableArray<Outputs.GetServicePrincipalSamlSingleSignOnResult> samlSingleSignOns,

            ImmutableArray<string> servicePrincipalNames,

            string signInAudience,

            ImmutableArray<string> tags,

            string type)
        {
            AccountEnabled = accountEnabled;
            AlternativeNames = alternativeNames;
            AppRoleAssignmentRequired = appRoleAssignmentRequired;
            AppRoleIds = appRoleIds;
            AppRoles = appRoles;
            ApplicationId = applicationId;
            ApplicationTenantId = applicationTenantId;
            Description = description;
            DisplayName = displayName;
            FeatureTags = featureTags;
            Features = features;
            HomepageUrl = homepageUrl;
            Id = id;
            LoginUrl = loginUrl;
            LogoutUrl = logoutUrl;
            Notes = notes;
            NotificationEmailAddresses = notificationEmailAddresses;
            Oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            Oauth2PermissionScopes = oauth2PermissionScopes;
            ObjectId = objectId;
            PreferredSingleSignOnMode = preferredSingleSignOnMode;
            RedirectUris = redirectUris;
            SamlMetadataUrl = samlMetadataUrl;
            SamlSingleSignOns = samlSingleSignOns;
            ServicePrincipalNames = servicePrincipalNames;
            SignInAudience = signInAudience;
            Tags = tags;
            Type = type;
        }
    }
}
