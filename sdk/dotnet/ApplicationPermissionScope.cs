// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureAD.ApplicationRegistration("example", new()
    ///     {
    ///         DisplayName = "example",
    ///     });
    /// 
    ///     var exampleAdminister = new Random.RandomUuid("example_administer");
    /// 
    ///     var exampleApplicationPermissionScope = new AzureAD.ApplicationPermissionScope("example", new()
    ///     {
    ///         ApplicationId = test.Id,
    ///         ScopeId = exampleAdminister.Id,
    ///         Value = "administer",
    ///         AdminConsentDescription = "Administer the application",
    ///         AdminConsentDisplayName = "Administer",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// &gt; **Tip** For managing more permissions scopes, create additional instances of this resource
    /// 
    /// *Usage with azuread.Application resource*
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureAD.Application("example", new()
    ///     {
    ///         DisplayName = "example",
    ///     });
    /// 
    ///     var exampleApplicationPermissionScope = new AzureAD.ApplicationPermissionScope("example", new()
    ///     {
    ///         ApplicationId = example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Application App Roles can be imported using the object ID of the application and the ID of the permission scope, in the following format.
    /// 
    /// ```sh
    /// $ pulumi import azuread:index/applicationPermissionScope:ApplicationPermissionScope example /applications/00000000-0000-0000-0000-000000000000/permissionScopes/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/applicationPermissionScope:ApplicationPermissionScope")]
    public partial class ApplicationPermissionScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Output("adminConsentDescription")]
        public Output<string> AdminConsentDescription { get; private set; } = null!;

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Output("adminConsentDisplayName")]
        public Output<string> AdminConsentDisplayName { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the application registration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Output("userConsentDescription")]
        public Output<string?> UserConsentDescription { get; private set; } = null!;

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience
        /// </summary>
        [Output("userConsentDisplayName")]
        public Output<string?> UserConsentDisplayName { get; private set; } = null!;

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth access tokens.
        /// 
        /// &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationPermissionScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationPermissionScope(string name, ApplicationPermissionScopeArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/applicationPermissionScope:ApplicationPermissionScope", name, args ?? new ApplicationPermissionScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationPermissionScope(string name, Input<string> id, ApplicationPermissionScopeState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/applicationPermissionScope:ApplicationPermissionScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationPermissionScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationPermissionScope Get(string name, Input<string> id, ApplicationPermissionScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationPermissionScope(name, id, state, options);
        }
    }

    public sealed class ApplicationPermissionScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDescription", required: true)]
        public Input<string> AdminConsentDescription { get; set; } = null!;

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDisplayName", required: true)]
        public Input<string> AdminConsentDisplayName { get; set; } = null!;

        /// <summary>
        /// The resource ID of the application registration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth access tokens.
        /// 
        /// &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationPermissionScopeArgs()
        {
        }
        public static new ApplicationPermissionScopeArgs Empty => new ApplicationPermissionScopeArgs();
    }

    public sealed class ApplicationPermissionScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDescription")]
        public Input<string>? AdminConsentDescription { get; set; }

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDisplayName")]
        public Input<string>? AdminConsentDisplayName { get; set; }

        /// <summary>
        /// The resource ID of the application registration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth access tokens.
        /// 
        /// &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public ApplicationPermissionScopeState()
        {
        }
        public static new ApplicationPermissionScopeState Empty => new ApplicationPermissionScopeState();
    }
}
