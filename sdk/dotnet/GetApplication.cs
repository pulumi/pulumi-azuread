// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Application within Azure Active Directory.
        /// 
        /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all (or owned by) applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azuread/blob/master/website/docs/d/application.html.markdown.
        /// </summary>
        public static Task<GetApplicationResult> GetApplication(GetApplicationArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("azuread:index/getApplication:getApplication", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetApplicationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Application within Azure Active Directory.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("oauth2Permissions")]
        private InputList<Inputs.GetApplicationOauth2PermissionsArgs>? _oauth2Permissions;
        public InputList<Inputs.GetApplicationOauth2PermissionsArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new InputList<Inputs.GetApplicationOauth2PermissionsArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// Specifies the Object ID of the Application within Azure Active Directory.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        public GetApplicationArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationAppRolesResult> AppRoles;
        /// <summary>
        /// the Application ID of the Azure Active Directory Application.
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// Is this Azure AD Application available to other tenants?
        /// </summary>
        public readonly bool AvailableToOtherTenants;
        /// <summary>
        /// The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.
        /// </summary>
        public readonly string GroupMembershipClaims;
        public readonly string Homepage;
        /// <summary>
        /// A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public readonly ImmutableArray<string> IdentifierUris;
        public readonly string Name;
        /// <summary>
        /// Does this Azure AD Application allow OAuth2.0 implicit flow tokens?
        /// </summary>
        public readonly bool Oauth2AllowImplicitFlow;
        /// <summary>
        /// A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationOauth2PermissionsResult> Oauth2Permissions;
        /// <summary>
        /// the Object ID of the Azure Active Directory Application.
        /// </summary>
        public readonly string ObjectId;
        public readonly ImmutableArray<string> Owners;
        /// <summary>
        /// A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to.
        /// </summary>
        public readonly ImmutableArray<string> ReplyUrls;
        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationRequiredResourceAccessesResult> RequiredResourceAccesses;
        /// <summary>
        /// The type of the permission
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetApplicationResult(
            ImmutableArray<Outputs.GetApplicationAppRolesResult> appRoles,
            string applicationId,
            bool availableToOtherTenants,
            string groupMembershipClaims,
            string homepage,
            ImmutableArray<string> identifierUris,
            string name,
            bool oauth2AllowImplicitFlow,
            ImmutableArray<Outputs.GetApplicationOauth2PermissionsResult> oauth2Permissions,
            string objectId,
            ImmutableArray<string> owners,
            ImmutableArray<string> replyUrls,
            ImmutableArray<Outputs.GetApplicationRequiredResourceAccessesResult> requiredResourceAccesses,
            string type,
            string id)
        {
            AppRoles = appRoles;
            ApplicationId = applicationId;
            AvailableToOtherTenants = availableToOtherTenants;
            GroupMembershipClaims = groupMembershipClaims;
            Homepage = homepage;
            IdentifierUris = identifierUris;
            Name = name;
            Oauth2AllowImplicitFlow = oauth2AllowImplicitFlow;
            Oauth2Permissions = oauth2Permissions;
            ObjectId = objectId;
            Owners = owners;
            ReplyUrls = replyUrls;
            RequiredResourceAccesses = requiredResourceAccesses;
            Type = type;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetApplicationOauth2PermissionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the admin consent
        /// </summary>
        [Input("adminConsentDescription")]
        public Input<string>? AdminConsentDescription { get; set; }

        /// <summary>
        /// The display name of the admin consent
        /// </summary>
        [Input("adminConsentDisplayName")]
        public Input<string>? AdminConsentDisplayName { get; set; }

        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Determines if the app role is enabled.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The type of the permission
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The description of the user consent
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// The display name of the user consent
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public GetApplicationOauth2PermissionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetApplicationAppRolesResult
    {
        /// <summary>
        /// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
        /// </summary>
        public readonly ImmutableArray<string> AllowedMemberTypes;
        /// <summary>
        /// Permission help text that appears in the admin app assignment and consent experiences.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name for the permission that appears in the admin consent and app assignment experiences.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines if the app role is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private GetApplicationAppRolesResult(
            ImmutableArray<string> allowedMemberTypes,
            string description,
            string displayName,
            string id,
            bool isEnabled,
            string value)
        {
            AllowedMemberTypes = allowedMemberTypes;
            Description = description;
            DisplayName = displayName;
            Id = id;
            IsEnabled = isEnabled;
            Value = value;
        }
    }

    [OutputType]
    public sealed class GetApplicationOauth2PermissionsResult
    {
        /// <summary>
        /// The description of the admin consent
        /// </summary>
        public readonly string AdminConsentDescription;
        /// <summary>
        /// The display name of the admin consent
        /// </summary>
        public readonly string AdminConsentDisplayName;
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines if the app role is enabled.
        /// </summary>
        public readonly bool IsEnabled;
        /// <summary>
        /// The type of the permission
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The description of the user consent
        /// </summary>
        public readonly string UserConsentDescription;
        /// <summary>
        /// The display name of the user consent
        /// </summary>
        public readonly string UserConsentDisplayName;
        /// <summary>
        /// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private GetApplicationOauth2PermissionsResult(
            string adminConsentDescription,
            string adminConsentDisplayName,
            string id,
            bool isEnabled,
            string type,
            string userConsentDescription,
            string userConsentDisplayName,
            string value)
        {
            AdminConsentDescription = adminConsentDescription;
            AdminConsentDisplayName = adminConsentDisplayName;
            Id = id;
            IsEnabled = isEnabled;
            Type = type;
            UserConsentDescription = userConsentDescription;
            UserConsentDisplayName = userConsentDisplayName;
            Value = value;
        }
    }

    [OutputType]
    public sealed class GetApplicationRequiredResourceAccessesResourceAccessesResult
    {
        /// <summary>
        /// The unique identifier of the `app_role`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of the permission
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetApplicationRequiredResourceAccessesResourceAccessesResult(
            string id,
            string type)
        {
            Id = id;
            Type = type;
        }
    }

    [OutputType]
    public sealed class GetApplicationRequiredResourceAccessesResult
    {
        /// <summary>
        /// A collection of `resource_access` blocks as documented below
        /// </summary>
        public readonly ImmutableArray<GetApplicationRequiredResourceAccessesResourceAccessesResult> ResourceAccesses;
        /// <summary>
        /// The unique identifier for the resource that the application requires access to.
        /// </summary>
        public readonly string ResourceAppId;

        [OutputConstructor]
        private GetApplicationRequiredResourceAccessesResult(
            ImmutableArray<GetApplicationRequiredResourceAccessesResourceAccessesResult> resourceAccesses,
            string resourceAppId)
        {
            ResourceAccesses = resourceAccesses;
            ResourceAppId = resourceAppId;
        }
    }
    }
}
