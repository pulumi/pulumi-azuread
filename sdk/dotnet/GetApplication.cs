// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetApplication
    {
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("azuread:index/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithDefaults());

        public static Output<GetApplicationResult> Invoke(GetApplicationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationResult>("azuread:index/getApplication:getApplication", args ?? new GetApplicationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId")]
        public string? ApplicationId { get; set; }

        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("objectId")]
        public string? ObjectId { get; set; }

        public GetApplicationArgs()
        {
        }
        public static new GetApplicationArgs Empty => new GetApplicationArgs();
    }

    public sealed class GetApplicationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        public GetApplicationInvokeArgs()
        {
        }
        public static new GetApplicationInvokeArgs Empty => new GetApplicationInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        public readonly ImmutableArray<Outputs.GetApplicationApiResult> Apis;
        public readonly ImmutableDictionary<string, string> AppRoleIds;
        public readonly ImmutableArray<Outputs.GetApplicationAppRoleResult> AppRoles;
        public readonly string ApplicationId;
        public readonly string Description;
        public readonly bool DeviceOnlyAuthEnabled;
        public readonly string DisabledByMicrosoft;
        public readonly string DisplayName;
        public readonly bool FallbackPublicClientEnabled;
        public readonly ImmutableArray<Outputs.GetApplicationFeatureTagResult> FeatureTags;
        public readonly ImmutableArray<string> GroupMembershipClaims;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> IdentifierUris;
        public readonly string LogoUrl;
        public readonly string MarketingUrl;
        public readonly string Notes;
        public readonly ImmutableDictionary<string, string> Oauth2PermissionScopeIds;
        public readonly bool Oauth2PostResponseRequired;
        public readonly string ObjectId;
        public readonly ImmutableArray<Outputs.GetApplicationOptionalClaimResult> OptionalClaims;
        public readonly ImmutableArray<string> Owners;
        public readonly string PrivacyStatementUrl;
        public readonly ImmutableArray<Outputs.GetApplicationPublicClientResult> PublicClients;
        public readonly string PublisherDomain;
        public readonly ImmutableArray<Outputs.GetApplicationRequiredResourceAccessResult> RequiredResourceAccesses;
        public readonly string ServiceManagementReference;
        public readonly string SignInAudience;
        public readonly ImmutableArray<Outputs.GetApplicationSinglePageApplicationResult> SinglePageApplications;
        public readonly string SupportUrl;
        public readonly ImmutableArray<string> Tags;
        public readonly string TermsOfServiceUrl;
        public readonly ImmutableArray<Outputs.GetApplicationWebResult> Webs;

        [OutputConstructor]
        private GetApplicationResult(
            ImmutableArray<Outputs.GetApplicationApiResult> apis,

            ImmutableDictionary<string, string> appRoleIds,

            ImmutableArray<Outputs.GetApplicationAppRoleResult> appRoles,

            string applicationId,

            string description,

            bool deviceOnlyAuthEnabled,

            string disabledByMicrosoft,

            string displayName,

            bool fallbackPublicClientEnabled,

            ImmutableArray<Outputs.GetApplicationFeatureTagResult> featureTags,

            ImmutableArray<string> groupMembershipClaims,

            string id,

            ImmutableArray<string> identifierUris,

            string logoUrl,

            string marketingUrl,

            string notes,

            ImmutableDictionary<string, string> oauth2PermissionScopeIds,

            bool oauth2PostResponseRequired,

            string objectId,

            ImmutableArray<Outputs.GetApplicationOptionalClaimResult> optionalClaims,

            ImmutableArray<string> owners,

            string privacyStatementUrl,

            ImmutableArray<Outputs.GetApplicationPublicClientResult> publicClients,

            string publisherDomain,

            ImmutableArray<Outputs.GetApplicationRequiredResourceAccessResult> requiredResourceAccesses,

            string serviceManagementReference,

            string signInAudience,

            ImmutableArray<Outputs.GetApplicationSinglePageApplicationResult> singlePageApplications,

            string supportUrl,

            ImmutableArray<string> tags,

            string termsOfServiceUrl,

            ImmutableArray<Outputs.GetApplicationWebResult> webs)
        {
            Apis = apis;
            AppRoleIds = appRoleIds;
            AppRoles = appRoles;
            ApplicationId = applicationId;
            Description = description;
            DeviceOnlyAuthEnabled = deviceOnlyAuthEnabled;
            DisabledByMicrosoft = disabledByMicrosoft;
            DisplayName = displayName;
            FallbackPublicClientEnabled = fallbackPublicClientEnabled;
            FeatureTags = featureTags;
            GroupMembershipClaims = groupMembershipClaims;
            Id = id;
            IdentifierUris = identifierUris;
            LogoUrl = logoUrl;
            MarketingUrl = marketingUrl;
            Notes = notes;
            Oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            Oauth2PostResponseRequired = oauth2PostResponseRequired;
            ObjectId = objectId;
            OptionalClaims = optionalClaims;
            Owners = owners;
            PrivacyStatementUrl = privacyStatementUrl;
            PublicClients = publicClients;
            PublisherDomain = publisherDomain;
            RequiredResourceAccesses = requiredResourceAccesses;
            ServiceManagementReference = serviceManagementReference;
            SignInAudience = signInAudience;
            SinglePageApplications = singlePageApplications;
            SupportUrl = supportUrl;
            Tags = tags;
            TermsOfServiceUrl = termsOfServiceUrl;
            Webs = webs;
        }
    }
}
