// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetApplication
    {
        /// <summary>
        /// Use this data source to access information about an existing Application within Azure Active Directory.
        /// 
        /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all (or owned by) applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetApplication.InvokeAsync(new AzureAD.GetApplicationArgs
        ///         {
        ///             DisplayName = "My First AzureAD Application",
        ///         }));
        ///         this.AzureAdObjectId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("azureAdObjectId")]
        ///     public Output&lt;string&gt; AzureAdObjectId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("azuread:index/getApplication:getApplication", args ?? new GetApplicationArgs(), options.WithVersion());
    }


    public sealed class GetApplicationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the Application ID (also called Client ID).
        /// </summary>
        [Input("applicationId")]
        public string? ApplicationId { get; set; }

        /// <summary>
        /// Specifies the display name of the application.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// The name of the optional claim.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("oauth2Permissions")]
        private List<Inputs.GetApplicationOauth2PermissionArgs>? _oauth2Permissions;

        /// <summary>
        /// (**Deprecated**) A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        [Obsolete(@"[NOTE] The `oauth2_permissions` block has been renamed to `oauth2_permission_scopes` and moved to the `api` block. `oauth2_permissions` will be removed in version 2.0 of the AzureAD provider.")]
        public List<Inputs.GetApplicationOauth2PermissionArgs> Oauth2Permissions
        {
            get => _oauth2Permissions ?? (_oauth2Permissions = new List<Inputs.GetApplicationOauth2PermissionArgs>());
            set => _oauth2Permissions = value;
        }

        /// <summary>
        /// Specifies the Object ID of the application.
        /// </summary>
        [Input("objectId")]
        public string? ObjectId { get; set; }

        /// <summary>
        /// A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims
        /// </summary>
        [Input("optionalClaims")]
        public Inputs.GetApplicationOptionalClaimsArgs? OptionalClaims { get; set; }

        /// <summary>
        /// A `web` block as documented below.
        /// </summary>
        [Input("web")]
        public Inputs.GetApplicationWebArgs? Web { get; set; }

        public GetApplicationArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplicationResult
    {
        /// <summary>
        /// An `api` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationApiResult> Apis;
        /// <summary>
        /// A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationAppRoleResult> AppRoles;
        /// <summary>
        /// the Application ID (also called Client ID).
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// (**Deprecated**) Is this Azure AD Application available to other tenants?
        /// </summary>
        public readonly bool AvailableToOtherTenants;
        /// <summary>
        /// Display name for the app role that appears during app role assignment and in consent experiences.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The fallback application type as public client, such as an installed application running on a mobile device.
        /// </summary>
        public readonly bool FallbackPublicClientEnabled;
        /// <summary>
        /// The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.
        /// </summary>
        public readonly string GroupMembershipClaims;
        /// <summary>
        /// (**Deprecated**) The URL to the application's home page. This property is deprecated and has been replaced by the `homepage_url` property in the `web` block.
        /// </summary>
        public readonly string Homepage;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
        /// </summary>
        public readonly ImmutableArray<string> IdentifierUris;
        /// <summary>
        /// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
        /// </summary>
        public readonly string LogoutUrl;
        /// <summary>
        /// The name of the optional claim.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (**Deprecated**) Does this Azure AD Application allow OAuth2.0 implicit flow tokens?
        /// </summary>
        public readonly bool Oauth2AllowImplicitFlow;
        /// <summary>
        /// (**Deprecated**) A collection of OAuth 2.0 permission scopes that the web API (resource) app exposes to client apps. Each permission is covered by a `oauth2_permission` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationOauth2PermissionResult> Oauth2Permissions;
        /// <summary>
        /// The application's Object ID.
        /// </summary>
        public readonly string ObjectId;
        /// <summary>
        /// A collection of `access_token` or `id_token` blocks as documented below which list the optional claims configured for each token type. For more information see https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-optional-claims
        /// </summary>
        public readonly Outputs.GetApplicationOptionalClaimsResult? OptionalClaims;
        /// <summary>
        /// A list of Object IDs for principals that are assigned ownership of the application.
        /// </summary>
        public readonly ImmutableArray<string> Owners;
        /// <summary>
        /// (**Deprecated**) A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to. This property is deprecated and has been replaced by the `redirect_uris` property in the `web` block.
        /// </summary>
        public readonly ImmutableArray<string> ReplyUrls;
        /// <summary>
        /// A collection of `required_resource_access` blocks as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationRequiredResourceAccessResult> RequiredResourceAccesses;
        /// <summary>
        /// The Microsoft account types that are supported for the current application. One of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
        /// </summary>
        public readonly string SignInAudience;
        /// <summary>
        /// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// A `web` block as documented below.
        /// </summary>
        public readonly Outputs.GetApplicationWebResult Web;

        [OutputConstructor]
        private GetApplicationResult(
            ImmutableArray<Outputs.GetApplicationApiResult> apis,

            ImmutableArray<Outputs.GetApplicationAppRoleResult> appRoles,

            string applicationId,

            bool availableToOtherTenants,

            string displayName,

            bool fallbackPublicClientEnabled,

            string groupMembershipClaims,

            string homepage,

            string id,

            ImmutableArray<string> identifierUris,

            string logoutUrl,

            string name,

            bool oauth2AllowImplicitFlow,

            ImmutableArray<Outputs.GetApplicationOauth2PermissionResult> oauth2Permissions,

            string objectId,

            Outputs.GetApplicationOptionalClaimsResult? optionalClaims,

            ImmutableArray<string> owners,

            ImmutableArray<string> replyUrls,

            ImmutableArray<Outputs.GetApplicationRequiredResourceAccessResult> requiredResourceAccesses,

            string signInAudience,

            string type,

            Outputs.GetApplicationWebResult web)
        {
            Apis = apis;
            AppRoles = appRoles;
            ApplicationId = applicationId;
            AvailableToOtherTenants = availableToOtherTenants;
            DisplayName = displayName;
            FallbackPublicClientEnabled = fallbackPublicClientEnabled;
            GroupMembershipClaims = groupMembershipClaims;
            Homepage = homepage;
            Id = id;
            IdentifierUris = identifierUris;
            LogoutUrl = logoutUrl;
            Name = name;
            Oauth2AllowImplicitFlow = oauth2AllowImplicitFlow;
            Oauth2Permissions = oauth2Permissions;
            ObjectId = objectId;
            OptionalClaims = optionalClaims;
            Owners = owners;
            ReplyUrls = replyUrls;
            RequiredResourceAccesses = requiredResourceAccesses;
            SignInAudience = signInAudience;
            Type = type;
            Web = web;
        }
    }
}
