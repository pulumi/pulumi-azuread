// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetUsers
    {
        /// <summary>
        /// Gets basic information for multiple Azure Active Directory users.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var users = AzureAD.GetUsers.Invoke(new()
        ///     {
        ///         UserPrincipalNames = new[]
        ///         {
        ///             "kat@example.com",
        ///             "byte@example.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("azuread:index/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// Gets basic information for multiple Azure Active Directory users.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var users = AzureAD.GetUsers.Invoke(new()
        ///     {
        ///         UserPrincipalNames = new[]
        ///         {
        ///             "kat@example.com",
        ///             "byte@example.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("azuread:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Gets basic information for multiple Azure Active Directory users.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var users = AzureAD.GetUsers.Invoke(new()
        ///     {
        ///         UserPrincipalNames = new[]
        ///         {
        ///             "kat@example.com",
        ///             "byte@example.com",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("azuread:index/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        [Input("employeeIds")]
        private List<string>? _employeeIds;

        /// <summary>
        /// The employee identifiers assigned to the users by the organisation.
        /// </summary>
        public List<string> EmployeeIds
        {
            get => _employeeIds ?? (_employeeIds = new List<string>());
            set => _employeeIds = value;
        }

        /// <summary>
        /// Ignore missing users and return users that were found. The data source will still fail if no users are found. Cannot be specified with `return_all`. Defaults to `false`.
        /// </summary>
        [Input("ignoreMissing")]
        public bool? IgnoreMissing { get; set; }

        [Input("mailNicknames")]
        private List<string>? _mailNicknames;

        /// <summary>
        /// The email aliases of the users.
        /// 
        /// &gt; **Note:** `mail_nicknames` are not a unique identifier for users. If multiple users share the same `mail_nickname`, all matching users will be returned.
        /// </summary>
        public List<string> MailNicknames
        {
            get => _mailNicknames ?? (_mailNicknames = new List<string>());
            set => _mailNicknames = value;
        }

        [Input("mails")]
        private List<string>? _mails;

        /// <summary>
        /// The SMTP email addresses of the users.
        /// </summary>
        public List<string> Mails
        {
            get => _mails ?? (_mails = new List<string>());
            set => _mails = value;
        }

        [Input("objectIds")]
        private List<string>? _objectIds;

        /// <summary>
        /// The object IDs of the users.
        /// </summary>
        public List<string> ObjectIds
        {
            get => _objectIds ?? (_objectIds = new List<string>());
            set => _objectIds = value;
        }

        /// <summary>
        /// When `true`, the data source will return all users. Cannot be used with `ignore_missing`. Defaults to `false`.
        /// </summary>
        [Input("returnAll")]
        public bool? ReturnAll { get; set; }

        [Input("userPrincipalNames")]
        private List<string>? _userPrincipalNames;

        /// <summary>
        /// The user principal names (UPNs) of the users.
        /// 
        /// &gt; Either `return_all`, or one of `user_principal_names`, `object_ids`, `mail_nicknames`, `mails`, or `employee_ids` must be specified. These _may_ be specified as an empty list, in which case no results will be returned.
        /// </summary>
        public List<string> UserPrincipalNames
        {
            get => _userPrincipalNames ?? (_userPrincipalNames = new List<string>());
            set => _userPrincipalNames = value;
        }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("employeeIds")]
        private InputList<string>? _employeeIds;

        /// <summary>
        /// The employee identifiers assigned to the users by the organisation.
        /// </summary>
        public InputList<string> EmployeeIds
        {
            get => _employeeIds ?? (_employeeIds = new InputList<string>());
            set => _employeeIds = value;
        }

        /// <summary>
        /// Ignore missing users and return users that were found. The data source will still fail if no users are found. Cannot be specified with `return_all`. Defaults to `false`.
        /// </summary>
        [Input("ignoreMissing")]
        public Input<bool>? IgnoreMissing { get; set; }

        [Input("mailNicknames")]
        private InputList<string>? _mailNicknames;

        /// <summary>
        /// The email aliases of the users.
        /// 
        /// &gt; **Note:** `mail_nicknames` are not a unique identifier for users. If multiple users share the same `mail_nickname`, all matching users will be returned.
        /// </summary>
        public InputList<string> MailNicknames
        {
            get => _mailNicknames ?? (_mailNicknames = new InputList<string>());
            set => _mailNicknames = value;
        }

        [Input("mails")]
        private InputList<string>? _mails;

        /// <summary>
        /// The SMTP email addresses of the users.
        /// </summary>
        public InputList<string> Mails
        {
            get => _mails ?? (_mails = new InputList<string>());
            set => _mails = value;
        }

        [Input("objectIds")]
        private InputList<string>? _objectIds;

        /// <summary>
        /// The object IDs of the users.
        /// </summary>
        public InputList<string> ObjectIds
        {
            get => _objectIds ?? (_objectIds = new InputList<string>());
            set => _objectIds = value;
        }

        /// <summary>
        /// When `true`, the data source will return all users. Cannot be used with `ignore_missing`. Defaults to `false`.
        /// </summary>
        [Input("returnAll")]
        public Input<bool>? ReturnAll { get; set; }

        [Input("userPrincipalNames")]
        private InputList<string>? _userPrincipalNames;

        /// <summary>
        /// The user principal names (UPNs) of the users.
        /// 
        /// &gt; Either `return_all`, or one of `user_principal_names`, `object_ids`, `mail_nicknames`, `mails`, or `employee_ids` must be specified. These _may_ be specified as an empty list, in which case no results will be returned.
        /// </summary>
        public InputList<string> UserPrincipalNames
        {
            get => _userPrincipalNames ?? (_userPrincipalNames = new InputList<string>());
            set => _userPrincipalNames = value;
        }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The employee identifiers assigned to the users by the organisation.
        /// </summary>
        public readonly ImmutableArray<string> EmployeeIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IgnoreMissing;
        /// <summary>
        /// The email aliases of the users.
        /// </summary>
        public readonly ImmutableArray<string> MailNicknames;
        /// <summary>
        /// The SMTP email addresses of the users.
        /// </summary>
        public readonly ImmutableArray<string> Mails;
        /// <summary>
        /// The object IDs of the users.
        /// </summary>
        public readonly ImmutableArray<string> ObjectIds;
        public readonly bool? ReturnAll;
        /// <summary>
        /// The user principal names (UPNs) of the users.
        /// </summary>
        public readonly ImmutableArray<string> UserPrincipalNames;
        /// <summary>
        /// A list of users. Each `user` object provides the attributes documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            ImmutableArray<string> employeeIds,

            string id,

            bool? ignoreMissing,

            ImmutableArray<string> mailNicknames,

            ImmutableArray<string> mails,

            ImmutableArray<string> objectIds,

            bool? returnAll,

            ImmutableArray<string> userPrincipalNames,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            EmployeeIds = employeeIds;
            Id = id;
            IgnoreMissing = ignoreMissing;
            MailNicknames = mailNicknames;
            Mails = mails;
            ObjectIds = objectIds;
            ReturnAll = returnAll;
            UserPrincipalNames = userPrincipalNames;
            Users = users;
        }
    }
}
