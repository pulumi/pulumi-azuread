// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages an eligible assignment to a privileged access group.
    /// 
    /// ## API Permissions
    /// 
    /// The following API permissions are required in order to use this resource.
    /// 
    /// When authenticated with a service principal, this resource requires the `PrivilegedEligibilitySchedule.ReadWrite.AzureADGroup` Microsoft Graph API permissions.
    /// 
    /// When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureAD.Group("example", new()
    ///     {
    ///         DisplayName = "group-name",
    ///         SecurityEnabled = true,
    ///     });
    /// 
    ///     var member = new AzureAD.User("member", new()
    ///     {
    ///         UserPrincipalName = "jdoe@example.com",
    ///         DisplayName = "J. Doe",
    ///         MailNickname = "jdoe",
    ///         Password = "SecretP@sswd99!",
    ///     });
    /// 
    ///     var examplePrivilegedAccessGroupEligibilitySchedule = new AzureAD.PrivilegedAccessGroupEligibilitySchedule("example", new()
    ///     {
    ///         GroupId = pim.Id,
    ///         PrincipalId = member.Id,
    ///         AssignmentType = "member",
    ///         Duration = "P30D",
    ///         Justification = "as requested",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An assignment schedule can be imported using the schedule ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule example 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule")]
    public partial class PrivilegedAccessGroupEligibilitySchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of assignment to the group. Can be either `member` or `owner`.
        /// </summary>
        [Output("assignmentType")]
        public Output<string> AssignmentType { get; private set; } = null!;

        /// <summary>
        /// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
        /// </summary>
        [Output("duration")]
        public Output<string?> Duration { get; private set; } = null!;

        /// <summary>
        /// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The Object ID of the Azure AD group to which the principal will be assigned.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The justification for this assignment. May be required by the role policy.
        /// </summary>
        [Output("justification")]
        public Output<string?> Justification { get; private set; } = null!;

        /// <summary>
        /// Is this assigment permanently valid.
        /// 
        /// At least one of `expiration_date`, `duration`, or `permanent_assignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
        /// </summary>
        [Output("permanentAssignment")]
        public Output<bool> PermanentAssignment { get; private set; } = null!;

        /// <summary>
        /// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// (String) The provisioning status of this request.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ticket number in the ticket system approving this assignment. May be required by the role policy.
        /// </summary>
        [Output("ticketNumber")]
        public Output<string?> TicketNumber { get; private set; } = null!;

        /// <summary>
        /// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
        /// </summary>
        [Output("ticketSystem")]
        public Output<string?> TicketSystem { get; private set; } = null!;


        /// <summary>
        /// Create a PrivilegedAccessGroupEligibilitySchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrivilegedAccessGroupEligibilitySchedule(string name, PrivilegedAccessGroupEligibilityScheduleArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule", name, args ?? new PrivilegedAccessGroupEligibilityScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrivilegedAccessGroupEligibilitySchedule(string name, Input<string> id, PrivilegedAccessGroupEligibilityScheduleState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrivilegedAccessGroupEligibilitySchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrivilegedAccessGroupEligibilitySchedule Get(string name, Input<string> id, PrivilegedAccessGroupEligibilityScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new PrivilegedAccessGroupEligibilitySchedule(name, id, state, options);
        }
    }

    public sealed class PrivilegedAccessGroupEligibilityScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of assignment to the group. Can be either `member` or `owner`.
        /// </summary>
        [Input("assignmentType", required: true)]
        public Input<string> AssignmentType { get; set; } = null!;

        /// <summary>
        /// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The Object ID of the Azure AD group to which the principal will be assigned.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The justification for this assignment. May be required by the role policy.
        /// </summary>
        [Input("justification")]
        public Input<string>? Justification { get; set; }

        /// <summary>
        /// Is this assigment permanently valid.
        /// 
        /// At least one of `expiration_date`, `duration`, or `permanent_assignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
        /// </summary>
        [Input("permanentAssignment")]
        public Input<bool>? PermanentAssignment { get; set; }

        /// <summary>
        /// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The ticket number in the ticket system approving this assignment. May be required by the role policy.
        /// </summary>
        [Input("ticketNumber")]
        public Input<string>? TicketNumber { get; set; }

        /// <summary>
        /// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
        /// </summary>
        [Input("ticketSystem")]
        public Input<string>? TicketSystem { get; set; }

        public PrivilegedAccessGroupEligibilityScheduleArgs()
        {
        }
        public static new PrivilegedAccessGroupEligibilityScheduleArgs Empty => new PrivilegedAccessGroupEligibilityScheduleArgs();
    }

    public sealed class PrivilegedAccessGroupEligibilityScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of assignment to the group. Can be either `member` or `owner`.
        /// </summary>
        [Input("assignmentType")]
        public Input<string>? AssignmentType { get; set; }

        /// <summary>
        /// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The Object ID of the Azure AD group to which the principal will be assigned.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The justification for this assignment. May be required by the role policy.
        /// </summary>
        [Input("justification")]
        public Input<string>? Justification { get; set; }

        /// <summary>
        /// Is this assigment permanently valid.
        /// 
        /// At least one of `expiration_date`, `duration`, or `permanent_assignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
        /// </summary>
        [Input("permanentAssignment")]
        public Input<bool>? PermanentAssignment { get; set; }

        /// <summary>
        /// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// (String) The provisioning status of this request.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ticket number in the ticket system approving this assignment. May be required by the role policy.
        /// </summary>
        [Input("ticketNumber")]
        public Input<string>? TicketNumber { get; set; }

        /// <summary>
        /// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
        /// </summary>
        [Input("ticketSystem")]
        public Input<string>? TicketSystem { get; set; }

        public PrivilegedAccessGroupEligibilityScheduleState()
        {
        }
        public static new PrivilegedAccessGroupEligibilityScheduleState Empty => new PrivilegedAccessGroupEligibilityScheduleState();
    }
}
