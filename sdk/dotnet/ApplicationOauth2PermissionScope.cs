// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages an OAuth 2.0 Permission Scope associated with an application.
    /// 
    /// &gt; **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleApplication = new AzureAD.Application("exampleApplication", new AzureAD.ApplicationArgs
    ///         {
    ///         });
    ///         var exampleApplicationOauth2PermissionScope = new AzureAD.ApplicationOauth2PermissionScope("exampleApplicationOauth2PermissionScope", new AzureAD.ApplicationOauth2PermissionScopeArgs
    ///         {
    ///             ApplicationObjectId = exampleApplication.Id,
    ///             AdminConsentDescription = "Administer the application",
    ///             AdminConsentDisplayName = "Administer",
    ///             Enabled = true,
    ///             Type = "User",
    ///             UserConsentDescription = "Administer the application",
    ///             UserConsentDisplayName = "Administer",
    ///             Value = "administer",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// OAuth2 Permission Scopes can be imported using the `object_id` of an Application and the `id` of the Permission Scope, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope test 00000000-0000-0000-0000-000000000000/scope/11111111-1111-1111-1111-111111111111
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope")]
    public partial class ApplicationOauth2PermissionScope : Pulumi.CustomResource
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Output("adminConsentDescription")]
        public Output<string> AdminConsentDescription { get; private set; } = null!;

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Output("adminConsentDisplayName")]
        public Output<string> AdminConsentDisplayName { get; private set; } = null!;

        /// <summary>
        /// The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
        /// </summary>
        [Output("applicationObjectId")]
        public Output<string> ApplicationObjectId { get; private set; } = null!;

        /// <summary>
        /// Determines if the permission scope is enabled. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        [Output("permissionId")]
        public Output<string> PermissionId { get; private set; } = null!;

        /// <summary>
        /// Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Output("userConsentDescription")]
        public Output<string> UserConsentDescription { get; private set; } = null!;

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience.
        /// </summary>
        [Output("userConsentDisplayName")]
        public Output<string> UserConsentDisplayName { get; private set; } = null!;

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth 2.0 access tokens.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationOauth2PermissionScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationOauth2PermissionScope(string name, ApplicationOauth2PermissionScopeArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope", name, args ?? new ApplicationOauth2PermissionScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationOauth2PermissionScope(string name, Input<string> id, ApplicationOauth2PermissionScopeState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationOauth2PermissionScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationOauth2PermissionScope Get(string name, Input<string> id, ApplicationOauth2PermissionScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationOauth2PermissionScope(name, id, state, options);
        }
    }

    public sealed class ApplicationOauth2PermissionScopeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDescription", required: true)]
        public Input<string> AdminConsentDescription { get; set; } = null!;

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDisplayName", required: true)]
        public Input<string> AdminConsentDisplayName { get; set; } = null!;

        /// <summary>
        /// The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
        /// </summary>
        [Input("applicationObjectId", required: true)]
        public Input<string> ApplicationObjectId { get; set; } = null!;

        /// <summary>
        /// Determines if the permission scope is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("permissionId")]
        public Input<string>? PermissionId { get; set; }

        /// <summary>
        /// Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Input("userConsentDescription", required: true)]
        public Input<string> UserConsentDescription { get; set; } = null!;

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience.
        /// </summary>
        [Input("userConsentDisplayName", required: true)]
        public Input<string> UserConsentDisplayName { get; set; } = null!;

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth 2.0 access tokens.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationOauth2PermissionScopeArgs()
        {
        }
    }

    public sealed class ApplicationOauth2PermissionScopeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDescription")]
        public Input<string>? AdminConsentDescription { get; set; }

        /// <summary>
        /// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
        /// </summary>
        [Input("adminConsentDisplayName")]
        public Input<string>? AdminConsentDisplayName { get; set; }

        /// <summary>
        /// The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
        /// </summary>
        [Input("applicationObjectId")]
        public Input<string>? ApplicationObjectId { get; set; }

        /// <summary>
        /// Determines if the permission scope is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        [Input("permissionId")]
        public Input<string>? PermissionId { get; set; }

        /// <summary>
        /// Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
        /// </summary>
        [Input("userConsentDescription")]
        public Input<string>? UserConsentDescription { get; set; }

        /// <summary>
        /// Display name for the delegated permission that appears in the end user consent experience.
        /// </summary>
        [Input("userConsentDisplayName")]
        public Input<string>? UserConsentDisplayName { get; set; }

        /// <summary>
        /// The value that is used for the `scp` claim in OAuth 2.0 access tokens.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public ApplicationOauth2PermissionScopeState()
        {
        }
    }
}
