// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    [AzureADResourceType("azuread:index/group:Group")]
    public partial class Group : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
        /// </summary>
        [Output("administrativeUnitIds")]
        public Output<ImmutableArray<string>> AdministrativeUnitIds { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
        /// security-enabled groups.
        /// </summary>
        [Output("assignableToRole")]
        public Output<bool?> AssignableToRole { get; private set; } = null!;

        /// <summary>
        /// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
        /// </summary>
        [Output("autoSubscribeNewMembers")]
        public Output<bool> AutoSubscribeNewMembers { get; private set; } = null!;

        /// <summary>
        /// The group behaviours for a Microsoft 365 group
        /// </summary>
        [Output("behaviors")]
        public Output<ImmutableArray<string>> Behaviors { get; private set; } = null!;

        /// <summary>
        /// The description for the group
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name for the group
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// An optional block to configure dynamic membership for the group. Cannot be used with `members`
        /// </summary>
        [Output("dynamicMembership")]
        public Output<Outputs.GroupDynamicMembership?> DynamicMembership { get; private set; } = null!;

        /// <summary>
        /// Indicates whether people external to the organization can send messages to the group.
        /// </summary>
        [Output("externalSendersAllowed")]
        public Output<bool> ExternalSendersAllowed { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
        /// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
        /// </summary>
        [Output("hideFromAddressLists")]
        public Output<bool> HideFromAddressLists { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
        /// </summary>
        [Output("hideFromOutlookClients")]
        public Output<bool> HideFromOutlookClients { get; private set; } = null!;

        /// <summary>
        /// The SMTP address for the group
        /// </summary>
        [Output("mail")]
        public Output<string> Mail { get; private set; } = null!;

        /// <summary>
        /// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
        /// must be specified. A group can be mail enabled _and_ security enabled
        /// </summary>
        [Output("mailEnabled")]
        public Output<bool?> MailEnabled { get; private set; } = null!;

        /// <summary>
        /// The mail alias for the group, unique in the organisation
        /// </summary>
        [Output("mailNickname")]
        public Output<string> MailNickname { get; private set; } = null!;

        /// <summary>
        /// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<string>> Members { get; private set; } = null!;

        /// <summary>
        /// The object ID of the group
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
        /// used
        /// </summary>
        [Output("onpremisesDomainName")]
        public Output<string> OnpremisesDomainName { get; private set; } = null!;

        /// <summary>
        /// Indicates the target on-premise group type the group will be written back as
        /// </summary>
        [Output("onpremisesGroupType")]
        public Output<string> OnpremisesGroupType { get; private set; } = null!;

        /// <summary>
        /// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Output("onpremisesNetbiosName")]
        public Output<string> OnpremisesNetbiosName { get; private set; } = null!;

        /// <summary>
        /// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Output("onpremisesSamAccountName")]
        public Output<string> OnpremisesSamAccountName { get; private set; } = null!;

        /// <summary>
        /// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Output("onpremisesSecurityIdentifier")]
        public Output<string> OnpremisesSecurityIdentifier { get; private set; } = null!;

        /// <summary>
        /// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
        /// been synchronized (null)
        /// </summary>
        [Output("onpremisesSyncEnabled")]
        public Output<bool> OnpremisesSyncEnabled { get; private set; } = null!;

        /// <summary>
        /// A set of owners who own this group. Supported object types are Users or Service Principals
        /// </summary>
        [Output("owners")]
        public Output<ImmutableArray<string>> Owners { get; private set; } = null!;

        /// <summary>
        /// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
        /// </summary>
        [Output("preferredLanguage")]
        public Output<string> PreferredLanguage { get; private set; } = null!;

        /// <summary>
        /// If `true`, will return an error if an existing group is found with the same name
        /// </summary>
        [Output("preventDuplicateNames")]
        public Output<bool?> PreventDuplicateNames { get; private set; } = null!;

        /// <summary>
        /// The group provisioning options for a Microsoft 365 group
        /// </summary>
        [Output("provisioningOptions")]
        public Output<ImmutableArray<string>> ProvisioningOptions { get; private set; } = null!;

        /// <summary>
        /// Email addresses for the group that direct to the same group mailbox
        /// </summary>
        [Output("proxyAddresses")]
        public Output<ImmutableArray<string>> ProxyAddresses { get; private set; } = null!;

        /// <summary>
        /// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
        /// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
        /// </summary>
        [Output("securityEnabled")]
        public Output<bool?> SecurityEnabled { get; private set; } = null!;

        /// <summary>
        /// The colour theme for a Microsoft 365 group
        /// </summary>
        [Output("theme")]
        public Output<string?> Theme { get; private set; } = null!;

        /// <summary>
        /// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
        /// is true
        /// </summary>
        [Output("types")]
        public Output<ImmutableArray<string>> Types { get; private set; } = null!;

        /// <summary>
        /// Specifies the group join policy and group content visibility
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;

        /// <summary>
        /// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Output("writebackEnabled")]
        public Output<bool?> WritebackEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Group resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Group(string name, GroupArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/group:Group", name, args ?? new GroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Group(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/group:Group", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Group resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Group Get(string name, Input<string> id, GroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Group(name, id, state, options);
        }
    }

    public sealed class GroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("administrativeUnitIds")]
        private InputList<string>? _administrativeUnitIds;

        /// <summary>
        /// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
        /// </summary>
        public InputList<string> AdministrativeUnitIds
        {
            get => _administrativeUnitIds ?? (_administrativeUnitIds = new InputList<string>());
            set => _administrativeUnitIds = value;
        }

        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
        /// security-enabled groups.
        /// </summary>
        [Input("assignableToRole")]
        public Input<bool>? AssignableToRole { get; set; }

        /// <summary>
        /// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
        /// </summary>
        [Input("autoSubscribeNewMembers")]
        public Input<bool>? AutoSubscribeNewMembers { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// The group behaviours for a Microsoft 365 group
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        /// <summary>
        /// The description for the group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name for the group
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// An optional block to configure dynamic membership for the group. Cannot be used with `members`
        /// </summary>
        [Input("dynamicMembership")]
        public Input<Inputs.GroupDynamicMembershipArgs>? DynamicMembership { get; set; }

        /// <summary>
        /// Indicates whether people external to the organization can send messages to the group.
        /// </summary>
        [Input("externalSendersAllowed")]
        public Input<bool>? ExternalSendersAllowed { get; set; }

        /// <summary>
        /// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
        /// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
        /// </summary>
        [Input("hideFromAddressLists")]
        public Input<bool>? HideFromAddressLists { get; set; }

        /// <summary>
        /// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
        /// </summary>
        [Input("hideFromOutlookClients")]
        public Input<bool>? HideFromOutlookClients { get; set; }

        /// <summary>
        /// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
        /// must be specified. A group can be mail enabled _and_ security enabled
        /// </summary>
        [Input("mailEnabled")]
        public Input<bool>? MailEnabled { get; set; }

        /// <summary>
        /// The mail alias for the group, unique in the organisation
        /// </summary>
        [Input("mailNickname")]
        public Input<string>? MailNickname { get; set; }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// Indicates the target on-premise group type the group will be written back as
        /// </summary>
        [Input("onpremisesGroupType")]
        public Input<string>? OnpremisesGroupType { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;

        /// <summary>
        /// A set of owners who own this group. Supported object types are Users or Service Principals
        /// </summary>
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// If `true`, will return an error if an existing group is found with the same name
        /// </summary>
        [Input("preventDuplicateNames")]
        public Input<bool>? PreventDuplicateNames { get; set; }

        [Input("provisioningOptions")]
        private InputList<string>? _provisioningOptions;

        /// <summary>
        /// The group provisioning options for a Microsoft 365 group
        /// </summary>
        public InputList<string> ProvisioningOptions
        {
            get => _provisioningOptions ?? (_provisioningOptions = new InputList<string>());
            set => _provisioningOptions = value;
        }

        /// <summary>
        /// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
        /// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
        /// </summary>
        [Input("securityEnabled")]
        public Input<bool>? SecurityEnabled { get; set; }

        /// <summary>
        /// The colour theme for a Microsoft 365 group
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
        /// is true
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        /// <summary>
        /// Specifies the group join policy and group content visibility
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        /// <summary>
        /// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Input("writebackEnabled")]
        public Input<bool>? WritebackEnabled { get; set; }

        public GroupArgs()
        {
        }
        public static new GroupArgs Empty => new GroupArgs();
    }

    public sealed class GroupState : global::Pulumi.ResourceArgs
    {
        [Input("administrativeUnitIds")]
        private InputList<string>? _administrativeUnitIds;

        /// <summary>
        /// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
        /// </summary>
        public InputList<string> AdministrativeUnitIds
        {
            get => _administrativeUnitIds ?? (_administrativeUnitIds = new InputList<string>());
            set => _administrativeUnitIds = value;
        }

        /// <summary>
        /// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
        /// security-enabled groups.
        /// </summary>
        [Input("assignableToRole")]
        public Input<bool>? AssignableToRole { get; set; }

        /// <summary>
        /// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
        /// </summary>
        [Input("autoSubscribeNewMembers")]
        public Input<bool>? AutoSubscribeNewMembers { get; set; }

        [Input("behaviors")]
        private InputList<string>? _behaviors;

        /// <summary>
        /// The group behaviours for a Microsoft 365 group
        /// </summary>
        public InputList<string> Behaviors
        {
            get => _behaviors ?? (_behaviors = new InputList<string>());
            set => _behaviors = value;
        }

        /// <summary>
        /// The description for the group
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name for the group
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// An optional block to configure dynamic membership for the group. Cannot be used with `members`
        /// </summary>
        [Input("dynamicMembership")]
        public Input<Inputs.GroupDynamicMembershipGetArgs>? DynamicMembership { get; set; }

        /// <summary>
        /// Indicates whether people external to the organization can send messages to the group.
        /// </summary>
        [Input("externalSendersAllowed")]
        public Input<bool>? ExternalSendersAllowed { get; set; }

        /// <summary>
        /// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
        /// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
        /// </summary>
        [Input("hideFromAddressLists")]
        public Input<bool>? HideFromAddressLists { get; set; }

        /// <summary>
        /// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
        /// </summary>
        [Input("hideFromOutlookClients")]
        public Input<bool>? HideFromOutlookClients { get; set; }

        /// <summary>
        /// The SMTP address for the group
        /// </summary>
        [Input("mail")]
        public Input<string>? Mail { get; set; }

        /// <summary>
        /// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
        /// must be specified. A group can be mail enabled _and_ security enabled
        /// </summary>
        [Input("mailEnabled")]
        public Input<bool>? MailEnabled { get; set; }

        /// <summary>
        /// The mail alias for the group, unique in the organisation
        /// </summary>
        [Input("mailNickname")]
        public Input<string>? MailNickname { get; set; }

        [Input("members")]
        private InputList<string>? _members;

        /// <summary>
        /// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
        /// </summary>
        public InputList<string> Members
        {
            get => _members ?? (_members = new InputList<string>());
            set => _members = value;
        }

        /// <summary>
        /// The object ID of the group
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
        /// used
        /// </summary>
        [Input("onpremisesDomainName")]
        public Input<string>? OnpremisesDomainName { get; set; }

        /// <summary>
        /// Indicates the target on-premise group type the group will be written back as
        /// </summary>
        [Input("onpremisesGroupType")]
        public Input<string>? OnpremisesGroupType { get; set; }

        /// <summary>
        /// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Input("onpremisesNetbiosName")]
        public Input<string>? OnpremisesNetbiosName { get; set; }

        /// <summary>
        /// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Input("onpremisesSamAccountName")]
        public Input<string>? OnpremisesSamAccountName { get; set; }

        /// <summary>
        /// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Input("onpremisesSecurityIdentifier")]
        public Input<string>? OnpremisesSecurityIdentifier { get; set; }

        /// <summary>
        /// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
        /// been synchronized (null)
        /// </summary>
        [Input("onpremisesSyncEnabled")]
        public Input<bool>? OnpremisesSyncEnabled { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;

        /// <summary>
        /// A set of owners who own this group. Supported object types are Users or Service Principals
        /// </summary>
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        /// <summary>
        /// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
        /// </summary>
        [Input("preferredLanguage")]
        public Input<string>? PreferredLanguage { get; set; }

        /// <summary>
        /// If `true`, will return an error if an existing group is found with the same name
        /// </summary>
        [Input("preventDuplicateNames")]
        public Input<bool>? PreventDuplicateNames { get; set; }

        [Input("provisioningOptions")]
        private InputList<string>? _provisioningOptions;

        /// <summary>
        /// The group provisioning options for a Microsoft 365 group
        /// </summary>
        public InputList<string> ProvisioningOptions
        {
            get => _provisioningOptions ?? (_provisioningOptions = new InputList<string>());
            set => _provisioningOptions = value;
        }

        [Input("proxyAddresses")]
        private InputList<string>? _proxyAddresses;

        /// <summary>
        /// Email addresses for the group that direct to the same group mailbox
        /// </summary>
        public InputList<string> ProxyAddresses
        {
            get => _proxyAddresses ?? (_proxyAddresses = new InputList<string>());
            set => _proxyAddresses = value;
        }

        /// <summary>
        /// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
        /// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
        /// </summary>
        [Input("securityEnabled")]
        public Input<bool>? SecurityEnabled { get; set; }

        /// <summary>
        /// The colour theme for a Microsoft 365 group
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
        /// is true
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        /// <summary>
        /// Specifies the group join policy and group content visibility
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        /// <summary>
        /// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
        /// </summary>
        [Input("writebackEnabled")]
        public Input<bool>? WritebackEnabled { get; set; }

        public GroupState()
        {
        }
        public static new GroupState Empty => new GroupState();
    }
}
