// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    /// <summary>
    /// Manages a Authentication Strength Policy within Azure Active Directory.
    /// 
    /// ## API Permissions
    /// 
    /// The following API permissions are required in order to use this resource.
    /// 
    /// When authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`
    /// 
    /// When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new AzureAD.AuthenticationStrengthPolicy("example", new()
    ///     {
    ///         DisplayName = "Example Authentication Strength Policy",
    ///         Description = "Policy for demo purposes",
    ///         AllowedCombinations = new[]
    ///         {
    ///             "fido2",
    ///             "password",
    ///         },
    ///     });
    /// 
    ///     var example2 = new AzureAD.AuthenticationStrengthPolicy("example2", new()
    ///     {
    ///         DisplayName = "Example Authentication Strength Policy",
    ///         Description = "Policy for demo purposes with all possible combinations",
    ///         AllowedCombinations = new[]
    ///         {
    ///             "fido2",
    ///             "password",
    ///             "deviceBasedPush",
    ///             "temporaryAccessPassOneTime",
    ///             "federatedMultiFactor",
    ///             "federatedSingleFactor",
    ///             "hardwareOath,federatedSingleFactor",
    ///             "microsoftAuthenticatorPush,federatedSingleFactor",
    ///             "password,hardwareOath",
    ///             "password,microsoftAuthenticatorPush",
    ///             "password,sms",
    ///             "password,softwareOath",
    ///             "password,voice",
    ///             "sms",
    ///             "sms,federatedSingleFactor",
    ///             "softwareOath,federatedSingleFactor",
    ///             "temporaryAccessPassMultiUse",
    ///             "voice,federatedSingleFactor",
    ///             "windowsHelloForBusiness",
    ///             "x509CertificateMultiFactor",
    ///             "x509CertificateSingleFactor",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Authentication Strength Policies can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy my_policy /policies/authenticationStrengthPolicies/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureADResourceType("azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy")]
    public partial class AuthenticationStrengthPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of allowed authentication methods for this authentication strength policy.
        /// </summary>
        [Output("allowedCombinations")]
        public Output<ImmutableArray<string>> AllowedCombinations { get; private set; } = null!;

        /// <summary>
        /// The description for this authentication strength policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The friendly name for this authentication strength policy.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;


        /// <summary>
        /// Create a AuthenticationStrengthPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthenticationStrengthPolicy(string name, AuthenticationStrengthPolicyArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy", name, args ?? new AuthenticationStrengthPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthenticationStrengthPolicy(string name, Input<string> id, AuthenticationStrengthPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthenticationStrengthPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthenticationStrengthPolicy Get(string name, Input<string> id, AuthenticationStrengthPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthenticationStrengthPolicy(name, id, state, options);
        }
    }

    public sealed class AuthenticationStrengthPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedCombinations", required: true)]
        private InputList<string>? _allowedCombinations;

        /// <summary>
        /// List of allowed authentication methods for this authentication strength policy.
        /// </summary>
        public InputList<string> AllowedCombinations
        {
            get => _allowedCombinations ?? (_allowedCombinations = new InputList<string>());
            set => _allowedCombinations = value;
        }

        /// <summary>
        /// The description for this authentication strength policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The friendly name for this authentication strength policy.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        public AuthenticationStrengthPolicyArgs()
        {
        }
        public static new AuthenticationStrengthPolicyArgs Empty => new AuthenticationStrengthPolicyArgs();
    }

    public sealed class AuthenticationStrengthPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("allowedCombinations")]
        private InputList<string>? _allowedCombinations;

        /// <summary>
        /// List of allowed authentication methods for this authentication strength policy.
        /// </summary>
        public InputList<string> AllowedCombinations
        {
            get => _allowedCombinations ?? (_allowedCombinations = new InputList<string>());
            set => _allowedCombinations = value;
        }

        /// <summary>
        /// The description for this authentication strength policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The friendly name for this authentication strength policy.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        public AuthenticationStrengthPolicyState()
        {
        }
        public static new AuthenticationStrengthPolicyState Empty => new AuthenticationStrengthPolicyState();
    }
}
