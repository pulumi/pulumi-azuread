// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    [AzureADResourceType("azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant")]
    public partial class ServicePrincipalDelegatedPermissionGrant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of claim values for delegated permission scopes which should be included in access tokens for the resource
        /// </summary>
        [Output("claimValues")]
        public Output<ImmutableArray<string>> ClaimValues { get; private set; } = null!;

        /// <summary>
        /// The object ID of the service principal representing the resource to be accessed
        /// </summary>
        [Output("resourceServicePrincipalObjectId")]
        public Output<string> ResourceServicePrincipalObjectId { get; private set; } = null!;

        /// <summary>
        /// The object ID of the service principal for which this delegated permission grant should be created
        /// </summary>
        [Output("servicePrincipalObjectId")]
        public Output<string> ServicePrincipalObjectId { get; private set; } = null!;

        /// <summary>
        /// The object ID of the user on behalf of whom the service principal is authorized to access the resource
        /// </summary>
        [Output("userObjectId")]
        public Output<string?> UserObjectId { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePrincipalDelegatedPermissionGrant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePrincipalDelegatedPermissionGrant(string name, ServicePrincipalDelegatedPermissionGrantArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant", name, args ?? new ServicePrincipalDelegatedPermissionGrantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePrincipalDelegatedPermissionGrant(string name, Input<string> id, ServicePrincipalDelegatedPermissionGrantState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePrincipalDelegatedPermissionGrant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePrincipalDelegatedPermissionGrant Get(string name, Input<string> id, ServicePrincipalDelegatedPermissionGrantState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePrincipalDelegatedPermissionGrant(name, id, state, options);
        }
    }

    public sealed class ServicePrincipalDelegatedPermissionGrantArgs : global::Pulumi.ResourceArgs
    {
        [Input("claimValues", required: true)]
        private InputList<string>? _claimValues;

        /// <summary>
        /// A set of claim values for delegated permission scopes which should be included in access tokens for the resource
        /// </summary>
        public InputList<string> ClaimValues
        {
            get => _claimValues ?? (_claimValues = new InputList<string>());
            set => _claimValues = value;
        }

        /// <summary>
        /// The object ID of the service principal representing the resource to be accessed
        /// </summary>
        [Input("resourceServicePrincipalObjectId", required: true)]
        public Input<string> ResourceServicePrincipalObjectId { get; set; } = null!;

        /// <summary>
        /// The object ID of the service principal for which this delegated permission grant should be created
        /// </summary>
        [Input("servicePrincipalObjectId", required: true)]
        public Input<string> ServicePrincipalObjectId { get; set; } = null!;

        /// <summary>
        /// The object ID of the user on behalf of whom the service principal is authorized to access the resource
        /// </summary>
        [Input("userObjectId")]
        public Input<string>? UserObjectId { get; set; }

        public ServicePrincipalDelegatedPermissionGrantArgs()
        {
        }
        public static new ServicePrincipalDelegatedPermissionGrantArgs Empty => new ServicePrincipalDelegatedPermissionGrantArgs();
    }

    public sealed class ServicePrincipalDelegatedPermissionGrantState : global::Pulumi.ResourceArgs
    {
        [Input("claimValues")]
        private InputList<string>? _claimValues;

        /// <summary>
        /// A set of claim values for delegated permission scopes which should be included in access tokens for the resource
        /// </summary>
        public InputList<string> ClaimValues
        {
            get => _claimValues ?? (_claimValues = new InputList<string>());
            set => _claimValues = value;
        }

        /// <summary>
        /// The object ID of the service principal representing the resource to be accessed
        /// </summary>
        [Input("resourceServicePrincipalObjectId")]
        public Input<string>? ResourceServicePrincipalObjectId { get; set; }

        /// <summary>
        /// The object ID of the service principal for which this delegated permission grant should be created
        /// </summary>
        [Input("servicePrincipalObjectId")]
        public Input<string>? ServicePrincipalObjectId { get; set; }

        /// <summary>
        /// The object ID of the user on behalf of whom the service principal is authorized to access the resource
        /// </summary>
        [Input("userObjectId")]
        public Input<string>? UserObjectId { get; set; }

        public ServicePrincipalDelegatedPermissionGrantState()
        {
        }
        public static new ServicePrincipalDelegatedPermissionGrantState Empty => new ServicePrincipalDelegatedPermissionGrantState();
    }
}
