// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    [AzureADResourceType("azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate")]
    public partial class ServicePrincipalTokenSigningCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A friendly name for the certificate
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
        /// Default is 3 years from current date.
        /// </summary>
        [Output("endDate")]
        public Output<string> EndDate { get; private set; } = null!;

        /// <summary>
        /// A UUID used to uniquely identify the verify certificate.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The object ID of the service principal for which this certificate should be created
        /// </summary>
        [Output("servicePrincipalId")]
        public Output<string> ServicePrincipalId { get; private set; } = null!;

        /// <summary>
        /// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// The thumbprint of the certificate.
        /// </summary>
        [Output("thumbprint")]
        public Output<string> Thumbprint { get; private set; } = null!;

        /// <summary>
        /// The certificate data, which is PEM encoded but does not include the header/footer
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ServicePrincipalTokenSigningCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServicePrincipalTokenSigningCertificate(string name, ServicePrincipalTokenSigningCertificateArgs args, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate", name, args ?? new ServicePrincipalTokenSigningCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServicePrincipalTokenSigningCertificate(string name, Input<string> id, ServicePrincipalTokenSigningCertificateState? state = null, CustomResourceOptions? options = null)
            : base("azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServicePrincipalTokenSigningCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServicePrincipalTokenSigningCertificate Get(string name, Input<string> id, ServicePrincipalTokenSigningCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ServicePrincipalTokenSigningCertificate(name, id, state, options);
        }
    }

    public sealed class ServicePrincipalTokenSigningCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A friendly name for the certificate
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
        /// Default is 3 years from current date.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// The object ID of the service principal for which this certificate should be created
        /// </summary>
        [Input("servicePrincipalId", required: true)]
        public Input<string> ServicePrincipalId { get; set; } = null!;

        public ServicePrincipalTokenSigningCertificateArgs()
        {
        }
        public static new ServicePrincipalTokenSigningCertificateArgs Empty => new ServicePrincipalTokenSigningCertificateArgs();
    }

    public sealed class ServicePrincipalTokenSigningCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A friendly name for the certificate
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
        /// Default is 3 years from current date.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// A UUID used to uniquely identify the verify certificate.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The object ID of the service principal for which this certificate should be created
        /// </summary>
        [Input("servicePrincipalId")]
        public Input<string>? ServicePrincipalId { get; set; }

        /// <summary>
        /// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The thumbprint of the certificate.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The certificate data, which is PEM encoded but does not include the header/footer
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ServicePrincipalTokenSigningCertificateState()
        {
        }
        public static new ServicePrincipalTokenSigningCertificateState Empty => new ServicePrincipalTokenSigningCertificateState();
    }
}
