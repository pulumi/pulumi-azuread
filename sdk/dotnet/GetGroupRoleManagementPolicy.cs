// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureAD
{
    public static class GetGroupRoleManagementPolicy
    {
        /// <summary>
        /// Use this data source to retrieve a role policy for an Azure AD group.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this resource.
        /// 
        /// When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
        /// 
        /// When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new AzureAD.Group("example", new()
        ///     {
        ///         DisplayName = "group-name",
        ///         SecurityEnabled = true,
        ///     });
        /// 
        ///     var ownersPolicy = AzureAD.GetGroupRoleManagementPolicy.Invoke(new()
        ///     {
        ///         GroupId = example.Id,
        ///         RoleId = "owner",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGroupRoleManagementPolicyResult> InvokeAsync(GetGroupRoleManagementPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupRoleManagementPolicyResult>("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", args ?? new GetGroupRoleManagementPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a role policy for an Azure AD group.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this resource.
        /// 
        /// When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
        /// 
        /// When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new AzureAD.Group("example", new()
        ///     {
        ///         DisplayName = "group-name",
        ///         SecurityEnabled = true,
        ///     });
        /// 
        ///     var ownersPolicy = AzureAD.GetGroupRoleManagementPolicy.Invoke(new()
        ///     {
        ///         GroupId = example.Id,
        ///         RoleId = "owner",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGroupRoleManagementPolicyResult> Invoke(GetGroupRoleManagementPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupRoleManagementPolicyResult>("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", args ?? new GetGroupRoleManagementPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupRoleManagementPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure AD group for which the policy applies.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// The type of assignment this policy coveres. Can be either `member` or `owner`.
        /// </summary>
        [Input("roleId", required: true)]
        public string RoleId { get; set; } = null!;

        public GetGroupRoleManagementPolicyArgs()
        {
        }
        public static new GetGroupRoleManagementPolicyArgs Empty => new GetGroupRoleManagementPolicyArgs();
    }

    public sealed class GetGroupRoleManagementPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure AD group for which the policy applies.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The type of assignment this policy coveres. Can be either `member` or `owner`.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        public GetGroupRoleManagementPolicyInvokeArgs()
        {
        }
        public static new GetGroupRoleManagementPolicyInvokeArgs Empty => new GetGroupRoleManagementPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupRoleManagementPolicyResult
    {
        /// <summary>
        /// (String) The description of this policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (String) The display name of this policy.
        /// </summary>
        public readonly string DisplayName;
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RoleId;

        [OutputConstructor]
        private GetGroupRoleManagementPolicyResult(
            string description,

            string displayName,

            string groupId,

            string id,

            string roleId)
        {
            Description = description;
            DisplayName = displayName;
            GroupId = groupId;
            Id = id;
            RoleId = roleId;
        }
    }
}
