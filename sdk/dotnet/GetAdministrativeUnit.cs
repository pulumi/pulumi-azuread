// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.AzureAD
{
    public static class GetAdministrativeUnit
    {
        /// <summary>
        /// Gets information about an adminisrative unit in Azure Active Directory.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### By Group Display Name)
        /// 
        /// *Look up by display name*
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetAdministrativeUnit.InvokeAsync(new AzureAD.GetAdministrativeUnitArgs
        ///         {
        ///             DisplayName = "Example-AU",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// *Look up by object ID*
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetAdministrativeUnit.InvokeAsync(new AzureAD.GetAdministrativeUnitArgs
        ///         {
        ///             ObjectId = "00000000-0000-0000-0000-000000000000",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAdministrativeUnitResult> InvokeAsync(GetAdministrativeUnitArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAdministrativeUnitResult>("azuread:index/getAdministrativeUnit:getAdministrativeUnit", args ?? new GetAdministrativeUnitArgs(), options.WithVersion());

        /// <summary>
        /// Gets information about an adminisrative unit in Azure Active Directory.
        /// 
        /// ## API Permissions
        /// 
        /// The following API permissions are required in order to use this data source.
        /// 
        /// When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
        /// 
        /// When authenticated with a user principal, this data source does not require any additional roles.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### By Group Display Name)
        /// 
        /// *Look up by display name*
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetAdministrativeUnit.InvokeAsync(new AzureAD.GetAdministrativeUnitArgs
        ///         {
        ///             DisplayName = "Example-AU",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// *Look up by object ID*
        /// ```csharp
        /// using Pulumi;
        /// using AzureAD = Pulumi.AzureAD;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(AzureAD.GetAdministrativeUnit.InvokeAsync(new AzureAD.GetAdministrativeUnitArgs
        ///         {
        ///             ObjectId = "00000000-0000-0000-0000-000000000000",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAdministrativeUnitResult> Invoke(GetAdministrativeUnitInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAdministrativeUnitResult>("azuread:index/getAdministrativeUnit:getAdministrativeUnit", args ?? new GetAdministrativeUnitInvokeArgs(), options.WithVersion());
    }


    public sealed class GetAdministrativeUnitArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the display name of the administrative unit.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Specifies the object ID of the administrative unit.
        /// </summary>
        [Input("objectId")]
        public string? ObjectId { get; set; }

        public GetAdministrativeUnitArgs()
        {
        }
    }

    public sealed class GetAdministrativeUnitInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the display name of the administrative unit.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Specifies the object ID of the administrative unit.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        public GetAdministrativeUnitInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAdministrativeUnitResult
    {
        /// <summary>
        /// The description of the administrative unit.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of the administrative unit.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of object IDs of members who are present in this administrative unit.
        /// </summary>
        public readonly ImmutableArray<string> Members;
        /// <summary>
        /// The object ID of the administrative unit.
        /// </summary>
        public readonly string ObjectId;
        /// <summary>
        /// Whether the administrative unit _and_ its members are hidden or publicly viewable in the directory. One of: `Hiddenmembership` or `Public`.
        /// </summary>
        public readonly string Visibility;

        [OutputConstructor]
        private GetAdministrativeUnitResult(
            string description,

            string displayName,

            string id,

            ImmutableArray<string> members,

            string objectId,

            string visibility)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            Members = members;
            ObjectId = objectId;
            Visibility = visibility;
        }
    }
}
