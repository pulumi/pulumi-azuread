// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a synchronization job associated with a service principal (enterprise application) within Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.All` or `Directory.ReadWrite.All`
 *
 * ## Example Usage
 *
 * *Basic example*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplicationTemplate = azuread.getApplicationTemplate({
 *     displayName: "Azure Databricks SCIM Provisioning Connector",
 * });
 * const exampleApplication = new azuread.Application("exampleApplication", {
 *     displayName: "example",
 *     templateId: exampleApplicationTemplate.then(exampleApplicationTemplate => exampleApplicationTemplate.templateId),
 *     featureTags: [{
 *         enterprise: true,
 *         gallery: true,
 *     }],
 * });
 * const exampleServicePrincipal = new azuread.ServicePrincipal("exampleServicePrincipal", {
 *     applicationId: exampleApplication.applicationId,
 *     useExisting: true,
 * });
 * const exampleSynchronizationSecret = new azuread.SynchronizationSecret("exampleSynchronizationSecret", {
 *     servicePrincipalId: exampleServicePrincipal.id,
 *     credentials: [
 *         {
 *             key: "BaseAddress",
 *             value: "https://adb-example.azuredatabricks.net/api/2.0/preview/scim",
 *         },
 *         {
 *             key: "SecretToken",
 *             value: "some-token",
 *         },
 *     ],
 * });
 * const exampleSynchronizationJob = new azuread.SynchronizationJob("exampleSynchronizationJob", {
 *     servicePrincipalId: exampleServicePrincipal.id,
 *     templateId: "dataBricks",
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Synchronization jobs can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/synchronizationJob:SynchronizationJob example 00000000-0000-0000-0000-000000000000/job/dataBricks.f5532fc709734b1a90e8a1fa9fd03a82.8442fd39-2183-419c-8732-74b6ce866bd5
 * ```
 *
 *  -> This ID format is unique to Terraform and is composed of the Service Principal Object ID and the ID of the Synchronization Job Id in the format `{servicePrincipalId}/job/{jobId}`.
 */
export class SynchronizationJob extends pulumi.CustomResource {
    /**
     * Get an existing SynchronizationJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynchronizationJobState, opts?: pulumi.CustomResourceOptions): SynchronizationJob {
        return new SynchronizationJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/synchronizationJob:SynchronizationJob';

    /**
     * Returns true if the given object is an instance of SynchronizationJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynchronizationJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynchronizationJob.__pulumiType;
    }

    /**
     * Whether or not the provisioning job is enabled. Default state is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A `schedule` list as documented below.
     */
    public /*out*/ readonly schedules!: pulumi.Output<outputs.SynchronizationJobSchedule[]>;
    /**
     * The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.
     */
    public readonly servicePrincipalId!: pulumi.Output<string>;
    /**
     * Identifier of the synchronization template this job is based on.
     */
    public readonly templateId!: pulumi.Output<string>;

    /**
     * Create a SynchronizationJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynchronizationJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynchronizationJobArgs | SynchronizationJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynchronizationJobState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as SynchronizationJobArgs | undefined;
            if ((!args || args.servicePrincipalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipalId'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["servicePrincipalId"] = args ? args.servicePrincipalId : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["schedules"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynchronizationJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SynchronizationJob resources.
 */
export interface SynchronizationJobState {
    /**
     * Whether or not the provisioning job is enabled. Default state is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A `schedule` list as documented below.
     */
    schedules?: pulumi.Input<pulumi.Input<inputs.SynchronizationJobSchedule>[]>;
    /**
     * The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * Identifier of the synchronization template this job is based on.
     */
    templateId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SynchronizationJob resource.
 */
export interface SynchronizationJobArgs {
    /**
     * Whether or not the provisioning job is enabled. Default state is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The object ID of the service principal for which this synchronization job should be created. Changing this field forces a new resource to be created.
     */
    servicePrincipalId: pulumi.Input<string>;
    /**
     * Identifier of the synchronization template this job is based on.
     */
    templateId: pulumi.Input<string>;
}
