// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an OAuth 2.0 Permission Scope associated with an application.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {});
 * const exampleApplicationOauth2PermissionScope = new azuread.ApplicationOauth2PermissionScope("exampleApplicationOauth2PermissionScope", {
 *     applicationObjectId: exampleApplication.id,
 *     adminConsentDescription: "Administer the application",
 *     adminConsentDisplayName: "Administer",
 *     enabled: true,
 *     type: "User",
 *     userConsentDescription: "Administer the application",
 *     userConsentDisplayName: "Administer",
 *     value: "administer",
 * });
 * ```
 *
 * ## Import
 *
 * OAuth2 Permission Scopes can be imported using the `object_id` of an Application and the `id` of the Permission Scope, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope test 00000000-0000-0000-0000-000000000000/scope/11111111-1111-1111-1111-111111111111
 * ```
 */
export class ApplicationOauth2PermissionScope extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationOauth2PermissionScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationOauth2PermissionScopeState, opts?: pulumi.CustomResourceOptions): ApplicationOauth2PermissionScope {
        return new ApplicationOauth2PermissionScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/applicationOauth2PermissionScope:ApplicationOauth2PermissionScope';

    /**
     * Returns true if the given object is an instance of ApplicationOauth2PermissionScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationOauth2PermissionScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationOauth2PermissionScope.__pulumiType;
    }

    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     */
    public readonly adminConsentDescription!: pulumi.Output<string>;
    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     */
    public readonly adminConsentDisplayName!: pulumi.Output<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    public readonly applicationObjectId!: pulumi.Output<string>;
    /**
     * Determines if the permission scope is enabled. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    public readonly permissionId!: pulumi.Output<string>;
    /**
     * Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     */
    public readonly scopeId!: pulumi.Output<string>;
    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     */
    public readonly userConsentDescription!: pulumi.Output<string>;
    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     */
    public readonly userConsentDisplayName!: pulumi.Output<string>;
    /**
     * The value that is used for the `scp` claim in OAuth 2.0 access tokens.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a ApplicationOauth2PermissionScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationOauth2PermissionScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationOauth2PermissionScopeArgs | ApplicationOauth2PermissionScopeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationOauth2PermissionScopeState | undefined;
            inputs["adminConsentDescription"] = state ? state.adminConsentDescription : undefined;
            inputs["adminConsentDisplayName"] = state ? state.adminConsentDisplayName : undefined;
            inputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["isEnabled"] = state ? state.isEnabled : undefined;
            inputs["permissionId"] = state ? state.permissionId : undefined;
            inputs["scopeId"] = state ? state.scopeId : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userConsentDescription"] = state ? state.userConsentDescription : undefined;
            inputs["userConsentDisplayName"] = state ? state.userConsentDisplayName : undefined;
            inputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ApplicationOauth2PermissionScopeArgs | undefined;
            if ((!args || args.adminConsentDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminConsentDescription'");
            }
            if ((!args || args.adminConsentDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminConsentDisplayName'");
            }
            if ((!args || args.applicationObjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationObjectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.userConsentDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConsentDescription'");
            }
            if ((!args || args.userConsentDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userConsentDisplayName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            inputs["adminConsentDescription"] = args ? args.adminConsentDescription : undefined;
            inputs["adminConsentDisplayName"] = args ? args.adminConsentDisplayName : undefined;
            inputs["applicationObjectId"] = args ? args.applicationObjectId : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["isEnabled"] = args ? args.isEnabled : undefined;
            inputs["permissionId"] = args ? args.permissionId : undefined;
            inputs["scopeId"] = args ? args.scopeId : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["userConsentDescription"] = args ? args.userConsentDescription : undefined;
            inputs["userConsentDisplayName"] = args ? args.userConsentDisplayName : undefined;
            inputs["value"] = args ? args.value : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ApplicationOauth2PermissionScope.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationOauth2PermissionScope resources.
 */
export interface ApplicationOauth2PermissionScopeState {
    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     */
    readonly adminConsentDescription?: pulumi.Input<string>;
    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     */
    readonly adminConsentDisplayName?: pulumi.Input<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    readonly applicationObjectId?: pulumi.Input<string>;
    /**
     * Determines if the permission scope is enabled. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly isEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly permissionId?: pulumi.Input<string>;
    /**
     * Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     */
    readonly scopeId?: pulumi.Input<string>;
    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     */
    readonly userConsentDescription?: pulumi.Input<string>;
    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     */
    readonly userConsentDisplayName?: pulumi.Input<string>;
    /**
     * The value that is used for the `scp` claim in OAuth 2.0 access tokens.
     */
    readonly value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationOauth2PermissionScope resource.
 */
export interface ApplicationOauth2PermissionScopeArgs {
    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     */
    readonly adminConsentDescription: pulumi.Input<string>;
    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     */
    readonly adminConsentDisplayName: pulumi.Input<string>;
    /**
     * The Object ID of the Application for which this Permission should be created. Changing this field forces a new resource to be created.
     */
    readonly applicationObjectId: pulumi.Input<string>;
    /**
     * Determines if the permission scope is enabled. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly isEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated [NOTE] This attribute has been renamed to `scope_id` and will be removed in version 2.0 of the AzureAD provider
     */
    readonly permissionId?: pulumi.Input<string>;
    /**
     * Specifies a custom UUID for the permission scope. If omitted, a random UUID will be automatically generated. Changing this field forces a new resource to be created.
     */
    readonly scopeId?: pulumi.Input<string>;
    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. Defaults to `User`. Possible values are `User` or `Admin`.
     */
    readonly type: pulumi.Input<string>;
    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     */
    readonly userConsentDescription: pulumi.Input<string>;
    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     */
    readonly userConsentDisplayName: pulumi.Input<string>;
    /**
     * The value that is used for the `scp` claim in OAuth 2.0 access tokens.
     */
    readonly value: pulumi.Input<string>;
}
