// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages synchronization job on demand provisioning associated with a service principal (enterprise application) within Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires one of the following application roles: `Synchronization.ReadWrite.All`
 *
 * ## Example Usage
 *
 * *Basic example*
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const current = azuread.getClientConfig({});
 * const exampleGroup = new azuread.Group("example", {
 *     displayName: "example",
 *     owners: [current.then(current => current.objectId)],
 *     securityEnabled: true,
 * });
 * const example = azuread.getApplicationTemplate({
 *     displayName: "Azure Databricks SCIM Provisioning Connector",
 * });
 * const exampleApplicationFromTemplate = new azuread.ApplicationFromTemplate("example", {
 *     displayName: "example",
 *     templateId: example.then(example => example.templateId),
 * });
 * const exampleGetServicePrincipal = azuread.getServicePrincipalOutput({
 *     objectId: exampleApplicationFromTemplate.servicePrincipalObjectId,
 * });
 * const exampleSynchronizationSecret = new azuread.SynchronizationSecret("example", {
 *     servicePrincipalId: exampleGetServicePrincipal.apply(exampleGetServicePrincipal => exampleGetServicePrincipal.id),
 *     credentials: [
 *         {
 *             key: "BaseAddress",
 *             value: "https://adb-example.azuredatabricks.net/api/2.0/preview/scim",
 *         },
 *         {
 *             key: "SecretToken",
 *             value: "some-token",
 *         },
 *     ],
 * });
 * const exampleSynchronizationJob = new azuread.SynchronizationJob("example", {
 *     servicePrincipalId: exampleGetServicePrincipal.apply(exampleGetServicePrincipal => exampleGetServicePrincipal.id),
 *     templateId: "dataBricks",
 *     enabled: true,
 * });
 * const exampleSynchronizationJobProvisionOnDemand = new azuread.SynchronizationJobProvisionOnDemand("example", {
 *     servicePrincipalId: exampleSynchronizationJob.servicePrincipalId,
 *     synchronizationJobId: exampleSynchronizationJob.id,
 *     parameters: [{
 *         ruleId: "",
 *         subjects: [{
 *             objectId: exampleGroup.objectId,
 *             objectTypeName: "Group",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support importing.
 */
export class SynchronizationJobProvisionOnDemand extends pulumi.CustomResource {
    /**
     * Get an existing SynchronizationJobProvisionOnDemand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynchronizationJobProvisionOnDemandState, opts?: pulumi.CustomResourceOptions): SynchronizationJobProvisionOnDemand {
        return new SynchronizationJobProvisionOnDemand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/synchronizationJobProvisionOnDemand:SynchronizationJobProvisionOnDemand';

    /**
     * Returns true if the given object is an instance of SynchronizationJobProvisionOnDemand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynchronizationJobProvisionOnDemand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynchronizationJobProvisionOnDemand.__pulumiType;
    }

    /**
     * One or more `parameter` blocks as documented below.
     */
    declare public readonly parameters: pulumi.Output<outputs.SynchronizationJobProvisionOnDemandParameter[]>;
    /**
     * The ID of the service principal for the synchronization job.
     */
    declare public readonly servicePrincipalId: pulumi.Output<string>;
    /**
     * The ID of the synchronization job.
     */
    declare public readonly synchronizationJobId: pulumi.Output<string>;
    declare public readonly triggers: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a SynchronizationJobProvisionOnDemand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynchronizationJobProvisionOnDemandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynchronizationJobProvisionOnDemandArgs | SynchronizationJobProvisionOnDemandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynchronizationJobProvisionOnDemandState | undefined;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["servicePrincipalId"] = state?.servicePrincipalId;
            resourceInputs["synchronizationJobId"] = state?.synchronizationJobId;
            resourceInputs["triggers"] = state?.triggers;
        } else {
            const args = argsOrState as SynchronizationJobProvisionOnDemandArgs | undefined;
            if (args?.parameters === undefined && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if (args?.servicePrincipalId === undefined && !opts.urn) {
                throw new Error("Missing required property 'servicePrincipalId'");
            }
            if (args?.synchronizationJobId === undefined && !opts.urn) {
                throw new Error("Missing required property 'synchronizationJobId'");
            }
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["servicePrincipalId"] = args?.servicePrincipalId;
            resourceInputs["synchronizationJobId"] = args?.synchronizationJobId;
            resourceInputs["triggers"] = args?.triggers;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynchronizationJobProvisionOnDemand.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SynchronizationJobProvisionOnDemand resources.
 */
export interface SynchronizationJobProvisionOnDemandState {
    /**
     * One or more `parameter` blocks as documented below.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.SynchronizationJobProvisionOnDemandParameter>[]>;
    /**
     * The ID of the service principal for the synchronization job.
     */
    servicePrincipalId?: pulumi.Input<string>;
    /**
     * The ID of the synchronization job.
     */
    synchronizationJobId?: pulumi.Input<string>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SynchronizationJobProvisionOnDemand resource.
 */
export interface SynchronizationJobProvisionOnDemandArgs {
    /**
     * One or more `parameter` blocks as documented below.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.SynchronizationJobProvisionOnDemandParameter>[]>;
    /**
     * The ID of the service principal for the synchronization job.
     */
    servicePrincipalId: pulumi.Input<string>;
    /**
     * The ID of the synchronization job.
     */
    synchronizationJobId: pulumi.Input<string>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
