// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplication(args?: GetApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azuread:index/getApplication:getApplication", {
        "applicationId": args.applicationId,
        "displayName": args.displayName,
        "objectId": args.objectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationArgs {
    applicationId?: string;
    displayName?: string;
    objectId?: string;
}

/**
 * A collection of values returned by getApplication.
 */
export interface GetApplicationResult {
    readonly apis: outputs.GetApplicationApi[];
    readonly appRoleIds: {[key: string]: string};
    readonly appRoles: outputs.GetApplicationAppRole[];
    readonly applicationId: string;
    readonly description: string;
    readonly deviceOnlyAuthEnabled: boolean;
    readonly disabledByMicrosoft: string;
    readonly displayName: string;
    readonly fallbackPublicClientEnabled: boolean;
    readonly featureTags: outputs.GetApplicationFeatureTag[];
    readonly groupMembershipClaims: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly identifierUris: string[];
    readonly logoUrl: string;
    readonly marketingUrl: string;
    readonly notes: string;
    readonly oauth2PermissionScopeIds: {[key: string]: string};
    readonly oauth2PostResponseRequired: boolean;
    readonly objectId: string;
    readonly optionalClaims: outputs.GetApplicationOptionalClaim[];
    readonly owners: string[];
    readonly privacyStatementUrl: string;
    readonly publicClients: outputs.GetApplicationPublicClient[];
    readonly publisherDomain: string;
    readonly requiredResourceAccesses: outputs.GetApplicationRequiredResourceAccess[];
    readonly serviceManagementReference: string;
    readonly signInAudience: string;
    readonly singlePageApplications: outputs.GetApplicationSinglePageApplication[];
    readonly supportUrl: string;
    readonly tags: string[];
    readonly termsOfServiceUrl: string;
    readonly webs: outputs.GetApplicationWeb[];
}
export function getApplicationOutput(args?: GetApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationResult> {
    return pulumi.output(args).apply((a: any) => getApplication(a, opts))
}

/**
 * A collection of arguments for invoking getApplication.
 */
export interface GetApplicationOutputArgs {
    applicationId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
}
