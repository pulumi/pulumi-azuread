// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.CustomDirectoryRole("example", {
 *     description: "Allows reading applications and updating groups",
 *     displayName: "My Custom Role",
 *     enabled: true,
 *     permissions: [
 *         {
 *             allowedResourceActions: [
 *                 "microsoft.directory/applications/basic/update",
 *                 "microsoft.directory/applications/create",
 *                 "microsoft.directory/applications/standard/read",
 *             ],
 *         },
 *         {
 *             allowedResourceActions: [
 *                 "microsoft.directory/groups/allProperties/read",
 *                 "microsoft.directory/groups/allProperties/read",
 *                 "microsoft.directory/groups/basic/update",
 *                 "microsoft.directory/groups/create",
 *                 "microsoft.directory/groups/delete",
 *             ],
 *         },
 *     ],
 *     version: "1.0",
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support importing.
 */
export class CustomDirectoryRole extends pulumi.CustomResource {
    /**
     * Get an existing CustomDirectoryRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomDirectoryRoleState, opts?: pulumi.CustomResourceOptions): CustomDirectoryRole {
        return new CustomDirectoryRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/customDirectoryRole:CustomDirectoryRole';

    /**
     * Returns true if the given object is an instance of CustomDirectoryRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomDirectoryRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDirectoryRole.__pulumiType;
    }

    /**
     * The description of the custom directory role.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the custom directory role.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Indicates whether the role is enabled for assignment.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The object ID of the custom directory role.
     */
    public /*out*/ readonly objectId!: pulumi.Output<string>;
    /**
     * A collection of `permissions` blocks as documented below.
     */
    public readonly permissions!: pulumi.Output<outputs.CustomDirectoryRolePermission[]>;
    /**
     * Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
     */
    public readonly templateId!: pulumi.Output<string>;
    /**
     * - The version of the role definition. This can be any arbitrary string between 1-128 characters.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CustomDirectoryRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomDirectoryRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomDirectoryRoleArgs | CustomDirectoryRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomDirectoryRoleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CustomDirectoryRoleArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["objectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomDirectoryRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomDirectoryRole resources.
 */
export interface CustomDirectoryRoleState {
    /**
     * The description of the custom directory role.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the custom directory role.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates whether the role is enabled for assignment.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The object ID of the custom directory role.
     */
    objectId?: pulumi.Input<string>;
    /**
     * A collection of `permissions` blocks as documented below.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.CustomDirectoryRolePermission>[]>;
    /**
     * Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
     */
    templateId?: pulumi.Input<string>;
    /**
     * - The version of the role definition. This can be any arbitrary string between 1-128 characters.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomDirectoryRole resource.
 */
export interface CustomDirectoryRoleArgs {
    /**
     * The description of the custom directory role.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the custom directory role.
     */
    displayName: pulumi.Input<string>;
    /**
     * Indicates whether the role is enabled for assignment.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * A collection of `permissions` blocks as documented below.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.CustomDirectoryRolePermission>[]>;
    /**
     * Custom template identifier that is typically used if one needs an identifier to be the same across different directories. Changing this forces a new resource to be created.
     */
    templateId?: pulumi.Input<string>;
    /**
     * - The version of the role definition. This can be any arbitrary string between 1-128 characters.
     */
    version: pulumi.Input<string>;
}
