// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessPackageAssignmentPolicyApprovalSettings {
    approvalRequired?: boolean;
    approvalRequiredForExtension?: boolean;
    approvalStages?: outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStage[];
    requestorJustificationRequired?: boolean;
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStage {
    alternativeApprovalEnabled?: boolean;
    alternativeApprovers?: outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover[];
    approvalTimeoutInDays: number;
    approverJustificationRequired?: boolean;
    enableAlternativeApprovalInDays?: number;
    primaryApprovers?: outputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover[];
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover {
    backup?: boolean;
    objectId?: string;
    subjectType: string;
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover {
    backup?: boolean;
    objectId?: string;
    subjectType: string;
}

export interface AccessPackageAssignmentPolicyAssignmentReviewSettings {
    accessRecommendationEnabled?: boolean;
    accessReviewTimeoutBehavior?: string;
    approverJustificationRequired?: boolean;
    durationInDays?: number;
    enabled?: boolean;
    reviewFrequency?: string;
    reviewType?: string;
    reviewers?: outputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer[];
    startingOn?: string;
}

export interface AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer {
    backup?: boolean;
    objectId?: string;
    subjectType: string;
}

export interface AccessPackageAssignmentPolicyQuestion {
    choices?: outputs.AccessPackageAssignmentPolicyQuestionChoice[];
    required?: boolean;
    sequence?: number;
    text: outputs.AccessPackageAssignmentPolicyQuestionText;
}

export interface AccessPackageAssignmentPolicyQuestionChoice {
    actualValue: string;
    displayValue: outputs.AccessPackageAssignmentPolicyQuestionChoiceDisplayValue;
}

export interface AccessPackageAssignmentPolicyQuestionChoiceDisplayValue {
    defaultText: string;
    localizedTexts?: outputs.AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText[];
}

export interface AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText {
    content: string;
    languageCode: string;
}

export interface AccessPackageAssignmentPolicyQuestionText {
    defaultText: string;
    localizedTexts?: outputs.AccessPackageAssignmentPolicyQuestionTextLocalizedText[];
}

export interface AccessPackageAssignmentPolicyQuestionTextLocalizedText {
    content: string;
    languageCode: string;
}

export interface AccessPackageAssignmentPolicyRequestorSettings {
    requestors?: outputs.AccessPackageAssignmentPolicyRequestorSettingsRequestor[];
    requestsAccepted?: boolean;
    scopeType?: string;
}

export interface AccessPackageAssignmentPolicyRequestorSettingsRequestor {
    backup?: boolean;
    objectId?: string;
    subjectType: string;
}

export interface ApplicationApi {
    knownClientApplications?: string[];
    mappedClaimsEnabled?: boolean;
    oauth2PermissionScopes?: outputs.ApplicationApiOauth2PermissionScope[];
    requestedAccessTokenVersion?: number;
}

export interface ApplicationApiOauth2PermissionScope {
    adminConsentDescription?: string;
    adminConsentDisplayName?: string;
    enabled?: boolean;
    id: string;
    type?: string;
    userConsentDescription?: string;
    userConsentDisplayName?: string;
    value?: string;
}

export interface ApplicationAppRole {
    allowedMemberTypes: string[];
    description: string;
    displayName: string;
    enabled?: boolean;
    id: string;
    value?: string;
}

export interface ApplicationFeatureTag {
    customSingleSignOn?: boolean;
    enterprise?: boolean;
    gallery?: boolean;
    hide?: boolean;
}

export interface ApplicationOptionalClaims {
    accessTokens?: outputs.ApplicationOptionalClaimsAccessToken[];
    idTokens?: outputs.ApplicationOptionalClaimsIdToken[];
    saml2Tokens?: outputs.ApplicationOptionalClaimsSaml2Token[];
}

export interface ApplicationOptionalClaimsAccessToken {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface ApplicationOptionalClaimsIdToken {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface ApplicationOptionalClaimsSaml2Token {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface ApplicationPublicClient {
    redirectUris?: string[];
}

export interface ApplicationRequiredResourceAccess {
    resourceAccesses: outputs.ApplicationRequiredResourceAccessResourceAccess[];
    resourceAppId: string;
}

export interface ApplicationRequiredResourceAccessResourceAccess {
    id: string;
    type: string;
}

export interface ApplicationSinglePageApplication {
    redirectUris?: string[];
}

export interface ApplicationWeb {
    homepageUrl?: string;
    implicitGrant?: outputs.ApplicationWebImplicitGrant;
    logoutUrl?: string;
    redirectUris?: string[];
}

export interface ApplicationWebImplicitGrant {
    accessTokenIssuanceEnabled?: boolean;
    idTokenIssuanceEnabled?: boolean;
}

export interface ConditionalAccessPolicyConditions {
    applications: outputs.ConditionalAccessPolicyConditionsApplications;
    clientAppTypes: string[];
    clientApplications?: outputs.ConditionalAccessPolicyConditionsClientApplications;
    devices?: outputs.ConditionalAccessPolicyConditionsDevices;
    locations?: outputs.ConditionalAccessPolicyConditionsLocations;
    platforms?: outputs.ConditionalAccessPolicyConditionsPlatforms;
    signInRiskLevels?: string[];
    userRiskLevels?: string[];
    users: outputs.ConditionalAccessPolicyConditionsUsers;
}

export interface ConditionalAccessPolicyConditionsApplications {
    excludedApplications?: string[];
    includedApplications?: string[];
    includedUserActions?: string[];
}

export interface ConditionalAccessPolicyConditionsClientApplications {
    excludedServicePrincipals?: string[];
    includedServicePrincipals?: string[];
}

export interface ConditionalAccessPolicyConditionsDevices {
    filter?: outputs.ConditionalAccessPolicyConditionsDevicesFilter;
}

export interface ConditionalAccessPolicyConditionsDevicesFilter {
    mode: string;
    rule: string;
}

export interface ConditionalAccessPolicyConditionsLocations {
    excludedLocations?: string[];
    includedLocations: string[];
}

export interface ConditionalAccessPolicyConditionsPlatforms {
    excludedPlatforms?: string[];
    includedPlatforms: string[];
}

export interface ConditionalAccessPolicyConditionsUsers {
    excludedGroups?: string[];
    excludedRoles?: string[];
    excludedUsers?: string[];
    includedGroups?: string[];
    includedRoles?: string[];
    includedUsers?: string[];
}

export interface ConditionalAccessPolicyGrantControls {
    builtInControls: string[];
    customAuthenticationFactors?: string[];
    operator: string;
    termsOfUses?: string[];
}

export interface ConditionalAccessPolicySessionControls {
    applicationEnforcedRestrictionsEnabled?: boolean;
    cloudAppSecurityPolicy?: string;
    disableResilienceDefaults?: boolean;
    persistentBrowserMode?: string;
    signInFrequency?: number;
    signInFrequencyPeriod?: string;
}

export interface CustomDirectoryRolePermission {
    allowedResourceActions: string[];
}

export interface GetApplicationApi {
    knownClientApplications: string[];
    mappedClaimsEnabled: boolean;
    oauth2PermissionScopes: outputs.GetApplicationApiOauth2PermissionScope[];
    requestedAccessTokenVersion: number;
}

export interface GetApplicationApiOauth2PermissionScope {
    adminConsentDescription: string;
    adminConsentDisplayName: string;
    enabled: boolean;
    id: string;
    type: string;
    userConsentDescription: string;
    userConsentDisplayName: string;
    value: string;
}

export interface GetApplicationAppRole {
    allowedMemberTypes: string[];
    description: string;
    displayName: string;
    enabled: boolean;
    id: string;
    value: string;
}

export interface GetApplicationFeatureTag {
    customSingleSignOn?: boolean;
    enterprise?: boolean;
    gallery?: boolean;
    hide?: boolean;
}

export interface GetApplicationOptionalClaim {
    accessTokens?: outputs.GetApplicationOptionalClaimAccessToken[];
    idTokens?: outputs.GetApplicationOptionalClaimIdToken[];
    saml2Tokens?: outputs.GetApplicationOptionalClaimSaml2Token[];
}

export interface GetApplicationOptionalClaimAccessToken {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface GetApplicationOptionalClaimIdToken {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface GetApplicationOptionalClaimSaml2Token {
    additionalProperties?: string[];
    essential?: boolean;
    name: string;
    source?: string;
}

export interface GetApplicationPublicClient {
    redirectUris: string[];
}

export interface GetApplicationRequiredResourceAccess {
    resourceAccesses: outputs.GetApplicationRequiredResourceAccessResourceAccess[];
    resourceAppId: string;
}

export interface GetApplicationRequiredResourceAccessResourceAccess {
    id: string;
    type: string;
}

export interface GetApplicationSinglePageApplication {
    redirectUris: string[];
}

export interface GetApplicationWeb {
    homepageUrl: string;
    implicitGrants: outputs.GetApplicationWebImplicitGrant[];
    logoutUrl: string;
    redirectUris: string[];
}

export interface GetApplicationWebImplicitGrant {
    accessTokenIssuanceEnabled: boolean;
    idTokenIssuanceEnabled: boolean;
}

export interface GetDirectoryRolesRole {
    description: string;
    displayName: string;
    objectId: string;
    templateId: string;
}

export interface GetDomainsDomain {
    adminManaged: boolean;
    authenticationType: string;
    default: boolean;
    domainName: string;
    initial: boolean;
    root: boolean;
    supportedServices: string[];
    verified: boolean;
}

export interface GetGroupDynamicMembership {
    enabled: boolean;
    rule: string;
}

export interface GetServicePrincipalAppRole {
    allowedMemberTypes: string[];
    description: string;
    displayName: string;
    enabled: boolean;
    id: string;
    value: string;
}

export interface GetServicePrincipalFeature {
    customSingleSignOnApp: boolean;
    enterpriseApplication: boolean;
    galleryApplication: boolean;
    visibleToUsers: boolean;
}

export interface GetServicePrincipalFeatureTag {
    customSingleSignOn: boolean;
    enterprise: boolean;
    gallery: boolean;
    hide: boolean;
}

export interface GetServicePrincipalOauth2PermissionScope {
    adminConsentDescription: string;
    adminConsentDisplayName: string;
    enabled: boolean;
    id: string;
    type: string;
    userConsentDescription: string;
    userConsentDisplayName: string;
    value: string;
}

export interface GetServicePrincipalSamlSingleSignOn {
    relayState: string;
}

export interface GetServicePrincipalsServicePrincipal {
    accountEnabled: boolean;
    appRoleAssignmentRequired: boolean;
    applicationId: string;
    applicationTenantId: string;
    displayName: string;
    objectId: string;
    preferredSingleSignOnMode: string;
    samlMetadataUrl: string;
    servicePrincipalNames: string[];
    signInAudience: string;
    tags: string[];
    type: string;
}

export interface GetUsersUser {
    accountEnabled: boolean;
    displayName: string;
    employeeId: string;
    mail: string;
    mailNickname: string;
    objectId: string;
    onpremisesImmutableId: string;
    onpremisesSamAccountName: string;
    onpremisesUserPrincipalName: string;
    usageLocation: string;
    userPrincipalName: string;
}

export interface GroupDynamicMembership {
    enabled: boolean;
    rule: string;
}

export interface InvitationMessage {
    additionalRecipients?: string;
    body?: string;
    language?: string;
}

export interface NamedLocationCountry {
    countriesAndRegions: string[];
    includeUnknownCountriesAndRegions?: boolean;
}

export interface NamedLocationIp {
    ipRanges: string[];
    trusted?: boolean;
}

export interface ServicePrincipalAppRole {
    allowedMemberTypes: string[];
    description: string;
    displayName: string;
    enabled: boolean;
    id: string;
    value: string;
}

export interface ServicePrincipalFeature {
    customSingleSignOnApp?: boolean;
    enterpriseApplication?: boolean;
    galleryApplication?: boolean;
    visibleToUsers?: boolean;
}

export interface ServicePrincipalFeatureTag {
    customSingleSignOn?: boolean;
    enterprise?: boolean;
    gallery?: boolean;
    hide?: boolean;
}

export interface ServicePrincipalOauth2PermissionScope {
    adminConsentDescription: string;
    adminConsentDisplayName: string;
    enabled: boolean;
    id: string;
    type: string;
    userConsentDescription: string;
    userConsentDisplayName: string;
    value: string;
}

export interface ServicePrincipalSamlSingleSignOn {
    relayState?: string;
}

export interface SynchronizationJobSchedule {
    expiration: string;
    interval: string;
    state: string;
}

export interface SynchronizationSecretCredential {
    key: string;
    value: string;
}

