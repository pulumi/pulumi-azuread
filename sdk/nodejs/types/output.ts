// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ApplicationApi {
    /**
     * One or more `oauth2PermissionScope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this Application.
     */
    oauth2PermissionScopes?: outputs.ApplicationApiOauth2PermissionScope[];
}

export interface ApplicationApiOauth2PermissionScope {
    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     */
    adminConsentDescription?: string;
    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     */
    adminConsentDisplayName?: string;
    /**
     * Determines if the app role is enabled: Defaults to `true`.
     */
    enabled?: boolean;
    /**
     * The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the azuread.ApplicationAppRole resource.
     */
    id: string;
    /**
     * The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
     */
    type?: string;
    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     */
    userConsentDescription?: string;
    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     */
    userConsentDisplayName?: string;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     */
    value?: string;
}

export interface ApplicationAppRole {
    /**
     * Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
     */
    allowedMemberTypes: string[];
    /**
     * Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
     */
    description: string;
    /**
     * Display name for the app role that appears during app role assignment and in consent experiences.
     */
    displayName: string;
    /**
     * Determines if the app role is enabled: Defaults to `true`.
     */
    enabled?: boolean;
    /**
     * The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the azuread.ApplicationAppRole resource.
     */
    id: string;
    /**
     * Determines if the permission is enabled: defaults to `true`.
     *
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    isEnabled?: boolean;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     */
    value: string;
}

export interface ApplicationOauth2Permission {
    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     */
    adminConsentDescription: string;
    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     */
    adminConsentDisplayName: string;
    /**
     * The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the azuread.ApplicationAppRole resource.
     */
    id: string;
    /**
     * Determines if the permission is enabled: defaults to `true`.
     */
    isEnabled: boolean;
    /**
     * The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
     */
    type: string;
    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     */
    userConsentDescription: string;
    /**
     * Display name for the delegated permission that appears in the end user consent experience.
     */
    userConsentDisplayName: string;
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     */
    value: string;
}

export interface ApplicationOptionalClaims {
    accessTokens?: outputs.ApplicationOptionalClaimsAccessToken[];
    idTokens?: outputs.ApplicationOptionalClaimsIdToken[];
}

export interface ApplicationOptionalClaimsAccessToken {
    /**
     * List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
     */
    additionalProperties?: string[];
    /**
     * Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
     */
    essential?: boolean;
    /**
     * The name of the optional claim.
     */
    name: string;
    /**
     * The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
     */
    source?: string;
}

export interface ApplicationOptionalClaimsIdToken {
    /**
     * List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
     */
    additionalProperties?: string[];
    /**
     * Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
     */
    essential?: boolean;
    /**
     * The name of the optional claim.
     */
    name: string;
    /**
     * The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
     */
    source?: string;
}

export interface ApplicationRequiredResourceAccess {
    /**
     * A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
     */
    resourceAccesses: outputs.ApplicationRequiredResourceAccessResourceAccess[];
    /**
     * The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.
     */
    resourceAppId: string;
}

export interface ApplicationRequiredResourceAccessResourceAccess {
    /**
     * The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
     */
    id: string;
    /**
     * Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
     */
    type: string;
}

export interface ApplicationWeb {
    /**
     * Home page or landing page of the application.
     */
    homepageUrl?: string;
    /**
     * An `implicitGrant` block as documented above.
     */
    implicitGrant?: outputs.ApplicationWebImplicitGrant;
    /**
     * The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     */
    logoutUrl?: string;
    /**
     * A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
     */
    redirectUris?: string[];
}

export interface ApplicationWebImplicitGrant {
    /**
     * Whether this web application can request an access token using OAuth 2.0 implicit flow.
     */
    accessTokenIssuanceEnabled?: boolean;
}

export interface GetApplicationApi {
    oauth2PermissionScopes: outputs.GetApplicationApiOauth2PermissionScope[];
}

export interface GetApplicationApiOauth2PermissionScope {
    /**
     * The description of the admin consent
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent
     */
    adminConsentDisplayName: string;
    /**
     * (Optional) Determines if the permission scope is enabled.
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
     */
    id: string;
    /**
     * Is this permission enabled?
     *
     * @deprecated [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
     */
    isEnabled: boolean;
    /**
     * Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
     */
    type: string;
    /**
     * The description of the user consent
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetApplicationAppRole {
    /**
     * Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
     */
    allowedMemberTypes: string[];
    /**
     * Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
     */
    description: string;
    /**
     * Specifies the display name of the application.
     */
    displayName: string;
    /**
     * (Optional) Determines if the permission scope is enabled.
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
     */
    id: string;
    /**
     * Is this permission enabled?
     *
     * @deprecated [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
     */
    isEnabled: boolean;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetApplicationOauth2Permission {
    /**
     * The description of the admin consent
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent
     */
    adminConsentDisplayName: string;
    /**
     * (Optional) Determines if the permission scope is enabled.
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
     */
    id: string;
    /**
     * Is this permission enabled?
     */
    isEnabled: boolean;
    /**
     * Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
     */
    type: string;
    /**
     * The description of the user consent
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetApplicationOptionalClaims {
    accessTokens?: outputs.GetApplicationOptionalClaimsAccessToken[];
    idTokens?: outputs.GetApplicationOptionalClaimsIdToken[];
}

export interface GetApplicationOptionalClaimsAccessToken {
    /**
     * List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
     */
    additionalProperties?: string[];
    /**
     * Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
     */
    essential?: boolean;
    /**
     * The name of the optional claim.
     */
    name: string;
    /**
     * The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
     */
    source?: string;
}

export interface GetApplicationOptionalClaimsIdToken {
    /**
     * List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
     */
    additionalProperties?: string[];
    /**
     * Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
     */
    essential?: boolean;
    /**
     * The name of the optional claim.
     */
    name: string;
    /**
     * The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
     */
    source?: string;
}

export interface GetApplicationRequiredResourceAccess {
    /**
     * A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
     */
    resourceAccesses: outputs.GetApplicationRequiredResourceAccessResourceAccess[];
    /**
     * The unique identifier for the resource that the application requires access to. This is the Application ID of the target application.
     */
    resourceAppId: string;
}

export interface GetApplicationRequiredResourceAccessResourceAccess {
    /**
     * The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
     */
    id: string;
    /**
     * Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
     */
    type: string;
}

export interface GetApplicationWeb {
    /**
     * Home page or landing page of the application.
     */
    homepageUrl: string;
    /**
     * An `implicitGrant` block as documented above.
     */
    implicitGrants: outputs.GetApplicationWebImplicitGrant[];
    /**
     * The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     */
    logoutUrl: string;
    /**
     * A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
     */
    redirectUris: string[];
}

export interface GetApplicationWebImplicitGrant {
    /**
     * Whether this web application can request an access token using OAuth 2.0 implicit flow.
     */
    accessTokenIssuanceEnabled: boolean;
}

export interface GetDomainsDomain {
    /**
     * The authentication type of the domain (Managed or Federated).
     */
    authenticationType: string;
    /**
     * The name of the domain.
     */
    domainName: string;
    /**
     * `True` if this is the default domain that is used for user creation.
     */
    isDefault: boolean;
    /**
     * `True` if this is the initial domain created by Azure Active Directory.
     */
    isInitial: boolean;
    /**
     * `True` if the domain has completed domain ownership verification.
     */
    isVerified: boolean;
}

export interface GetServicePrincipalAppRole {
    /**
     * Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
     */
    allowedMemberTypes: string[];
    /**
     * Permission help text that appears in the admin app assignment and consent experiences.
     */
    description: string;
    /**
     * The Display Name of the Azure AD Application associated with this Service Principal.
     */
    displayName: string;
    /**
     * Is this permission enabled?
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission`
     */
    id: string;
    /**
     * Is this permission enabled?
     *
     * @deprecated [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
     */
    isEnabled: boolean;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetServicePrincipalOauth2Permission {
    /**
     * The description of the admin consent
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent
     */
    adminConsentDisplayName: string;
    /**
     * The unique identifier for one of the `OAuth2Permission`
     */
    id: string;
    /**
     * Is this permission enabled?
     */
    isEnabled: boolean;
    /**
     * The type of the permission
     */
    type: string;
    /**
     * The description of the user consent
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetServicePrincipalOauth2PermissionScope {
    /**
     * The description of the admin consent
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent
     */
    adminConsentDisplayName: string;
    /**
     * Is this permission enabled?
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission`
     */
    id: string;
    /**
     * The type of the permission
     */
    type: string;
    /**
     * The description of the user consent
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission
     */
    value: string;
}

export interface GetUsersUser {
    /**
     * `True` if the account is enabled; otherwise `False`.
     */
    accountEnabled: boolean;
    /**
     * The Display Name of the Azure AD User.
     */
    displayName: string;
    /**
     * (**Deprecated**) The value used to associate an on-premises Active Directory user account with their Azure AD user object. Deprecated in favour of `onpremisesImmutableId`.
     *
     * @deprecated This property has been renamed to `onpremises_immutable_id` and will be removed in version 2.0 of the AzureAD provider
     */
    immutableId: string;
    /**
     * The primary email address of the Azure AD User.
     */
    mail: string;
    /**
     * The email alias of the Azure AD User.
     */
    mailNickname: string;
    /**
     * The Object ID of the Azure AD User.
     */
    objectId: string;
    /**
     * The value used to associate an on-premises Active Directory user account with their Azure AD user object.
     */
    onpremisesImmutableId: string;
    /**
     * The on-premise SAM account name of the Azure AD User.
     */
    onpremisesSamAccountName: string;
    /**
     * The on-premise user principal name of the Azure AD User.
     */
    onpremisesUserPrincipalName: string;
    /**
     * The usage location of the Azure AD User.
     */
    usageLocation: string;
    /**
     * The User Principal Name of the Azure AD User.
     */
    userPrincipalName: string;
}

export interface ServicePrincipalAppRole {
    /**
     * Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
     */
    allowedMemberTypes: string[];
    /**
     * Permission help text that appears in the admin app assignment and consent experiences.
     */
    description: string;
    /**
     * Display name for the permission that appears in the admin consent and app assignment experiences.
     */
    displayName: string;
    /**
     * Is this permission enabled?
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission`.
     */
    id: string;
    /**
     * Is this permission enabled?
     *
     * @deprecated [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
     */
    isEnabled: boolean;
    /**
     * The name of this permission.
     */
    value: string;
}

export interface ServicePrincipalOauth2Permission {
    /**
     * The description of the admin consent.
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent.
     */
    adminConsentDisplayName: string;
    /**
     * The unique identifier for one of the `OAuth2Permission`.
     */
    id: string;
    /**
     * Is this permission enabled?
     */
    isEnabled: boolean;
    /**
     * The type of the permission.
     */
    type: string;
    /**
     * The description of the user consent.
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent.
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission.
     */
    value: string;
}

export interface ServicePrincipalOauth2PermissionScope {
    /**
     * The description of the admin consent.
     */
    adminConsentDescription: string;
    /**
     * The display name of the admin consent.
     */
    adminConsentDisplayName: string;
    /**
     * Is this permission enabled?
     */
    enabled: boolean;
    /**
     * The unique identifier for one of the `OAuth2Permission`.
     */
    id: string;
    /**
     * The type of the permission.
     */
    type: string;
    /**
     * The description of the user consent.
     */
    userConsentDescription: string;
    /**
     * The display name of the user consent.
     */
    userConsentDisplayName: string;
    /**
     * The name of this permission.
     */
    value: string;
}
