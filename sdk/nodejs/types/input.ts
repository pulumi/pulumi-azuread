// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessPackageAssignmentPolicyApprovalSettings {
    approvalRequired?: pulumi.Input<boolean>;
    approvalRequiredForExtension?: pulumi.Input<boolean>;
    approvalStages?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStage>[]>;
    requestorJustificationRequired?: pulumi.Input<boolean>;
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStage {
    alternativeApprovalEnabled?: pulumi.Input<boolean>;
    alternativeApprovers?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover>[]>;
    approvalTimeoutInDays: pulumi.Input<number>;
    approverJustificationRequired?: pulumi.Input<boolean>;
    enableAlternativeApprovalInDays?: pulumi.Input<number>;
    primaryApprovers?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover>[]>;
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApprover {
    backup?: pulumi.Input<boolean>;
    objectId?: pulumi.Input<string>;
    subjectType: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApprover {
    backup?: pulumi.Input<boolean>;
    objectId?: pulumi.Input<string>;
    subjectType: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyAssignmentReviewSettings {
    accessRecommendationEnabled?: pulumi.Input<boolean>;
    accessReviewTimeoutBehavior?: pulumi.Input<string>;
    approverJustificationRequired?: pulumi.Input<boolean>;
    durationInDays?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    reviewFrequency?: pulumi.Input<string>;
    reviewType?: pulumi.Input<string>;
    reviewers?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer>[]>;
    startingOn?: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewer {
    backup?: pulumi.Input<boolean>;
    objectId?: pulumi.Input<string>;
    subjectType: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyQuestion {
    choices?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyQuestionChoice>[]>;
    required?: pulumi.Input<boolean>;
    sequence?: pulumi.Input<number>;
    text: pulumi.Input<inputs.AccessPackageAssignmentPolicyQuestionText>;
}

export interface AccessPackageAssignmentPolicyQuestionChoice {
    actualValue: pulumi.Input<string>;
    displayValue: pulumi.Input<inputs.AccessPackageAssignmentPolicyQuestionChoiceDisplayValue>;
}

export interface AccessPackageAssignmentPolicyQuestionChoiceDisplayValue {
    defaultText: pulumi.Input<string>;
    localizedTexts?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText>[]>;
}

export interface AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedText {
    content: pulumi.Input<string>;
    languageCode: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyQuestionText {
    defaultText: pulumi.Input<string>;
    localizedTexts?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyQuestionTextLocalizedText>[]>;
}

export interface AccessPackageAssignmentPolicyQuestionTextLocalizedText {
    content: pulumi.Input<string>;
    languageCode: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyRequestorSettings {
    requestors?: pulumi.Input<pulumi.Input<inputs.AccessPackageAssignmentPolicyRequestorSettingsRequestor>[]>;
    requestsAccepted?: pulumi.Input<boolean>;
    scopeType?: pulumi.Input<string>;
}

export interface AccessPackageAssignmentPolicyRequestorSettingsRequestor {
    backup?: pulumi.Input<boolean>;
    objectId?: pulumi.Input<string>;
    subjectType: pulumi.Input<string>;
}

export interface ApplicationApi {
    knownClientApplications?: pulumi.Input<pulumi.Input<string>[]>;
    mappedClaimsEnabled?: pulumi.Input<boolean>;
    oauth2PermissionScopes?: pulumi.Input<pulumi.Input<inputs.ApplicationApiOauth2PermissionScope>[]>;
    requestedAccessTokenVersion?: pulumi.Input<number>;
}

export interface ApplicationApiOauth2PermissionScope {
    adminConsentDescription?: pulumi.Input<string>;
    adminConsentDisplayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userConsentDescription?: pulumi.Input<string>;
    userConsentDisplayName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationAppRole {
    allowedMemberTypes: pulumi.Input<pulumi.Input<string>[]>;
    description: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ApplicationFeatureTag {
    customSingleSignOn?: pulumi.Input<boolean>;
    enterprise?: pulumi.Input<boolean>;
    gallery?: pulumi.Input<boolean>;
    hide?: pulumi.Input<boolean>;
}

export interface ApplicationOptionalClaims {
    accessTokens?: pulumi.Input<pulumi.Input<inputs.ApplicationOptionalClaimsAccessToken>[]>;
    idTokens?: pulumi.Input<pulumi.Input<inputs.ApplicationOptionalClaimsIdToken>[]>;
    saml2Tokens?: pulumi.Input<pulumi.Input<inputs.ApplicationOptionalClaimsSaml2Token>[]>;
}

export interface ApplicationOptionalClaimsAccessToken {
    additionalProperties?: pulumi.Input<pulumi.Input<string>[]>;
    essential?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface ApplicationOptionalClaimsIdToken {
    additionalProperties?: pulumi.Input<pulumi.Input<string>[]>;
    essential?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface ApplicationOptionalClaimsSaml2Token {
    additionalProperties?: pulumi.Input<pulumi.Input<string>[]>;
    essential?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}

export interface ApplicationPublicClient {
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationRequiredResourceAccess {
    resourceAccesses: pulumi.Input<pulumi.Input<inputs.ApplicationRequiredResourceAccessResourceAccess>[]>;
    resourceAppId: pulumi.Input<string>;
}

export interface ApplicationRequiredResourceAccessResourceAccess {
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationSinglePageApplication {
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationWeb {
    homepageUrl?: pulumi.Input<string>;
    implicitGrant?: pulumi.Input<inputs.ApplicationWebImplicitGrant>;
    logoutUrl?: pulumi.Input<string>;
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationWebImplicitGrant {
    accessTokenIssuanceEnabled?: pulumi.Input<boolean>;
    idTokenIssuanceEnabled?: pulumi.Input<boolean>;
}

export interface ConditionalAccessPolicyConditions {
    applications: pulumi.Input<inputs.ConditionalAccessPolicyConditionsApplications>;
    clientAppTypes: pulumi.Input<pulumi.Input<string>[]>;
    clientApplications?: pulumi.Input<inputs.ConditionalAccessPolicyConditionsClientApplications>;
    devices?: pulumi.Input<inputs.ConditionalAccessPolicyConditionsDevices>;
    locations?: pulumi.Input<inputs.ConditionalAccessPolicyConditionsLocations>;
    platforms?: pulumi.Input<inputs.ConditionalAccessPolicyConditionsPlatforms>;
    signInRiskLevels?: pulumi.Input<pulumi.Input<string>[]>;
    userRiskLevels?: pulumi.Input<pulumi.Input<string>[]>;
    users: pulumi.Input<inputs.ConditionalAccessPolicyConditionsUsers>;
}

export interface ConditionalAccessPolicyConditionsApplications {
    excludedApplications?: pulumi.Input<pulumi.Input<string>[]>;
    includedApplications?: pulumi.Input<pulumi.Input<string>[]>;
    includedUserActions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicyConditionsClientApplications {
    excludedServicePrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    includedServicePrincipals?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicyConditionsDevices {
    filter?: pulumi.Input<inputs.ConditionalAccessPolicyConditionsDevicesFilter>;
}

export interface ConditionalAccessPolicyConditionsDevicesFilter {
    mode: pulumi.Input<string>;
    rule: pulumi.Input<string>;
}

export interface ConditionalAccessPolicyConditionsLocations {
    excludedLocations?: pulumi.Input<pulumi.Input<string>[]>;
    includedLocations: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicyConditionsPlatforms {
    excludedPlatforms?: pulumi.Input<pulumi.Input<string>[]>;
    includedPlatforms: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicyConditionsUsers {
    excludedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    excludedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    excludedUsers?: pulumi.Input<pulumi.Input<string>[]>;
    includedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    includedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    includedUsers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicyGrantControls {
    builtInControls: pulumi.Input<pulumi.Input<string>[]>;
    customAuthenticationFactors?: pulumi.Input<pulumi.Input<string>[]>;
    operator: pulumi.Input<string>;
    termsOfUses?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConditionalAccessPolicySessionControls {
    applicationEnforcedRestrictionsEnabled?: pulumi.Input<boolean>;
    cloudAppSecurityPolicy?: pulumi.Input<string>;
    disableResilienceDefaults?: pulumi.Input<boolean>;
    persistentBrowserMode?: pulumi.Input<string>;
    signInFrequency?: pulumi.Input<number>;
    signInFrequencyPeriod?: pulumi.Input<string>;
}

export interface CustomDirectoryRolePermission {
    allowedResourceActions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GroupDynamicMembership {
    enabled: pulumi.Input<boolean>;
    rule: pulumi.Input<string>;
}

export interface InvitationMessage {
    additionalRecipients?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
}

export interface NamedLocationCountry {
    countriesAndRegions: pulumi.Input<pulumi.Input<string>[]>;
    includeUnknownCountriesAndRegions?: pulumi.Input<boolean>;
}

export interface NamedLocationIp {
    ipRanges: pulumi.Input<pulumi.Input<string>[]>;
    trusted?: pulumi.Input<boolean>;
}

export interface ServicePrincipalAppRole {
    allowedMemberTypes?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServicePrincipalFeature {
    customSingleSignOnApp?: pulumi.Input<boolean>;
    enterpriseApplication?: pulumi.Input<boolean>;
    galleryApplication?: pulumi.Input<boolean>;
    visibleToUsers?: pulumi.Input<boolean>;
}

export interface ServicePrincipalFeatureTag {
    customSingleSignOn?: pulumi.Input<boolean>;
    enterprise?: pulumi.Input<boolean>;
    gallery?: pulumi.Input<boolean>;
    hide?: pulumi.Input<boolean>;
}

export interface ServicePrincipalOauth2PermissionScope {
    adminConsentDescription?: pulumi.Input<string>;
    adminConsentDisplayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userConsentDescription?: pulumi.Input<string>;
    userConsentDisplayName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServicePrincipalSamlSingleSignOn {
    relayState?: pulumi.Input<string>;
}

export interface SynchronizationJobSchedule {
    expiration?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SynchronizationSecretCredential {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
