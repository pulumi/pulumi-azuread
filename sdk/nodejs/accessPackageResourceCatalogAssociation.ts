// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages the resources added to access package catalogs within Identity Governance in Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.
 *
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner` or `Global Administrator`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.Group("example", {
 *     displayName: "example-group",
 *     securityEnabled: true,
 * });
 * const exampleAccessPackageCatalog = new azuread.AccessPackageCatalog("example", {
 *     displayName: "example-catalog",
 *     description: "Example catalog",
 * });
 * const exampleAccessPackageResourceCatalogAssociation = new azuread.AccessPackageResourceCatalogAssociation("example", {
 *     catalogId: exampleCatalog.id,
 *     resourceOriginId: exampleGroup.objectId,
 *     resourceOriginSystem: "AadGroup",
 * });
 * ```
 *
 * ## Import
 *
 * The resource and catalog association can be imported using the catalog ID and the resource origin ID, e.g.
 *
 * ```sh
 * $ pulumi import azuread:index/accessPackageResourceCatalogAssociation:AccessPackageResourceCatalogAssociation example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111
 * ```
 *
 * -> This ID format is unique to Terraform and is composed of the Catalog ID and the Resource Origin ID in the format `{CatalogID}/{ResourceOriginID}`.
 */
export class AccessPackageResourceCatalogAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AccessPackageResourceCatalogAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPackageResourceCatalogAssociationState, opts?: pulumi.CustomResourceOptions): AccessPackageResourceCatalogAssociation {
        return new AccessPackageResourceCatalogAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/accessPackageResourceCatalogAssociation:AccessPackageResourceCatalogAssociation';

    /**
     * Returns true if the given object is an instance of AccessPackageResourceCatalogAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPackageResourceCatalogAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPackageResourceCatalogAssociation.__pulumiType;
    }

    /**
     * The unique ID of the access package catalog. Changing this forces a new resource to be created.
     */
    declare public readonly catalogId: pulumi.Output<string>;
    /**
     * The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.
     */
    declare public readonly resourceOriginId: pulumi.Output<string>;
    /**
     * The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.
     */
    declare public readonly resourceOriginSystem: pulumi.Output<string>;

    /**
     * Create a AccessPackageResourceCatalogAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessPackageResourceCatalogAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessPackageResourceCatalogAssociationArgs | AccessPackageResourceCatalogAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessPackageResourceCatalogAssociationState | undefined;
            resourceInputs["catalogId"] = state?.catalogId;
            resourceInputs["resourceOriginId"] = state?.resourceOriginId;
            resourceInputs["resourceOriginSystem"] = state?.resourceOriginSystem;
        } else {
            const args = argsOrState as AccessPackageResourceCatalogAssociationArgs | undefined;
            if (args?.catalogId === undefined && !opts.urn) {
                throw new Error("Missing required property 'catalogId'");
            }
            if (args?.resourceOriginId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceOriginId'");
            }
            if (args?.resourceOriginSystem === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceOriginSystem'");
            }
            resourceInputs["catalogId"] = args?.catalogId;
            resourceInputs["resourceOriginId"] = args?.resourceOriginId;
            resourceInputs["resourceOriginSystem"] = args?.resourceOriginSystem;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessPackageResourceCatalogAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPackageResourceCatalogAssociation resources.
 */
export interface AccessPackageResourceCatalogAssociationState {
    /**
     * The unique ID of the access package catalog. Changing this forces a new resource to be created.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.
     */
    resourceOriginId?: pulumi.Input<string>;
    /**
     * The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.
     */
    resourceOriginSystem?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPackageResourceCatalogAssociation resource.
 */
export interface AccessPackageResourceCatalogAssociationArgs {
    /**
     * The unique ID of the access package catalog. Changing this forces a new resource to be created.
     */
    catalogId: pulumi.Input<string>;
    /**
     * The unique identifier of the resource in the origin system. In the case of an Azure AD group, this is the identifier of the group. Changing this forces a new resource to be created.
     */
    resourceOriginId: pulumi.Input<string>;
    /**
     * The type of the resource in the origin system, such as `SharePointOnline`, `AadApplication` or `AadGroup`. Changing this forces a new resource to be created.
     */
    resourceOriginSystem: pulumi.Input<string>;
}
