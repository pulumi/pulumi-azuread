// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServicePrincipal(args?: GetServicePrincipalArgs, opts?: pulumi.InvokeOptions): Promise<GetServicePrincipalResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azuread:index/getServicePrincipal:getServicePrincipal", {
        "applicationId": args.applicationId,
        "displayName": args.displayName,
        "objectId": args.objectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServicePrincipal.
 */
export interface GetServicePrincipalArgs {
    applicationId?: string;
    displayName?: string;
    objectId?: string;
}

/**
 * A collection of values returned by getServicePrincipal.
 */
export interface GetServicePrincipalResult {
    readonly accountEnabled: boolean;
    readonly alternativeNames: string[];
    readonly appRoleAssignmentRequired: boolean;
    readonly appRoleIds: {[key: string]: string};
    readonly appRoles: outputs.GetServicePrincipalAppRole[];
    readonly applicationId: string;
    readonly applicationTenantId: string;
    readonly description: string;
    readonly displayName: string;
    readonly featureTags: outputs.GetServicePrincipalFeatureTag[];
    /**
     * @deprecated This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     */
    readonly features: outputs.GetServicePrincipalFeature[];
    readonly homepageUrl: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly loginUrl: string;
    readonly logoutUrl: string;
    readonly notes: string;
    readonly notificationEmailAddresses: string[];
    readonly oauth2PermissionScopeIds: {[key: string]: string};
    readonly oauth2PermissionScopes: outputs.GetServicePrincipalOauth2PermissionScope[];
    readonly objectId: string;
    readonly preferredSingleSignOnMode: string;
    readonly redirectUris: string[];
    readonly samlMetadataUrl: string;
    readonly samlSingleSignOns: outputs.GetServicePrincipalSamlSingleSignOn[];
    readonly servicePrincipalNames: string[];
    readonly signInAudience: string;
    readonly tags: string[];
    readonly type: string;
}
export function getServicePrincipalOutput(args?: GetServicePrincipalOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServicePrincipalResult> {
    return pulumi.output(args).apply((a: any) => getServicePrincipal(a, opts))
}

/**
 * A collection of arguments for invoking getServicePrincipal.
 */
export interface GetServicePrincipalOutputArgs {
    applicationId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
}
