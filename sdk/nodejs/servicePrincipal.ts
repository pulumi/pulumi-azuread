// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a Service Principal associated with an Application within Azure Active Directory.
 *
 * > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API. Please see The Granting a Service Principal permission to manage AAD for the required steps.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleApplication = new azuread.Application("exampleApplication", {
 *     homepage: "http://homepage",
 *     identifierUris: ["http://uri"],
 *     replyUrls: ["http://replyurl"],
 *     availableToOtherTenants: false,
 *     oauth2AllowImplicitFlow: true,
 * });
 * const exampleServicePrincipal = new azuread.ServicePrincipal("exampleServicePrincipal", {
 *     applicationId: exampleApplication.applicationId,
 *     appRoleAssignmentRequired: false,
 *     tags: [
 *         "example",
 *         "tags",
 *         "here",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Azure Active Directory Service Principals can be imported using the `object id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/servicePrincipal:ServicePrincipal test 00000000-0000-0000-0000-000000000000
 * ```
 */
export class ServicePrincipal extends pulumi.CustomResource {
    /**
     * Get an existing ServicePrincipal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePrincipalState, opts?: pulumi.CustomResourceOptions): ServicePrincipal {
        return new ServicePrincipal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/servicePrincipal:ServicePrincipal';

    /**
     * Returns true if the given object is an instance of ServicePrincipal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePrincipal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePrincipal.__pulumiType;
    }

    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    public readonly appRoleAssignmentRequired!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly appRoles!: pulumi.Output<outputs.ServicePrincipalAppRole[]>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The Display Name of the Application associated with this Service Principal.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
     */
    public readonly oauth2Permissions!: pulumi.Output<outputs.ServicePrincipalOauth2Permission[]>;
    /**
     * The Object ID of the Service Principal.
     */
    public /*out*/ readonly objectId!: pulumi.Output<string>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ServicePrincipal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePrincipalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePrincipalArgs | ServicePrincipalState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePrincipalState | undefined;
            inputs["appRoleAssignmentRequired"] = state ? state.appRoleAssignmentRequired : undefined;
            inputs["appRoles"] = state ? state.appRoles : undefined;
            inputs["applicationId"] = state ? state.applicationId : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["oauth2Permissions"] = state ? state.oauth2Permissions : undefined;
            inputs["objectId"] = state ? state.objectId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ServicePrincipalArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            inputs["appRoleAssignmentRequired"] = args ? args.appRoleAssignmentRequired : undefined;
            inputs["applicationId"] = args ? args.applicationId : undefined;
            inputs["oauth2Permissions"] = args ? args.oauth2Permissions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["appRoles"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["objectId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServicePrincipal.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServicePrincipal resources.
 */
export interface ServicePrincipalState {
    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    readonly appRoleAssignmentRequired?: pulumi.Input<boolean>;
    readonly appRoles?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalAppRole>[]>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    readonly applicationId?: pulumi.Input<string>;
    /**
     * The Display Name of the Application associated with this Service Principal.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
     */
    readonly oauth2Permissions?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2Permission>[]>;
    /**
     * The Object ID of the Service Principal.
     */
    readonly objectId?: pulumi.Input<string>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServicePrincipal resource.
 */
export interface ServicePrincipalArgs {
    /**
     * Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
     */
    readonly appRoleAssignmentRequired?: pulumi.Input<boolean>;
    /**
     * The App ID of the Application for which to create a Service Principal.
     */
    readonly applicationId: pulumi.Input<string>;
    /**
     * A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
     */
    readonly oauth2Permissions?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2Permission>[]>;
    /**
     * A list of tags to apply to the Service Principal.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
