// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicePrincipal extends pulumi.CustomResource {
    /**
     * Get an existing ServicePrincipal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePrincipalState, opts?: pulumi.CustomResourceOptions): ServicePrincipal {
        return new ServicePrincipal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/servicePrincipal:ServicePrincipal';

    /**
     * Returns true if the given object is an instance of ServicePrincipal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePrincipal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePrincipal.__pulumiType;
    }

    /**
     * Whether or not the service principal account is enabled
     */
    public readonly accountEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
     * resource ids for managed identities
     */
    public readonly alternativeNames!: pulumi.Output<string[] | undefined>;
    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
     * access token to the application
     */
    public readonly appRoleAssignmentRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Mapping of app role names to UUIDs
     */
    public /*out*/ readonly appRoleIds!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly appRoles!: pulumi.Output<outputs.ServicePrincipalAppRole[]>;
    /**
     * The application ID (client ID) of the application for which to create a service principal
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The tenant ID where the associated application is registered
     */
    public /*out*/ readonly applicationTenantId!: pulumi.Output<string>;
    /**
     * Description of the service principal provided for internal end-users
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the application associated with this service principal
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Block of features to configure for this service principal using tags
     */
    public readonly featureTags!: pulumi.Output<outputs.ServicePrincipalFeatureTag[]>;
    /**
     * Block of features to configure for this service principal using tags
     *
     * @deprecated This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     */
    public readonly features!: pulumi.Output<outputs.ServicePrincipalFeature[]>;
    /**
     * Home page or landing page of the application
     */
    public /*out*/ readonly homepageUrl!: pulumi.Output<string>;
    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
     * application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
     * applications configured with SAML-based single sign-on
     */
    public readonly loginUrl!: pulumi.Output<string | undefined>;
    /**
     * The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
     * SAML logout protocols
     */
    public /*out*/ readonly logoutUrl!: pulumi.Output<string>;
    /**
     * Free text field to capture information about the service principal, typically used for operational purposes
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
     * This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
     */
    public readonly notificationEmailAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Mapping of OAuth2.0 permission scope names to UUIDs
     */
    public /*out*/ readonly oauth2PermissionScopeIds!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly oauth2PermissionScopes!: pulumi.Output<outputs.ServicePrincipalOauth2PermissionScope[]>;
    /**
     * The object ID of the service principal
     */
    public /*out*/ readonly objectId!: pulumi.Output<string>;
    /**
     * A list of object IDs of principals that will be granted ownership of the service principal
     */
    public readonly owners!: pulumi.Output<string[] | undefined>;
    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
     * application from Microsoft 365 or the Azure AD My Apps
     */
    public readonly preferredSingleSignOnMode!: pulumi.Output<string | undefined>;
    /**
     * The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
     * authorization codes and access tokens are sent for the associated application
     */
    public /*out*/ readonly redirectUris!: pulumi.Output<string[]>;
    /**
     * The URL where the service exposes SAML metadata for federation
     */
    public /*out*/ readonly samlMetadataUrl!: pulumi.Output<string>;
    /**
     * Settings related to SAML single sign-on
     */
    public readonly samlSingleSignOn!: pulumi.Output<outputs.ServicePrincipalSamlSingleSignOn | undefined>;
    /**
     * A list of identifier URI(s), copied over from the associated application
     */
    public /*out*/ readonly servicePrincipalNames!: pulumi.Output<string[]>;
    /**
     * The Microsoft account types that are supported for the associated application
     */
    public /*out*/ readonly signInAudience!: pulumi.Output<string>;
    /**
     * A set of tags to apply to the service principal
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Identifies whether the service principal represents an application or a managed identity
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * When true, the resource will return an existing service principal instead of failing with an error
     */
    public readonly useExisting!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServicePrincipal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePrincipalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePrincipalArgs | ServicePrincipalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePrincipalState | undefined;
            resourceInputs["accountEnabled"] = state ? state.accountEnabled : undefined;
            resourceInputs["alternativeNames"] = state ? state.alternativeNames : undefined;
            resourceInputs["appRoleAssignmentRequired"] = state ? state.appRoleAssignmentRequired : undefined;
            resourceInputs["appRoleIds"] = state ? state.appRoleIds : undefined;
            resourceInputs["appRoles"] = state ? state.appRoles : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationTenantId"] = state ? state.applicationTenantId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["featureTags"] = state ? state.featureTags : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["homepageUrl"] = state ? state.homepageUrl : undefined;
            resourceInputs["loginUrl"] = state ? state.loginUrl : undefined;
            resourceInputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["notificationEmailAddresses"] = state ? state.notificationEmailAddresses : undefined;
            resourceInputs["oauth2PermissionScopeIds"] = state ? state.oauth2PermissionScopeIds : undefined;
            resourceInputs["oauth2PermissionScopes"] = state ? state.oauth2PermissionScopes : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["preferredSingleSignOnMode"] = state ? state.preferredSingleSignOnMode : undefined;
            resourceInputs["redirectUris"] = state ? state.redirectUris : undefined;
            resourceInputs["samlMetadataUrl"] = state ? state.samlMetadataUrl : undefined;
            resourceInputs["samlSingleSignOn"] = state ? state.samlSingleSignOn : undefined;
            resourceInputs["servicePrincipalNames"] = state ? state.servicePrincipalNames : undefined;
            resourceInputs["signInAudience"] = state ? state.signInAudience : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useExisting"] = state ? state.useExisting : undefined;
        } else {
            const args = argsOrState as ServicePrincipalArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            resourceInputs["accountEnabled"] = args ? args.accountEnabled : undefined;
            resourceInputs["alternativeNames"] = args ? args.alternativeNames : undefined;
            resourceInputs["appRoleAssignmentRequired"] = args ? args.appRoleAssignmentRequired : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureTags"] = args ? args.featureTags : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["loginUrl"] = args ? args.loginUrl : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["notificationEmailAddresses"] = args ? args.notificationEmailAddresses : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["preferredSingleSignOnMode"] = args ? args.preferredSingleSignOnMode : undefined;
            resourceInputs["samlSingleSignOn"] = args ? args.samlSingleSignOn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useExisting"] = args ? args.useExisting : undefined;
            resourceInputs["appRoleIds"] = undefined /*out*/;
            resourceInputs["appRoles"] = undefined /*out*/;
            resourceInputs["applicationTenantId"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["homepageUrl"] = undefined /*out*/;
            resourceInputs["logoutUrl"] = undefined /*out*/;
            resourceInputs["oauth2PermissionScopeIds"] = undefined /*out*/;
            resourceInputs["oauth2PermissionScopes"] = undefined /*out*/;
            resourceInputs["objectId"] = undefined /*out*/;
            resourceInputs["redirectUris"] = undefined /*out*/;
            resourceInputs["samlMetadataUrl"] = undefined /*out*/;
            resourceInputs["servicePrincipalNames"] = undefined /*out*/;
            resourceInputs["signInAudience"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePrincipal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServicePrincipal resources.
 */
export interface ServicePrincipalState {
    /**
     * Whether or not the service principal account is enabled
     */
    accountEnabled?: pulumi.Input<boolean>;
    /**
     * A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
     * resource ids for managed identities
     */
    alternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
     * access token to the application
     */
    appRoleAssignmentRequired?: pulumi.Input<boolean>;
    /**
     * Mapping of app role names to UUIDs
     */
    appRoleIds?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    appRoles?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalAppRole>[]>;
    /**
     * The application ID (client ID) of the application for which to create a service principal
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The tenant ID where the associated application is registered
     */
    applicationTenantId?: pulumi.Input<string>;
    /**
     * Description of the service principal provided for internal end-users
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the application associated with this service principal
     */
    displayName?: pulumi.Input<string>;
    /**
     * Block of features to configure for this service principal using tags
     */
    featureTags?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalFeatureTag>[]>;
    /**
     * Block of features to configure for this service principal using tags
     *
     * @deprecated This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     */
    features?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalFeature>[]>;
    /**
     * Home page or landing page of the application
     */
    homepageUrl?: pulumi.Input<string>;
    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
     * application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
     * applications configured with SAML-based single sign-on
     */
    loginUrl?: pulumi.Input<string>;
    /**
     * The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
     * SAML logout protocols
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * Free text field to capture information about the service principal, typically used for operational purposes
     */
    notes?: pulumi.Input<string>;
    /**
     * List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
     * This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
     */
    notificationEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Mapping of OAuth2.0 permission scope names to UUIDs
     */
    oauth2PermissionScopeIds?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    oauth2PermissionScopes?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalOauth2PermissionScope>[]>;
    /**
     * The object ID of the service principal
     */
    objectId?: pulumi.Input<string>;
    /**
     * A list of object IDs of principals that will be granted ownership of the service principal
     */
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
     * application from Microsoft 365 or the Azure AD My Apps
     */
    preferredSingleSignOnMode?: pulumi.Input<string>;
    /**
     * The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
     * authorization codes and access tokens are sent for the associated application
     */
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL where the service exposes SAML metadata for federation
     */
    samlMetadataUrl?: pulumi.Input<string>;
    /**
     * Settings related to SAML single sign-on
     */
    samlSingleSignOn?: pulumi.Input<inputs.ServicePrincipalSamlSingleSignOn>;
    /**
     * A list of identifier URI(s), copied over from the associated application
     */
    servicePrincipalNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Microsoft account types that are supported for the associated application
     */
    signInAudience?: pulumi.Input<string>;
    /**
     * A set of tags to apply to the service principal
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifies whether the service principal represents an application or a managed identity
     */
    type?: pulumi.Input<string>;
    /**
     * When true, the resource will return an existing service principal instead of failing with an error
     */
    useExisting?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServicePrincipal resource.
 */
export interface ServicePrincipalArgs {
    /**
     * Whether or not the service principal account is enabled
     */
    accountEnabled?: pulumi.Input<boolean>;
    /**
     * A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
     * resource ids for managed identities
     */
    alternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
     * access token to the application
     */
    appRoleAssignmentRequired?: pulumi.Input<boolean>;
    /**
     * The application ID (client ID) of the application for which to create a service principal
     */
    applicationId: pulumi.Input<string>;
    /**
     * Description of the service principal provided for internal end-users
     */
    description?: pulumi.Input<string>;
    /**
     * Block of features to configure for this service principal using tags
     */
    featureTags?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalFeatureTag>[]>;
    /**
     * Block of features to configure for this service principal using tags
     *
     * @deprecated This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
     */
    features?: pulumi.Input<pulumi.Input<inputs.ServicePrincipalFeature>[]>;
    /**
     * The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
     * application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
     * applications configured with SAML-based single sign-on
     */
    loginUrl?: pulumi.Input<string>;
    /**
     * Free text field to capture information about the service principal, typically used for operational purposes
     */
    notes?: pulumi.Input<string>;
    /**
     * List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
     * This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
     */
    notificationEmailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of object IDs of principals that will be granted ownership of the service principal
     */
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
     * application from Microsoft 365 or the Azure AD My Apps
     */
    preferredSingleSignOnMode?: pulumi.Input<string>;
    /**
     * Settings related to SAML single sign-on
     */
    samlSingleSignOn?: pulumi.Input<inputs.ServicePrincipalSamlSingleSignOn>;
    /**
     * A set of tags to apply to the service principal
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, the resource will return an existing service principal instead of failing with an error
     */
    useExisting?: pulumi.Input<boolean>;
}
