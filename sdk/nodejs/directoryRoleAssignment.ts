// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a single directory role assignment within Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.ReadWrite.Directory` or `Directory.ReadWrite.All`
 *
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`
 *
 * ## Import
 *
 * Directory role assignments can be imported using the ID of the assignment, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/directoryRoleAssignment:DirectoryRoleAssignment test ePROZI_iKE653D_d6aoLHyr-lKgHI8ZGiIdz8CLVcng-1
 * ```
 */
export class DirectoryRoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryRoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryRoleAssignmentState, opts?: pulumi.CustomResourceOptions): DirectoryRoleAssignment {
        return new DirectoryRoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuread:index/directoryRoleAssignment:DirectoryRoleAssignment';

    /**
     * Returns true if the given object is an instance of DirectoryRoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryRoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryRoleAssignment.__pulumiType;
    }

    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directoryScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    public readonly appScopeId!: pulumi.Output<string>;
    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific
     *
     * @deprecated `app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider
     */
    public readonly appScopeObjectId!: pulumi.Output<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment. Cannot be used with `appScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    public readonly directoryScopeId!: pulumi.Output<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment
     */
    public readonly directoryScopeObjectId!: pulumi.Output<string>;
    /**
     * The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     */
    public readonly principalObjectId!: pulumi.Output<string>;
    /**
     * The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
     */
    public readonly roleId!: pulumi.Output<string>;

    /**
     * Create a DirectoryRoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryRoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryRoleAssignmentArgs | DirectoryRoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryRoleAssignmentState | undefined;
            resourceInputs["appScopeId"] = state ? state.appScopeId : undefined;
            resourceInputs["appScopeObjectId"] = state ? state.appScopeObjectId : undefined;
            resourceInputs["directoryScopeId"] = state ? state.directoryScopeId : undefined;
            resourceInputs["directoryScopeObjectId"] = state ? state.directoryScopeObjectId : undefined;
            resourceInputs["principalObjectId"] = state ? state.principalObjectId : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        } else {
            const args = argsOrState as DirectoryRoleAssignmentArgs | undefined;
            if ((!args || args.principalObjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalObjectId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["appScopeId"] = args ? args.appScopeId : undefined;
            resourceInputs["appScopeObjectId"] = args ? args.appScopeObjectId : undefined;
            resourceInputs["directoryScopeId"] = args ? args.directoryScopeId : undefined;
            resourceInputs["directoryScopeObjectId"] = args ? args.directoryScopeObjectId : undefined;
            resourceInputs["principalObjectId"] = args ? args.principalObjectId : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryRoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DirectoryRoleAssignment resources.
 */
export interface DirectoryRoleAssignmentState {
    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directoryScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    appScopeId?: pulumi.Input<string>;
    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific
     *
     * @deprecated `app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider
     */
    appScopeObjectId?: pulumi.Input<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment. Cannot be used with `appScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    directoryScopeId?: pulumi.Input<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment
     */
    directoryScopeObjectId?: pulumi.Input<string>;
    /**
     * The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     */
    principalObjectId?: pulumi.Input<string>;
    /**
     * The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DirectoryRoleAssignment resource.
 */
export interface DirectoryRoleAssignmentArgs {
    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directoryScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    appScopeId?: pulumi.Input<string>;
    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific
     *
     * @deprecated `app_scope_object_id` has been renamed to `app_scope_id` and will be removed in version 3.0 or the AzureAD Provider
     */
    appScopeObjectId?: pulumi.Input<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment. Cannot be used with `appScopeId`. See [official documentation](https://docs.microsoft.com/en-us/graph/api/rbacapplication-post-roleassignments?view=graph-rest-1.0&tabs=http) for example usage. Changing this forces a new resource to be created.
     */
    directoryScopeId?: pulumi.Input<string>;
    /**
     * Identifier of the directory object representing the scope of the assignment
     */
    directoryScopeObjectId?: pulumi.Input<string>;
    /**
     * The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     */
    principalObjectId: pulumi.Input<string>;
    /**
     * The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
     */
    roleId: pulumi.Input<string>;
}
