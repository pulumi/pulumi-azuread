// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServicePrincipalTokenSigningCertificate struct {
	pulumi.CustomResourceState

	// A friendly name for the certificate
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// Default is 3 years from current date.
	EndDate pulumi.StringOutput `pulumi:"endDate"`
	// A UUID used to uniquely identify the verify certificate.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringOutput `pulumi:"servicePrincipalId"`
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The thumbprint of the certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
	// The certificate data, which is PEM encoded but does not include the header/footer
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewServicePrincipalTokenSigningCertificate registers a new resource with the given unique name, arguments, and options.
func NewServicePrincipalTokenSigningCertificate(ctx *pulumi.Context,
	name string, args *ServicePrincipalTokenSigningCertificateArgs, opts ...pulumi.ResourceOption) (*ServicePrincipalTokenSigningCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServicePrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrincipalId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	var resource ServicePrincipalTokenSigningCertificate
	err := ctx.RegisterResource("azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePrincipalTokenSigningCertificate gets an existing ServicePrincipalTokenSigningCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePrincipalTokenSigningCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePrincipalTokenSigningCertificateState, opts ...pulumi.ResourceOption) (*ServicePrincipalTokenSigningCertificate, error) {
	var resource ServicePrincipalTokenSigningCertificate
	err := ctx.ReadResource("azuread:index/servicePrincipalTokenSigningCertificate:ServicePrincipalTokenSigningCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePrincipalTokenSigningCertificate resources.
type servicePrincipalTokenSigningCertificateState struct {
	// A friendly name for the certificate
	DisplayName *string `pulumi:"displayName"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// Default is 3 years from current date.
	EndDate *string `pulumi:"endDate"`
	// A UUID used to uniquely identify the verify certificate.
	KeyId *string `pulumi:"keyId"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	StartDate *string `pulumi:"startDate"`
	// The thumbprint of the certificate.
	Thumbprint *string `pulumi:"thumbprint"`
	// The certificate data, which is PEM encoded but does not include the header/footer
	Value *string `pulumi:"value"`
}

type ServicePrincipalTokenSigningCertificateState struct {
	// A friendly name for the certificate
	DisplayName pulumi.StringPtrInput
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// Default is 3 years from current date.
	EndDate pulumi.StringPtrInput
	// A UUID used to uniquely identify the verify certificate.
	KeyId pulumi.StringPtrInput
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringPtrInput
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	StartDate pulumi.StringPtrInput
	// The thumbprint of the certificate.
	Thumbprint pulumi.StringPtrInput
	// The certificate data, which is PEM encoded but does not include the header/footer
	Value pulumi.StringPtrInput
}

func (ServicePrincipalTokenSigningCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalTokenSigningCertificateState)(nil)).Elem()
}

type servicePrincipalTokenSigningCertificateArgs struct {
	// A friendly name for the certificate
	DisplayName *string `pulumi:"displayName"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// Default is 3 years from current date.
	EndDate *string `pulumi:"endDate"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId string `pulumi:"servicePrincipalId"`
}

// The set of arguments for constructing a ServicePrincipalTokenSigningCertificate resource.
type ServicePrincipalTokenSigningCertificateArgs struct {
	// A friendly name for the certificate
	DisplayName pulumi.StringPtrInput
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// Default is 3 years from current date.
	EndDate pulumi.StringPtrInput
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringInput
}

func (ServicePrincipalTokenSigningCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalTokenSigningCertificateArgs)(nil)).Elem()
}

type ServicePrincipalTokenSigningCertificateInput interface {
	pulumi.Input

	ToServicePrincipalTokenSigningCertificateOutput() ServicePrincipalTokenSigningCertificateOutput
	ToServicePrincipalTokenSigningCertificateOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateOutput
}

func (*ServicePrincipalTokenSigningCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (i *ServicePrincipalTokenSigningCertificate) ToServicePrincipalTokenSigningCertificateOutput() ServicePrincipalTokenSigningCertificateOutput {
	return i.ToServicePrincipalTokenSigningCertificateOutputWithContext(context.Background())
}

func (i *ServicePrincipalTokenSigningCertificate) ToServicePrincipalTokenSigningCertificateOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalTokenSigningCertificateOutput)
}

// ServicePrincipalTokenSigningCertificateArrayInput is an input type that accepts ServicePrincipalTokenSigningCertificateArray and ServicePrincipalTokenSigningCertificateArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalTokenSigningCertificateArrayInput` via:
//
//	ServicePrincipalTokenSigningCertificateArray{ ServicePrincipalTokenSigningCertificateArgs{...} }
type ServicePrincipalTokenSigningCertificateArrayInput interface {
	pulumi.Input

	ToServicePrincipalTokenSigningCertificateArrayOutput() ServicePrincipalTokenSigningCertificateArrayOutput
	ToServicePrincipalTokenSigningCertificateArrayOutputWithContext(context.Context) ServicePrincipalTokenSigningCertificateArrayOutput
}

type ServicePrincipalTokenSigningCertificateArray []ServicePrincipalTokenSigningCertificateInput

func (ServicePrincipalTokenSigningCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (i ServicePrincipalTokenSigningCertificateArray) ToServicePrincipalTokenSigningCertificateArrayOutput() ServicePrincipalTokenSigningCertificateArrayOutput {
	return i.ToServicePrincipalTokenSigningCertificateArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalTokenSigningCertificateArray) ToServicePrincipalTokenSigningCertificateArrayOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalTokenSigningCertificateArrayOutput)
}

// ServicePrincipalTokenSigningCertificateMapInput is an input type that accepts ServicePrincipalTokenSigningCertificateMap and ServicePrincipalTokenSigningCertificateMapOutput values.
// You can construct a concrete instance of `ServicePrincipalTokenSigningCertificateMapInput` via:
//
//	ServicePrincipalTokenSigningCertificateMap{ "key": ServicePrincipalTokenSigningCertificateArgs{...} }
type ServicePrincipalTokenSigningCertificateMapInput interface {
	pulumi.Input

	ToServicePrincipalTokenSigningCertificateMapOutput() ServicePrincipalTokenSigningCertificateMapOutput
	ToServicePrincipalTokenSigningCertificateMapOutputWithContext(context.Context) ServicePrincipalTokenSigningCertificateMapOutput
}

type ServicePrincipalTokenSigningCertificateMap map[string]ServicePrincipalTokenSigningCertificateInput

func (ServicePrincipalTokenSigningCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (i ServicePrincipalTokenSigningCertificateMap) ToServicePrincipalTokenSigningCertificateMapOutput() ServicePrincipalTokenSigningCertificateMapOutput {
	return i.ToServicePrincipalTokenSigningCertificateMapOutputWithContext(context.Background())
}

func (i ServicePrincipalTokenSigningCertificateMap) ToServicePrincipalTokenSigningCertificateMapOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalTokenSigningCertificateMapOutput)
}

type ServicePrincipalTokenSigningCertificateOutput struct{ *pulumi.OutputState }

func (ServicePrincipalTokenSigningCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (o ServicePrincipalTokenSigningCertificateOutput) ToServicePrincipalTokenSigningCertificateOutput() ServicePrincipalTokenSigningCertificateOutput {
	return o
}

func (o ServicePrincipalTokenSigningCertificateOutput) ToServicePrincipalTokenSigningCertificateOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateOutput {
	return o
}

// A friendly name for the certificate
func (o ServicePrincipalTokenSigningCertificateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
// Default is 3 years from current date.
func (o ServicePrincipalTokenSigningCertificateOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.EndDate }).(pulumi.StringOutput)
}

// A UUID used to uniquely identify the verify certificate.
func (o ServicePrincipalTokenSigningCertificateOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The object ID of the service principal for which this certificate should be created
func (o ServicePrincipalTokenSigningCertificateOutput) ServicePrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.ServicePrincipalId }).(pulumi.StringOutput)
}

// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
func (o ServicePrincipalTokenSigningCertificateOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// The thumbprint of the certificate.
func (o ServicePrincipalTokenSigningCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

// The certificate data, which is PEM encoded but does not include the header/footer
func (o ServicePrincipalTokenSigningCertificateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalTokenSigningCertificate) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type ServicePrincipalTokenSigningCertificateArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalTokenSigningCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (o ServicePrincipalTokenSigningCertificateArrayOutput) ToServicePrincipalTokenSigningCertificateArrayOutput() ServicePrincipalTokenSigningCertificateArrayOutput {
	return o
}

func (o ServicePrincipalTokenSigningCertificateArrayOutput) ToServicePrincipalTokenSigningCertificateArrayOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateArrayOutput {
	return o
}

func (o ServicePrincipalTokenSigningCertificateArrayOutput) Index(i pulumi.IntInput) ServicePrincipalTokenSigningCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePrincipalTokenSigningCertificate {
		return vs[0].([]*ServicePrincipalTokenSigningCertificate)[vs[1].(int)]
	}).(ServicePrincipalTokenSigningCertificateOutput)
}

type ServicePrincipalTokenSigningCertificateMapOutput struct{ *pulumi.OutputState }

func (ServicePrincipalTokenSigningCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipalTokenSigningCertificate)(nil)).Elem()
}

func (o ServicePrincipalTokenSigningCertificateMapOutput) ToServicePrincipalTokenSigningCertificateMapOutput() ServicePrincipalTokenSigningCertificateMapOutput {
	return o
}

func (o ServicePrincipalTokenSigningCertificateMapOutput) ToServicePrincipalTokenSigningCertificateMapOutputWithContext(ctx context.Context) ServicePrincipalTokenSigningCertificateMapOutput {
	return o
}

func (o ServicePrincipalTokenSigningCertificateMapOutput) MapIndex(k pulumi.StringInput) ServicePrincipalTokenSigningCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePrincipalTokenSigningCertificate {
		return vs[0].(map[string]*ServicePrincipalTokenSigningCertificate)[vs[1].(string)]
	}).(ServicePrincipalTokenSigningCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalTokenSigningCertificateInput)(nil)).Elem(), &ServicePrincipalTokenSigningCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalTokenSigningCertificateArrayInput)(nil)).Elem(), ServicePrincipalTokenSigningCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalTokenSigningCertificateMapInput)(nil)).Elem(), ServicePrincipalTokenSigningCertificateMap{})
	pulumi.RegisterOutputType(ServicePrincipalTokenSigningCertificateOutput{})
	pulumi.RegisterOutputType(ServicePrincipalTokenSigningCertificateArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalTokenSigningCertificateMapOutput{})
}
