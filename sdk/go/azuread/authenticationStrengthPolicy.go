// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Authentication Strength Policy within Azure Active Directory.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`
//
// When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	index/authenticationStrengthPolicy "github.com/pulumi/pulumi-azuread/sdk/v1/go/azuread/index/authenticationStrengthPolicy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// _, err := azuread.NewAuthenticationStrengthPolicy(ctx, "example", &azuread.AuthenticationStrengthPolicyArgs{
// DisplayName: "Example Authentication Strength Policy",
// Description: "Policy for demo purposes",
// AllowedCombinations: []string{
// "fido2",
// "password",
// },
// })
// if err != nil {
// return err
// }
// _, err = azuread.NewAuthenticationStrengthPolicy(ctx, "example2", &azuread.AuthenticationStrengthPolicyArgs{
// DisplayName: "Example Authentication Strength Policy",
// Description: "Policy for demo purposes with all possible combinations",
// AllowedCombinations: []string{
// "fido2",
// "password",
// "deviceBasedPush",
// "temporaryAccessPassOneTime",
// "federatedMultiFactor",
// "federatedSingleFactor",
// "hardwareOath,federatedSingleFactor",
// "microsoftAuthenticatorPush,federatedSingleFactor",
// "password,hardwareOath",
// "password,microsoftAuthenticatorPush",
// "password,sms",
// "password,softwareOath",
// "password,voice",
// "sms",
// "sms,federatedSingleFactor",
// "softwareOath,federatedSingleFactor",
// "temporaryAccessPassMultiUse",
// "voice,federatedSingleFactor",
// "windowsHelloForBusiness",
// "x509CertificateMultiFactor",
// "x509CertificateSingleFactor",
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Authentication Strength Policies can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy my_policy 00000000-0000-0000-0000-000000000000
// ```
type AuthenticationStrengthPolicy struct {
	pulumi.CustomResourceState

	// List of allowed authentication methods for this authentication strength policy.
	AllowedCombinations pulumi.StringArrayOutput `pulumi:"allowedCombinations"`
	// The description for this authentication strength policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The friendly name for this authentication strength policy.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
}

// NewAuthenticationStrengthPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthenticationStrengthPolicy(ctx *pulumi.Context,
	name string, args *AuthenticationStrengthPolicyArgs, opts ...pulumi.ResourceOption) (*AuthenticationStrengthPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedCombinations == nil {
		return nil, errors.New("invalid value for required argument 'AllowedCombinations'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthenticationStrengthPolicy
	err := ctx.RegisterResource("azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticationStrengthPolicy gets an existing AuthenticationStrengthPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticationStrengthPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticationStrengthPolicyState, opts ...pulumi.ResourceOption) (*AuthenticationStrengthPolicy, error) {
	var resource AuthenticationStrengthPolicy
	err := ctx.ReadResource("azuread:index/authenticationStrengthPolicy:AuthenticationStrengthPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticationStrengthPolicy resources.
type authenticationStrengthPolicyState struct {
	// List of allowed authentication methods for this authentication strength policy.
	AllowedCombinations []string `pulumi:"allowedCombinations"`
	// The description for this authentication strength policy.
	Description *string `pulumi:"description"`
	// The friendly name for this authentication strength policy.
	DisplayName *string `pulumi:"displayName"`
}

type AuthenticationStrengthPolicyState struct {
	// List of allowed authentication methods for this authentication strength policy.
	AllowedCombinations pulumi.StringArrayInput
	// The description for this authentication strength policy.
	Description pulumi.StringPtrInput
	// The friendly name for this authentication strength policy.
	DisplayName pulumi.StringPtrInput
}

func (AuthenticationStrengthPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationStrengthPolicyState)(nil)).Elem()
}

type authenticationStrengthPolicyArgs struct {
	// List of allowed authentication methods for this authentication strength policy.
	AllowedCombinations []string `pulumi:"allowedCombinations"`
	// The description for this authentication strength policy.
	Description *string `pulumi:"description"`
	// The friendly name for this authentication strength policy.
	DisplayName string `pulumi:"displayName"`
}

// The set of arguments for constructing a AuthenticationStrengthPolicy resource.
type AuthenticationStrengthPolicyArgs struct {
	// List of allowed authentication methods for this authentication strength policy.
	AllowedCombinations pulumi.StringArrayInput
	// The description for this authentication strength policy.
	Description pulumi.StringPtrInput
	// The friendly name for this authentication strength policy.
	DisplayName pulumi.StringInput
}

func (AuthenticationStrengthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationStrengthPolicyArgs)(nil)).Elem()
}

type AuthenticationStrengthPolicyInput interface {
	pulumi.Input

	ToAuthenticationStrengthPolicyOutput() AuthenticationStrengthPolicyOutput
	ToAuthenticationStrengthPolicyOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyOutput
}

func (*AuthenticationStrengthPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationStrengthPolicy)(nil)).Elem()
}

func (i *AuthenticationStrengthPolicy) ToAuthenticationStrengthPolicyOutput() AuthenticationStrengthPolicyOutput {
	return i.ToAuthenticationStrengthPolicyOutputWithContext(context.Background())
}

func (i *AuthenticationStrengthPolicy) ToAuthenticationStrengthPolicyOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationStrengthPolicyOutput)
}

// AuthenticationStrengthPolicyArrayInput is an input type that accepts AuthenticationStrengthPolicyArray and AuthenticationStrengthPolicyArrayOutput values.
// You can construct a concrete instance of `AuthenticationStrengthPolicyArrayInput` via:
//
//	AuthenticationStrengthPolicyArray{ AuthenticationStrengthPolicyArgs{...} }
type AuthenticationStrengthPolicyArrayInput interface {
	pulumi.Input

	ToAuthenticationStrengthPolicyArrayOutput() AuthenticationStrengthPolicyArrayOutput
	ToAuthenticationStrengthPolicyArrayOutputWithContext(context.Context) AuthenticationStrengthPolicyArrayOutput
}

type AuthenticationStrengthPolicyArray []AuthenticationStrengthPolicyInput

func (AuthenticationStrengthPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationStrengthPolicy)(nil)).Elem()
}

func (i AuthenticationStrengthPolicyArray) ToAuthenticationStrengthPolicyArrayOutput() AuthenticationStrengthPolicyArrayOutput {
	return i.ToAuthenticationStrengthPolicyArrayOutputWithContext(context.Background())
}

func (i AuthenticationStrengthPolicyArray) ToAuthenticationStrengthPolicyArrayOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationStrengthPolicyArrayOutput)
}

// AuthenticationStrengthPolicyMapInput is an input type that accepts AuthenticationStrengthPolicyMap and AuthenticationStrengthPolicyMapOutput values.
// You can construct a concrete instance of `AuthenticationStrengthPolicyMapInput` via:
//
//	AuthenticationStrengthPolicyMap{ "key": AuthenticationStrengthPolicyArgs{...} }
type AuthenticationStrengthPolicyMapInput interface {
	pulumi.Input

	ToAuthenticationStrengthPolicyMapOutput() AuthenticationStrengthPolicyMapOutput
	ToAuthenticationStrengthPolicyMapOutputWithContext(context.Context) AuthenticationStrengthPolicyMapOutput
}

type AuthenticationStrengthPolicyMap map[string]AuthenticationStrengthPolicyInput

func (AuthenticationStrengthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationStrengthPolicy)(nil)).Elem()
}

func (i AuthenticationStrengthPolicyMap) ToAuthenticationStrengthPolicyMapOutput() AuthenticationStrengthPolicyMapOutput {
	return i.ToAuthenticationStrengthPolicyMapOutputWithContext(context.Background())
}

func (i AuthenticationStrengthPolicyMap) ToAuthenticationStrengthPolicyMapOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationStrengthPolicyMapOutput)
}

type AuthenticationStrengthPolicyOutput struct{ *pulumi.OutputState }

func (AuthenticationStrengthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationStrengthPolicy)(nil)).Elem()
}

func (o AuthenticationStrengthPolicyOutput) ToAuthenticationStrengthPolicyOutput() AuthenticationStrengthPolicyOutput {
	return o
}

func (o AuthenticationStrengthPolicyOutput) ToAuthenticationStrengthPolicyOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyOutput {
	return o
}

// List of allowed authentication methods for this authentication strength policy.
func (o AuthenticationStrengthPolicyOutput) AllowedCombinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthenticationStrengthPolicy) pulumi.StringArrayOutput { return v.AllowedCombinations }).(pulumi.StringArrayOutput)
}

// The description for this authentication strength policy.
func (o AuthenticationStrengthPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationStrengthPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The friendly name for this authentication strength policy.
func (o AuthenticationStrengthPolicyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationStrengthPolicy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

type AuthenticationStrengthPolicyArrayOutput struct{ *pulumi.OutputState }

func (AuthenticationStrengthPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationStrengthPolicy)(nil)).Elem()
}

func (o AuthenticationStrengthPolicyArrayOutput) ToAuthenticationStrengthPolicyArrayOutput() AuthenticationStrengthPolicyArrayOutput {
	return o
}

func (o AuthenticationStrengthPolicyArrayOutput) ToAuthenticationStrengthPolicyArrayOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyArrayOutput {
	return o
}

func (o AuthenticationStrengthPolicyArrayOutput) Index(i pulumi.IntInput) AuthenticationStrengthPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticationStrengthPolicy {
		return vs[0].([]*AuthenticationStrengthPolicy)[vs[1].(int)]
	}).(AuthenticationStrengthPolicyOutput)
}

type AuthenticationStrengthPolicyMapOutput struct{ *pulumi.OutputState }

func (AuthenticationStrengthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationStrengthPolicy)(nil)).Elem()
}

func (o AuthenticationStrengthPolicyMapOutput) ToAuthenticationStrengthPolicyMapOutput() AuthenticationStrengthPolicyMapOutput {
	return o
}

func (o AuthenticationStrengthPolicyMapOutput) ToAuthenticationStrengthPolicyMapOutputWithContext(ctx context.Context) AuthenticationStrengthPolicyMapOutput {
	return o
}

func (o AuthenticationStrengthPolicyMapOutput) MapIndex(k pulumi.StringInput) AuthenticationStrengthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticationStrengthPolicy {
		return vs[0].(map[string]*AuthenticationStrengthPolicy)[vs[1].(string)]
	}).(AuthenticationStrengthPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationStrengthPolicyInput)(nil)).Elem(), &AuthenticationStrengthPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationStrengthPolicyArrayInput)(nil)).Elem(), AuthenticationStrengthPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationStrengthPolicyMapInput)(nil)).Elem(), AuthenticationStrengthPolicyMap{})
	pulumi.RegisterOutputType(AuthenticationStrengthPolicyOutput{})
	pulumi.RegisterOutputType(AuthenticationStrengthPolicyArrayOutput{})
	pulumi.RegisterOutputType(AuthenticationStrengthPolicyMapOutput{})
}
