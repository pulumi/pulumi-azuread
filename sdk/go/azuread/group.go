// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Group struct {
	pulumi.CustomResourceState

	// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
	AdministrativeUnitIds pulumi.StringArrayOutput `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
	// security-enabled groups.
	AssignableToRole pulumi.BoolPtrOutput `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
	AutoSubscribeNewMembers pulumi.BoolOutput `pulumi:"autoSubscribeNewMembers"`
	// The group behaviours for a Microsoft 365 group
	Behaviors pulumi.StringArrayOutput `pulumi:"behaviors"`
	// The description for the group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name for the group
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// An optional block to configure dynamic membership for the group. Cannot be used with `members`
	DynamicMembership GroupDynamicMembershipPtrOutput `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group.
	ExternalSendersAllowed pulumi.BoolOutput `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
	// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
	HideFromAddressLists pulumi.BoolOutput `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
	HideFromOutlookClients pulumi.BoolOutput `pulumi:"hideFromOutlookClients"`
	// The SMTP address for the group
	Mail pulumi.StringOutput `pulumi:"mail"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
	// must be specified. A group can be mail enabled _and_ security enabled
	MailEnabled pulumi.BoolPtrOutput `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation
	MailNickname pulumi.StringOutput `pulumi:"mailNickname"`
	// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The object ID of the group
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
	// used
	OnpremisesDomainName pulumi.StringOutput `pulumi:"onpremisesDomainName"`
	// Indicates the target on-premise group type the group will be written back as
	OnpremisesGroupType pulumi.StringOutput `pulumi:"onpremisesGroupType"`
	// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesNetbiosName pulumi.StringOutput `pulumi:"onpremisesNetbiosName"`
	// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSamAccountName pulumi.StringOutput `pulumi:"onpremisesSamAccountName"`
	// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSecurityIdentifier pulumi.StringOutput `pulumi:"onpremisesSecurityIdentifier"`
	// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
	// been synchronized (null)
	OnpremisesSyncEnabled pulumi.BoolOutput `pulumi:"onpremisesSyncEnabled"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayOutput `pulumi:"owners"`
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
	PreferredLanguage pulumi.StringOutput `pulumi:"preferredLanguage"`
	// If `true`, will return an error if an existing group is found with the same name
	PreventDuplicateNames pulumi.BoolPtrOutput `pulumi:"preventDuplicateNames"`
	// The group provisioning options for a Microsoft 365 group
	ProvisioningOptions pulumi.StringArrayOutput `pulumi:"provisioningOptions"`
	// Email addresses for the group that direct to the same group mailbox
	ProxyAddresses pulumi.StringArrayOutput `pulumi:"proxyAddresses"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
	// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
	SecurityEnabled pulumi.BoolPtrOutput `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group
	Theme pulumi.StringPtrOutput `pulumi:"theme"`
	// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
	// is true
	Types pulumi.StringArrayOutput `pulumi:"types"`
	// Specifies the group join policy and group content visibility
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
	WritebackEnabled pulumi.BoolPtrOutput `pulumi:"writebackEnabled"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource Group
	err := ctx.RegisterResource("azuread:index/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("azuread:index/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
	AdministrativeUnitIds []string `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
	// security-enabled groups.
	AssignableToRole *bool `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
	AutoSubscribeNewMembers *bool `pulumi:"autoSubscribeNewMembers"`
	// The group behaviours for a Microsoft 365 group
	Behaviors []string `pulumi:"behaviors"`
	// The description for the group
	Description *string `pulumi:"description"`
	// The display name for the group
	DisplayName *string `pulumi:"displayName"`
	// An optional block to configure dynamic membership for the group. Cannot be used with `members`
	DynamicMembership *GroupDynamicMembership `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group.
	ExternalSendersAllowed *bool `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
	// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
	HideFromAddressLists *bool `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
	HideFromOutlookClients *bool `pulumi:"hideFromOutlookClients"`
	// The SMTP address for the group
	Mail *string `pulumi:"mail"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
	// must be specified. A group can be mail enabled _and_ security enabled
	MailEnabled *bool `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation
	MailNickname *string `pulumi:"mailNickname"`
	// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
	Members []string `pulumi:"members"`
	// The object ID of the group
	ObjectId *string `pulumi:"objectId"`
	// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
	// used
	OnpremisesDomainName *string `pulumi:"onpremisesDomainName"`
	// Indicates the target on-premise group type the group will be written back as
	OnpremisesGroupType *string `pulumi:"onpremisesGroupType"`
	// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesNetbiosName *string `pulumi:"onpremisesNetbiosName"`
	// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSamAccountName *string `pulumi:"onpremisesSamAccountName"`
	// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSecurityIdentifier *string `pulumi:"onpremisesSecurityIdentifier"`
	// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
	// been synchronized (null)
	OnpremisesSyncEnabled *bool `pulumi:"onpremisesSyncEnabled"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners []string `pulumi:"owners"`
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// If `true`, will return an error if an existing group is found with the same name
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// The group provisioning options for a Microsoft 365 group
	ProvisioningOptions []string `pulumi:"provisioningOptions"`
	// Email addresses for the group that direct to the same group mailbox
	ProxyAddresses []string `pulumi:"proxyAddresses"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
	// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
	SecurityEnabled *bool `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group
	Theme *string `pulumi:"theme"`
	// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
	// is true
	Types []string `pulumi:"types"`
	// Specifies the group join policy and group content visibility
	Visibility *string `pulumi:"visibility"`
	// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
	WritebackEnabled *bool `pulumi:"writebackEnabled"`
}

type GroupState struct {
	// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
	AdministrativeUnitIds pulumi.StringArrayInput
	// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
	// security-enabled groups.
	AssignableToRole pulumi.BoolPtrInput
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
	AutoSubscribeNewMembers pulumi.BoolPtrInput
	// The group behaviours for a Microsoft 365 group
	Behaviors pulumi.StringArrayInput
	// The description for the group
	Description pulumi.StringPtrInput
	// The display name for the group
	DisplayName pulumi.StringPtrInput
	// An optional block to configure dynamic membership for the group. Cannot be used with `members`
	DynamicMembership GroupDynamicMembershipPtrInput
	// Indicates whether people external to the organization can send messages to the group.
	ExternalSendersAllowed pulumi.BoolPtrInput
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
	// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
	HideFromAddressLists pulumi.BoolPtrInput
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
	HideFromOutlookClients pulumi.BoolPtrInput
	// The SMTP address for the group
	Mail pulumi.StringPtrInput
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
	// must be specified. A group can be mail enabled _and_ security enabled
	MailEnabled pulumi.BoolPtrInput
	// The mail alias for the group, unique in the organisation
	MailNickname pulumi.StringPtrInput
	// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
	Members pulumi.StringArrayInput
	// The object ID of the group
	ObjectId pulumi.StringPtrInput
	// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
	// used
	OnpremisesDomainName pulumi.StringPtrInput
	// Indicates the target on-premise group type the group will be written back as
	OnpremisesGroupType pulumi.StringPtrInput
	// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesNetbiosName pulumi.StringPtrInput
	// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSamAccountName pulumi.StringPtrInput
	// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
	OnpremisesSecurityIdentifier pulumi.StringPtrInput
	// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
	// been synchronized (null)
	OnpremisesSyncEnabled pulumi.BoolPtrInput
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayInput
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
	PreferredLanguage pulumi.StringPtrInput
	// If `true`, will return an error if an existing group is found with the same name
	PreventDuplicateNames pulumi.BoolPtrInput
	// The group provisioning options for a Microsoft 365 group
	ProvisioningOptions pulumi.StringArrayInput
	// Email addresses for the group that direct to the same group mailbox
	ProxyAddresses pulumi.StringArrayInput
	// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
	// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
	SecurityEnabled pulumi.BoolPtrInput
	// The colour theme for a Microsoft 365 group
	Theme pulumi.StringPtrInput
	// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
	// is true
	Types pulumi.StringArrayInput
	// Specifies the group join policy and group content visibility
	Visibility pulumi.StringPtrInput
	// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
	WritebackEnabled pulumi.BoolPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
	AdministrativeUnitIds []string `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
	// security-enabled groups.
	AssignableToRole *bool `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
	AutoSubscribeNewMembers *bool `pulumi:"autoSubscribeNewMembers"`
	// The group behaviours for a Microsoft 365 group
	Behaviors []string `pulumi:"behaviors"`
	// The description for the group
	Description *string `pulumi:"description"`
	// The display name for the group
	DisplayName string `pulumi:"displayName"`
	// An optional block to configure dynamic membership for the group. Cannot be used with `members`
	DynamicMembership *GroupDynamicMembership `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group.
	ExternalSendersAllowed *bool `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
	// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
	HideFromAddressLists *bool `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
	HideFromOutlookClients *bool `pulumi:"hideFromOutlookClients"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
	// must be specified. A group can be mail enabled _and_ security enabled
	MailEnabled *bool `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation
	MailNickname *string `pulumi:"mailNickname"`
	// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
	Members []string `pulumi:"members"`
	// Indicates the target on-premise group type the group will be written back as
	OnpremisesGroupType *string `pulumi:"onpremisesGroupType"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners []string `pulumi:"owners"`
	// If `true`, will return an error if an existing group is found with the same name
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// The group provisioning options for a Microsoft 365 group
	ProvisioningOptions []string `pulumi:"provisioningOptions"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
	// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
	SecurityEnabled *bool `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group
	Theme *string `pulumi:"theme"`
	// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
	// is true
	Types []string `pulumi:"types"`
	// Specifies the group join policy and group content visibility
	Visibility *string `pulumi:"visibility"`
	// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
	WritebackEnabled *bool `pulumi:"writebackEnabled"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
	AdministrativeUnitIds pulumi.StringArrayInput
	// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
	// security-enabled groups.
	AssignableToRole pulumi.BoolPtrInput
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
	AutoSubscribeNewMembers pulumi.BoolPtrInput
	// The group behaviours for a Microsoft 365 group
	Behaviors pulumi.StringArrayInput
	// The description for the group
	Description pulumi.StringPtrInput
	// The display name for the group
	DisplayName pulumi.StringInput
	// An optional block to configure dynamic membership for the group. Cannot be used with `members`
	DynamicMembership GroupDynamicMembershipPtrInput
	// Indicates whether people external to the organization can send messages to the group.
	ExternalSendersAllowed pulumi.BoolPtrInput
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
	// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
	HideFromAddressLists pulumi.BoolPtrInput
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
	HideFromOutlookClients pulumi.BoolPtrInput
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
	// must be specified. A group can be mail enabled _and_ security enabled
	MailEnabled pulumi.BoolPtrInput
	// The mail alias for the group, unique in the organisation
	MailNickname pulumi.StringPtrInput
	// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
	Members pulumi.StringArrayInput
	// Indicates the target on-premise group type the group will be written back as
	OnpremisesGroupType pulumi.StringPtrInput
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayInput
	// If `true`, will return an error if an existing group is found with the same name
	PreventDuplicateNames pulumi.BoolPtrInput
	// The group provisioning options for a Microsoft 365 group
	ProvisioningOptions pulumi.StringArrayInput
	// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
	// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
	SecurityEnabled pulumi.BoolPtrInput
	// The colour theme for a Microsoft 365 group
	Theme pulumi.StringPtrInput
	// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
	// is true
	Types pulumi.StringArrayInput
	// Specifies the group join policy and group content visibility
	Visibility pulumi.StringPtrInput
	// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
	WritebackEnabled pulumi.BoolPtrInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// The administrative unit IDs in which the group should be. If empty, the group will be created at the tenant level.
func (o GroupOutput) AdministrativeUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.AdministrativeUnitIds }).(pulumi.StringArrayOutput)
}

// Indicates whether this group can be assigned to an Azure Active Directory role. This property can only be `true` for
// security-enabled groups.
func (o GroupOutput) AssignableToRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.AssignableToRole }).(pulumi.BoolPtrOutput)
}

// Indicates whether new members added to the group will be auto-subscribed to receive email notifications.
func (o GroupOutput) AutoSubscribeNewMembers() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.AutoSubscribeNewMembers }).(pulumi.BoolOutput)
}

// The group behaviours for a Microsoft 365 group
func (o GroupOutput) Behaviors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Behaviors }).(pulumi.StringArrayOutput)
}

// The description for the group
func (o GroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the group
func (o GroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// An optional block to configure dynamic membership for the group. Cannot be used with `members`
func (o GroupOutput) DynamicMembership() GroupDynamicMembershipPtrOutput {
	return o.ApplyT(func(v *Group) GroupDynamicMembershipPtrOutput { return v.DynamicMembership }).(GroupDynamicMembershipPtrOutput)
}

// Indicates whether people external to the organization can send messages to the group.
func (o GroupOutput) ExternalSendersAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.ExternalSendersAllowed }).(pulumi.BoolOutput)
}

// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address
// lists for selecting message recipients, and in the Browse Groups dialog for searching groups.
func (o GroupOutput) HideFromAddressLists() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.HideFromAddressLists }).(pulumi.BoolOutput)
}

// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web.
func (o GroupOutput) HideFromOutlookClients() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.HideFromOutlookClients }).(pulumi.BoolOutput)
}

// The SMTP address for the group
func (o GroupOutput) Mail() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Mail }).(pulumi.StringOutput)
}

// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mail_enabled` or `security_enabled`
// must be specified. A group can be mail enabled _and_ security enabled
func (o GroupOutput) MailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.MailEnabled }).(pulumi.BoolPtrOutput)
}

// The mail alias for the group, unique in the organisation
func (o GroupOutput) MailNickname() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.MailNickname }).(pulumi.StringOutput)
}

// A set of members who should be present in this group. Supported object types are Users, Groups or Service Principals
func (o GroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The object ID of the group
func (o GroupOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The on-premises FQDN, also called dnsDomainName, synchronized from the on-premises directory when Azure AD Connect is
// used
func (o GroupOutput) OnpremisesDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OnpremisesDomainName }).(pulumi.StringOutput)
}

// Indicates the target on-premise group type the group will be written back as
func (o GroupOutput) OnpremisesGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OnpremisesGroupType }).(pulumi.StringOutput)
}

// The on-premises NetBIOS name, synchronized from the on-premises directory when Azure AD Connect is used
func (o GroupOutput) OnpremisesNetbiosName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OnpremisesNetbiosName }).(pulumi.StringOutput)
}

// The on-premises SAM account name, synchronized from the on-premises directory when Azure AD Connect is used
func (o GroupOutput) OnpremisesSamAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OnpremisesSamAccountName }).(pulumi.StringOutput)
}

// The on-premises security identifier (SID), synchronized from the on-premises directory when Azure AD Connect is used
func (o GroupOutput) OnpremisesSecurityIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OnpremisesSecurityIdentifier }).(pulumi.StringOutput)
}

// Whether this group is synchronized from an on-premises directory (true), no longer synchronized (false), or has never
// been synchronized (null)
func (o GroupOutput) OnpremisesSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.OnpremisesSyncEnabled }).(pulumi.BoolOutput)
}

// A set of owners who own this group. Supported object types are Users or Service Principals
func (o GroupOutput) Owners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Owners }).(pulumi.StringArrayOutput)
}

// The preferred language for a Microsoft 365 group, in ISO 639-1 notation
func (o GroupOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.PreferredLanguage }).(pulumi.StringOutput)
}

// If `true`, will return an error if an existing group is found with the same name
func (o GroupOutput) PreventDuplicateNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.PreventDuplicateNames }).(pulumi.BoolPtrOutput)
}

// The group provisioning options for a Microsoft 365 group
func (o GroupOutput) ProvisioningOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.ProvisioningOptions }).(pulumi.StringArrayOutput)
}

// Email addresses for the group that direct to the same group mailbox
func (o GroupOutput) ProxyAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.ProxyAddresses }).(pulumi.StringArrayOutput)
}

// Whether the group is a security group for controlling access to in-app resources. At least one of `security_enabled` or
// `mail_enabled` must be specified. A group can be security enabled _and_ mail enabled
func (o GroupOutput) SecurityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.SecurityEnabled }).(pulumi.BoolPtrOutput)
}

// The colour theme for a Microsoft 365 group
func (o GroupOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Theme }).(pulumi.StringPtrOutput)
}

// A set of group types to configure for the group. `Unified` specifies a Microsoft 365 group. Required when `mail_enabled`
// is true
func (o GroupOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Types }).(pulumi.StringArrayOutput)
}

// Specifies the group join policy and group content visibility
func (o GroupOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// Whether this group should be synced from Azure AD to the on-premises directory when Azure AD Connect is used
func (o GroupOutput) WritebackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.WritebackEnabled }).(pulumi.BoolPtrOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
