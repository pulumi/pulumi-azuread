// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an App Role associated with an Application within Azure Active Directory.
//
// > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuread/sdk/v4/go/azuread"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleApplication, err := azuread.NewApplication(ctx, "exampleApplication", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuread.NewApplicationAppRole(ctx, "exampleApplicationAppRole", &azuread.ApplicationAppRoleArgs{
// 			ApplicationObjectId: exampleApplication.ID(),
// 			AllowedMemberTypes: pulumi.StringArray{
// 				pulumi.String("User"),
// 			},
// 			Description: pulumi.String("Admins can manage roles and perform all task actions"),
// 			DisplayName: pulumi.String("Admin"),
// 			Enabled:     pulumi.Bool(true),
// 			Value:       pulumi.String("administer"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// App Roles can be imported using the `object_id` of an Application and the `id` of the App Role, e.g.
//
// ```sh
//  $ pulumi import azuread:index/applicationAppRole:ApplicationAppRole test 00000000-0000-0000-0000-000000000000/role/11111111-1111-1111-1111-111111111111
// ```
type ApplicationAppRole struct {
	pulumi.CustomResourceState

	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayOutput `pulumi:"allowedMemberTypes"`
	// The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.
	ApplicationObjectId pulumi.StringOutput `pulumi:"applicationObjectId"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description pulumi.StringOutput `pulumi:"description"`
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolPtrOutput `pulumi:"isEnabled"`
	// The unique identifier for the app role. If omitted, a random UUID will be automatically generated. Must be a valid UUID. Changing this field forces a new resource to be created.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewApplicationAppRole registers a new resource with the given unique name, arguments, and options.
func NewApplicationAppRole(ctx *pulumi.Context,
	name string, args *ApplicationAppRoleArgs, opts ...pulumi.ResourceOption) (*ApplicationAppRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowedMemberTypes == nil {
		return nil, errors.New("invalid value for required argument 'AllowedMemberTypes'")
	}
	if args.ApplicationObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationObjectId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource ApplicationAppRole
	err := ctx.RegisterResource("azuread:index/applicationAppRole:ApplicationAppRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationAppRole gets an existing ApplicationAppRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationAppRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationAppRoleState, opts ...pulumi.ResourceOption) (*ApplicationAppRole, error) {
	var resource ApplicationAppRole
	err := ctx.ReadResource("azuread:index/applicationAppRole:ApplicationAppRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationAppRole resources.
type applicationAppRoleState struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.
	ApplicationObjectId *string `pulumi:"applicationObjectId"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description *string `pulumi:"description"`
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName *string `pulumi:"displayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled *bool `pulumi:"isEnabled"`
	// The unique identifier for the app role. If omitted, a random UUID will be automatically generated. Must be a valid UUID. Changing this field forces a new resource to be created.
	RoleId *string `pulumi:"roleId"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value *string `pulumi:"value"`
}

type ApplicationAppRoleState struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput
	// The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.
	ApplicationObjectId pulumi.StringPtrInput
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description pulumi.StringPtrInput
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName pulumi.StringPtrInput
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolPtrInput
	// The unique identifier for the app role. If omitted, a random UUID will be automatically generated. Must be a valid UUID. Changing this field forces a new resource to be created.
	RoleId pulumi.StringPtrInput
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrInput
}

func (ApplicationAppRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAppRoleState)(nil)).Elem()
}

type applicationAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.
	ApplicationObjectId string `pulumi:"applicationObjectId"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description string `pulumi:"description"`
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName string `pulumi:"displayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled *bool `pulumi:"isEnabled"`
	// The unique identifier for the app role. If omitted, a random UUID will be automatically generated. Must be a valid UUID. Changing this field forces a new resource to be created.
	RoleId *string `pulumi:"roleId"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a ApplicationAppRole resource.
type ApplicationAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput
	// The Object ID of the Application for which this App Role should be created. Changing this field forces a new resource to be created.
	ApplicationObjectId pulumi.StringInput
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description pulumi.StringInput
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName pulumi.StringInput
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolPtrInput
	// The unique identifier for the app role. If omitted, a random UUID will be automatically generated. Must be a valid UUID. Changing this field forces a new resource to be created.
	RoleId pulumi.StringPtrInput
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrInput
}

func (ApplicationAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAppRoleArgs)(nil)).Elem()
}

type ApplicationAppRoleInput interface {
	pulumi.Input

	ToApplicationAppRoleOutput() ApplicationAppRoleOutput
	ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput
}

func (*ApplicationAppRole) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil))
}

func (i *ApplicationAppRole) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return i.ToApplicationAppRoleOutputWithContext(context.Background())
}

func (i *ApplicationAppRole) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleOutput)
}

func (i *ApplicationAppRole) ToApplicationAppRolePtrOutput() ApplicationAppRolePtrOutput {
	return i.ToApplicationAppRolePtrOutputWithContext(context.Background())
}

func (i *ApplicationAppRole) ToApplicationAppRolePtrOutputWithContext(ctx context.Context) ApplicationAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRolePtrOutput)
}

type ApplicationAppRolePtrInput interface {
	pulumi.Input

	ToApplicationAppRolePtrOutput() ApplicationAppRolePtrOutput
	ToApplicationAppRolePtrOutputWithContext(ctx context.Context) ApplicationAppRolePtrOutput
}

type applicationAppRolePtrType ApplicationAppRoleArgs

func (*applicationAppRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAppRole)(nil))
}

func (i *applicationAppRolePtrType) ToApplicationAppRolePtrOutput() ApplicationAppRolePtrOutput {
	return i.ToApplicationAppRolePtrOutputWithContext(context.Background())
}

func (i *applicationAppRolePtrType) ToApplicationAppRolePtrOutputWithContext(ctx context.Context) ApplicationAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRolePtrOutput)
}

// ApplicationAppRoleArrayInput is an input type that accepts ApplicationAppRoleArray and ApplicationAppRoleArrayOutput values.
// You can construct a concrete instance of `ApplicationAppRoleArrayInput` via:
//
//          ApplicationAppRoleArray{ ApplicationAppRoleArgs{...} }
type ApplicationAppRoleArrayInput interface {
	pulumi.Input

	ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput
	ToApplicationAppRoleArrayOutputWithContext(context.Context) ApplicationAppRoleArrayOutput
}

type ApplicationAppRoleArray []ApplicationAppRoleInput

func (ApplicationAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ApplicationAppRole)(nil))
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return i.ToApplicationAppRoleArrayOutputWithContext(context.Background())
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleArrayOutput)
}

// ApplicationAppRoleMapInput is an input type that accepts ApplicationAppRoleMap and ApplicationAppRoleMapOutput values.
// You can construct a concrete instance of `ApplicationAppRoleMapInput` via:
//
//          ApplicationAppRoleMap{ "key": ApplicationAppRoleArgs{...} }
type ApplicationAppRoleMapInput interface {
	pulumi.Input

	ToApplicationAppRoleMapOutput() ApplicationAppRoleMapOutput
	ToApplicationAppRoleMapOutputWithContext(context.Context) ApplicationAppRoleMapOutput
}

type ApplicationAppRoleMap map[string]ApplicationAppRoleInput

func (ApplicationAppRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ApplicationAppRole)(nil))
}

func (i ApplicationAppRoleMap) ToApplicationAppRoleMapOutput() ApplicationAppRoleMapOutput {
	return i.ToApplicationAppRoleMapOutputWithContext(context.Background())
}

func (i ApplicationAppRoleMap) ToApplicationAppRoleMapOutputWithContext(ctx context.Context) ApplicationAppRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleMapOutput)
}

type ApplicationAppRoleOutput struct {
	*pulumi.OutputState
}

func (ApplicationAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil))
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return o
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return o
}

func (o ApplicationAppRoleOutput) ToApplicationAppRolePtrOutput() ApplicationAppRolePtrOutput {
	return o.ToApplicationAppRolePtrOutputWithContext(context.Background())
}

func (o ApplicationAppRoleOutput) ToApplicationAppRolePtrOutputWithContext(ctx context.Context) ApplicationAppRolePtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *ApplicationAppRole {
		return &v
	}).(ApplicationAppRolePtrOutput)
}

type ApplicationAppRolePtrOutput struct {
	*pulumi.OutputState
}

func (ApplicationAppRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAppRole)(nil))
}

func (o ApplicationAppRolePtrOutput) ToApplicationAppRolePtrOutput() ApplicationAppRolePtrOutput {
	return o
}

func (o ApplicationAppRolePtrOutput) ToApplicationAppRolePtrOutputWithContext(ctx context.Context) ApplicationAppRolePtrOutput {
	return o
}

type ApplicationAppRoleArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRole)(nil))
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) Index(i pulumi.IntInput) ApplicationAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppRole {
		return vs[0].([]ApplicationAppRole)[vs[1].(int)]
	}).(ApplicationAppRoleOutput)
}

type ApplicationAppRoleMapOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApplicationAppRole)(nil))
}

func (o ApplicationAppRoleMapOutput) ToApplicationAppRoleMapOutput() ApplicationAppRoleMapOutput {
	return o
}

func (o ApplicationAppRoleMapOutput) ToApplicationAppRoleMapOutputWithContext(ctx context.Context) ApplicationAppRoleMapOutput {
	return o
}

func (o ApplicationAppRoleMapOutput) MapIndex(k pulumi.StringInput) ApplicationAppRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApplicationAppRole {
		return vs[0].(map[string]ApplicationAppRole)[vs[1].(string)]
	}).(ApplicationAppRoleOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppRoleOutput{})
	pulumi.RegisterOutputType(ApplicationAppRolePtrOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleMapOutput{})
}
