// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupAccessPackageCatalog(ctx *pulumi.Context, args *LookupAccessPackageCatalogArgs, opts ...pulumi.InvokeOption) (*LookupAccessPackageCatalogResult, error) {
	var rv LookupAccessPackageCatalogResult
	err := ctx.Invoke("azuread:index/getAccessPackageCatalog:getAccessPackageCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessPackageCatalog.
type LookupAccessPackageCatalogArgs struct {
	DisplayName *string `pulumi:"displayName"`
	ObjectId    *string `pulumi:"objectId"`
}

// A collection of values returned by getAccessPackageCatalog.
type LookupAccessPackageCatalogResult struct {
	Description       string `pulumi:"description"`
	DisplayName       string `pulumi:"displayName"`
	ExternallyVisible bool   `pulumi:"externallyVisible"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ObjectId  string `pulumi:"objectId"`
	Published bool   `pulumi:"published"`
}

func LookupAccessPackageCatalogOutput(ctx *pulumi.Context, args LookupAccessPackageCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupAccessPackageCatalogResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessPackageCatalogResult, error) {
			args := v.(LookupAccessPackageCatalogArgs)
			r, err := LookupAccessPackageCatalog(ctx, &args, opts...)
			var s LookupAccessPackageCatalogResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessPackageCatalogResultOutput)
}

// A collection of arguments for invoking getAccessPackageCatalog.
type LookupAccessPackageCatalogOutputArgs struct {
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	ObjectId    pulumi.StringPtrInput `pulumi:"objectId"`
}

func (LookupAccessPackageCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPackageCatalogArgs)(nil)).Elem()
}

// A collection of values returned by getAccessPackageCatalog.
type LookupAccessPackageCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupAccessPackageCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPackageCatalogResult)(nil)).Elem()
}

func (o LookupAccessPackageCatalogResultOutput) ToLookupAccessPackageCatalogResultOutput() LookupAccessPackageCatalogResultOutput {
	return o
}

func (o LookupAccessPackageCatalogResultOutput) ToLookupAccessPackageCatalogResultOutputWithContext(ctx context.Context) LookupAccessPackageCatalogResultOutput {
	return o
}

func (o LookupAccessPackageCatalogResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupAccessPackageCatalogResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

func (o LookupAccessPackageCatalogResultOutput) ExternallyVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) bool { return v.ExternallyVisible }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessPackageCatalogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAccessPackageCatalogResultOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) string { return v.ObjectId }).(pulumi.StringOutput)
}

func (o LookupAccessPackageCatalogResultOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAccessPackageCatalogResult) bool { return v.Published }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessPackageCatalogResultOutput{})
}
