// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Service Principal associated with an Application within Azure Active Directory.
//
// > **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write all applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API. Please see The Granting a Service Principal permission to manage AAD for the required steps.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuread/sdk/v3/go/azuread"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleApplication, err := azuread.NewApplication(ctx, "exampleApplication", &azuread.ApplicationArgs{
// 			Homepage: pulumi.String("http://homepage"),
// 			IdentifierUris: pulumi.StringArray{
// 				pulumi.String("http://uri"),
// 			},
// 			ReplyUrls: pulumi.StringArray{
// 				pulumi.String("http://replyurl"),
// 			},
// 			AvailableToOtherTenants: pulumi.Bool(false),
// 			Oauth2AllowImplicitFlow: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuread.NewServicePrincipal(ctx, "exampleServicePrincipal", &azuread.ServicePrincipalArgs{
// 			ApplicationId:             exampleApplication.ApplicationId,
// 			AppRoleAssignmentRequired: pulumi.Bool(false),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("example"),
// 				pulumi.String("tags"),
// 				pulumi.String("here"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Azure Active Directory Service Principals can be imported using the `object id`, e.g.
//
// ```sh
//  $ pulumi import azuread:index/servicePrincipal:ServicePrincipal test 00000000-0000-0000-0000-000000000000
// ```
type ServicePrincipal struct {
	pulumi.CustomResourceState

	// Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
	AppRoleAssignmentRequired pulumi.BoolPtrOutput               `pulumi:"appRoleAssignmentRequired"`
	AppRoles                  ServicePrincipalAppRoleArrayOutput `pulumi:"appRoles"`
	// The App ID of the Application for which to create a Service Principal.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The Display Name of the Application associated with this Service Principal.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
	Oauth2Permissions ServicePrincipalOauth2PermissionArrayOutput `pulumi:"oauth2Permissions"`
	// The Object ID of the Service Principal.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// A list of tags to apply to the Service Principal.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewServicePrincipal registers a new resource with the given unique name, arguments, and options.
func NewServicePrincipal(ctx *pulumi.Context,
	name string, args *ServicePrincipalArgs, opts ...pulumi.ResourceOption) (*ServicePrincipal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	var resource ServicePrincipal
	err := ctx.RegisterResource("azuread:index/servicePrincipal:ServicePrincipal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePrincipal gets an existing ServicePrincipal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePrincipal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePrincipalState, opts ...pulumi.ResourceOption) (*ServicePrincipal, error) {
	var resource ServicePrincipal
	err := ctx.ReadResource("azuread:index/servicePrincipal:ServicePrincipal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePrincipal resources.
type servicePrincipalState struct {
	// Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
	AppRoleAssignmentRequired *bool                     `pulumi:"appRoleAssignmentRequired"`
	AppRoles                  []ServicePrincipalAppRole `pulumi:"appRoles"`
	// The App ID of the Application for which to create a Service Principal.
	ApplicationId *string `pulumi:"applicationId"`
	// The Display Name of the Application associated with this Service Principal.
	DisplayName *string `pulumi:"displayName"`
	// A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
	Oauth2Permissions []ServicePrincipalOauth2Permission `pulumi:"oauth2Permissions"`
	// The Object ID of the Service Principal.
	ObjectId *string `pulumi:"objectId"`
	// A list of tags to apply to the Service Principal.
	Tags []string `pulumi:"tags"`
}

type ServicePrincipalState struct {
	// Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
	AppRoleAssignmentRequired pulumi.BoolPtrInput
	AppRoles                  ServicePrincipalAppRoleArrayInput
	// The App ID of the Application for which to create a Service Principal.
	ApplicationId pulumi.StringPtrInput
	// The Display Name of the Application associated with this Service Principal.
	DisplayName pulumi.StringPtrInput
	// A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
	Oauth2Permissions ServicePrincipalOauth2PermissionArrayInput
	// The Object ID of the Service Principal.
	ObjectId pulumi.StringPtrInput
	// A list of tags to apply to the Service Principal.
	Tags pulumi.StringArrayInput
}

func (ServicePrincipalState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalState)(nil)).Elem()
}

type servicePrincipalArgs struct {
	// Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
	AppRoleAssignmentRequired *bool `pulumi:"appRoleAssignmentRequired"`
	// The App ID of the Application for which to create a Service Principal.
	ApplicationId string `pulumi:"applicationId"`
	// A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
	Oauth2Permissions []ServicePrincipalOauth2Permission `pulumi:"oauth2Permissions"`
	// A list of tags to apply to the Service Principal.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ServicePrincipal resource.
type ServicePrincipalArgs struct {
	// Whether this Service Principal requires an AppRoleAssignment to a user or group before Azure AD will issue a user or access token to the application. Defaults to `false`.
	AppRoleAssignmentRequired pulumi.BoolPtrInput
	// The App ID of the Application for which to create a Service Principal.
	ApplicationId pulumi.StringInput
	// A collection of OAuth 2.0 permissions exposed by the associated Application. Each permission is covered by an `oauth2Permission` block as documented below.
	Oauth2Permissions ServicePrincipalOauth2PermissionArrayInput
	// A list of tags to apply to the Service Principal.
	Tags pulumi.StringArrayInput
}

func (ServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalArgs)(nil)).Elem()
}

type ServicePrincipalInput interface {
	pulumi.Input

	ToServicePrincipalOutput() ServicePrincipalOutput
	ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput
}

func (*ServicePrincipal) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipal)(nil))
}

func (i *ServicePrincipal) ToServicePrincipalOutput() ServicePrincipalOutput {
	return i.ToServicePrincipalOutputWithContext(context.Background())
}

func (i *ServicePrincipal) ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOutput)
}

func (i *ServicePrincipal) ToServicePrincipalPtrOutput() ServicePrincipalPtrOutput {
	return i.ToServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *ServicePrincipal) ToServicePrincipalPtrOutputWithContext(ctx context.Context) ServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalPtrOutput)
}

type ServicePrincipalPtrInput interface {
	pulumi.Input

	ToServicePrincipalPtrOutput() ServicePrincipalPtrOutput
	ToServicePrincipalPtrOutputWithContext(ctx context.Context) ServicePrincipalPtrOutput
}

type servicePrincipalPtrType ServicePrincipalArgs

func (*servicePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipal)(nil))
}

func (i *servicePrincipalPtrType) ToServicePrincipalPtrOutput() ServicePrincipalPtrOutput {
	return i.ToServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalPtrType) ToServicePrincipalPtrOutputWithContext(ctx context.Context) ServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalPtrOutput)
}

// ServicePrincipalArrayInput is an input type that accepts ServicePrincipalArray and ServicePrincipalArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalArrayInput` via:
//
//          ServicePrincipalArray{ ServicePrincipalArgs{...} }
type ServicePrincipalArrayInput interface {
	pulumi.Input

	ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput
	ToServicePrincipalArrayOutputWithContext(context.Context) ServicePrincipalArrayOutput
}

type ServicePrincipalArray []ServicePrincipalInput

func (ServicePrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ServicePrincipal)(nil))
}

func (i ServicePrincipalArray) ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput {
	return i.ToServicePrincipalArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalArray) ToServicePrincipalArrayOutputWithContext(ctx context.Context) ServicePrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalArrayOutput)
}

// ServicePrincipalMapInput is an input type that accepts ServicePrincipalMap and ServicePrincipalMapOutput values.
// You can construct a concrete instance of `ServicePrincipalMapInput` via:
//
//          ServicePrincipalMap{ "key": ServicePrincipalArgs{...} }
type ServicePrincipalMapInput interface {
	pulumi.Input

	ToServicePrincipalMapOutput() ServicePrincipalMapOutput
	ToServicePrincipalMapOutputWithContext(context.Context) ServicePrincipalMapOutput
}

type ServicePrincipalMap map[string]ServicePrincipalInput

func (ServicePrincipalMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ServicePrincipal)(nil))
}

func (i ServicePrincipalMap) ToServicePrincipalMapOutput() ServicePrincipalMapOutput {
	return i.ToServicePrincipalMapOutputWithContext(context.Background())
}

func (i ServicePrincipalMap) ToServicePrincipalMapOutputWithContext(ctx context.Context) ServicePrincipalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalMapOutput)
}

type ServicePrincipalOutput struct {
	*pulumi.OutputState
}

func (ServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipal)(nil))
}

func (o ServicePrincipalOutput) ToServicePrincipalOutput() ServicePrincipalOutput {
	return o
}

func (o ServicePrincipalOutput) ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput {
	return o
}

func (o ServicePrincipalOutput) ToServicePrincipalPtrOutput() ServicePrincipalPtrOutput {
	return o.ToServicePrincipalPtrOutputWithContext(context.Background())
}

func (o ServicePrincipalOutput) ToServicePrincipalPtrOutputWithContext(ctx context.Context) ServicePrincipalPtrOutput {
	return o.ApplyT(func(v ServicePrincipal) *ServicePrincipal {
		return &v
	}).(ServicePrincipalPtrOutput)
}

type ServicePrincipalPtrOutput struct {
	*pulumi.OutputState
}

func (ServicePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipal)(nil))
}

func (o ServicePrincipalPtrOutput) ToServicePrincipalPtrOutput() ServicePrincipalPtrOutput {
	return o
}

func (o ServicePrincipalPtrOutput) ToServicePrincipalPtrOutputWithContext(ctx context.Context) ServicePrincipalPtrOutput {
	return o
}

type ServicePrincipalArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipal)(nil))
}

func (o ServicePrincipalArrayOutput) ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput {
	return o
}

func (o ServicePrincipalArrayOutput) ToServicePrincipalArrayOutputWithContext(ctx context.Context) ServicePrincipalArrayOutput {
	return o
}

func (o ServicePrincipalArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipal {
		return vs[0].([]ServicePrincipal)[vs[1].(int)]
	}).(ServicePrincipalOutput)
}

type ServicePrincipalMapOutput struct{ *pulumi.OutputState }

func (ServicePrincipalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServicePrincipal)(nil))
}

func (o ServicePrincipalMapOutput) ToServicePrincipalMapOutput() ServicePrincipalMapOutput {
	return o
}

func (o ServicePrincipalMapOutput) ToServicePrincipalMapOutputWithContext(ctx context.Context) ServicePrincipalMapOutput {
	return o
}

func (o ServicePrincipalMapOutput) MapIndex(k pulumi.StringInput) ServicePrincipalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServicePrincipal {
		return vs[0].(map[string]ServicePrincipal)[vs[1].(string)]
	}).(ServicePrincipalOutput)
}

func init() {
	pulumi.RegisterOutputType(ServicePrincipalOutput{})
	pulumi.RegisterOutputType(ServicePrincipalPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalMapOutput{})
}
