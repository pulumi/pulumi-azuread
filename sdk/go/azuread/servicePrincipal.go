// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServicePrincipal struct {
	pulumi.CustomResourceState

	// Whether or not the service principal account is enabled
	AccountEnabled pulumi.BoolPtrOutput `pulumi:"accountEnabled"`
	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
	// resource ids for managed identities
	AlternativeNames pulumi.StringArrayOutput `pulumi:"alternativeNames"`
	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
	// access token to the application
	AppRoleAssignmentRequired pulumi.BoolPtrOutput `pulumi:"appRoleAssignmentRequired"`
	// Mapping of app role names to UUIDs
	AppRoleIds pulumi.StringMapOutput             `pulumi:"appRoleIds"`
	AppRoles   ServicePrincipalAppRoleArrayOutput `pulumi:"appRoles"`
	// The application ID (client ID) of the application for which to create a service principal
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The tenant ID where the associated application is registered
	ApplicationTenantId pulumi.StringOutput `pulumi:"applicationTenantId"`
	// Description of the service principal provided for internal end-users
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the application associated with this service principal
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Block of features to configure for this service principal using tags
	FeatureTags ServicePrincipalFeatureTagArrayOutput `pulumi:"featureTags"`
	// Block of features to configure for this service principal using tags
	//
	// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
	Features ServicePrincipalFeatureArrayOutput `pulumi:"features"`
	// Home page or landing page of the application
	HomepageUrl pulumi.StringOutput `pulumi:"homepageUrl"`
	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
	// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
	// applications configured with SAML-based single sign-on
	LoginUrl pulumi.StringPtrOutput `pulumi:"loginUrl"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
	// SAML logout protocols
	LogoutUrl pulumi.StringOutput `pulumi:"logoutUrl"`
	// Free text field to capture information about the service principal, typically used for operational purposes
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
	// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	NotificationEmailAddresses pulumi.StringArrayOutput `pulumi:"notificationEmailAddresses"`
	// Mapping of OAuth2.0 permission scope names to UUIDs
	Oauth2PermissionScopeIds pulumi.StringMapOutput                           `pulumi:"oauth2PermissionScopeIds"`
	Oauth2PermissionScopes   ServicePrincipalOauth2PermissionScopeArrayOutput `pulumi:"oauth2PermissionScopes"`
	// The object ID of the service principal
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// A list of object IDs of principals that will be granted ownership of the service principal
	Owners pulumi.StringArrayOutput `pulumi:"owners"`
	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
	// application from Microsoft 365 or the Azure AD My Apps
	PreferredSingleSignOnMode pulumi.StringPtrOutput `pulumi:"preferredSingleSignOnMode"`
	// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
	// authorization codes and access tokens are sent for the associated application
	RedirectUris pulumi.StringArrayOutput `pulumi:"redirectUris"`
	// The URL where the service exposes SAML metadata for federation
	SamlMetadataUrl pulumi.StringOutput `pulumi:"samlMetadataUrl"`
	// Settings related to SAML single sign-on
	SamlSingleSignOn ServicePrincipalSamlSingleSignOnPtrOutput `pulumi:"samlSingleSignOn"`
	// A list of identifier URI(s), copied over from the associated application
	ServicePrincipalNames pulumi.StringArrayOutput `pulumi:"servicePrincipalNames"`
	// The Microsoft account types that are supported for the associated application
	SignInAudience pulumi.StringOutput `pulumi:"signInAudience"`
	// A set of tags to apply to the service principal
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Identifies whether the service principal represents an application or a managed identity
	Type pulumi.StringOutput `pulumi:"type"`
	// When true, the resource will return an existing service principal instead of failing with an error
	UseExisting pulumi.BoolPtrOutput `pulumi:"useExisting"`
}

// NewServicePrincipal registers a new resource with the given unique name, arguments, and options.
func NewServicePrincipal(ctx *pulumi.Context,
	name string, args *ServicePrincipalArgs, opts ...pulumi.ResourceOption) (*ServicePrincipal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	var resource ServicePrincipal
	err := ctx.RegisterResource("azuread:index/servicePrincipal:ServicePrincipal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePrincipal gets an existing ServicePrincipal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePrincipal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePrincipalState, opts ...pulumi.ResourceOption) (*ServicePrincipal, error) {
	var resource ServicePrincipal
	err := ctx.ReadResource("azuread:index/servicePrincipal:ServicePrincipal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePrincipal resources.
type servicePrincipalState struct {
	// Whether or not the service principal account is enabled
	AccountEnabled *bool `pulumi:"accountEnabled"`
	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
	// resource ids for managed identities
	AlternativeNames []string `pulumi:"alternativeNames"`
	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
	// access token to the application
	AppRoleAssignmentRequired *bool `pulumi:"appRoleAssignmentRequired"`
	// Mapping of app role names to UUIDs
	AppRoleIds map[string]string         `pulumi:"appRoleIds"`
	AppRoles   []ServicePrincipalAppRole `pulumi:"appRoles"`
	// The application ID (client ID) of the application for which to create a service principal
	ApplicationId *string `pulumi:"applicationId"`
	// The tenant ID where the associated application is registered
	ApplicationTenantId *string `pulumi:"applicationTenantId"`
	// Description of the service principal provided for internal end-users
	Description *string `pulumi:"description"`
	// The display name of the application associated with this service principal
	DisplayName *string `pulumi:"displayName"`
	// Block of features to configure for this service principal using tags
	FeatureTags []ServicePrincipalFeatureTag `pulumi:"featureTags"`
	// Block of features to configure for this service principal using tags
	//
	// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
	Features []ServicePrincipalFeature `pulumi:"features"`
	// Home page or landing page of the application
	HomepageUrl *string `pulumi:"homepageUrl"`
	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
	// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
	// applications configured with SAML-based single sign-on
	LoginUrl *string `pulumi:"loginUrl"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
	// SAML logout protocols
	LogoutUrl *string `pulumi:"logoutUrl"`
	// Free text field to capture information about the service principal, typically used for operational purposes
	Notes *string `pulumi:"notes"`
	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
	// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	NotificationEmailAddresses []string `pulumi:"notificationEmailAddresses"`
	// Mapping of OAuth2.0 permission scope names to UUIDs
	Oauth2PermissionScopeIds map[string]string                       `pulumi:"oauth2PermissionScopeIds"`
	Oauth2PermissionScopes   []ServicePrincipalOauth2PermissionScope `pulumi:"oauth2PermissionScopes"`
	// The object ID of the service principal
	ObjectId *string `pulumi:"objectId"`
	// A list of object IDs of principals that will be granted ownership of the service principal
	Owners []string `pulumi:"owners"`
	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
	// application from Microsoft 365 or the Azure AD My Apps
	PreferredSingleSignOnMode *string `pulumi:"preferredSingleSignOnMode"`
	// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
	// authorization codes and access tokens are sent for the associated application
	RedirectUris []string `pulumi:"redirectUris"`
	// The URL where the service exposes SAML metadata for federation
	SamlMetadataUrl *string `pulumi:"samlMetadataUrl"`
	// Settings related to SAML single sign-on
	SamlSingleSignOn *ServicePrincipalSamlSingleSignOn `pulumi:"samlSingleSignOn"`
	// A list of identifier URI(s), copied over from the associated application
	ServicePrincipalNames []string `pulumi:"servicePrincipalNames"`
	// The Microsoft account types that are supported for the associated application
	SignInAudience *string `pulumi:"signInAudience"`
	// A set of tags to apply to the service principal
	Tags []string `pulumi:"tags"`
	// Identifies whether the service principal represents an application or a managed identity
	Type *string `pulumi:"type"`
	// When true, the resource will return an existing service principal instead of failing with an error
	UseExisting *bool `pulumi:"useExisting"`
}

type ServicePrincipalState struct {
	// Whether or not the service principal account is enabled
	AccountEnabled pulumi.BoolPtrInput
	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
	// resource ids for managed identities
	AlternativeNames pulumi.StringArrayInput
	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
	// access token to the application
	AppRoleAssignmentRequired pulumi.BoolPtrInput
	// Mapping of app role names to UUIDs
	AppRoleIds pulumi.StringMapInput
	AppRoles   ServicePrincipalAppRoleArrayInput
	// The application ID (client ID) of the application for which to create a service principal
	ApplicationId pulumi.StringPtrInput
	// The tenant ID where the associated application is registered
	ApplicationTenantId pulumi.StringPtrInput
	// Description of the service principal provided for internal end-users
	Description pulumi.StringPtrInput
	// The display name of the application associated with this service principal
	DisplayName pulumi.StringPtrInput
	// Block of features to configure for this service principal using tags
	FeatureTags ServicePrincipalFeatureTagArrayInput
	// Block of features to configure for this service principal using tags
	//
	// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
	Features ServicePrincipalFeatureArrayInput
	// Home page or landing page of the application
	HomepageUrl pulumi.StringPtrInput
	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
	// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
	// applications configured with SAML-based single sign-on
	LoginUrl pulumi.StringPtrInput
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
	// SAML logout protocols
	LogoutUrl pulumi.StringPtrInput
	// Free text field to capture information about the service principal, typically used for operational purposes
	Notes pulumi.StringPtrInput
	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
	// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	NotificationEmailAddresses pulumi.StringArrayInput
	// Mapping of OAuth2.0 permission scope names to UUIDs
	Oauth2PermissionScopeIds pulumi.StringMapInput
	Oauth2PermissionScopes   ServicePrincipalOauth2PermissionScopeArrayInput
	// The object ID of the service principal
	ObjectId pulumi.StringPtrInput
	// A list of object IDs of principals that will be granted ownership of the service principal
	Owners pulumi.StringArrayInput
	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
	// application from Microsoft 365 or the Azure AD My Apps
	PreferredSingleSignOnMode pulumi.StringPtrInput
	// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
	// authorization codes and access tokens are sent for the associated application
	RedirectUris pulumi.StringArrayInput
	// The URL where the service exposes SAML metadata for federation
	SamlMetadataUrl pulumi.StringPtrInput
	// Settings related to SAML single sign-on
	SamlSingleSignOn ServicePrincipalSamlSingleSignOnPtrInput
	// A list of identifier URI(s), copied over from the associated application
	ServicePrincipalNames pulumi.StringArrayInput
	// The Microsoft account types that are supported for the associated application
	SignInAudience pulumi.StringPtrInput
	// A set of tags to apply to the service principal
	Tags pulumi.StringArrayInput
	// Identifies whether the service principal represents an application or a managed identity
	Type pulumi.StringPtrInput
	// When true, the resource will return an existing service principal instead of failing with an error
	UseExisting pulumi.BoolPtrInput
}

func (ServicePrincipalState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalState)(nil)).Elem()
}

type servicePrincipalArgs struct {
	// Whether or not the service principal account is enabled
	AccountEnabled *bool `pulumi:"accountEnabled"`
	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
	// resource ids for managed identities
	AlternativeNames []string `pulumi:"alternativeNames"`
	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
	// access token to the application
	AppRoleAssignmentRequired *bool `pulumi:"appRoleAssignmentRequired"`
	// The application ID (client ID) of the application for which to create a service principal
	ApplicationId string `pulumi:"applicationId"`
	// Description of the service principal provided for internal end-users
	Description *string `pulumi:"description"`
	// Block of features to configure for this service principal using tags
	FeatureTags []ServicePrincipalFeatureTag `pulumi:"featureTags"`
	// Block of features to configure for this service principal using tags
	//
	// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
	Features []ServicePrincipalFeature `pulumi:"features"`
	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
	// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
	// applications configured with SAML-based single sign-on
	LoginUrl *string `pulumi:"loginUrl"`
	// Free text field to capture information about the service principal, typically used for operational purposes
	Notes *string `pulumi:"notes"`
	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
	// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	NotificationEmailAddresses []string `pulumi:"notificationEmailAddresses"`
	// A list of object IDs of principals that will be granted ownership of the service principal
	Owners []string `pulumi:"owners"`
	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
	// application from Microsoft 365 or the Azure AD My Apps
	PreferredSingleSignOnMode *string `pulumi:"preferredSingleSignOnMode"`
	// Settings related to SAML single sign-on
	SamlSingleSignOn *ServicePrincipalSamlSingleSignOn `pulumi:"samlSingleSignOn"`
	// A set of tags to apply to the service principal
	Tags []string `pulumi:"tags"`
	// When true, the resource will return an existing service principal instead of failing with an error
	UseExisting *bool `pulumi:"useExisting"`
}

// The set of arguments for constructing a ServicePrincipal resource.
type ServicePrincipalArgs struct {
	// Whether or not the service principal account is enabled
	AccountEnabled pulumi.BoolPtrInput
	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
	// resource ids for managed identities
	AlternativeNames pulumi.StringArrayInput
	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
	// access token to the application
	AppRoleAssignmentRequired pulumi.BoolPtrInput
	// The application ID (client ID) of the application for which to create a service principal
	ApplicationId pulumi.StringInput
	// Description of the service principal provided for internal end-users
	Description pulumi.StringPtrInput
	// Block of features to configure for this service principal using tags
	FeatureTags ServicePrincipalFeatureTagArrayInput
	// Block of features to configure for this service principal using tags
	//
	// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
	Features ServicePrincipalFeatureArrayInput
	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
	// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
	// applications configured with SAML-based single sign-on
	LoginUrl pulumi.StringPtrInput
	// Free text field to capture information about the service principal, typically used for operational purposes
	Notes pulumi.StringPtrInput
	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
	// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	NotificationEmailAddresses pulumi.StringArrayInput
	// A list of object IDs of principals that will be granted ownership of the service principal
	Owners pulumi.StringArrayInput
	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
	// application from Microsoft 365 or the Azure AD My Apps
	PreferredSingleSignOnMode pulumi.StringPtrInput
	// Settings related to SAML single sign-on
	SamlSingleSignOn ServicePrincipalSamlSingleSignOnPtrInput
	// A set of tags to apply to the service principal
	Tags pulumi.StringArrayInput
	// When true, the resource will return an existing service principal instead of failing with an error
	UseExisting pulumi.BoolPtrInput
}

func (ServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalArgs)(nil)).Elem()
}

type ServicePrincipalInput interface {
	pulumi.Input

	ToServicePrincipalOutput() ServicePrincipalOutput
	ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput
}

func (*ServicePrincipal) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipal)(nil)).Elem()
}

func (i *ServicePrincipal) ToServicePrincipalOutput() ServicePrincipalOutput {
	return i.ToServicePrincipalOutputWithContext(context.Background())
}

func (i *ServicePrincipal) ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOutput)
}

// ServicePrincipalArrayInput is an input type that accepts ServicePrincipalArray and ServicePrincipalArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalArrayInput` via:
//
//	ServicePrincipalArray{ ServicePrincipalArgs{...} }
type ServicePrincipalArrayInput interface {
	pulumi.Input

	ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput
	ToServicePrincipalArrayOutputWithContext(context.Context) ServicePrincipalArrayOutput
}

type ServicePrincipalArray []ServicePrincipalInput

func (ServicePrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipal)(nil)).Elem()
}

func (i ServicePrincipalArray) ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput {
	return i.ToServicePrincipalArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalArray) ToServicePrincipalArrayOutputWithContext(ctx context.Context) ServicePrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalArrayOutput)
}

// ServicePrincipalMapInput is an input type that accepts ServicePrincipalMap and ServicePrincipalMapOutput values.
// You can construct a concrete instance of `ServicePrincipalMapInput` via:
//
//	ServicePrincipalMap{ "key": ServicePrincipalArgs{...} }
type ServicePrincipalMapInput interface {
	pulumi.Input

	ToServicePrincipalMapOutput() ServicePrincipalMapOutput
	ToServicePrincipalMapOutputWithContext(context.Context) ServicePrincipalMapOutput
}

type ServicePrincipalMap map[string]ServicePrincipalInput

func (ServicePrincipalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipal)(nil)).Elem()
}

func (i ServicePrincipalMap) ToServicePrincipalMapOutput() ServicePrincipalMapOutput {
	return i.ToServicePrincipalMapOutputWithContext(context.Background())
}

func (i ServicePrincipalMap) ToServicePrincipalMapOutputWithContext(ctx context.Context) ServicePrincipalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalMapOutput)
}

type ServicePrincipalOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipal)(nil)).Elem()
}

func (o ServicePrincipalOutput) ToServicePrincipalOutput() ServicePrincipalOutput {
	return o
}

func (o ServicePrincipalOutput) ToServicePrincipalOutputWithContext(ctx context.Context) ServicePrincipalOutput {
	return o
}

// Whether or not the service principal account is enabled
func (o ServicePrincipalOutput) AccountEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.BoolPtrOutput { return v.AccountEnabled }).(pulumi.BoolPtrOutput)
}

// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full
// resource ids for managed identities
func (o ServicePrincipalOutput) AlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.AlternativeNames }).(pulumi.StringArrayOutput)
}

// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or
// access token to the application
func (o ServicePrincipalOutput) AppRoleAssignmentRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.BoolPtrOutput { return v.AppRoleAssignmentRequired }).(pulumi.BoolPtrOutput)
}

// Mapping of app role names to UUIDs
func (o ServicePrincipalOutput) AppRoleIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringMapOutput { return v.AppRoleIds }).(pulumi.StringMapOutput)
}

func (o ServicePrincipalOutput) AppRoles() ServicePrincipalAppRoleArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) ServicePrincipalAppRoleArrayOutput { return v.AppRoles }).(ServicePrincipalAppRoleArrayOutput)
}

// The application ID (client ID) of the application for which to create a service principal
func (o ServicePrincipalOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The tenant ID where the associated application is registered
func (o ServicePrincipalOutput) ApplicationTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.ApplicationTenantId }).(pulumi.StringOutput)
}

// Description of the service principal provided for internal end-users
func (o ServicePrincipalOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the application associated with this service principal
func (o ServicePrincipalOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Block of features to configure for this service principal using tags
func (o ServicePrincipalOutput) FeatureTags() ServicePrincipalFeatureTagArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) ServicePrincipalFeatureTagArrayOutput { return v.FeatureTags }).(ServicePrincipalFeatureTagArrayOutput)
}

// Block of features to configure for this service principal using tags
//
// Deprecated: This block has been renamed to `feature_tags` and will be removed in version 3.0 of the provider
func (o ServicePrincipalOutput) Features() ServicePrincipalFeatureArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) ServicePrincipalFeatureArrayOutput { return v.Features }).(ServicePrincipalFeatureArrayOutput)
}

// Home page or landing page of the application
func (o ServicePrincipalOutput) HomepageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.HomepageUrl }).(pulumi.StringOutput)
}

// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the
// application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for
// applications configured with SAML-based single sign-on
func (o ServicePrincipalOutput) LoginUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringPtrOutput { return v.LoginUrl }).(pulumi.StringPtrOutput)
}

// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or
// SAML logout protocols
func (o ServicePrincipalOutput) LogoutUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.LogoutUrl }).(pulumi.StringOutput)
}

// Free text field to capture information about the service principal, typically used for operational purposes
func (o ServicePrincipalOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date.
// This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
func (o ServicePrincipalOutput) NotificationEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.NotificationEmailAddresses }).(pulumi.StringArrayOutput)
}

// Mapping of OAuth2.0 permission scope names to UUIDs
func (o ServicePrincipalOutput) Oauth2PermissionScopeIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringMapOutput { return v.Oauth2PermissionScopeIds }).(pulumi.StringMapOutput)
}

func (o ServicePrincipalOutput) Oauth2PermissionScopes() ServicePrincipalOauth2PermissionScopeArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) ServicePrincipalOauth2PermissionScopeArrayOutput {
		return v.Oauth2PermissionScopes
	}).(ServicePrincipalOauth2PermissionScopeArrayOutput)
}

// The object ID of the service principal
func (o ServicePrincipalOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// A list of object IDs of principals that will be granted ownership of the service principal
func (o ServicePrincipalOutput) Owners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.Owners }).(pulumi.StringArrayOutput)
}

// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the
// application from Microsoft 365 or the Azure AD My Apps
func (o ServicePrincipalOutput) PreferredSingleSignOnMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringPtrOutput { return v.PreferredSingleSignOnMode }).(pulumi.StringPtrOutput)
}

// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0
// authorization codes and access tokens are sent for the associated application
func (o ServicePrincipalOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

// The URL where the service exposes SAML metadata for federation
func (o ServicePrincipalOutput) SamlMetadataUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.SamlMetadataUrl }).(pulumi.StringOutput)
}

// Settings related to SAML single sign-on
func (o ServicePrincipalOutput) SamlSingleSignOn() ServicePrincipalSamlSingleSignOnPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) ServicePrincipalSamlSingleSignOnPtrOutput { return v.SamlSingleSignOn }).(ServicePrincipalSamlSingleSignOnPtrOutput)
}

// A list of identifier URI(s), copied over from the associated application
func (o ServicePrincipalOutput) ServicePrincipalNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.ServicePrincipalNames }).(pulumi.StringArrayOutput)
}

// The Microsoft account types that are supported for the associated application
func (o ServicePrincipalOutput) SignInAudience() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.SignInAudience }).(pulumi.StringOutput)
}

// A set of tags to apply to the service principal
func (o ServicePrincipalOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Identifies whether the service principal represents an application or a managed identity
func (o ServicePrincipalOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When true, the resource will return an existing service principal instead of failing with an error
func (o ServicePrincipalOutput) UseExisting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePrincipal) pulumi.BoolPtrOutput { return v.UseExisting }).(pulumi.BoolPtrOutput)
}

type ServicePrincipalArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipal)(nil)).Elem()
}

func (o ServicePrincipalArrayOutput) ToServicePrincipalArrayOutput() ServicePrincipalArrayOutput {
	return o
}

func (o ServicePrincipalArrayOutput) ToServicePrincipalArrayOutputWithContext(ctx context.Context) ServicePrincipalArrayOutput {
	return o
}

func (o ServicePrincipalArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePrincipal {
		return vs[0].([]*ServicePrincipal)[vs[1].(int)]
	}).(ServicePrincipalOutput)
}

type ServicePrincipalMapOutput struct{ *pulumi.OutputState }

func (ServicePrincipalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipal)(nil)).Elem()
}

func (o ServicePrincipalMapOutput) ToServicePrincipalMapOutput() ServicePrincipalMapOutput {
	return o
}

func (o ServicePrincipalMapOutput) ToServicePrincipalMapOutputWithContext(ctx context.Context) ServicePrincipalMapOutput {
	return o
}

func (o ServicePrincipalMapOutput) MapIndex(k pulumi.StringInput) ServicePrincipalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePrincipal {
		return vs[0].(map[string]*ServicePrincipal)[vs[1].(string)]
	}).(ServicePrincipalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalInput)(nil)).Elem(), &ServicePrincipal{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalArrayInput)(nil)).Elem(), ServicePrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalMapInput)(nil)).Elem(), ServicePrincipalMap{})
	pulumi.RegisterOutputType(ServicePrincipalOutput{})
	pulumi.RegisterOutputType(ServicePrincipalArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalMapOutput{})
}
