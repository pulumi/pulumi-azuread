// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the resources added to access packages within Identity Governance in Azure Active Directory.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.
//
// When authenticated with a user principal, this resource requires one of the following directory roles: `Catalog owner`, `Access package manager` or `Global Administrator`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azuread.NewGroup(ctx, "exampleGroup", &azuread.GroupArgs{
//				DisplayName:     pulumi.String("example-group"),
//				SecurityEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewAccessPackageCatalog(ctx, "exampleAccessPackageCatalog", &azuread.AccessPackageCatalogArgs{
//				DisplayName: pulumi.String("example-catalog"),
//				Description: pulumi.String("Example catalog"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccessPackageResourceCatalogAssociation, err := azuread.NewAccessPackageResourceCatalogAssociation(ctx, "exampleAccessPackageResourceCatalogAssociation", &azuread.AccessPackageResourceCatalogAssociationArgs{
//				CatalogId:            pulumi.Any(azuread_access_package_catalog.Example_catalog.Id),
//				ResourceOriginId:     pulumi.Any(azuread_group.Example_group.Object_id),
//				ResourceOriginSystem: pulumi.String("AadGroup"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccessPackage, err := azuread.NewAccessPackage(ctx, "exampleAccessPackage", &azuread.AccessPackageArgs{
//				DisplayName: pulumi.String("example-package"),
//				Description: pulumi.String("Example Package"),
//				CatalogId:   pulumi.Any(azuread_access_package_catalog.Example_catalog.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewAccessPackageResourcePackageAssociation(ctx, "exampleAccessPackageResourcePackageAssociation", &azuread.AccessPackageResourcePackageAssociationArgs{
//				AccessPackageId:              exampleAccessPackage.ID(),
//				CatalogResourceAssociationId: exampleAccessPackageResourceCatalogAssociation.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource and catalog association can be imported using the access package ID, the access package ResourceRoleScope, the resource origin ID, and the access type, e.g.
//
// ```sh
// $ pulumi import azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation example 00000000-0000-0000-0000-000000000000/11111111-1111-1111-1111-111111111111_22222222-2222-2222-2222-22222222/33333333-3333-3333-3333-33333333/Member
// ```
//
//	-> This ID format is unique to Terraform and is composed of the Access Package ID, the access package ResourceRoleScope (in the format Role_Scope), the Resource Origin ID, and the Access Type, in the format `{AccessPackageID}/{ResourceRoleScope}/{ResourceOriginID}/{AccessType}`.
type AccessPackageResourcePackageAssociation struct {
	pulumi.CustomResourceState

	// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
	AccessPackageId pulumi.StringOutput `pulumi:"accessPackageId"`
	// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
	AccessType pulumi.StringPtrOutput `pulumi:"accessType"`
	// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
	CatalogResourceAssociationId pulumi.StringOutput `pulumi:"catalogResourceAssociationId"`
}

// NewAccessPackageResourcePackageAssociation registers a new resource with the given unique name, arguments, and options.
func NewAccessPackageResourcePackageAssociation(ctx *pulumi.Context,
	name string, args *AccessPackageResourcePackageAssociationArgs, opts ...pulumi.ResourceOption) (*AccessPackageResourcePackageAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPackageId == nil {
		return nil, errors.New("invalid value for required argument 'AccessPackageId'")
	}
	if args.CatalogResourceAssociationId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogResourceAssociationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPackageResourcePackageAssociation
	err := ctx.RegisterResource("azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPackageResourcePackageAssociation gets an existing AccessPackageResourcePackageAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPackageResourcePackageAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPackageResourcePackageAssociationState, opts ...pulumi.ResourceOption) (*AccessPackageResourcePackageAssociation, error) {
	var resource AccessPackageResourcePackageAssociation
	err := ctx.ReadResource("azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPackageResourcePackageAssociation resources.
type accessPackageResourcePackageAssociationState struct {
	// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
	AccessPackageId *string `pulumi:"accessPackageId"`
	// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
	AccessType *string `pulumi:"accessType"`
	// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
	CatalogResourceAssociationId *string `pulumi:"catalogResourceAssociationId"`
}

type AccessPackageResourcePackageAssociationState struct {
	// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
	AccessPackageId pulumi.StringPtrInput
	// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
	AccessType pulumi.StringPtrInput
	// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
	CatalogResourceAssociationId pulumi.StringPtrInput
}

func (AccessPackageResourcePackageAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPackageResourcePackageAssociationState)(nil)).Elem()
}

type accessPackageResourcePackageAssociationArgs struct {
	// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
	AccessPackageId string `pulumi:"accessPackageId"`
	// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
	AccessType *string `pulumi:"accessType"`
	// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
	CatalogResourceAssociationId string `pulumi:"catalogResourceAssociationId"`
}

// The set of arguments for constructing a AccessPackageResourcePackageAssociation resource.
type AccessPackageResourcePackageAssociationArgs struct {
	// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
	AccessPackageId pulumi.StringInput
	// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
	AccessType pulumi.StringPtrInput
	// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
	CatalogResourceAssociationId pulumi.StringInput
}

func (AccessPackageResourcePackageAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPackageResourcePackageAssociationArgs)(nil)).Elem()
}

type AccessPackageResourcePackageAssociationInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput
	ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput
}

func (*AccessPackageResourcePackageAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i *AccessPackageResourcePackageAssociation) ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput {
	return i.ToAccessPackageResourcePackageAssociationOutputWithContext(context.Background())
}

func (i *AccessPackageResourcePackageAssociation) ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationOutput)
}

// AccessPackageResourcePackageAssociationArrayInput is an input type that accepts AccessPackageResourcePackageAssociationArray and AccessPackageResourcePackageAssociationArrayOutput values.
// You can construct a concrete instance of `AccessPackageResourcePackageAssociationArrayInput` via:
//
//	AccessPackageResourcePackageAssociationArray{ AccessPackageResourcePackageAssociationArgs{...} }
type AccessPackageResourcePackageAssociationArrayInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput
	ToAccessPackageResourcePackageAssociationArrayOutputWithContext(context.Context) AccessPackageResourcePackageAssociationArrayOutput
}

type AccessPackageResourcePackageAssociationArray []AccessPackageResourcePackageAssociationInput

func (AccessPackageResourcePackageAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i AccessPackageResourcePackageAssociationArray) ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput {
	return i.ToAccessPackageResourcePackageAssociationArrayOutputWithContext(context.Background())
}

func (i AccessPackageResourcePackageAssociationArray) ToAccessPackageResourcePackageAssociationArrayOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationArrayOutput)
}

// AccessPackageResourcePackageAssociationMapInput is an input type that accepts AccessPackageResourcePackageAssociationMap and AccessPackageResourcePackageAssociationMapOutput values.
// You can construct a concrete instance of `AccessPackageResourcePackageAssociationMapInput` via:
//
//	AccessPackageResourcePackageAssociationMap{ "key": AccessPackageResourcePackageAssociationArgs{...} }
type AccessPackageResourcePackageAssociationMapInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput
	ToAccessPackageResourcePackageAssociationMapOutputWithContext(context.Context) AccessPackageResourcePackageAssociationMapOutput
}

type AccessPackageResourcePackageAssociationMap map[string]AccessPackageResourcePackageAssociationInput

func (AccessPackageResourcePackageAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i AccessPackageResourcePackageAssociationMap) ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput {
	return i.ToAccessPackageResourcePackageAssociationMapOutputWithContext(context.Background())
}

func (i AccessPackageResourcePackageAssociationMap) ToAccessPackageResourcePackageAssociationMapOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationMapOutput)
}

type AccessPackageResourcePackageAssociationOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationOutput) ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationOutput) ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput {
	return o
}

// The ID of access package this resource association is configured to. Changing this forces a new resource to be created.
func (o AccessPackageResourcePackageAssociationOutput) AccessPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringOutput { return v.AccessPackageId }).(pulumi.StringOutput)
}

// The role of access type to the specified resource. Valid values are `Member`, or `Owner` The default is `Member`. Changing this forces a new resource to be created.
func (o AccessPackageResourcePackageAssociationOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringPtrOutput { return v.AccessType }).(pulumi.StringPtrOutput)
}

// The ID of the catalog association from the `AccessPackageResourceCatalogAssociation` resource. Changing this forces a new resource to be created.
func (o AccessPackageResourcePackageAssociationOutput) CatalogResourceAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringOutput {
		return v.CatalogResourceAssociationId
	}).(pulumi.StringOutput)
}

type AccessPackageResourcePackageAssociationArrayOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationArrayOutput) ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationArrayOutput) ToAccessPackageResourcePackageAssociationArrayOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationArrayOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationArrayOutput) Index(i pulumi.IntInput) AccessPackageResourcePackageAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPackageResourcePackageAssociation {
		return vs[0].([]*AccessPackageResourcePackageAssociation)[vs[1].(int)]
	}).(AccessPackageResourcePackageAssociationOutput)
}

type AccessPackageResourcePackageAssociationMapOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationMapOutput) ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationMapOutput) ToAccessPackageResourcePackageAssociationMapOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationMapOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationMapOutput) MapIndex(k pulumi.StringInput) AccessPackageResourcePackageAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPackageResourcePackageAssociation {
		return vs[0].(map[string]*AccessPackageResourcePackageAssociation)[vs[1].(string)]
	}).(AccessPackageResourcePackageAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationInput)(nil)).Elem(), &AccessPackageResourcePackageAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationArrayInput)(nil)).Elem(), AccessPackageResourcePackageAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationMapInput)(nil)).Elem(), AccessPackageResourcePackageAssociationMap{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationOutput{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationArrayOutput{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationMapOutput{})
}
