// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessPackageResourcePackageAssociation struct {
	pulumi.CustomResourceState

	// The ID of access package this resource association is configured to
	AccessPackageId pulumi.StringOutput `pulumi:"accessPackageId"`
	// The role of access type to the specified resource, valid values are `Member` and `Owner`
	AccessType pulumi.StringPtrOutput `pulumi:"accessType"`
	// The ID of the access package catalog association
	CatalogResourceAssociationId pulumi.StringOutput `pulumi:"catalogResourceAssociationId"`
}

// NewAccessPackageResourcePackageAssociation registers a new resource with the given unique name, arguments, and options.
func NewAccessPackageResourcePackageAssociation(ctx *pulumi.Context,
	name string, args *AccessPackageResourcePackageAssociationArgs, opts ...pulumi.ResourceOption) (*AccessPackageResourcePackageAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPackageId == nil {
		return nil, errors.New("invalid value for required argument 'AccessPackageId'")
	}
	if args.CatalogResourceAssociationId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogResourceAssociationId'")
	}
	var resource AccessPackageResourcePackageAssociation
	err := ctx.RegisterResource("azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPackageResourcePackageAssociation gets an existing AccessPackageResourcePackageAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPackageResourcePackageAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPackageResourcePackageAssociationState, opts ...pulumi.ResourceOption) (*AccessPackageResourcePackageAssociation, error) {
	var resource AccessPackageResourcePackageAssociation
	err := ctx.ReadResource("azuread:index/accessPackageResourcePackageAssociation:AccessPackageResourcePackageAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPackageResourcePackageAssociation resources.
type accessPackageResourcePackageAssociationState struct {
	// The ID of access package this resource association is configured to
	AccessPackageId *string `pulumi:"accessPackageId"`
	// The role of access type to the specified resource, valid values are `Member` and `Owner`
	AccessType *string `pulumi:"accessType"`
	// The ID of the access package catalog association
	CatalogResourceAssociationId *string `pulumi:"catalogResourceAssociationId"`
}

type AccessPackageResourcePackageAssociationState struct {
	// The ID of access package this resource association is configured to
	AccessPackageId pulumi.StringPtrInput
	// The role of access type to the specified resource, valid values are `Member` and `Owner`
	AccessType pulumi.StringPtrInput
	// The ID of the access package catalog association
	CatalogResourceAssociationId pulumi.StringPtrInput
}

func (AccessPackageResourcePackageAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPackageResourcePackageAssociationState)(nil)).Elem()
}

type accessPackageResourcePackageAssociationArgs struct {
	// The ID of access package this resource association is configured to
	AccessPackageId string `pulumi:"accessPackageId"`
	// The role of access type to the specified resource, valid values are `Member` and `Owner`
	AccessType *string `pulumi:"accessType"`
	// The ID of the access package catalog association
	CatalogResourceAssociationId string `pulumi:"catalogResourceAssociationId"`
}

// The set of arguments for constructing a AccessPackageResourcePackageAssociation resource.
type AccessPackageResourcePackageAssociationArgs struct {
	// The ID of access package this resource association is configured to
	AccessPackageId pulumi.StringInput
	// The role of access type to the specified resource, valid values are `Member` and `Owner`
	AccessType pulumi.StringPtrInput
	// The ID of the access package catalog association
	CatalogResourceAssociationId pulumi.StringInput
}

func (AccessPackageResourcePackageAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPackageResourcePackageAssociationArgs)(nil)).Elem()
}

type AccessPackageResourcePackageAssociationInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput
	ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput
}

func (*AccessPackageResourcePackageAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i *AccessPackageResourcePackageAssociation) ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput {
	return i.ToAccessPackageResourcePackageAssociationOutputWithContext(context.Background())
}

func (i *AccessPackageResourcePackageAssociation) ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationOutput)
}

// AccessPackageResourcePackageAssociationArrayInput is an input type that accepts AccessPackageResourcePackageAssociationArray and AccessPackageResourcePackageAssociationArrayOutput values.
// You can construct a concrete instance of `AccessPackageResourcePackageAssociationArrayInput` via:
//
//	AccessPackageResourcePackageAssociationArray{ AccessPackageResourcePackageAssociationArgs{...} }
type AccessPackageResourcePackageAssociationArrayInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput
	ToAccessPackageResourcePackageAssociationArrayOutputWithContext(context.Context) AccessPackageResourcePackageAssociationArrayOutput
}

type AccessPackageResourcePackageAssociationArray []AccessPackageResourcePackageAssociationInput

func (AccessPackageResourcePackageAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i AccessPackageResourcePackageAssociationArray) ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput {
	return i.ToAccessPackageResourcePackageAssociationArrayOutputWithContext(context.Background())
}

func (i AccessPackageResourcePackageAssociationArray) ToAccessPackageResourcePackageAssociationArrayOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationArrayOutput)
}

// AccessPackageResourcePackageAssociationMapInput is an input type that accepts AccessPackageResourcePackageAssociationMap and AccessPackageResourcePackageAssociationMapOutput values.
// You can construct a concrete instance of `AccessPackageResourcePackageAssociationMapInput` via:
//
//	AccessPackageResourcePackageAssociationMap{ "key": AccessPackageResourcePackageAssociationArgs{...} }
type AccessPackageResourcePackageAssociationMapInput interface {
	pulumi.Input

	ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput
	ToAccessPackageResourcePackageAssociationMapOutputWithContext(context.Context) AccessPackageResourcePackageAssociationMapOutput
}

type AccessPackageResourcePackageAssociationMap map[string]AccessPackageResourcePackageAssociationInput

func (AccessPackageResourcePackageAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (i AccessPackageResourcePackageAssociationMap) ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput {
	return i.ToAccessPackageResourcePackageAssociationMapOutputWithContext(context.Background())
}

func (i AccessPackageResourcePackageAssociationMap) ToAccessPackageResourcePackageAssociationMapOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPackageResourcePackageAssociationMapOutput)
}

type AccessPackageResourcePackageAssociationOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationOutput) ToAccessPackageResourcePackageAssociationOutput() AccessPackageResourcePackageAssociationOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationOutput) ToAccessPackageResourcePackageAssociationOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationOutput {
	return o
}

// The ID of access package this resource association is configured to
func (o AccessPackageResourcePackageAssociationOutput) AccessPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringOutput { return v.AccessPackageId }).(pulumi.StringOutput)
}

// The role of access type to the specified resource, valid values are `Member` and `Owner`
func (o AccessPackageResourcePackageAssociationOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringPtrOutput { return v.AccessType }).(pulumi.StringPtrOutput)
}

// The ID of the access package catalog association
func (o AccessPackageResourcePackageAssociationOutput) CatalogResourceAssociationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPackageResourcePackageAssociation) pulumi.StringOutput {
		return v.CatalogResourceAssociationId
	}).(pulumi.StringOutput)
}

type AccessPackageResourcePackageAssociationArrayOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationArrayOutput) ToAccessPackageResourcePackageAssociationArrayOutput() AccessPackageResourcePackageAssociationArrayOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationArrayOutput) ToAccessPackageResourcePackageAssociationArrayOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationArrayOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationArrayOutput) Index(i pulumi.IntInput) AccessPackageResourcePackageAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPackageResourcePackageAssociation {
		return vs[0].([]*AccessPackageResourcePackageAssociation)[vs[1].(int)]
	}).(AccessPackageResourcePackageAssociationOutput)
}

type AccessPackageResourcePackageAssociationMapOutput struct{ *pulumi.OutputState }

func (AccessPackageResourcePackageAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPackageResourcePackageAssociation)(nil)).Elem()
}

func (o AccessPackageResourcePackageAssociationMapOutput) ToAccessPackageResourcePackageAssociationMapOutput() AccessPackageResourcePackageAssociationMapOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationMapOutput) ToAccessPackageResourcePackageAssociationMapOutputWithContext(ctx context.Context) AccessPackageResourcePackageAssociationMapOutput {
	return o
}

func (o AccessPackageResourcePackageAssociationMapOutput) MapIndex(k pulumi.StringInput) AccessPackageResourcePackageAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPackageResourcePackageAssociation {
		return vs[0].(map[string]*AccessPackageResourcePackageAssociation)[vs[1].(string)]
	}).(AccessPackageResourcePackageAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationInput)(nil)).Elem(), &AccessPackageResourcePackageAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationArrayInput)(nil)).Elem(), AccessPackageResourcePackageAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPackageResourcePackageAssociationMapInput)(nil)).Elem(), AccessPackageResourcePackageAssociationMap{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationOutput{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationArrayOutput{})
	pulumi.RegisterOutputType(AccessPackageResourcePackageAssociationMapOutput{})
}
