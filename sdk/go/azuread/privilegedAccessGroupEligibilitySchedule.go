// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an eligible assignment to a privileged access group.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires the `PrivilegedEligibilitySchedule.ReadWrite.AzureADGroup` Microsoft Graph API permissions.
//
// When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azuread.NewGroup(ctx, "example", &azuread.GroupArgs{
//				DisplayName:     pulumi.String("group-name"),
//				SecurityEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			member, err := azuread.NewUser(ctx, "member", &azuread.UserArgs{
//				UserPrincipalName: pulumi.String("jdoe@example.com"),
//				DisplayName:       pulumi.String("J. Doe"),
//				MailNickname:      pulumi.String("jdoe"),
//				Password:          pulumi.String("SecretP@sswd99!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewPrivilegedAccessGroupEligibilitySchedule(ctx, "example", &azuread.PrivilegedAccessGroupEligibilityScheduleArgs{
//				GroupId:        pulumi.Any(pim.Id),
//				PrincipalId:    member.ID(),
//				AssignmentType: pulumi.String("member"),
//				Duration:       pulumi.String("P30D"),
//				Justification:  pulumi.String("as requested"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An assignment schedule can be imported using the schedule ID, e.g.
//
// ```sh
// $ pulumi import azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule example 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000
// ```
type PrivilegedAccessGroupEligibilitySchedule struct {
	pulumi.CustomResourceState

	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringOutput `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrOutput `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolOutput `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// (String) The provisioning status of this request.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrOutput `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrOutput `pulumi:"ticketSystem"`
}

// NewPrivilegedAccessGroupEligibilitySchedule registers a new resource with the given unique name, arguments, and options.
func NewPrivilegedAccessGroupEligibilitySchedule(ctx *pulumi.Context,
	name string, args *PrivilegedAccessGroupEligibilityScheduleArgs, opts ...pulumi.ResourceOption) (*PrivilegedAccessGroupEligibilitySchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssignmentType == nil {
		return nil, errors.New("invalid value for required argument 'AssignmentType'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivilegedAccessGroupEligibilitySchedule
	err := ctx.RegisterResource("azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilegedAccessGroupEligibilitySchedule gets an existing PrivilegedAccessGroupEligibilitySchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilegedAccessGroupEligibilitySchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegedAccessGroupEligibilityScheduleState, opts ...pulumi.ResourceOption) (*PrivilegedAccessGroupEligibilitySchedule, error) {
	var resource PrivilegedAccessGroupEligibilitySchedule
	err := ctx.ReadResource("azuread:index/privilegedAccessGroupEligibilitySchedule:PrivilegedAccessGroupEligibilitySchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivilegedAccessGroupEligibilitySchedule resources.
type privilegedAccessGroupEligibilityScheduleState struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType *string `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration *string `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate *string `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId *string `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification *string `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment *bool `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId *string `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate *string `pulumi:"startDate"`
	// (String) The provisioning status of this request.
	Status *string `pulumi:"status"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber *string `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem *string `pulumi:"ticketSystem"`
}

type PrivilegedAccessGroupEligibilityScheduleState struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringPtrInput
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrInput
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringPtrInput
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringPtrInput
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrInput
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolPtrInput
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringPtrInput
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringPtrInput
	// (String) The provisioning status of this request.
	Status pulumi.StringPtrInput
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrInput
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrInput
}

func (PrivilegedAccessGroupEligibilityScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessGroupEligibilityScheduleState)(nil)).Elem()
}

type privilegedAccessGroupEligibilityScheduleArgs struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType string `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration *string `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate *string `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId string `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification *string `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment *bool `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId string `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate *string `pulumi:"startDate"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber *string `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem *string `pulumi:"ticketSystem"`
}

// The set of arguments for constructing a PrivilegedAccessGroupEligibilitySchedule resource.
type PrivilegedAccessGroupEligibilityScheduleArgs struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringInput
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrInput
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringPtrInput
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringInput
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrInput
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolPtrInput
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringInput
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringPtrInput
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrInput
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrInput
}

func (PrivilegedAccessGroupEligibilityScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessGroupEligibilityScheduleArgs)(nil)).Elem()
}

type PrivilegedAccessGroupEligibilityScheduleInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupEligibilityScheduleOutput() PrivilegedAccessGroupEligibilityScheduleOutput
	ToPrivilegedAccessGroupEligibilityScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleOutput
}

func (*PrivilegedAccessGroupEligibilitySchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (i *PrivilegedAccessGroupEligibilitySchedule) ToPrivilegedAccessGroupEligibilityScheduleOutput() PrivilegedAccessGroupEligibilityScheduleOutput {
	return i.ToPrivilegedAccessGroupEligibilityScheduleOutputWithContext(context.Background())
}

func (i *PrivilegedAccessGroupEligibilitySchedule) ToPrivilegedAccessGroupEligibilityScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupEligibilityScheduleOutput)
}

// PrivilegedAccessGroupEligibilityScheduleArrayInput is an input type that accepts PrivilegedAccessGroupEligibilityScheduleArray and PrivilegedAccessGroupEligibilityScheduleArrayOutput values.
// You can construct a concrete instance of `PrivilegedAccessGroupEligibilityScheduleArrayInput` via:
//
//	PrivilegedAccessGroupEligibilityScheduleArray{ PrivilegedAccessGroupEligibilityScheduleArgs{...} }
type PrivilegedAccessGroupEligibilityScheduleArrayInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupEligibilityScheduleArrayOutput() PrivilegedAccessGroupEligibilityScheduleArrayOutput
	ToPrivilegedAccessGroupEligibilityScheduleArrayOutputWithContext(context.Context) PrivilegedAccessGroupEligibilityScheduleArrayOutput
}

type PrivilegedAccessGroupEligibilityScheduleArray []PrivilegedAccessGroupEligibilityScheduleInput

func (PrivilegedAccessGroupEligibilityScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (i PrivilegedAccessGroupEligibilityScheduleArray) ToPrivilegedAccessGroupEligibilityScheduleArrayOutput() PrivilegedAccessGroupEligibilityScheduleArrayOutput {
	return i.ToPrivilegedAccessGroupEligibilityScheduleArrayOutputWithContext(context.Background())
}

func (i PrivilegedAccessGroupEligibilityScheduleArray) ToPrivilegedAccessGroupEligibilityScheduleArrayOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupEligibilityScheduleArrayOutput)
}

// PrivilegedAccessGroupEligibilityScheduleMapInput is an input type that accepts PrivilegedAccessGroupEligibilityScheduleMap and PrivilegedAccessGroupEligibilityScheduleMapOutput values.
// You can construct a concrete instance of `PrivilegedAccessGroupEligibilityScheduleMapInput` via:
//
//	PrivilegedAccessGroupEligibilityScheduleMap{ "key": PrivilegedAccessGroupEligibilityScheduleArgs{...} }
type PrivilegedAccessGroupEligibilityScheduleMapInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupEligibilityScheduleMapOutput() PrivilegedAccessGroupEligibilityScheduleMapOutput
	ToPrivilegedAccessGroupEligibilityScheduleMapOutputWithContext(context.Context) PrivilegedAccessGroupEligibilityScheduleMapOutput
}

type PrivilegedAccessGroupEligibilityScheduleMap map[string]PrivilegedAccessGroupEligibilityScheduleInput

func (PrivilegedAccessGroupEligibilityScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (i PrivilegedAccessGroupEligibilityScheduleMap) ToPrivilegedAccessGroupEligibilityScheduleMapOutput() PrivilegedAccessGroupEligibilityScheduleMapOutput {
	return i.ToPrivilegedAccessGroupEligibilityScheduleMapOutputWithContext(context.Background())
}

func (i PrivilegedAccessGroupEligibilityScheduleMap) ToPrivilegedAccessGroupEligibilityScheduleMapOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupEligibilityScheduleMapOutput)
}

type PrivilegedAccessGroupEligibilityScheduleOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupEligibilityScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupEligibilityScheduleOutput) ToPrivilegedAccessGroupEligibilityScheduleOutput() PrivilegedAccessGroupEligibilityScheduleOutput {
	return o
}

func (o PrivilegedAccessGroupEligibilityScheduleOutput) ToPrivilegedAccessGroupEligibilityScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleOutput {
	return o
}

// The type of assignment to the group. Can be either `member` or `owner`.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) AssignmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.AssignmentType }).(pulumi.StringOutput)
}

// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
func (o PrivilegedAccessGroupEligibilityScheduleOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
func (o PrivilegedAccessGroupEligibilityScheduleOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The Object ID of the Azure AD group to which the principal will be assigned.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The justification for this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringPtrOutput { return v.Justification }).(pulumi.StringPtrOutput)
}

// Is this assigment permanently valid.
//
// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) PermanentAssignment() pulumi.BoolOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.BoolOutput { return v.PermanentAssignment }).(pulumi.BoolOutput)
}

// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// (String) The provisioning status of this request.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ticket number in the ticket system approving this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringPtrOutput { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupEligibilityScheduleOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupEligibilitySchedule) pulumi.StringPtrOutput { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type PrivilegedAccessGroupEligibilityScheduleArrayOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupEligibilityScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupEligibilityScheduleArrayOutput) ToPrivilegedAccessGroupEligibilityScheduleArrayOutput() PrivilegedAccessGroupEligibilityScheduleArrayOutput {
	return o
}

func (o PrivilegedAccessGroupEligibilityScheduleArrayOutput) ToPrivilegedAccessGroupEligibilityScheduleArrayOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleArrayOutput {
	return o
}

func (o PrivilegedAccessGroupEligibilityScheduleArrayOutput) Index(i pulumi.IntInput) PrivilegedAccessGroupEligibilityScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivilegedAccessGroupEligibilitySchedule {
		return vs[0].([]*PrivilegedAccessGroupEligibilitySchedule)[vs[1].(int)]
	}).(PrivilegedAccessGroupEligibilityScheduleOutput)
}

type PrivilegedAccessGroupEligibilityScheduleMapOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupEligibilityScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivilegedAccessGroupEligibilitySchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupEligibilityScheduleMapOutput) ToPrivilegedAccessGroupEligibilityScheduleMapOutput() PrivilegedAccessGroupEligibilityScheduleMapOutput {
	return o
}

func (o PrivilegedAccessGroupEligibilityScheduleMapOutput) ToPrivilegedAccessGroupEligibilityScheduleMapOutputWithContext(ctx context.Context) PrivilegedAccessGroupEligibilityScheduleMapOutput {
	return o
}

func (o PrivilegedAccessGroupEligibilityScheduleMapOutput) MapIndex(k pulumi.StringInput) PrivilegedAccessGroupEligibilityScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivilegedAccessGroupEligibilitySchedule {
		return vs[0].(map[string]*PrivilegedAccessGroupEligibilitySchedule)[vs[1].(string)]
	}).(PrivilegedAccessGroupEligibilityScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupEligibilityScheduleInput)(nil)).Elem(), &PrivilegedAccessGroupEligibilitySchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupEligibilityScheduleArrayInput)(nil)).Elem(), PrivilegedAccessGroupEligibilityScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupEligibilityScheduleMapInput)(nil)).Elem(), PrivilegedAccessGroupEligibilityScheduleMap{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupEligibilityScheduleOutput{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupEligibilityScheduleArrayOutput{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupEligibilityScheduleMapOutput{})
}
