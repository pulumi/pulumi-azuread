// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConditionalAccessPolicy struct {
	pulumi.CustomResourceState

	Conditions      ConditionalAccessPolicyConditionsOutput         `pulumi:"conditions"`
	DisplayName     pulumi.StringOutput                             `pulumi:"displayName"`
	GrantControls   ConditionalAccessPolicyGrantControlsOutput      `pulumi:"grantControls"`
	SessionControls ConditionalAccessPolicySessionControlsPtrOutput `pulumi:"sessionControls"`
	State           pulumi.StringOutput                             `pulumi:"state"`
}

// NewConditionalAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewConditionalAccessPolicy(ctx *pulumi.Context,
	name string, args *ConditionalAccessPolicyArgs, opts ...pulumi.ResourceOption) (*ConditionalAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.GrantControls == nil {
		return nil, errors.New("invalid value for required argument 'GrantControls'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	var resource ConditionalAccessPolicy
	err := ctx.RegisterResource("azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConditionalAccessPolicy gets an existing ConditionalAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConditionalAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConditionalAccessPolicyState, opts ...pulumi.ResourceOption) (*ConditionalAccessPolicy, error) {
	var resource ConditionalAccessPolicy
	err := ctx.ReadResource("azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConditionalAccessPolicy resources.
type conditionalAccessPolicyState struct {
	Conditions      *ConditionalAccessPolicyConditions      `pulumi:"conditions"`
	DisplayName     *string                                 `pulumi:"displayName"`
	GrantControls   *ConditionalAccessPolicyGrantControls   `pulumi:"grantControls"`
	SessionControls *ConditionalAccessPolicySessionControls `pulumi:"sessionControls"`
	State           *string                                 `pulumi:"state"`
}

type ConditionalAccessPolicyState struct {
	Conditions      ConditionalAccessPolicyConditionsPtrInput
	DisplayName     pulumi.StringPtrInput
	GrantControls   ConditionalAccessPolicyGrantControlsPtrInput
	SessionControls ConditionalAccessPolicySessionControlsPtrInput
	State           pulumi.StringPtrInput
}

func (ConditionalAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalAccessPolicyState)(nil)).Elem()
}

type conditionalAccessPolicyArgs struct {
	Conditions      ConditionalAccessPolicyConditions       `pulumi:"conditions"`
	DisplayName     string                                  `pulumi:"displayName"`
	GrantControls   ConditionalAccessPolicyGrantControls    `pulumi:"grantControls"`
	SessionControls *ConditionalAccessPolicySessionControls `pulumi:"sessionControls"`
	State           string                                  `pulumi:"state"`
}

// The set of arguments for constructing a ConditionalAccessPolicy resource.
type ConditionalAccessPolicyArgs struct {
	Conditions      ConditionalAccessPolicyConditionsInput
	DisplayName     pulumi.StringInput
	GrantControls   ConditionalAccessPolicyGrantControlsInput
	SessionControls ConditionalAccessPolicySessionControlsPtrInput
	State           pulumi.StringInput
}

func (ConditionalAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*conditionalAccessPolicyArgs)(nil)).Elem()
}

type ConditionalAccessPolicyInput interface {
	pulumi.Input

	ToConditionalAccessPolicyOutput() ConditionalAccessPolicyOutput
	ToConditionalAccessPolicyOutputWithContext(ctx context.Context) ConditionalAccessPolicyOutput
}

func (*ConditionalAccessPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalAccessPolicy)(nil)).Elem()
}

func (i *ConditionalAccessPolicy) ToConditionalAccessPolicyOutput() ConditionalAccessPolicyOutput {
	return i.ToConditionalAccessPolicyOutputWithContext(context.Background())
}

func (i *ConditionalAccessPolicy) ToConditionalAccessPolicyOutputWithContext(ctx context.Context) ConditionalAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalAccessPolicyOutput)
}

// ConditionalAccessPolicyArrayInput is an input type that accepts ConditionalAccessPolicyArray and ConditionalAccessPolicyArrayOutput values.
// You can construct a concrete instance of `ConditionalAccessPolicyArrayInput` via:
//
//	ConditionalAccessPolicyArray{ ConditionalAccessPolicyArgs{...} }
type ConditionalAccessPolicyArrayInput interface {
	pulumi.Input

	ToConditionalAccessPolicyArrayOutput() ConditionalAccessPolicyArrayOutput
	ToConditionalAccessPolicyArrayOutputWithContext(context.Context) ConditionalAccessPolicyArrayOutput
}

type ConditionalAccessPolicyArray []ConditionalAccessPolicyInput

func (ConditionalAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConditionalAccessPolicy)(nil)).Elem()
}

func (i ConditionalAccessPolicyArray) ToConditionalAccessPolicyArrayOutput() ConditionalAccessPolicyArrayOutput {
	return i.ToConditionalAccessPolicyArrayOutputWithContext(context.Background())
}

func (i ConditionalAccessPolicyArray) ToConditionalAccessPolicyArrayOutputWithContext(ctx context.Context) ConditionalAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalAccessPolicyArrayOutput)
}

// ConditionalAccessPolicyMapInput is an input type that accepts ConditionalAccessPolicyMap and ConditionalAccessPolicyMapOutput values.
// You can construct a concrete instance of `ConditionalAccessPolicyMapInput` via:
//
//	ConditionalAccessPolicyMap{ "key": ConditionalAccessPolicyArgs{...} }
type ConditionalAccessPolicyMapInput interface {
	pulumi.Input

	ToConditionalAccessPolicyMapOutput() ConditionalAccessPolicyMapOutput
	ToConditionalAccessPolicyMapOutputWithContext(context.Context) ConditionalAccessPolicyMapOutput
}

type ConditionalAccessPolicyMap map[string]ConditionalAccessPolicyInput

func (ConditionalAccessPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConditionalAccessPolicy)(nil)).Elem()
}

func (i ConditionalAccessPolicyMap) ToConditionalAccessPolicyMapOutput() ConditionalAccessPolicyMapOutput {
	return i.ToConditionalAccessPolicyMapOutputWithContext(context.Background())
}

func (i ConditionalAccessPolicyMap) ToConditionalAccessPolicyMapOutputWithContext(ctx context.Context) ConditionalAccessPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionalAccessPolicyMapOutput)
}

type ConditionalAccessPolicyOutput struct{ *pulumi.OutputState }

func (ConditionalAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionalAccessPolicy)(nil)).Elem()
}

func (o ConditionalAccessPolicyOutput) ToConditionalAccessPolicyOutput() ConditionalAccessPolicyOutput {
	return o
}

func (o ConditionalAccessPolicyOutput) ToConditionalAccessPolicyOutputWithContext(ctx context.Context) ConditionalAccessPolicyOutput {
	return o
}

func (o ConditionalAccessPolicyOutput) Conditions() ConditionalAccessPolicyConditionsOutput {
	return o.ApplyT(func(v *ConditionalAccessPolicy) ConditionalAccessPolicyConditionsOutput { return v.Conditions }).(ConditionalAccessPolicyConditionsOutput)
}

func (o ConditionalAccessPolicyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConditionalAccessPolicy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

func (o ConditionalAccessPolicyOutput) GrantControls() ConditionalAccessPolicyGrantControlsOutput {
	return o.ApplyT(func(v *ConditionalAccessPolicy) ConditionalAccessPolicyGrantControlsOutput { return v.GrantControls }).(ConditionalAccessPolicyGrantControlsOutput)
}

func (o ConditionalAccessPolicyOutput) SessionControls() ConditionalAccessPolicySessionControlsPtrOutput {
	return o.ApplyT(func(v *ConditionalAccessPolicy) ConditionalAccessPolicySessionControlsPtrOutput {
		return v.SessionControls
	}).(ConditionalAccessPolicySessionControlsPtrOutput)
}

func (o ConditionalAccessPolicyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ConditionalAccessPolicy) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type ConditionalAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (ConditionalAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConditionalAccessPolicy)(nil)).Elem()
}

func (o ConditionalAccessPolicyArrayOutput) ToConditionalAccessPolicyArrayOutput() ConditionalAccessPolicyArrayOutput {
	return o
}

func (o ConditionalAccessPolicyArrayOutput) ToConditionalAccessPolicyArrayOutputWithContext(ctx context.Context) ConditionalAccessPolicyArrayOutput {
	return o
}

func (o ConditionalAccessPolicyArrayOutput) Index(i pulumi.IntInput) ConditionalAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConditionalAccessPolicy {
		return vs[0].([]*ConditionalAccessPolicy)[vs[1].(int)]
	}).(ConditionalAccessPolicyOutput)
}

type ConditionalAccessPolicyMapOutput struct{ *pulumi.OutputState }

func (ConditionalAccessPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConditionalAccessPolicy)(nil)).Elem()
}

func (o ConditionalAccessPolicyMapOutput) ToConditionalAccessPolicyMapOutput() ConditionalAccessPolicyMapOutput {
	return o
}

func (o ConditionalAccessPolicyMapOutput) ToConditionalAccessPolicyMapOutputWithContext(ctx context.Context) ConditionalAccessPolicyMapOutput {
	return o
}

func (o ConditionalAccessPolicyMapOutput) MapIndex(k pulumi.StringInput) ConditionalAccessPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConditionalAccessPolicy {
		return vs[0].(map[string]*ConditionalAccessPolicy)[vs[1].(string)]
	}).(ConditionalAccessPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalAccessPolicyInput)(nil)).Elem(), &ConditionalAccessPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalAccessPolicyArrayInput)(nil)).Elem(), ConditionalAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionalAccessPolicyMapInput)(nil)).Elem(), ConditionalAccessPolicyMap{})
	pulumi.RegisterOutputType(ConditionalAccessPolicyOutput{})
	pulumi.RegisterOutputType(ConditionalAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(ConditionalAccessPolicyMapOutput{})
}
