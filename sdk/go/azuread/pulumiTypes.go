// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationAppRoleType struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the permision. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationOAuth2Permission resource.
	Id *string `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
	Value *string `pulumi:"value"`
}

// ApplicationAppRoleTypeInput is an input type that accepts ApplicationAppRoleTypeArgs and ApplicationAppRoleTypeOutput values.
// You can construct a concrete instance of `ApplicationAppRoleTypeInput` via:
//
//          ApplicationAppRoleTypeArgs{...}
type ApplicationAppRoleTypeInput interface {
	pulumi.Input

	ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput
	ToApplicationAppRoleTypeOutputWithContext(context.Context) ApplicationAppRoleTypeOutput
}

type ApplicationAppRoleTypeArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the permision. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationOAuth2Permission resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationAppRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRoleType)(nil)).Elem()
}

func (i ApplicationAppRoleTypeArgs) ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput {
	return i.ToApplicationAppRoleTypeOutputWithContext(context.Background())
}

func (i ApplicationAppRoleTypeArgs) ToApplicationAppRoleTypeOutputWithContext(ctx context.Context) ApplicationAppRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleTypeOutput)
}

// ApplicationAppRoleTypeArrayInput is an input type that accepts ApplicationAppRoleTypeArray and ApplicationAppRoleTypeArrayOutput values.
// You can construct a concrete instance of `ApplicationAppRoleTypeArrayInput` via:
//
//          ApplicationAppRoleTypeArray{ ApplicationAppRoleTypeArgs{...} }
type ApplicationAppRoleTypeArrayInput interface {
	pulumi.Input

	ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput
	ToApplicationAppRoleTypeArrayOutputWithContext(context.Context) ApplicationAppRoleTypeArrayOutput
}

type ApplicationAppRoleTypeArray []ApplicationAppRoleTypeInput

func (ApplicationAppRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRoleType)(nil)).Elem()
}

func (i ApplicationAppRoleTypeArray) ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput {
	return i.ToApplicationAppRoleTypeArrayOutputWithContext(context.Background())
}

func (i ApplicationAppRoleTypeArray) ToApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) ApplicationAppRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleTypeArrayOutput)
}

type ApplicationAppRoleTypeOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRoleType)(nil)).Elem()
}

func (o ApplicationAppRoleTypeOutput) ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput {
	return o
}

func (o ApplicationAppRoleTypeOutput) ToApplicationAppRoleTypeOutputWithContext(ctx context.Context) ApplicationAppRoleTypeOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
func (o ApplicationAppRoleTypeOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o ApplicationAppRoleTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ApplicationAppRoleTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the permision. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationOAuth2Permission resource.
func (o ApplicationAppRoleTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the permission is enabled: defaults to `true`.
func (o ApplicationAppRoleTypeOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The value of the scope claim that the resource application should expect in the OAuth 2.0 access token.
func (o ApplicationAppRoleTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationAppRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRoleType)(nil)).Elem()
}

func (o ApplicationAppRoleTypeArrayOutput) ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput {
	return o
}

func (o ApplicationAppRoleTypeArrayOutput) ToApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) ApplicationAppRoleTypeArrayOutput {
	return o
}

func (o ApplicationAppRoleTypeArrayOutput) Index(i pulumi.IntInput) ApplicationAppRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppRoleType {
		return vs[0].([]ApplicationAppRoleType)[vs[1].(int)]
	}).(ApplicationAppRoleTypeOutput)
}

type ApplicationOauth2Permission struct {
	// Permission help text that appears in the admin consent and app assignment experiences.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id *string `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type *string `pulumi:"type"`
	// Permission help text that appears in the end user consent experience.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// Display name for the permission that appears in the end user consent experience.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value *string `pulumi:"value"`
}

// ApplicationOauth2PermissionInput is an input type that accepts ApplicationOauth2PermissionArgs and ApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionInput` via:
//
//          ApplicationOauth2PermissionArgs{...}
type ApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput
	ToApplicationOauth2PermissionOutputWithContext(context.Context) ApplicationOauth2PermissionOutput
}

type ApplicationOauth2PermissionArgs struct {
	// Permission help text that appears in the admin consent and app assignment experiences.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Permission help text that appears in the end user consent experience.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// Display name for the permission that appears in the end user consent experience.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return i.ToApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionOutput)
}

// ApplicationOauth2PermissionArrayInput is an input type that accepts ApplicationOauth2PermissionArray and ApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionArrayInput` via:
//
//          ApplicationOauth2PermissionArray{ ApplicationOauth2PermissionArgs{...} }
type ApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput
	ToApplicationOauth2PermissionArrayOutputWithContext(context.Context) ApplicationOauth2PermissionArrayOutput
}

type ApplicationOauth2PermissionArray []ApplicationOauth2PermissionInput

func (ApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return i.ToApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionArrayOutput)
}

type ApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return o
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return o
}

// Permission help text that appears in the admin consent and app assignment experiences.
func (o ApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
func (o ApplicationOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Permission help text that appears in the end user consent experience.
func (o ApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the permission that appears in the end user consent experience.
func (o ApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o ApplicationOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOauth2Permission {
		return vs[0].([]ApplicationOauth2Permission)[vs[1].(int)]
	}).(ApplicationOauth2PermissionOutput)
}

type ApplicationOptionalClaims struct {
	AccessTokens []ApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []ApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

// ApplicationOptionalClaimsInput is an input type that accepts ApplicationOptionalClaimsArgs and ApplicationOptionalClaimsOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
type ApplicationOptionalClaimsInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput
	ToApplicationOptionalClaimsOutputWithContext(context.Context) ApplicationOptionalClaimsOutput
}

type ApplicationOptionalClaimsArgs struct {
	AccessTokens ApplicationOptionalClaimsAccessTokenArrayInput `pulumi:"accessTokens"`
	IdTokens     ApplicationOptionalClaimsIdTokenArrayInput     `pulumi:"idTokens"`
}

func (ApplicationOptionalClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return i.ToApplicationOptionalClaimsOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput)
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput).ToApplicationOptionalClaimsPtrOutputWithContext(ctx)
}

// ApplicationOptionalClaimsPtrInput is an input type that accepts ApplicationOptionalClaimsArgs, ApplicationOptionalClaimsPtr and ApplicationOptionalClaimsPtrOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsPtrInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
//
//  or:
//
//          nil
type ApplicationOptionalClaimsPtrInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput
	ToApplicationOptionalClaimsPtrOutputWithContext(context.Context) ApplicationOptionalClaimsPtrOutput
}

type applicationOptionalClaimsPtrType ApplicationOptionalClaimsArgs

func ApplicationOptionalClaimsPtr(v *ApplicationOptionalClaimsArgs) ApplicationOptionalClaimsPtrInput {
	return (*applicationOptionalClaimsPtrType)(v)
}

func (*applicationOptionalClaimsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsPtrOutput)
}

type ApplicationOptionalClaimsOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) *ApplicationOptionalClaims {
		return &v
	}).(ApplicationOptionalClaimsPtrOutput)
}
func (o ApplicationOptionalClaimsOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken { return v.AccessTokens }).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken { return v.IdTokens }).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) Elem() ApplicationOptionalClaimsOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) ApplicationOptionalClaims { return *v }).(ApplicationOptionalClaimsOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken {
		if v == nil {
			return nil
		}
		return v.AccessTokens
	}).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken {
		if v == nil {
			return nil
		}
		return v.IdTokens
	}).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsAccessTokenInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArgs and ApplicationOptionalClaimsAccessTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArgs{...}
type ApplicationOptionalClaimsAccessTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput
	ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenOutput
}

type ApplicationOptionalClaimsAccessTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return i.ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenOutput)
}

// ApplicationOptionalClaimsAccessTokenArrayInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArray and ApplicationOptionalClaimsAccessTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenArrayInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArray{ ApplicationOptionalClaimsAccessTokenArgs{...} }
type ApplicationOptionalClaimsAccessTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput
	ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput
}

type ApplicationOptionalClaimsAccessTokenArray []ApplicationOptionalClaimsAccessTokenInput

func (ApplicationOptionalClaimsAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return i.ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsAccessTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsAccessTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsAccessToken {
		return vs[0].([]ApplicationOptionalClaimsAccessToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsAccessTokenOutput)
}

type ApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The display name for the application.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsIdTokenInput is an input type that accepts ApplicationOptionalClaimsIdTokenArgs and ApplicationOptionalClaimsIdTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenInput` via:
//
//          ApplicationOptionalClaimsIdTokenArgs{...}
type ApplicationOptionalClaimsIdTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput
	ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenOutput
}

type ApplicationOptionalClaimsIdTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The display name for the application.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsIdTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return i.ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenOutput)
}

// ApplicationOptionalClaimsIdTokenArrayInput is an input type that accepts ApplicationOptionalClaimsIdTokenArray and ApplicationOptionalClaimsIdTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenArrayInput` via:
//
//          ApplicationOptionalClaimsIdTokenArray{ ApplicationOptionalClaimsIdTokenArgs{...} }
type ApplicationOptionalClaimsIdTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput
	ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenArrayOutput
}

type ApplicationOptionalClaimsIdTokenArray []ApplicationOptionalClaimsIdTokenInput

func (ApplicationOptionalClaimsIdTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return i.ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsIdTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsIdTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsIdTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The display name for the application.
func (o ApplicationOptionalClaimsIdTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsIdTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsIdTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsIdToken {
		return vs[0].([]ApplicationOptionalClaimsIdToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsIdTokenOutput)
}

type ApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses []ApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// ApplicationRequiredResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessArgs and ApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessArgs{...}
type ApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput
	ToApplicationRequiredResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessOutput
}

type ApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses ApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (ApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessOutput)
}

// ApplicationRequiredResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessArray and ApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessArray{ ApplicationRequiredResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessArray []ApplicationRequiredResourceAccessInput

func (ApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below.
func (o ApplicationRequiredResourceAccessOutput) ResourceAccesses() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) []ApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
func (o ApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessOutput)
}

type ApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
}

// ApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArgs and ApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArgs{...}
type ApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput
	ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessOutput
}

type ApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

// ApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArray and ApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArray{ ApplicationRequiredResourceAccessResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessResourceAccessArray []ApplicationRequiredResourceAccessResourceAccessInput

func (ApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

type ServicePrincipalOauth2Permission struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of the permission.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalOauth2PermissionInput is an input type that accepts ServicePrincipalOauth2PermissionArgs and ServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionInput` via:
//
//          ServicePrincipalOauth2PermissionArgs{...}
type ServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput
	ToServicePrincipalOauth2PermissionOutputWithContext(context.Context) ServicePrincipalOauth2PermissionOutput
}

type ServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of the permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return i.ToServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionOutput)
}

// ServicePrincipalOauth2PermissionArrayInput is an input type that accepts ServicePrincipalOauth2PermissionArray and ServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionArrayInput` via:
//
//          ServicePrincipalOauth2PermissionArray{ ServicePrincipalOauth2PermissionArgs{...} }
type ServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput
	ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) ServicePrincipalOauth2PermissionArrayOutput
}

type ServicePrincipalOauth2PermissionArray []ServicePrincipalOauth2PermissionInput

func (ServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return i.ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionArrayOutput)
}

type ServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the permission.
func (o ServicePrincipalOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalOauth2Permission {
		return vs[0].([]ServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(ServicePrincipalOauth2PermissionOutput)
}

type GetApplicationAppRoleType struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetApplicationAppRoleTypeInput is an input type that accepts GetApplicationAppRoleTypeArgs and GetApplicationAppRoleTypeOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleTypeInput` via:
//
//          GetApplicationAppRoleTypeArgs{...}
type GetApplicationAppRoleTypeInput interface {
	pulumi.Input

	ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput
	ToGetApplicationAppRoleTypeOutputWithContext(context.Context) GetApplicationAppRoleTypeOutput
}

type GetApplicationAppRoleTypeArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationAppRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRoleType)(nil)).Elem()
}

func (i GetApplicationAppRoleTypeArgs) ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput {
	return i.ToGetApplicationAppRoleTypeOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleTypeArgs) ToGetApplicationAppRoleTypeOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleTypeOutput)
}

// GetApplicationAppRoleTypeArrayInput is an input type that accepts GetApplicationAppRoleTypeArray and GetApplicationAppRoleTypeArrayOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleTypeArrayInput` via:
//
//          GetApplicationAppRoleTypeArray{ GetApplicationAppRoleTypeArgs{...} }
type GetApplicationAppRoleTypeArrayInput interface {
	pulumi.Input

	ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput
	ToGetApplicationAppRoleTypeArrayOutputWithContext(context.Context) GetApplicationAppRoleTypeArrayOutput
}

type GetApplicationAppRoleTypeArray []GetApplicationAppRoleTypeInput

func (GetApplicationAppRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRoleType)(nil)).Elem()
}

func (i GetApplicationAppRoleTypeArray) ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput {
	return i.ToGetApplicationAppRoleTypeArrayOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleTypeArray) ToGetApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleTypeArrayOutput)
}

type GetApplicationAppRoleTypeOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRoleType)(nil)).Elem()
}

func (o GetApplicationAppRoleTypeOutput) ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput {
	return o
}

func (o GetApplicationAppRoleTypeOutput) ToGetApplicationAppRoleTypeOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o GetApplicationAppRoleTypeOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o GetApplicationAppRoleTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o GetApplicationAppRoleTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetApplicationAppRoleTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetApplicationAppRoleTypeOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetApplicationAppRoleTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationAppRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRoleType)(nil)).Elem()
}

func (o GetApplicationAppRoleTypeArrayOutput) ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput {
	return o
}

func (o GetApplicationAppRoleTypeArrayOutput) ToGetApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeArrayOutput {
	return o
}

func (o GetApplicationAppRoleTypeArrayOutput) Index(i pulumi.IntInput) GetApplicationAppRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationAppRoleType {
		return vs[0].([]GetApplicationAppRoleType)[vs[1].(int)]
	}).(GetApplicationAppRoleTypeOutput)
}

type GetApplicationOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetApplicationOauth2PermissionInput is an input type that accepts GetApplicationOauth2PermissionArgs and GetApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionInput` via:
//
//          GetApplicationOauth2PermissionArgs{...}
type GetApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput
	ToGetApplicationOauth2PermissionOutputWithContext(context.Context) GetApplicationOauth2PermissionOutput
}

type GetApplicationOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return i.ToGetApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionOutput)
}

// GetApplicationOauth2PermissionArrayInput is an input type that accepts GetApplicationOauth2PermissionArray and GetApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionArrayInput` via:
//
//          GetApplicationOauth2PermissionArray{ GetApplicationOauth2PermissionArgs{...} }
type GetApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput
	ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Context) GetApplicationOauth2PermissionArrayOutput
}

type GetApplicationOauth2PermissionArray []GetApplicationOauth2PermissionInput

func (GetApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return i.ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionArrayOutput)
}

type GetApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return o
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetApplicationOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of the permission
func (o GetApplicationOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetApplicationOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOauth2Permission {
		return vs[0].([]GetApplicationOauth2Permission)[vs[1].(int)]
	}).(GetApplicationOauth2PermissionOutput)
}

type GetApplicationOptionalClaims struct {
	AccessTokens []GetApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []GetApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

// GetApplicationOptionalClaimsInput is an input type that accepts GetApplicationOptionalClaimsArgs and GetApplicationOptionalClaimsOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsInput` via:
//
//          GetApplicationOptionalClaimsArgs{...}
type GetApplicationOptionalClaimsInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput
	ToGetApplicationOptionalClaimsOutputWithContext(context.Context) GetApplicationOptionalClaimsOutput
}

type GetApplicationOptionalClaimsArgs struct {
	AccessTokens GetApplicationOptionalClaimsAccessTokenArrayInput `pulumi:"accessTokens"`
	IdTokens     GetApplicationOptionalClaimsIdTokenArrayInput     `pulumi:"idTokens"`
}

func (GetApplicationOptionalClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaims)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsArgs) ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput {
	return i.ToGetApplicationOptionalClaimsOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsArgs) ToGetApplicationOptionalClaimsOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsOutput)
}

type GetApplicationOptionalClaimsOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaims)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsOutput) ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput {
	return o
}

func (o GetApplicationOptionalClaimsOutput) ToGetApplicationOptionalClaimsOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsOutput {
	return o
}

func (o GetApplicationOptionalClaimsOutput) AccessTokens() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaims) []GetApplicationOptionalClaimsAccessToken { return v.AccessTokens }).(GetApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o GetApplicationOptionalClaimsOutput) IdTokens() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaims) []GetApplicationOptionalClaimsIdToken { return v.IdTokens }).(GetApplicationOptionalClaimsIdTokenArrayOutput)
}

type GetApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// GetApplicationOptionalClaimsAccessTokenInput is an input type that accepts GetApplicationOptionalClaimsAccessTokenArgs and GetApplicationOptionalClaimsAccessTokenOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsAccessTokenInput` via:
//
//          GetApplicationOptionalClaimsAccessTokenArgs{...}
type GetApplicationOptionalClaimsAccessTokenInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput
	ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(context.Context) GetApplicationOptionalClaimsAccessTokenOutput
}

type GetApplicationOptionalClaimsAccessTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (GetApplicationOptionalClaimsAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsAccessTokenArgs) ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput {
	return i.ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsAccessTokenArgs) ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsAccessTokenOutput)
}

// GetApplicationOptionalClaimsAccessTokenArrayInput is an input type that accepts GetApplicationOptionalClaimsAccessTokenArray and GetApplicationOptionalClaimsAccessTokenArrayOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsAccessTokenArrayInput` via:
//
//          GetApplicationOptionalClaimsAccessTokenArray{ GetApplicationOptionalClaimsAccessTokenArgs{...} }
type GetApplicationOptionalClaimsAccessTokenArrayInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput
	ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput
}

type GetApplicationOptionalClaimsAccessTokenArray []GetApplicationOptionalClaimsAccessTokenInput

func (GetApplicationOptionalClaimsAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsAccessTokenArray) ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return i.ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsAccessTokenArray) ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsAccessTokenArrayOutput)
}

type GetApplicationOptionalClaimsAccessTokenOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsAccessTokenOutput) ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenOutput) ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o GetApplicationOptionalClaimsAccessTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the Application within Azure Active Directory.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type GetApplicationOptionalClaimsAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) Index(i pulumi.IntInput) GetApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOptionalClaimsAccessToken {
		return vs[0].([]GetApplicationOptionalClaimsAccessToken)[vs[1].(int)]
	}).(GetApplicationOptionalClaimsAccessTokenOutput)
}

type GetApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// GetApplicationOptionalClaimsIdTokenInput is an input type that accepts GetApplicationOptionalClaimsIdTokenArgs and GetApplicationOptionalClaimsIdTokenOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsIdTokenInput` via:
//
//          GetApplicationOptionalClaimsIdTokenArgs{...}
type GetApplicationOptionalClaimsIdTokenInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput
	ToGetApplicationOptionalClaimsIdTokenOutputWithContext(context.Context) GetApplicationOptionalClaimsIdTokenOutput
}

type GetApplicationOptionalClaimsIdTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// Specifies the name of the Application within Azure Active Directory.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (GetApplicationOptionalClaimsIdTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsIdTokenArgs) ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput {
	return i.ToGetApplicationOptionalClaimsIdTokenOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsIdTokenArgs) ToGetApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsIdTokenOutput)
}

// GetApplicationOptionalClaimsIdTokenArrayInput is an input type that accepts GetApplicationOptionalClaimsIdTokenArray and GetApplicationOptionalClaimsIdTokenArrayOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsIdTokenArrayInput` via:
//
//          GetApplicationOptionalClaimsIdTokenArray{ GetApplicationOptionalClaimsIdTokenArgs{...} }
type GetApplicationOptionalClaimsIdTokenArrayInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput
	ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput
}

type GetApplicationOptionalClaimsIdTokenArray []GetApplicationOptionalClaimsIdTokenInput

func (GetApplicationOptionalClaimsIdTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsIdTokenArray) ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return i.ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsIdTokenArray) ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsIdTokenArrayOutput)
}

type GetApplicationOptionalClaimsIdTokenOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsIdTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsIdTokenOutput) ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenOutput) ToGetApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o GetApplicationOptionalClaimsIdTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o GetApplicationOptionalClaimsIdTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the Application within Azure Active Directory.
func (o GetApplicationOptionalClaimsIdTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o GetApplicationOptionalClaimsIdTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type GetApplicationOptionalClaimsIdTokenArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsIdTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) Index(i pulumi.IntInput) GetApplicationOptionalClaimsIdTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOptionalClaimsIdToken {
		return vs[0].([]GetApplicationOptionalClaimsIdToken)[vs[1].(int)]
	}).(GetApplicationOptionalClaimsIdTokenOutput)
}

type GetApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below
	ResourceAccesses []GetApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// GetApplicationRequiredResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessArgs and GetApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessInput` via:
//
//          GetApplicationRequiredResourceAccessArgs{...}
type GetApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput
	ToGetApplicationRequiredResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessOutput
}

type GetApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below
	ResourceAccesses GetApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (GetApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessArray and GetApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessArrayInput` via:
//
//          GetApplicationRequiredResourceAccessArray{ GetApplicationRequiredResourceAccessArgs{...} }
type GetApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessArray []GetApplicationRequiredResourceAccessInput

func (GetApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below
func (o GetApplicationRequiredResourceAccessOutput) ResourceAccesses() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) []GetApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to.
func (o GetApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessOutput)
}

type GetApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// The type of the permission
	Type string `pulumi:"type"`
}

// GetApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArgs and GetApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessInput` via:
//
//          GetApplicationRequiredResourceAccessResourceAccessArgs{...}
type GetApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput
	ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArray and GetApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
//          GetApplicationRequiredResourceAccessResourceAccessArray{ GetApplicationRequiredResourceAccessResourceAccessArgs{...} }
type GetApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArray []GetApplicationRequiredResourceAccessResourceAccessInput

func (GetApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier of the `appRole`.
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the permission
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

type GetDomainsDomain struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType string `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName string `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault bool `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Active Directory.
	IsInitial bool `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified bool `pulumi:"isVerified"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//          GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Active Directory.
	IsInitial pulumi.BoolInput `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified pulumi.BoolInput `pulumi:"isVerified"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//          GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// The authentication type of the domain (Managed or Federated).
func (o GetDomainsDomainOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The name of the domain.
func (o GetDomainsDomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.DomainName }).(pulumi.StringOutput)
}

// `True` if this is the default domain that is used for user creation.
func (o GetDomainsDomainOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// `True` if this is the initial domain created by Azure Active Directory.
func (o GetDomainsDomainOutput) IsInitial() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsInitial }).(pulumi.BoolOutput)
}

// `True` if the domain has completed domain ownership verification.
func (o GetDomainsDomainOutput) IsVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsVerified }).(pulumi.BoolOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetServicePrincipalAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetServicePrincipalAppRoleInput is an input type that accepts GetServicePrincipalAppRoleArgs and GetServicePrincipalAppRoleOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleInput` via:
//
//          GetServicePrincipalAppRoleArgs{...}
type GetServicePrincipalAppRoleInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput
	ToGetServicePrincipalAppRoleOutputWithContext(context.Context) GetServicePrincipalAppRoleOutput
}

type GetServicePrincipalAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return i.ToGetServicePrincipalAppRoleOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleOutput)
}

// GetServicePrincipalAppRoleArrayInput is an input type that accepts GetServicePrincipalAppRoleArray and GetServicePrincipalAppRoleArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleArrayInput` via:
//
//          GetServicePrincipalAppRoleArray{ GetServicePrincipalAppRoleArgs{...} }
type GetServicePrincipalAppRoleArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput
	ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Context) GetServicePrincipalAppRoleArrayOutput
}

type GetServicePrincipalAppRoleArray []GetServicePrincipalAppRoleInput

func (GetServicePrincipalAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return i.ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleArrayOutput)
}

type GetServicePrincipalAppRoleOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return o
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o GetServicePrincipalAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o GetServicePrincipalAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// The Display Name of the Azure AD Application associated with this Service Principal.
func (o GetServicePrincipalAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetServicePrincipalAppRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetServicePrincipalAppRoleOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetServicePrincipalAppRoleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalAppRoleArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalAppRole {
		return vs[0].([]GetServicePrincipalAppRole)[vs[1].(int)]
	}).(GetServicePrincipalAppRoleOutput)
}

type GetServicePrincipalOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetServicePrincipalOauth2PermissionInput is an input type that accepts GetServicePrincipalOauth2PermissionArgs and GetServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionInput` via:
//
//          GetServicePrincipalOauth2PermissionArgs{...}
type GetServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput
	ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionOutput
}

type GetServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return i.ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionOutput)
}

// GetServicePrincipalOauth2PermissionArrayInput is an input type that accepts GetServicePrincipalOauth2PermissionArray and GetServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionArrayInput` via:
//
//          GetServicePrincipalOauth2PermissionArray{ GetServicePrincipalOauth2PermissionArgs{...} }
type GetServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput
	ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionArrayOutput
}

type GetServicePrincipalOauth2PermissionArray []GetServicePrincipalOauth2PermissionInput

func (GetServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return i.ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionArrayOutput)
}

type GetServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetServicePrincipalOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of the permission
func (o GetServicePrincipalOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetServicePrincipalOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalOauth2Permission {
		return vs[0].([]GetServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(GetServicePrincipalOauth2PermissionOutput)
}

type GetUsersUser struct {
	// `True` if the account is enabled; otherwise `False`.
	AccountEnabled bool `pulumi:"accountEnabled"`
	// The Display Name of the Azure AD User.
	DisplayName string `pulumi:"displayName"`
	// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableId string `pulumi:"immutableId"`
	// The primary email address of the Azure AD User.
	Mail string `pulumi:"mail"`
	// The email alias of the Azure AD User.
	MailNickname string `pulumi:"mailNickname"`
	// The Object ID of the Azure AD User.
	ObjectId string `pulumi:"objectId"`
	// The on-premise SAM account name of the Azure AD User.
	OnpremisesSamAccountName string `pulumi:"onpremisesSamAccountName"`
	// The on-premise user principal name of the Azure AD User.
	OnpremisesUserPrincipalName string `pulumi:"onpremisesUserPrincipalName"`
	// The usage location of the Azure AD User.
	UsageLocation string `pulumi:"usageLocation"`
	// The User Principal Name of the Azure AD User.
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//          GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// `True` if the account is enabled; otherwise `False`.
	AccountEnabled pulumi.BoolInput `pulumi:"accountEnabled"`
	// The Display Name of the Azure AD User.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableId pulumi.StringInput `pulumi:"immutableId"`
	// The primary email address of the Azure AD User.
	Mail pulumi.StringInput `pulumi:"mail"`
	// The email alias of the Azure AD User.
	MailNickname pulumi.StringInput `pulumi:"mailNickname"`
	// The Object ID of the Azure AD User.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The on-premise SAM account name of the Azure AD User.
	OnpremisesSamAccountName pulumi.StringInput `pulumi:"onpremisesSamAccountName"`
	// The on-premise user principal name of the Azure AD User.
	OnpremisesUserPrincipalName pulumi.StringInput `pulumi:"onpremisesUserPrincipalName"`
	// The usage location of the Azure AD User.
	UsageLocation pulumi.StringInput `pulumi:"usageLocation"`
	// The User Principal Name of the Azure AD User.
	UserPrincipalName pulumi.StringInput `pulumi:"userPrincipalName"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//          GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// `True` if the account is enabled; otherwise `False`.
func (o GetUsersUserOutput) AccountEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.AccountEnabled }).(pulumi.BoolOutput)
}

// The Display Name of the Azure AD User.
func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
func (o GetUsersUserOutput) ImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ImmutableId }).(pulumi.StringOutput)
}

// The primary email address of the Azure AD User.
func (o GetUsersUserOutput) Mail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Mail }).(pulumi.StringOutput)
}

// The email alias of the Azure AD User.
func (o GetUsersUserOutput) MailNickname() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.MailNickname }).(pulumi.StringOutput)
}

// The Object ID of the Azure AD User.
func (o GetUsersUserOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The on-premise SAM account name of the Azure AD User.
func (o GetUsersUserOutput) OnpremisesSamAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OnpremisesSamAccountName }).(pulumi.StringOutput)
}

// The on-premise user principal name of the Azure AD User.
func (o GetUsersUserOutput) OnpremisesUserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OnpremisesUserPrincipalName }).(pulumi.StringOutput)
}

// The usage location of the Azure AD User.
func (o GetUsersUserOutput) UsageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UsageLocation }).(pulumi.StringOutput)
}

// The User Principal Name of the Azure AD User.
func (o GetUsersUserOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppRoleTypeOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleTypeOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
