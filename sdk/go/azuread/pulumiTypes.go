// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApplicationApi struct {
	// One or more `oauth2PermissionScope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this Application.
	Oauth2PermissionScopes []ApplicationApiOauth2PermissionScope `pulumi:"oauth2PermissionScopes"`
}

// ApplicationApiInput is an input type that accepts ApplicationApiArgs and ApplicationApiOutput values.
// You can construct a concrete instance of `ApplicationApiInput` via:
//
//          ApplicationApiArgs{...}
type ApplicationApiInput interface {
	pulumi.Input

	ToApplicationApiOutput() ApplicationApiOutput
	ToApplicationApiOutputWithContext(context.Context) ApplicationApiOutput
}

type ApplicationApiArgs struct {
	// One or more `oauth2PermissionScope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this Application.
	Oauth2PermissionScopes ApplicationApiOauth2PermissionScopeArrayInput `pulumi:"oauth2PermissionScopes"`
}

func (ApplicationApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApi)(nil)).Elem()
}

func (i ApplicationApiArgs) ToApplicationApiOutput() ApplicationApiOutput {
	return i.ToApplicationApiOutputWithContext(context.Background())
}

func (i ApplicationApiArgs) ToApplicationApiOutputWithContext(ctx context.Context) ApplicationApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiOutput)
}

func (i ApplicationApiArgs) ToApplicationApiPtrOutput() ApplicationApiPtrOutput {
	return i.ToApplicationApiPtrOutputWithContext(context.Background())
}

func (i ApplicationApiArgs) ToApplicationApiPtrOutputWithContext(ctx context.Context) ApplicationApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiOutput).ToApplicationApiPtrOutputWithContext(ctx)
}

// ApplicationApiPtrInput is an input type that accepts ApplicationApiArgs, ApplicationApiPtr and ApplicationApiPtrOutput values.
// You can construct a concrete instance of `ApplicationApiPtrInput` via:
//
//          ApplicationApiArgs{...}
//
//  or:
//
//          nil
type ApplicationApiPtrInput interface {
	pulumi.Input

	ToApplicationApiPtrOutput() ApplicationApiPtrOutput
	ToApplicationApiPtrOutputWithContext(context.Context) ApplicationApiPtrOutput
}

type applicationApiPtrType ApplicationApiArgs

func ApplicationApiPtr(v *ApplicationApiArgs) ApplicationApiPtrInput {
	return (*applicationApiPtrType)(v)
}

func (*applicationApiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationApi)(nil)).Elem()
}

func (i *applicationApiPtrType) ToApplicationApiPtrOutput() ApplicationApiPtrOutput {
	return i.ToApplicationApiPtrOutputWithContext(context.Background())
}

func (i *applicationApiPtrType) ToApplicationApiPtrOutputWithContext(ctx context.Context) ApplicationApiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiPtrOutput)
}

type ApplicationApiOutput struct{ *pulumi.OutputState }

func (ApplicationApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApi)(nil)).Elem()
}

func (o ApplicationApiOutput) ToApplicationApiOutput() ApplicationApiOutput {
	return o
}

func (o ApplicationApiOutput) ToApplicationApiOutputWithContext(ctx context.Context) ApplicationApiOutput {
	return o
}

func (o ApplicationApiOutput) ToApplicationApiPtrOutput() ApplicationApiPtrOutput {
	return o.ToApplicationApiPtrOutputWithContext(context.Background())
}

func (o ApplicationApiOutput) ToApplicationApiPtrOutputWithContext(ctx context.Context) ApplicationApiPtrOutput {
	return o.ApplyT(func(v ApplicationApi) *ApplicationApi {
		return &v
	}).(ApplicationApiPtrOutput)
}

// One or more `oauth2PermissionScope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this Application.
func (o ApplicationApiOutput) Oauth2PermissionScopes() ApplicationApiOauth2PermissionScopeArrayOutput {
	return o.ApplyT(func(v ApplicationApi) []ApplicationApiOauth2PermissionScope { return v.Oauth2PermissionScopes }).(ApplicationApiOauth2PermissionScopeArrayOutput)
}

type ApplicationApiPtrOutput struct{ *pulumi.OutputState }

func (ApplicationApiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationApi)(nil)).Elem()
}

func (o ApplicationApiPtrOutput) ToApplicationApiPtrOutput() ApplicationApiPtrOutput {
	return o
}

func (o ApplicationApiPtrOutput) ToApplicationApiPtrOutputWithContext(ctx context.Context) ApplicationApiPtrOutput {
	return o
}

func (o ApplicationApiPtrOutput) Elem() ApplicationApiOutput {
	return o.ApplyT(func(v *ApplicationApi) ApplicationApi { return *v }).(ApplicationApiOutput)
}

// One or more `oauth2PermissionScope` blocks as documented below, to describe delegated permissions exposed by the web API represented by this Application.
func (o ApplicationApiPtrOutput) Oauth2PermissionScopes() ApplicationApiOauth2PermissionScopeArrayOutput {
	return o.ApplyT(func(v *ApplicationApi) []ApplicationApiOauth2PermissionScope {
		if v == nil {
			return nil
		}
		return v.Oauth2PermissionScopes
	}).(ApplicationApiOauth2PermissionScopeArrayOutput)
}

type ApplicationApiOauth2PermissionScope struct {
	// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id string `pulumi:"id"`
	// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
	Type *string `pulumi:"type"`
	// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// Display name for the delegated permission that appears in the end user consent experience.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value *string `pulumi:"value"`
}

// ApplicationApiOauth2PermissionScopeInput is an input type that accepts ApplicationApiOauth2PermissionScopeArgs and ApplicationApiOauth2PermissionScopeOutput values.
// You can construct a concrete instance of `ApplicationApiOauth2PermissionScopeInput` via:
//
//          ApplicationApiOauth2PermissionScopeArgs{...}
type ApplicationApiOauth2PermissionScopeInput interface {
	pulumi.Input

	ToApplicationApiOauth2PermissionScopeOutput() ApplicationApiOauth2PermissionScopeOutput
	ToApplicationApiOauth2PermissionScopeOutputWithContext(context.Context) ApplicationApiOauth2PermissionScopeOutput
}

type ApplicationApiOauth2PermissionScopeArgs struct {
	// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// Display name for the delegated permission that appears in the end user consent experience.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationApiOauth2PermissionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (i ApplicationApiOauth2PermissionScopeArgs) ToApplicationApiOauth2PermissionScopeOutput() ApplicationApiOauth2PermissionScopeOutput {
	return i.ToApplicationApiOauth2PermissionScopeOutputWithContext(context.Background())
}

func (i ApplicationApiOauth2PermissionScopeArgs) ToApplicationApiOauth2PermissionScopeOutputWithContext(ctx context.Context) ApplicationApiOauth2PermissionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiOauth2PermissionScopeOutput)
}

// ApplicationApiOauth2PermissionScopeArrayInput is an input type that accepts ApplicationApiOauth2PermissionScopeArray and ApplicationApiOauth2PermissionScopeArrayOutput values.
// You can construct a concrete instance of `ApplicationApiOauth2PermissionScopeArrayInput` via:
//
//          ApplicationApiOauth2PermissionScopeArray{ ApplicationApiOauth2PermissionScopeArgs{...} }
type ApplicationApiOauth2PermissionScopeArrayInput interface {
	pulumi.Input

	ToApplicationApiOauth2PermissionScopeArrayOutput() ApplicationApiOauth2PermissionScopeArrayOutput
	ToApplicationApiOauth2PermissionScopeArrayOutputWithContext(context.Context) ApplicationApiOauth2PermissionScopeArrayOutput
}

type ApplicationApiOauth2PermissionScopeArray []ApplicationApiOauth2PermissionScopeInput

func (ApplicationApiOauth2PermissionScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (i ApplicationApiOauth2PermissionScopeArray) ToApplicationApiOauth2PermissionScopeArrayOutput() ApplicationApiOauth2PermissionScopeArrayOutput {
	return i.ToApplicationApiOauth2PermissionScopeArrayOutputWithContext(context.Background())
}

func (i ApplicationApiOauth2PermissionScopeArray) ToApplicationApiOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) ApplicationApiOauth2PermissionScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationApiOauth2PermissionScopeArrayOutput)
}

type ApplicationApiOauth2PermissionScopeOutput struct{ *pulumi.OutputState }

func (ApplicationApiOauth2PermissionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (o ApplicationApiOauth2PermissionScopeOutput) ToApplicationApiOauth2PermissionScopeOutput() ApplicationApiOauth2PermissionScopeOutput {
	return o
}

func (o ApplicationApiOauth2PermissionScopeOutput) ToApplicationApiOauth2PermissionScopeOutputWithContext(ctx context.Context) ApplicationApiOauth2PermissionScopeOutput {
	return o
}

// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
func (o ApplicationApiOauth2PermissionScopeOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
func (o ApplicationApiOauth2PermissionScopeOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationApiOauth2PermissionScopeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
func (o ApplicationApiOauth2PermissionScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
func (o ApplicationApiOauth2PermissionScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
func (o ApplicationApiOauth2PermissionScopeOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the delegated permission that appears in the end user consent experience.
func (o ApplicationApiOauth2PermissionScopeOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
func (o ApplicationApiOauth2PermissionScopeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationApiOauth2PermissionScope) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationApiOauth2PermissionScopeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationApiOauth2PermissionScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (o ApplicationApiOauth2PermissionScopeArrayOutput) ToApplicationApiOauth2PermissionScopeArrayOutput() ApplicationApiOauth2PermissionScopeArrayOutput {
	return o
}

func (o ApplicationApiOauth2PermissionScopeArrayOutput) ToApplicationApiOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) ApplicationApiOauth2PermissionScopeArrayOutput {
	return o
}

func (o ApplicationApiOauth2PermissionScopeArrayOutput) Index(i pulumi.IntInput) ApplicationApiOauth2PermissionScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationApiOauth2PermissionScope {
		return vs[0].([]ApplicationApiOauth2PermissionScope)[vs[1].(int)]
	}).(ApplicationApiOauth2PermissionScopeOutput)
}

type ApplicationAppRoleType struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description string `pulumi:"description"`
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName string `pulumi:"displayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id *string `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	//
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled *bool `pulumi:"isEnabled"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value *string `pulumi:"value"`
}

// ApplicationAppRoleTypeInput is an input type that accepts ApplicationAppRoleTypeArgs and ApplicationAppRoleTypeOutput values.
// You can construct a concrete instance of `ApplicationAppRoleTypeInput` via:
//
//          ApplicationAppRoleTypeArgs{...}
type ApplicationAppRoleTypeInput interface {
	pulumi.Input

	ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput
	ToApplicationAppRoleTypeOutputWithContext(context.Context) ApplicationAppRoleTypeOutput
}

type ApplicationAppRoleTypeArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the app role that appears during app role assignment and in consent experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Determines if the app role is enabled: Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	//
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationAppRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRoleType)(nil)).Elem()
}

func (i ApplicationAppRoleTypeArgs) ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput {
	return i.ToApplicationAppRoleTypeOutputWithContext(context.Background())
}

func (i ApplicationAppRoleTypeArgs) ToApplicationAppRoleTypeOutputWithContext(ctx context.Context) ApplicationAppRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleTypeOutput)
}

// ApplicationAppRoleTypeArrayInput is an input type that accepts ApplicationAppRoleTypeArray and ApplicationAppRoleTypeArrayOutput values.
// You can construct a concrete instance of `ApplicationAppRoleTypeArrayInput` via:
//
//          ApplicationAppRoleTypeArray{ ApplicationAppRoleTypeArgs{...} }
type ApplicationAppRoleTypeArrayInput interface {
	pulumi.Input

	ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput
	ToApplicationAppRoleTypeArrayOutputWithContext(context.Context) ApplicationAppRoleTypeArrayOutput
}

type ApplicationAppRoleTypeArray []ApplicationAppRoleTypeInput

func (ApplicationAppRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRoleType)(nil)).Elem()
}

func (i ApplicationAppRoleTypeArray) ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput {
	return i.ToApplicationAppRoleTypeArrayOutputWithContext(context.Background())
}

func (i ApplicationAppRoleTypeArray) ToApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) ApplicationAppRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleTypeArrayOutput)
}

type ApplicationAppRoleTypeOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRoleType)(nil)).Elem()
}

func (o ApplicationAppRoleTypeOutput) ToApplicationAppRoleTypeOutput() ApplicationAppRoleTypeOutput {
	return o
}

func (o ApplicationAppRoleTypeOutput) ToApplicationAppRoleTypeOutputWithContext(ctx context.Context) ApplicationAppRoleTypeOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both.
func (o ApplicationAppRoleTypeOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
func (o ApplicationAppRoleTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the app role that appears during app role assignment and in consent experiences.
func (o ApplicationAppRoleTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationAppRoleTypeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
func (o ApplicationAppRoleTypeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the permission is enabled: defaults to `true`.
//
// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
func (o ApplicationAppRoleTypeOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
func (o ApplicationAppRoleTypeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRoleType) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationAppRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRoleType)(nil)).Elem()
}

func (o ApplicationAppRoleTypeArrayOutput) ToApplicationAppRoleTypeArrayOutput() ApplicationAppRoleTypeArrayOutput {
	return o
}

func (o ApplicationAppRoleTypeArrayOutput) ToApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) ApplicationAppRoleTypeArrayOutput {
	return o
}

func (o ApplicationAppRoleTypeArrayOutput) Index(i pulumi.IntInput) ApplicationAppRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppRoleType {
		return vs[0].([]ApplicationAppRoleType)[vs[1].(int)]
	}).(ApplicationAppRoleTypeOutput)
}

type ApplicationOauth2Permission struct {
	// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id *string `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
	Type *string `pulumi:"type"`
	// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// Display name for the delegated permission that appears in the end user consent experience.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value *string `pulumi:"value"`
}

// ApplicationOauth2PermissionInput is an input type that accepts ApplicationOauth2PermissionArgs and ApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionInput` via:
//
//          ApplicationOauth2PermissionArgs{...}
type ApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput
	ToApplicationOauth2PermissionOutputWithContext(context.Context) ApplicationOauth2PermissionOutput
}

type ApplicationOauth2PermissionArgs struct {
	// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the permission is enabled: defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// Display name for the delegated permission that appears in the end user consent experience.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return i.ToApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionOutput)
}

// ApplicationOauth2PermissionArrayInput is an input type that accepts ApplicationOauth2PermissionArray and ApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionArrayInput` via:
//
//          ApplicationOauth2PermissionArray{ ApplicationOauth2PermissionArgs{...} }
type ApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput
	ToApplicationOauth2PermissionArrayOutputWithContext(context.Context) ApplicationOauth2PermissionArrayOutput
}

type ApplicationOauth2PermissionArray []ApplicationOauth2PermissionInput

func (ApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return i.ToApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionArrayOutput)
}

type ApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return o
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return o
}

// Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
func (o ApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
func (o ApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier of the app role. This attribute is computed and cannot be specified manually in this block. If you need to specify a custom `id`, it's recommended to use the ApplicationAppRole resource.
func (o ApplicationOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the permission is enabled: defaults to `true`.
func (o ApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not be set. **This legacy property is deprecated and will be removed in version 2.0 of the provider**.
func (o ApplicationOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
func (o ApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// Display name for the delegated permission that appears in the end user consent experience.
func (o ApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
func (o ApplicationOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOauth2Permission {
		return vs[0].([]ApplicationOauth2Permission)[vs[1].(int)]
	}).(ApplicationOauth2PermissionOutput)
}

type ApplicationOptionalClaims struct {
	AccessTokens []ApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []ApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

// ApplicationOptionalClaimsInput is an input type that accepts ApplicationOptionalClaimsArgs and ApplicationOptionalClaimsOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
type ApplicationOptionalClaimsInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput
	ToApplicationOptionalClaimsOutputWithContext(context.Context) ApplicationOptionalClaimsOutput
}

type ApplicationOptionalClaimsArgs struct {
	AccessTokens ApplicationOptionalClaimsAccessTokenArrayInput `pulumi:"accessTokens"`
	IdTokens     ApplicationOptionalClaimsIdTokenArrayInput     `pulumi:"idTokens"`
}

func (ApplicationOptionalClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return i.ToApplicationOptionalClaimsOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput)
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsArgs) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsOutput).ToApplicationOptionalClaimsPtrOutputWithContext(ctx)
}

// ApplicationOptionalClaimsPtrInput is an input type that accepts ApplicationOptionalClaimsArgs, ApplicationOptionalClaimsPtr and ApplicationOptionalClaimsPtrOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsPtrInput` via:
//
//          ApplicationOptionalClaimsArgs{...}
//
//  or:
//
//          nil
type ApplicationOptionalClaimsPtrInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput
	ToApplicationOptionalClaimsPtrOutputWithContext(context.Context) ApplicationOptionalClaimsPtrOutput
}

type applicationOptionalClaimsPtrType ApplicationOptionalClaimsArgs

func ApplicationOptionalClaimsPtr(v *ApplicationOptionalClaimsArgs) ApplicationOptionalClaimsPtrInput {
	return (*applicationOptionalClaimsPtrType)(v)
}

func (*applicationOptionalClaimsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return i.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (i *applicationOptionalClaimsPtrType) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsPtrOutput)
}

type ApplicationOptionalClaimsOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutput() ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsOutputWithContext(ctx context.Context) ApplicationOptionalClaimsOutput {
	return o
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o.ToApplicationOptionalClaimsPtrOutputWithContext(context.Background())
}

func (o ApplicationOptionalClaimsOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) *ApplicationOptionalClaims {
		return &v
	}).(ApplicationOptionalClaimsPtrOutput)
}
func (o ApplicationOptionalClaimsOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken { return v.AccessTokens }).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken { return v.IdTokens }).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsPtrOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationOptionalClaims)(nil)).Elem()
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutput() ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) ToApplicationOptionalClaimsPtrOutputWithContext(ctx context.Context) ApplicationOptionalClaimsPtrOutput {
	return o
}

func (o ApplicationOptionalClaimsPtrOutput) Elem() ApplicationOptionalClaimsOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) ApplicationOptionalClaims { return *v }).(ApplicationOptionalClaimsOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) AccessTokens() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsAccessToken {
		if v == nil {
			return nil
		}
		return v.AccessTokens
	}).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o ApplicationOptionalClaimsPtrOutput) IdTokens() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v *ApplicationOptionalClaims) []ApplicationOptionalClaimsIdToken {
		if v == nil {
			return nil
		}
		return v.IdTokens
	}).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsAccessTokenInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArgs and ApplicationOptionalClaimsAccessTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArgs{...}
type ApplicationOptionalClaimsAccessTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput
	ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenOutput
}

type ApplicationOptionalClaimsAccessTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return i.ToApplicationOptionalClaimsAccessTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArgs) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenOutput)
}

// ApplicationOptionalClaimsAccessTokenArrayInput is an input type that accepts ApplicationOptionalClaimsAccessTokenArray and ApplicationOptionalClaimsAccessTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsAccessTokenArrayInput` via:
//
//          ApplicationOptionalClaimsAccessTokenArray{ ApplicationOptionalClaimsAccessTokenArgs{...} }
type ApplicationOptionalClaimsAccessTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput
	ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput
}

type ApplicationOptionalClaimsAccessTokenArray []ApplicationOptionalClaimsAccessTokenInput

func (ApplicationOptionalClaimsAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return i.ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsAccessTokenArray) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsAccessTokenArrayOutput)
}

type ApplicationOptionalClaimsAccessTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutput() ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenOutput) ToApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsAccessTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o ApplicationOptionalClaimsAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsAccessTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsAccessToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutput() ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) ToApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsAccessTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsAccessToken {
		return vs[0].([]ApplicationOptionalClaimsAccessToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsAccessTokenOutput)
}

type ApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// ApplicationOptionalClaimsIdTokenInput is an input type that accepts ApplicationOptionalClaimsIdTokenArgs and ApplicationOptionalClaimsIdTokenOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenInput` via:
//
//          ApplicationOptionalClaimsIdTokenArgs{...}
type ApplicationOptionalClaimsIdTokenInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput
	ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenOutput
}

type ApplicationOptionalClaimsIdTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ApplicationOptionalClaimsIdTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return i.ToApplicationOptionalClaimsIdTokenOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArgs) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenOutput)
}

// ApplicationOptionalClaimsIdTokenArrayInput is an input type that accepts ApplicationOptionalClaimsIdTokenArray and ApplicationOptionalClaimsIdTokenArrayOutput values.
// You can construct a concrete instance of `ApplicationOptionalClaimsIdTokenArrayInput` via:
//
//          ApplicationOptionalClaimsIdTokenArray{ ApplicationOptionalClaimsIdTokenArgs{...} }
type ApplicationOptionalClaimsIdTokenArrayInput interface {
	pulumi.Input

	ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput
	ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Context) ApplicationOptionalClaimsIdTokenArrayOutput
}

type ApplicationOptionalClaimsIdTokenArray []ApplicationOptionalClaimsIdTokenInput

func (ApplicationOptionalClaimsIdTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return i.ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Background())
}

func (i ApplicationOptionalClaimsIdTokenArray) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOptionalClaimsIdTokenArrayOutput)
}

type ApplicationOptionalClaimsIdTokenOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutput() ApplicationOptionalClaimsIdTokenOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenOutput) ToApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o ApplicationOptionalClaimsIdTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o ApplicationOptionalClaimsIdTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o ApplicationOptionalClaimsIdTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o ApplicationOptionalClaimsIdTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOptionalClaimsIdToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ApplicationOptionalClaimsIdTokenArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOptionalClaimsIdTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutput() ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) ToApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) ApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o ApplicationOptionalClaimsIdTokenArrayOutput) Index(i pulumi.IntInput) ApplicationOptionalClaimsIdTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOptionalClaimsIdToken {
		return vs[0].([]ApplicationOptionalClaimsIdToken)[vs[1].(int)]
	}).(ApplicationOptionalClaimsIdTokenOutput)
}

type ApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
	ResourceAccesses []ApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// ApplicationRequiredResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessArgs and ApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessArgs{...}
type ApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput
	ToApplicationRequiredResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessOutput
}

type ApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
	ResourceAccesses ApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (ApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessOutput)
}

// ApplicationRequiredResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessArray and ApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessArray{ ApplicationRequiredResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessArray []ApplicationRequiredResourceAccessInput

func (ApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
func (o ApplicationRequiredResourceAccessOutput) ResourceAccesses() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) []ApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to. This should be the Application ID of the target application.
func (o ApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessOutput)
}

type ApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
}

// ApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArgs and ApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArgs{...}
type ApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput
	ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessOutput
}

type ApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

// ApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArray and ApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
//          ApplicationRequiredResourceAccessResourceAccessArray{ ApplicationRequiredResourceAccessResourceAccessArgs{...} }
type ApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessResourceAccessArray []ApplicationRequiredResourceAccessResourceAccessInput

func (ApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

type ApplicationWeb struct {
	// Home page or landing page of the application.
	HomepageUrl *string `pulumi:"homepageUrl"`
	// An `implicitGrant` block as documented above.
	ImplicitGrant *ApplicationWebImplicitGrant `pulumi:"implicitGrant"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
	LogoutUrl *string `pulumi:"logoutUrl"`
	// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
	RedirectUris []string `pulumi:"redirectUris"`
}

// ApplicationWebInput is an input type that accepts ApplicationWebArgs and ApplicationWebOutput values.
// You can construct a concrete instance of `ApplicationWebInput` via:
//
//          ApplicationWebArgs{...}
type ApplicationWebInput interface {
	pulumi.Input

	ToApplicationWebOutput() ApplicationWebOutput
	ToApplicationWebOutputWithContext(context.Context) ApplicationWebOutput
}

type ApplicationWebArgs struct {
	// Home page or landing page of the application.
	HomepageUrl pulumi.StringPtrInput `pulumi:"homepageUrl"`
	// An `implicitGrant` block as documented above.
	ImplicitGrant ApplicationWebImplicitGrantPtrInput `pulumi:"implicitGrant"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
	LogoutUrl pulumi.StringPtrInput `pulumi:"logoutUrl"`
	// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
	RedirectUris pulumi.StringArrayInput `pulumi:"redirectUris"`
}

func (ApplicationWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationWeb)(nil)).Elem()
}

func (i ApplicationWebArgs) ToApplicationWebOutput() ApplicationWebOutput {
	return i.ToApplicationWebOutputWithContext(context.Background())
}

func (i ApplicationWebArgs) ToApplicationWebOutputWithContext(ctx context.Context) ApplicationWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebOutput)
}

func (i ApplicationWebArgs) ToApplicationWebPtrOutput() ApplicationWebPtrOutput {
	return i.ToApplicationWebPtrOutputWithContext(context.Background())
}

func (i ApplicationWebArgs) ToApplicationWebPtrOutputWithContext(ctx context.Context) ApplicationWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebOutput).ToApplicationWebPtrOutputWithContext(ctx)
}

// ApplicationWebPtrInput is an input type that accepts ApplicationWebArgs, ApplicationWebPtr and ApplicationWebPtrOutput values.
// You can construct a concrete instance of `ApplicationWebPtrInput` via:
//
//          ApplicationWebArgs{...}
//
//  or:
//
//          nil
type ApplicationWebPtrInput interface {
	pulumi.Input

	ToApplicationWebPtrOutput() ApplicationWebPtrOutput
	ToApplicationWebPtrOutputWithContext(context.Context) ApplicationWebPtrOutput
}

type applicationWebPtrType ApplicationWebArgs

func ApplicationWebPtr(v *ApplicationWebArgs) ApplicationWebPtrInput {
	return (*applicationWebPtrType)(v)
}

func (*applicationWebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationWeb)(nil)).Elem()
}

func (i *applicationWebPtrType) ToApplicationWebPtrOutput() ApplicationWebPtrOutput {
	return i.ToApplicationWebPtrOutputWithContext(context.Background())
}

func (i *applicationWebPtrType) ToApplicationWebPtrOutputWithContext(ctx context.Context) ApplicationWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebPtrOutput)
}

type ApplicationWebOutput struct{ *pulumi.OutputState }

func (ApplicationWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationWeb)(nil)).Elem()
}

func (o ApplicationWebOutput) ToApplicationWebOutput() ApplicationWebOutput {
	return o
}

func (o ApplicationWebOutput) ToApplicationWebOutputWithContext(ctx context.Context) ApplicationWebOutput {
	return o
}

func (o ApplicationWebOutput) ToApplicationWebPtrOutput() ApplicationWebPtrOutput {
	return o.ToApplicationWebPtrOutputWithContext(context.Background())
}

func (o ApplicationWebOutput) ToApplicationWebPtrOutputWithContext(ctx context.Context) ApplicationWebPtrOutput {
	return o.ApplyT(func(v ApplicationWeb) *ApplicationWeb {
		return &v
	}).(ApplicationWebPtrOutput)
}

// Home page or landing page of the application.
func (o ApplicationWebOutput) HomepageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationWeb) *string { return v.HomepageUrl }).(pulumi.StringPtrOutput)
}

// An `implicitGrant` block as documented above.
func (o ApplicationWebOutput) ImplicitGrant() ApplicationWebImplicitGrantPtrOutput {
	return o.ApplyT(func(v ApplicationWeb) *ApplicationWebImplicitGrant { return v.ImplicitGrant }).(ApplicationWebImplicitGrantPtrOutput)
}

// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
func (o ApplicationWebOutput) LogoutUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationWeb) *string { return v.LogoutUrl }).(pulumi.StringPtrOutput)
}

// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
func (o ApplicationWebOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationWeb) []string { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

type ApplicationWebPtrOutput struct{ *pulumi.OutputState }

func (ApplicationWebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationWeb)(nil)).Elem()
}

func (o ApplicationWebPtrOutput) ToApplicationWebPtrOutput() ApplicationWebPtrOutput {
	return o
}

func (o ApplicationWebPtrOutput) ToApplicationWebPtrOutputWithContext(ctx context.Context) ApplicationWebPtrOutput {
	return o
}

func (o ApplicationWebPtrOutput) Elem() ApplicationWebOutput {
	return o.ApplyT(func(v *ApplicationWeb) ApplicationWeb { return *v }).(ApplicationWebOutput)
}

// Home page or landing page of the application.
func (o ApplicationWebPtrOutput) HomepageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationWeb) *string {
		if v == nil {
			return nil
		}
		return v.HomepageUrl
	}).(pulumi.StringPtrOutput)
}

// An `implicitGrant` block as documented above.
func (o ApplicationWebPtrOutput) ImplicitGrant() ApplicationWebImplicitGrantPtrOutput {
	return o.ApplyT(func(v *ApplicationWeb) *ApplicationWebImplicitGrant {
		if v == nil {
			return nil
		}
		return v.ImplicitGrant
	}).(ApplicationWebImplicitGrantPtrOutput)
}

// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
func (o ApplicationWebPtrOutput) LogoutUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationWeb) *string {
		if v == nil {
			return nil
		}
		return v.LogoutUrl
	}).(pulumi.StringPtrOutput)
}

// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
func (o ApplicationWebPtrOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationWeb) []string {
		if v == nil {
			return nil
		}
		return v.RedirectUris
	}).(pulumi.StringArrayOutput)
}

type ApplicationWebImplicitGrant struct {
	// Whether this web application can request an access token using OAuth 2.0 implicit flow.
	AccessTokenIssuanceEnabled *bool `pulumi:"accessTokenIssuanceEnabled"`
}

// ApplicationWebImplicitGrantInput is an input type that accepts ApplicationWebImplicitGrantArgs and ApplicationWebImplicitGrantOutput values.
// You can construct a concrete instance of `ApplicationWebImplicitGrantInput` via:
//
//          ApplicationWebImplicitGrantArgs{...}
type ApplicationWebImplicitGrantInput interface {
	pulumi.Input

	ToApplicationWebImplicitGrantOutput() ApplicationWebImplicitGrantOutput
	ToApplicationWebImplicitGrantOutputWithContext(context.Context) ApplicationWebImplicitGrantOutput
}

type ApplicationWebImplicitGrantArgs struct {
	// Whether this web application can request an access token using OAuth 2.0 implicit flow.
	AccessTokenIssuanceEnabled pulumi.BoolPtrInput `pulumi:"accessTokenIssuanceEnabled"`
}

func (ApplicationWebImplicitGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationWebImplicitGrant)(nil)).Elem()
}

func (i ApplicationWebImplicitGrantArgs) ToApplicationWebImplicitGrantOutput() ApplicationWebImplicitGrantOutput {
	return i.ToApplicationWebImplicitGrantOutputWithContext(context.Background())
}

func (i ApplicationWebImplicitGrantArgs) ToApplicationWebImplicitGrantOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebImplicitGrantOutput)
}

func (i ApplicationWebImplicitGrantArgs) ToApplicationWebImplicitGrantPtrOutput() ApplicationWebImplicitGrantPtrOutput {
	return i.ToApplicationWebImplicitGrantPtrOutputWithContext(context.Background())
}

func (i ApplicationWebImplicitGrantArgs) ToApplicationWebImplicitGrantPtrOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebImplicitGrantOutput).ToApplicationWebImplicitGrantPtrOutputWithContext(ctx)
}

// ApplicationWebImplicitGrantPtrInput is an input type that accepts ApplicationWebImplicitGrantArgs, ApplicationWebImplicitGrantPtr and ApplicationWebImplicitGrantPtrOutput values.
// You can construct a concrete instance of `ApplicationWebImplicitGrantPtrInput` via:
//
//          ApplicationWebImplicitGrantArgs{...}
//
//  or:
//
//          nil
type ApplicationWebImplicitGrantPtrInput interface {
	pulumi.Input

	ToApplicationWebImplicitGrantPtrOutput() ApplicationWebImplicitGrantPtrOutput
	ToApplicationWebImplicitGrantPtrOutputWithContext(context.Context) ApplicationWebImplicitGrantPtrOutput
}

type applicationWebImplicitGrantPtrType ApplicationWebImplicitGrantArgs

func ApplicationWebImplicitGrantPtr(v *ApplicationWebImplicitGrantArgs) ApplicationWebImplicitGrantPtrInput {
	return (*applicationWebImplicitGrantPtrType)(v)
}

func (*applicationWebImplicitGrantPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationWebImplicitGrant)(nil)).Elem()
}

func (i *applicationWebImplicitGrantPtrType) ToApplicationWebImplicitGrantPtrOutput() ApplicationWebImplicitGrantPtrOutput {
	return i.ToApplicationWebImplicitGrantPtrOutputWithContext(context.Background())
}

func (i *applicationWebImplicitGrantPtrType) ToApplicationWebImplicitGrantPtrOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationWebImplicitGrantPtrOutput)
}

type ApplicationWebImplicitGrantOutput struct{ *pulumi.OutputState }

func (ApplicationWebImplicitGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationWebImplicitGrant)(nil)).Elem()
}

func (o ApplicationWebImplicitGrantOutput) ToApplicationWebImplicitGrantOutput() ApplicationWebImplicitGrantOutput {
	return o
}

func (o ApplicationWebImplicitGrantOutput) ToApplicationWebImplicitGrantOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantOutput {
	return o
}

func (o ApplicationWebImplicitGrantOutput) ToApplicationWebImplicitGrantPtrOutput() ApplicationWebImplicitGrantPtrOutput {
	return o.ToApplicationWebImplicitGrantPtrOutputWithContext(context.Background())
}

func (o ApplicationWebImplicitGrantOutput) ToApplicationWebImplicitGrantPtrOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantPtrOutput {
	return o.ApplyT(func(v ApplicationWebImplicitGrant) *ApplicationWebImplicitGrant {
		return &v
	}).(ApplicationWebImplicitGrantPtrOutput)
}

// Whether this web application can request an access token using OAuth 2.0 implicit flow.
func (o ApplicationWebImplicitGrantOutput) AccessTokenIssuanceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationWebImplicitGrant) *bool { return v.AccessTokenIssuanceEnabled }).(pulumi.BoolPtrOutput)
}

type ApplicationWebImplicitGrantPtrOutput struct{ *pulumi.OutputState }

func (ApplicationWebImplicitGrantPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationWebImplicitGrant)(nil)).Elem()
}

func (o ApplicationWebImplicitGrantPtrOutput) ToApplicationWebImplicitGrantPtrOutput() ApplicationWebImplicitGrantPtrOutput {
	return o
}

func (o ApplicationWebImplicitGrantPtrOutput) ToApplicationWebImplicitGrantPtrOutputWithContext(ctx context.Context) ApplicationWebImplicitGrantPtrOutput {
	return o
}

func (o ApplicationWebImplicitGrantPtrOutput) Elem() ApplicationWebImplicitGrantOutput {
	return o.ApplyT(func(v *ApplicationWebImplicitGrant) ApplicationWebImplicitGrant { return *v }).(ApplicationWebImplicitGrantOutput)
}

// Whether this web application can request an access token using OAuth 2.0 implicit flow.
func (o ApplicationWebImplicitGrantPtrOutput) AccessTokenIssuanceEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationWebImplicitGrant) *bool {
		if v == nil {
			return nil
		}
		return v.AccessTokenIssuanceEnabled
	}).(pulumi.BoolPtrOutput)
}

type ServicePrincipalAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description *string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName *string `pulumi:"displayName"`
	// Is this permission enabled?
	Enabled *bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled *bool `pulumi:"isEnabled"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalAppRoleInput is an input type that accepts ServicePrincipalAppRoleArgs and ServicePrincipalAppRoleOutput values.
// You can construct a concrete instance of `ServicePrincipalAppRoleInput` via:
//
//          ServicePrincipalAppRoleArgs{...}
type ServicePrincipalAppRoleInput interface {
	pulumi.Input

	ToServicePrincipalAppRoleOutput() ServicePrincipalAppRoleOutput
	ToServicePrincipalAppRoleOutputWithContext(context.Context) ServicePrincipalAppRoleOutput
}

type ServicePrincipalAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Is this permission enabled?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAppRole)(nil)).Elem()
}

func (i ServicePrincipalAppRoleArgs) ToServicePrincipalAppRoleOutput() ServicePrincipalAppRoleOutput {
	return i.ToServicePrincipalAppRoleOutputWithContext(context.Background())
}

func (i ServicePrincipalAppRoleArgs) ToServicePrincipalAppRoleOutputWithContext(ctx context.Context) ServicePrincipalAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalAppRoleOutput)
}

// ServicePrincipalAppRoleArrayInput is an input type that accepts ServicePrincipalAppRoleArray and ServicePrincipalAppRoleArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalAppRoleArrayInput` via:
//
//          ServicePrincipalAppRoleArray{ ServicePrincipalAppRoleArgs{...} }
type ServicePrincipalAppRoleArrayInput interface {
	pulumi.Input

	ToServicePrincipalAppRoleArrayOutput() ServicePrincipalAppRoleArrayOutput
	ToServicePrincipalAppRoleArrayOutputWithContext(context.Context) ServicePrincipalAppRoleArrayOutput
}

type ServicePrincipalAppRoleArray []ServicePrincipalAppRoleInput

func (ServicePrincipalAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalAppRole)(nil)).Elem()
}

func (i ServicePrincipalAppRoleArray) ToServicePrincipalAppRoleArrayOutput() ServicePrincipalAppRoleArrayOutput {
	return i.ToServicePrincipalAppRoleArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalAppRoleArray) ToServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) ServicePrincipalAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalAppRoleArrayOutput)
}

type ServicePrincipalAppRoleOutput struct{ *pulumi.OutputState }

func (ServicePrincipalAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAppRole)(nil)).Elem()
}

func (o ServicePrincipalAppRoleOutput) ToServicePrincipalAppRoleOutput() ServicePrincipalAppRoleOutput {
	return o
}

func (o ServicePrincipalAppRoleOutput) ToServicePrincipalAppRoleOutputWithContext(ctx context.Context) ServicePrincipalAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o ServicePrincipalAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o ServicePrincipalAppRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ServicePrincipalAppRoleOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalAppRoleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalAppRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
//
// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
func (o ServicePrincipalAppRoleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalAppRoleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAppRole) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalAppRoleArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalAppRole)(nil)).Elem()
}

func (o ServicePrincipalAppRoleArrayOutput) ToServicePrincipalAppRoleArrayOutput() ServicePrincipalAppRoleArrayOutput {
	return o
}

func (o ServicePrincipalAppRoleArrayOutput) ToServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) ServicePrincipalAppRoleArrayOutput {
	return o
}

func (o ServicePrincipalAppRoleArrayOutput) Index(i pulumi.IntInput) ServicePrincipalAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalAppRole {
		return vs[0].([]ServicePrincipalAppRole)[vs[1].(int)]
	}).(ServicePrincipalAppRoleOutput)
}

type ServicePrincipalOauth2Permission struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of the permission.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalOauth2PermissionInput is an input type that accepts ServicePrincipalOauth2PermissionArgs and ServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionInput` via:
//
//          ServicePrincipalOauth2PermissionArgs{...}
type ServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput
	ToServicePrincipalOauth2PermissionOutputWithContext(context.Context) ServicePrincipalOauth2PermissionOutput
}

type ServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of the permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return i.ToServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionOutput)
}

// ServicePrincipalOauth2PermissionArrayInput is an input type that accepts ServicePrincipalOauth2PermissionArray and ServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionArrayInput` via:
//
//          ServicePrincipalOauth2PermissionArray{ ServicePrincipalOauth2PermissionArgs{...} }
type ServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput
	ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) ServicePrincipalOauth2PermissionArrayOutput
}

type ServicePrincipalOauth2PermissionArray []ServicePrincipalOauth2PermissionInput

func (ServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return i.ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionArrayOutput)
}

type ServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the permission.
func (o ServicePrincipalOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalOauth2Permission {
		return vs[0].([]ServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(ServicePrincipalOauth2PermissionOutput)
}

type ServicePrincipalOauth2PermissionScope struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// Is this permission enabled?
	Enabled *bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// The type of the permission.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalOauth2PermissionScopeInput is an input type that accepts ServicePrincipalOauth2PermissionScopeArgs and ServicePrincipalOauth2PermissionScopeOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionScopeInput` via:
//
//          ServicePrincipalOauth2PermissionScopeArgs{...}
type ServicePrincipalOauth2PermissionScopeInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionScopeOutput() ServicePrincipalOauth2PermissionScopeOutput
	ToServicePrincipalOauth2PermissionScopeOutputWithContext(context.Context) ServicePrincipalOauth2PermissionScopeOutput
}

type ServicePrincipalOauth2PermissionScopeArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// Is this permission enabled?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalOauth2PermissionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionScopeArgs) ToServicePrincipalOauth2PermissionScopeOutput() ServicePrincipalOauth2PermissionScopeOutput {
	return i.ToServicePrincipalOauth2PermissionScopeOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionScopeArgs) ToServicePrincipalOauth2PermissionScopeOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionScopeOutput)
}

// ServicePrincipalOauth2PermissionScopeArrayInput is an input type that accepts ServicePrincipalOauth2PermissionScopeArray and ServicePrincipalOauth2PermissionScopeArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionScopeArrayInput` via:
//
//          ServicePrincipalOauth2PermissionScopeArray{ ServicePrincipalOauth2PermissionScopeArgs{...} }
type ServicePrincipalOauth2PermissionScopeArrayInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionScopeArrayOutput() ServicePrincipalOauth2PermissionScopeArrayOutput
	ToServicePrincipalOauth2PermissionScopeArrayOutputWithContext(context.Context) ServicePrincipalOauth2PermissionScopeArrayOutput
}

type ServicePrincipalOauth2PermissionScopeArray []ServicePrincipalOauth2PermissionScopeInput

func (ServicePrincipalOauth2PermissionScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionScopeArray) ToServicePrincipalOauth2PermissionScopeArrayOutput() ServicePrincipalOauth2PermissionScopeArrayOutput {
	return i.ToServicePrincipalOauth2PermissionScopeArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionScopeArray) ToServicePrincipalOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionScopeArrayOutput)
}

type ServicePrincipalOauth2PermissionScopeOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionScopeOutput) ToServicePrincipalOauth2PermissionScopeOutput() ServicePrincipalOauth2PermissionScopeOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionScopeOutput) ToServicePrincipalOauth2PermissionScopeOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionScopeOutput {
	return o
}

// The description of the admin consent.
func (o ServicePrincipalOauth2PermissionScopeOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ServicePrincipalOauth2PermissionScopeOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalOauth2PermissionScopeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalOauth2PermissionScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the permission.
func (o ServicePrincipalOauth2PermissionScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ServicePrincipalOauth2PermissionScopeOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ServicePrincipalOauth2PermissionScopeOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalOauth2PermissionScopeOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2PermissionScope) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalOauth2PermissionScopeArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionScopeArrayOutput) ToServicePrincipalOauth2PermissionScopeArrayOutput() ServicePrincipalOauth2PermissionScopeArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionScopeArrayOutput) ToServicePrincipalOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionScopeArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionScopeArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOauth2PermissionScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalOauth2PermissionScope {
		return vs[0].([]ServicePrincipalOauth2PermissionScope)[vs[1].(int)]
	}).(ServicePrincipalOauth2PermissionScopeOutput)
}

type GetApplicationApi struct {
	Oauth2PermissionScopes []GetApplicationApiOauth2PermissionScope `pulumi:"oauth2PermissionScopes"`
}

// GetApplicationApiInput is an input type that accepts GetApplicationApiArgs and GetApplicationApiOutput values.
// You can construct a concrete instance of `GetApplicationApiInput` via:
//
//          GetApplicationApiArgs{...}
type GetApplicationApiInput interface {
	pulumi.Input

	ToGetApplicationApiOutput() GetApplicationApiOutput
	ToGetApplicationApiOutputWithContext(context.Context) GetApplicationApiOutput
}

type GetApplicationApiArgs struct {
	Oauth2PermissionScopes GetApplicationApiOauth2PermissionScopeArrayInput `pulumi:"oauth2PermissionScopes"`
}

func (GetApplicationApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationApi)(nil)).Elem()
}

func (i GetApplicationApiArgs) ToGetApplicationApiOutput() GetApplicationApiOutput {
	return i.ToGetApplicationApiOutputWithContext(context.Background())
}

func (i GetApplicationApiArgs) ToGetApplicationApiOutputWithContext(ctx context.Context) GetApplicationApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationApiOutput)
}

// GetApplicationApiArrayInput is an input type that accepts GetApplicationApiArray and GetApplicationApiArrayOutput values.
// You can construct a concrete instance of `GetApplicationApiArrayInput` via:
//
//          GetApplicationApiArray{ GetApplicationApiArgs{...} }
type GetApplicationApiArrayInput interface {
	pulumi.Input

	ToGetApplicationApiArrayOutput() GetApplicationApiArrayOutput
	ToGetApplicationApiArrayOutputWithContext(context.Context) GetApplicationApiArrayOutput
}

type GetApplicationApiArray []GetApplicationApiInput

func (GetApplicationApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationApi)(nil)).Elem()
}

func (i GetApplicationApiArray) ToGetApplicationApiArrayOutput() GetApplicationApiArrayOutput {
	return i.ToGetApplicationApiArrayOutputWithContext(context.Background())
}

func (i GetApplicationApiArray) ToGetApplicationApiArrayOutputWithContext(ctx context.Context) GetApplicationApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationApiArrayOutput)
}

type GetApplicationApiOutput struct{ *pulumi.OutputState }

func (GetApplicationApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationApi)(nil)).Elem()
}

func (o GetApplicationApiOutput) ToGetApplicationApiOutput() GetApplicationApiOutput {
	return o
}

func (o GetApplicationApiOutput) ToGetApplicationApiOutputWithContext(ctx context.Context) GetApplicationApiOutput {
	return o
}

func (o GetApplicationApiOutput) Oauth2PermissionScopes() GetApplicationApiOauth2PermissionScopeArrayOutput {
	return o.ApplyT(func(v GetApplicationApi) []GetApplicationApiOauth2PermissionScope { return v.Oauth2PermissionScopes }).(GetApplicationApiOauth2PermissionScopeArrayOutput)
}

type GetApplicationApiArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationApi)(nil)).Elem()
}

func (o GetApplicationApiArrayOutput) ToGetApplicationApiArrayOutput() GetApplicationApiArrayOutput {
	return o
}

func (o GetApplicationApiArrayOutput) ToGetApplicationApiArrayOutputWithContext(ctx context.Context) GetApplicationApiArrayOutput {
	return o
}

func (o GetApplicationApiArrayOutput) Index(i pulumi.IntInput) GetApplicationApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationApi {
		return vs[0].([]GetApplicationApi)[vs[1].(int)]
	}).(GetApplicationApiOutput)
}

type GetApplicationApiOauth2PermissionScope struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetApplicationApiOauth2PermissionScopeInput is an input type that accepts GetApplicationApiOauth2PermissionScopeArgs and GetApplicationApiOauth2PermissionScopeOutput values.
// You can construct a concrete instance of `GetApplicationApiOauth2PermissionScopeInput` via:
//
//          GetApplicationApiOauth2PermissionScopeArgs{...}
type GetApplicationApiOauth2PermissionScopeInput interface {
	pulumi.Input

	ToGetApplicationApiOauth2PermissionScopeOutput() GetApplicationApiOauth2PermissionScopeOutput
	ToGetApplicationApiOauth2PermissionScopeOutputWithContext(context.Context) GetApplicationApiOauth2PermissionScopeOutput
}

type GetApplicationApiOauth2PermissionScopeArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationApiOauth2PermissionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (i GetApplicationApiOauth2PermissionScopeArgs) ToGetApplicationApiOauth2PermissionScopeOutput() GetApplicationApiOauth2PermissionScopeOutput {
	return i.ToGetApplicationApiOauth2PermissionScopeOutputWithContext(context.Background())
}

func (i GetApplicationApiOauth2PermissionScopeArgs) ToGetApplicationApiOauth2PermissionScopeOutputWithContext(ctx context.Context) GetApplicationApiOauth2PermissionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationApiOauth2PermissionScopeOutput)
}

// GetApplicationApiOauth2PermissionScopeArrayInput is an input type that accepts GetApplicationApiOauth2PermissionScopeArray and GetApplicationApiOauth2PermissionScopeArrayOutput values.
// You can construct a concrete instance of `GetApplicationApiOauth2PermissionScopeArrayInput` via:
//
//          GetApplicationApiOauth2PermissionScopeArray{ GetApplicationApiOauth2PermissionScopeArgs{...} }
type GetApplicationApiOauth2PermissionScopeArrayInput interface {
	pulumi.Input

	ToGetApplicationApiOauth2PermissionScopeArrayOutput() GetApplicationApiOauth2PermissionScopeArrayOutput
	ToGetApplicationApiOauth2PermissionScopeArrayOutputWithContext(context.Context) GetApplicationApiOauth2PermissionScopeArrayOutput
}

type GetApplicationApiOauth2PermissionScopeArray []GetApplicationApiOauth2PermissionScopeInput

func (GetApplicationApiOauth2PermissionScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (i GetApplicationApiOauth2PermissionScopeArray) ToGetApplicationApiOauth2PermissionScopeArrayOutput() GetApplicationApiOauth2PermissionScopeArrayOutput {
	return i.ToGetApplicationApiOauth2PermissionScopeArrayOutputWithContext(context.Background())
}

func (i GetApplicationApiOauth2PermissionScopeArray) ToGetApplicationApiOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) GetApplicationApiOauth2PermissionScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationApiOauth2PermissionScopeArrayOutput)
}

type GetApplicationApiOauth2PermissionScopeOutput struct{ *pulumi.OutputState }

func (GetApplicationApiOauth2PermissionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (o GetApplicationApiOauth2PermissionScopeOutput) ToGetApplicationApiOauth2PermissionScopeOutput() GetApplicationApiOauth2PermissionScopeOutput {
	return o
}

func (o GetApplicationApiOauth2PermissionScopeOutput) ToGetApplicationApiOauth2PermissionScopeOutputWithContext(ctx context.Context) GetApplicationApiOauth2PermissionScopeOutput {
	return o
}

// The description of the admin consent
func (o GetApplicationApiOauth2PermissionScopeOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetApplicationApiOauth2PermissionScopeOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// (Optional) Determines if the permission scope is enabled.
func (o GetApplicationApiOauth2PermissionScopeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o GetApplicationApiOauth2PermissionScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.Id }).(pulumi.StringOutput)
}

// Is this permission enabled?
//
// Deprecated: [NOTE] This attribute has been renamed to `enabled` and will be removed in version 2.0 of the AzureAD provider
func (o GetApplicationApiOauth2PermissionScopeOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o GetApplicationApiOauth2PermissionScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetApplicationApiOauth2PermissionScopeOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetApplicationApiOauth2PermissionScopeOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// The name of this permission
func (o GetApplicationApiOauth2PermissionScopeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationApiOauth2PermissionScope) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationApiOauth2PermissionScopeArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationApiOauth2PermissionScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationApiOauth2PermissionScope)(nil)).Elem()
}

func (o GetApplicationApiOauth2PermissionScopeArrayOutput) ToGetApplicationApiOauth2PermissionScopeArrayOutput() GetApplicationApiOauth2PermissionScopeArrayOutput {
	return o
}

func (o GetApplicationApiOauth2PermissionScopeArrayOutput) ToGetApplicationApiOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) GetApplicationApiOauth2PermissionScopeArrayOutput {
	return o
}

func (o GetApplicationApiOauth2PermissionScopeArrayOutput) Index(i pulumi.IntInput) GetApplicationApiOauth2PermissionScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationApiOauth2PermissionScope {
		return vs[0].([]GetApplicationApiOauth2PermissionScope)[vs[1].(int)]
	}).(GetApplicationApiOauth2PermissionScopeOutput)
}

type GetApplicationAppRoleType struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description string `pulumi:"description"`
	// Specifies the display name of the application.
	DisplayName string `pulumi:"displayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetApplicationAppRoleTypeInput is an input type that accepts GetApplicationAppRoleTypeArgs and GetApplicationAppRoleTypeOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleTypeInput` via:
//
//          GetApplicationAppRoleTypeArgs{...}
type GetApplicationAppRoleTypeInput interface {
	pulumi.Input

	ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput
	ToGetApplicationAppRoleTypeOutputWithContext(context.Context) GetApplicationAppRoleTypeOutput
}

type GetApplicationAppRoleTypeArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the display name of the application.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationAppRoleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRoleType)(nil)).Elem()
}

func (i GetApplicationAppRoleTypeArgs) ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput {
	return i.ToGetApplicationAppRoleTypeOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleTypeArgs) ToGetApplicationAppRoleTypeOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleTypeOutput)
}

// GetApplicationAppRoleTypeArrayInput is an input type that accepts GetApplicationAppRoleTypeArray and GetApplicationAppRoleTypeArrayOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleTypeArrayInput` via:
//
//          GetApplicationAppRoleTypeArray{ GetApplicationAppRoleTypeArgs{...} }
type GetApplicationAppRoleTypeArrayInput interface {
	pulumi.Input

	ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput
	ToGetApplicationAppRoleTypeArrayOutputWithContext(context.Context) GetApplicationAppRoleTypeArrayOutput
}

type GetApplicationAppRoleTypeArray []GetApplicationAppRoleTypeInput

func (GetApplicationAppRoleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRoleType)(nil)).Elem()
}

func (i GetApplicationAppRoleTypeArray) ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput {
	return i.ToGetApplicationAppRoleTypeArrayOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleTypeArray) ToGetApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleTypeArrayOutput)
}

type GetApplicationAppRoleTypeOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRoleType)(nil)).Elem()
}

func (o GetApplicationAppRoleTypeOutput) ToGetApplicationAppRoleTypeOutput() GetApplicationAppRoleTypeOutput {
	return o
}

func (o GetApplicationAppRoleTypeOutput) ToGetApplicationAppRoleTypeOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in a standalone scenario). Possible values are: `User` and `Application`, or both.
func (o GetApplicationAppRoleTypeOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences.
func (o GetApplicationAppRoleTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the display name of the application.
func (o GetApplicationAppRoleTypeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (Optional) Determines if the permission scope is enabled.
func (o GetApplicationAppRoleTypeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o GetApplicationAppRoleTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Id }).(pulumi.StringOutput)
}

// Is this permission enabled?
//
// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
func (o GetApplicationAppRoleTypeOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The name of this permission
func (o GetApplicationAppRoleTypeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRoleType) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationAppRoleTypeArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRoleType)(nil)).Elem()
}

func (o GetApplicationAppRoleTypeArrayOutput) ToGetApplicationAppRoleTypeArrayOutput() GetApplicationAppRoleTypeArrayOutput {
	return o
}

func (o GetApplicationAppRoleTypeArrayOutput) ToGetApplicationAppRoleTypeArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleTypeArrayOutput {
	return o
}

func (o GetApplicationAppRoleTypeArrayOutput) Index(i pulumi.IntInput) GetApplicationAppRoleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationAppRoleType {
		return vs[0].([]GetApplicationAppRoleType)[vs[1].(int)]
	}).(GetApplicationAppRoleTypeOutput)
}

type GetApplicationOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetApplicationOauth2PermissionInput is an input type that accepts GetApplicationOauth2PermissionArgs and GetApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionInput` via:
//
//          GetApplicationOauth2PermissionArgs{...}
type GetApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput
	ToGetApplicationOauth2PermissionOutputWithContext(context.Context) GetApplicationOauth2PermissionOutput
}

type GetApplicationOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// (Optional) Determines if the permission scope is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return i.ToGetApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionOutput)
}

// GetApplicationOauth2PermissionArrayInput is an input type that accepts GetApplicationOauth2PermissionArray and GetApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionArrayInput` via:
//
//          GetApplicationOauth2PermissionArray{ GetApplicationOauth2PermissionArgs{...} }
type GetApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput
	ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Context) GetApplicationOauth2PermissionArrayOutput
}

type GetApplicationOauth2PermissionArray []GetApplicationOauth2PermissionInput

func (GetApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return i.ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionArrayOutput)
}

type GetApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return o
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// (Optional) Determines if the permission scope is enabled.
func (o GetApplicationOauth2PermissionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o GetApplicationOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Is this permission enabled?
func (o GetApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o GetApplicationOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// The name of this permission
func (o GetApplicationOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOauth2Permission {
		return vs[0].([]GetApplicationOauth2Permission)[vs[1].(int)]
	}).(GetApplicationOauth2PermissionOutput)
}

type GetApplicationOptionalClaims struct {
	AccessTokens []GetApplicationOptionalClaimsAccessToken `pulumi:"accessTokens"`
	IdTokens     []GetApplicationOptionalClaimsIdToken     `pulumi:"idTokens"`
}

// GetApplicationOptionalClaimsInput is an input type that accepts GetApplicationOptionalClaimsArgs and GetApplicationOptionalClaimsOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsInput` via:
//
//          GetApplicationOptionalClaimsArgs{...}
type GetApplicationOptionalClaimsInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput
	ToGetApplicationOptionalClaimsOutputWithContext(context.Context) GetApplicationOptionalClaimsOutput
}

type GetApplicationOptionalClaimsArgs struct {
	AccessTokens GetApplicationOptionalClaimsAccessTokenArrayInput `pulumi:"accessTokens"`
	IdTokens     GetApplicationOptionalClaimsIdTokenArrayInput     `pulumi:"idTokens"`
}

func (GetApplicationOptionalClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaims)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsArgs) ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput {
	return i.ToGetApplicationOptionalClaimsOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsArgs) ToGetApplicationOptionalClaimsOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsOutput)
}

type GetApplicationOptionalClaimsOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaims)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsOutput) ToGetApplicationOptionalClaimsOutput() GetApplicationOptionalClaimsOutput {
	return o
}

func (o GetApplicationOptionalClaimsOutput) ToGetApplicationOptionalClaimsOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsOutput {
	return o
}

func (o GetApplicationOptionalClaimsOutput) AccessTokens() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaims) []GetApplicationOptionalClaimsAccessToken { return v.AccessTokens }).(GetApplicationOptionalClaimsAccessTokenArrayOutput)
}

func (o GetApplicationOptionalClaimsOutput) IdTokens() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaims) []GetApplicationOptionalClaimsIdToken { return v.IdTokens }).(GetApplicationOptionalClaimsIdTokenArrayOutput)
}

type GetApplicationOptionalClaimsAccessToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// GetApplicationOptionalClaimsAccessTokenInput is an input type that accepts GetApplicationOptionalClaimsAccessTokenArgs and GetApplicationOptionalClaimsAccessTokenOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsAccessTokenInput` via:
//
//          GetApplicationOptionalClaimsAccessTokenArgs{...}
type GetApplicationOptionalClaimsAccessTokenInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput
	ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(context.Context) GetApplicationOptionalClaimsAccessTokenOutput
}

type GetApplicationOptionalClaimsAccessTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (GetApplicationOptionalClaimsAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsAccessTokenArgs) ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput {
	return i.ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsAccessTokenArgs) ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsAccessTokenOutput)
}

// GetApplicationOptionalClaimsAccessTokenArrayInput is an input type that accepts GetApplicationOptionalClaimsAccessTokenArray and GetApplicationOptionalClaimsAccessTokenArrayOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsAccessTokenArrayInput` via:
//
//          GetApplicationOptionalClaimsAccessTokenArray{ GetApplicationOptionalClaimsAccessTokenArgs{...} }
type GetApplicationOptionalClaimsAccessTokenArrayInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput
	ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput
}

type GetApplicationOptionalClaimsAccessTokenArray []GetApplicationOptionalClaimsAccessTokenInput

func (GetApplicationOptionalClaimsAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsAccessTokenArray) ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return i.ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsAccessTokenArray) ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsAccessTokenArrayOutput)
}

type GetApplicationOptionalClaimsAccessTokenOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsAccessTokenOutput) ToGetApplicationOptionalClaimsAccessTokenOutput() GetApplicationOptionalClaimsAccessTokenOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenOutput) ToGetApplicationOptionalClaimsAccessTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o GetApplicationOptionalClaimsAccessTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o GetApplicationOptionalClaimsAccessTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsAccessToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type GetApplicationOptionalClaimsAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsAccessToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) ToGetApplicationOptionalClaimsAccessTokenArrayOutput() GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) ToGetApplicationOptionalClaimsAccessTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsAccessTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsAccessTokenArrayOutput) Index(i pulumi.IntInput) GetApplicationOptionalClaimsAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOptionalClaimsAccessToken {
		return vs[0].([]GetApplicationOptionalClaimsAccessToken)[vs[1].(int)]
	}).(GetApplicationOptionalClaimsAccessTokenOutput)
}

type GetApplicationOptionalClaimsIdToken struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties []string `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential *bool `pulumi:"essential"`
	// The name of the optional claim.
	Name string `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source *string `pulumi:"source"`
}

// GetApplicationOptionalClaimsIdTokenInput is an input type that accepts GetApplicationOptionalClaimsIdTokenArgs and GetApplicationOptionalClaimsIdTokenOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsIdTokenInput` via:
//
//          GetApplicationOptionalClaimsIdTokenArgs{...}
type GetApplicationOptionalClaimsIdTokenInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput
	ToGetApplicationOptionalClaimsIdTokenOutputWithContext(context.Context) GetApplicationOptionalClaimsIdTokenOutput
}

type GetApplicationOptionalClaimsIdTokenArgs struct {
	// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
	AdditionalProperties pulumi.StringArrayInput `pulumi:"additionalProperties"`
	// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
	Essential pulumi.BoolPtrInput `pulumi:"essential"`
	// The name of the optional claim.
	Name pulumi.StringInput `pulumi:"name"`
	// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (GetApplicationOptionalClaimsIdTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsIdTokenArgs) ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput {
	return i.ToGetApplicationOptionalClaimsIdTokenOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsIdTokenArgs) ToGetApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsIdTokenOutput)
}

// GetApplicationOptionalClaimsIdTokenArrayInput is an input type that accepts GetApplicationOptionalClaimsIdTokenArray and GetApplicationOptionalClaimsIdTokenArrayOutput values.
// You can construct a concrete instance of `GetApplicationOptionalClaimsIdTokenArrayInput` via:
//
//          GetApplicationOptionalClaimsIdTokenArray{ GetApplicationOptionalClaimsIdTokenArgs{...} }
type GetApplicationOptionalClaimsIdTokenArrayInput interface {
	pulumi.Input

	ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput
	ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput
}

type GetApplicationOptionalClaimsIdTokenArray []GetApplicationOptionalClaimsIdTokenInput

func (GetApplicationOptionalClaimsIdTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (i GetApplicationOptionalClaimsIdTokenArray) ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return i.ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(context.Background())
}

func (i GetApplicationOptionalClaimsIdTokenArray) ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOptionalClaimsIdTokenArrayOutput)
}

type GetApplicationOptionalClaimsIdTokenOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsIdTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsIdTokenOutput) ToGetApplicationOptionalClaimsIdTokenOutput() GetApplicationOptionalClaimsIdTokenOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenOutput) ToGetApplicationOptionalClaimsIdTokenOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenOutput {
	return o
}

// List of Additional Properties of the claim. If a property exists in this list, it modifies the behaviour of the optional claim.
func (o GetApplicationOptionalClaimsIdTokenOutput) AdditionalProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) []string { return v.AdditionalProperties }).(pulumi.StringArrayOutput)
}

// Whether the claim specified by the client is necessary to ensure a smooth authorization experience.
func (o GetApplicationOptionalClaimsIdTokenOutput) Essential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) *bool { return v.Essential }).(pulumi.BoolPtrOutput)
}

// The name of the optional claim.
func (o GetApplicationOptionalClaimsIdTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) string { return v.Name }).(pulumi.StringOutput)
}

// The source of the claim. If `source` is absent, the claim is a predefined optional claim. If `source` is `user`, the value of `name` is the extension property from the user object.
func (o GetApplicationOptionalClaimsIdTokenOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApplicationOptionalClaimsIdToken) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type GetApplicationOptionalClaimsIdTokenArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOptionalClaimsIdTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOptionalClaimsIdToken)(nil)).Elem()
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) ToGetApplicationOptionalClaimsIdTokenArrayOutput() GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) ToGetApplicationOptionalClaimsIdTokenArrayOutputWithContext(ctx context.Context) GetApplicationOptionalClaimsIdTokenArrayOutput {
	return o
}

func (o GetApplicationOptionalClaimsIdTokenArrayOutput) Index(i pulumi.IntInput) GetApplicationOptionalClaimsIdTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOptionalClaimsIdToken {
		return vs[0].([]GetApplicationOptionalClaimsIdToken)[vs[1].(int)]
	}).(GetApplicationOptionalClaimsIdTokenOutput)
}

type GetApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
	ResourceAccesses []GetApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This is the Application ID of the target application.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// GetApplicationRequiredResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessArgs and GetApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessInput` via:
//
//          GetApplicationRequiredResourceAccessArgs{...}
type GetApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput
	ToGetApplicationRequiredResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessOutput
}

type GetApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
	ResourceAccesses GetApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This is the Application ID of the target application.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (GetApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessArray and GetApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessArrayInput` via:
//
//          GetApplicationRequiredResourceAccessArray{ GetApplicationRequiredResourceAccessArgs{...} }
type GetApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessArray []GetApplicationRequiredResourceAccessInput

func (GetApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below, describing OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
func (o GetApplicationRequiredResourceAccessOutput) ResourceAccesses() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) []GetApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to. This is the Application ID of the target application.
func (o GetApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessOutput)
}

type GetApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
}

// GetApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArgs and GetApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessInput` via:
//
//          GetApplicationRequiredResourceAccessResourceAccessArgs{...}
type GetApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput
	ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArray and GetApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
//          GetApplicationRequiredResourceAccessResourceAccessArray{ GetApplicationRequiredResourceAccessResourceAccessArgs{...} }
type GetApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArray []GetApplicationRequiredResourceAccessResourceAccessInput

func (GetApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the `id` property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

type GetApplicationWeb struct {
	// Home page or landing page of the application.
	HomepageUrl string `pulumi:"homepageUrl"`
	// An `implicitGrant` block as documented above.
	ImplicitGrants []GetApplicationWebImplicitGrant `pulumi:"implicitGrants"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
	LogoutUrl string `pulumi:"logoutUrl"`
	// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
	RedirectUris []string `pulumi:"redirectUris"`
}

// GetApplicationWebInput is an input type that accepts GetApplicationWebArgs and GetApplicationWebOutput values.
// You can construct a concrete instance of `GetApplicationWebInput` via:
//
//          GetApplicationWebArgs{...}
type GetApplicationWebInput interface {
	pulumi.Input

	ToGetApplicationWebOutput() GetApplicationWebOutput
	ToGetApplicationWebOutputWithContext(context.Context) GetApplicationWebOutput
}

type GetApplicationWebArgs struct {
	// Home page or landing page of the application.
	HomepageUrl pulumi.StringInput `pulumi:"homepageUrl"`
	// An `implicitGrant` block as documented above.
	ImplicitGrants GetApplicationWebImplicitGrantArrayInput `pulumi:"implicitGrants"`
	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
	LogoutUrl pulumi.StringInput `pulumi:"logoutUrl"`
	// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
	RedirectUris pulumi.StringArrayInput `pulumi:"redirectUris"`
}

func (GetApplicationWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationWeb)(nil)).Elem()
}

func (i GetApplicationWebArgs) ToGetApplicationWebOutput() GetApplicationWebOutput {
	return i.ToGetApplicationWebOutputWithContext(context.Background())
}

func (i GetApplicationWebArgs) ToGetApplicationWebOutputWithContext(ctx context.Context) GetApplicationWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationWebOutput)
}

type GetApplicationWebOutput struct{ *pulumi.OutputState }

func (GetApplicationWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationWeb)(nil)).Elem()
}

func (o GetApplicationWebOutput) ToGetApplicationWebOutput() GetApplicationWebOutput {
	return o
}

func (o GetApplicationWebOutput) ToGetApplicationWebOutputWithContext(ctx context.Context) GetApplicationWebOutput {
	return o
}

// Home page or landing page of the application.
func (o GetApplicationWebOutput) HomepageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationWeb) string { return v.HomepageUrl }).(pulumi.StringOutput)
}

// An `implicitGrant` block as documented above.
func (o GetApplicationWebOutput) ImplicitGrants() GetApplicationWebImplicitGrantArrayOutput {
	return o.ApplyT(func(v GetApplicationWeb) []GetApplicationWebImplicitGrant { return v.ImplicitGrants }).(GetApplicationWebImplicitGrantArrayOutput)
}

// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
func (o GetApplicationWebOutput) LogoutUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationWeb) string { return v.LogoutUrl }).(pulumi.StringOutput)
}

// A list of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
func (o GetApplicationWebOutput) RedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationWeb) []string { return v.RedirectUris }).(pulumi.StringArrayOutput)
}

type GetApplicationWebImplicitGrant struct {
	// Whether this web application can request an access token using OAuth 2.0 implicit flow.
	AccessTokenIssuanceEnabled bool `pulumi:"accessTokenIssuanceEnabled"`
}

// GetApplicationWebImplicitGrantInput is an input type that accepts GetApplicationWebImplicitGrantArgs and GetApplicationWebImplicitGrantOutput values.
// You can construct a concrete instance of `GetApplicationWebImplicitGrantInput` via:
//
//          GetApplicationWebImplicitGrantArgs{...}
type GetApplicationWebImplicitGrantInput interface {
	pulumi.Input

	ToGetApplicationWebImplicitGrantOutput() GetApplicationWebImplicitGrantOutput
	ToGetApplicationWebImplicitGrantOutputWithContext(context.Context) GetApplicationWebImplicitGrantOutput
}

type GetApplicationWebImplicitGrantArgs struct {
	// Whether this web application can request an access token using OAuth 2.0 implicit flow.
	AccessTokenIssuanceEnabled pulumi.BoolInput `pulumi:"accessTokenIssuanceEnabled"`
}

func (GetApplicationWebImplicitGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationWebImplicitGrant)(nil)).Elem()
}

func (i GetApplicationWebImplicitGrantArgs) ToGetApplicationWebImplicitGrantOutput() GetApplicationWebImplicitGrantOutput {
	return i.ToGetApplicationWebImplicitGrantOutputWithContext(context.Background())
}

func (i GetApplicationWebImplicitGrantArgs) ToGetApplicationWebImplicitGrantOutputWithContext(ctx context.Context) GetApplicationWebImplicitGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationWebImplicitGrantOutput)
}

// GetApplicationWebImplicitGrantArrayInput is an input type that accepts GetApplicationWebImplicitGrantArray and GetApplicationWebImplicitGrantArrayOutput values.
// You can construct a concrete instance of `GetApplicationWebImplicitGrantArrayInput` via:
//
//          GetApplicationWebImplicitGrantArray{ GetApplicationWebImplicitGrantArgs{...} }
type GetApplicationWebImplicitGrantArrayInput interface {
	pulumi.Input

	ToGetApplicationWebImplicitGrantArrayOutput() GetApplicationWebImplicitGrantArrayOutput
	ToGetApplicationWebImplicitGrantArrayOutputWithContext(context.Context) GetApplicationWebImplicitGrantArrayOutput
}

type GetApplicationWebImplicitGrantArray []GetApplicationWebImplicitGrantInput

func (GetApplicationWebImplicitGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationWebImplicitGrant)(nil)).Elem()
}

func (i GetApplicationWebImplicitGrantArray) ToGetApplicationWebImplicitGrantArrayOutput() GetApplicationWebImplicitGrantArrayOutput {
	return i.ToGetApplicationWebImplicitGrantArrayOutputWithContext(context.Background())
}

func (i GetApplicationWebImplicitGrantArray) ToGetApplicationWebImplicitGrantArrayOutputWithContext(ctx context.Context) GetApplicationWebImplicitGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationWebImplicitGrantArrayOutput)
}

type GetApplicationWebImplicitGrantOutput struct{ *pulumi.OutputState }

func (GetApplicationWebImplicitGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationWebImplicitGrant)(nil)).Elem()
}

func (o GetApplicationWebImplicitGrantOutput) ToGetApplicationWebImplicitGrantOutput() GetApplicationWebImplicitGrantOutput {
	return o
}

func (o GetApplicationWebImplicitGrantOutput) ToGetApplicationWebImplicitGrantOutputWithContext(ctx context.Context) GetApplicationWebImplicitGrantOutput {
	return o
}

// Whether this web application can request an access token using OAuth 2.0 implicit flow.
func (o GetApplicationWebImplicitGrantOutput) AccessTokenIssuanceEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationWebImplicitGrant) bool { return v.AccessTokenIssuanceEnabled }).(pulumi.BoolOutput)
}

type GetApplicationWebImplicitGrantArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationWebImplicitGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationWebImplicitGrant)(nil)).Elem()
}

func (o GetApplicationWebImplicitGrantArrayOutput) ToGetApplicationWebImplicitGrantArrayOutput() GetApplicationWebImplicitGrantArrayOutput {
	return o
}

func (o GetApplicationWebImplicitGrantArrayOutput) ToGetApplicationWebImplicitGrantArrayOutputWithContext(ctx context.Context) GetApplicationWebImplicitGrantArrayOutput {
	return o
}

func (o GetApplicationWebImplicitGrantArrayOutput) Index(i pulumi.IntInput) GetApplicationWebImplicitGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationWebImplicitGrant {
		return vs[0].([]GetApplicationWebImplicitGrant)[vs[1].(int)]
	}).(GetApplicationWebImplicitGrantOutput)
}

type GetDomainsDomain struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType string `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName string `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault bool `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Active Directory.
	IsInitial bool `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified bool `pulumi:"isVerified"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
//          GetDomainsDomainArgs{...}
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Active Directory.
	IsInitial pulumi.BoolInput `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified pulumi.BoolInput `pulumi:"isVerified"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
//          GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// The authentication type of the domain (Managed or Federated).
func (o GetDomainsDomainOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The name of the domain.
func (o GetDomainsDomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.DomainName }).(pulumi.StringOutput)
}

// `True` if this is the default domain that is used for user creation.
func (o GetDomainsDomainOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// `True` if this is the initial domain created by Azure Active Directory.
func (o GetDomainsDomainOutput) IsInitial() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsInitial }).(pulumi.BoolOutput)
}

// `True` if the domain has completed domain ownership verification.
func (o GetDomainsDomainOutput) IsVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsVerified }).(pulumi.BoolOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetServicePrincipalAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName string `pulumi:"displayName"`
	// Is this permission enabled?
	Enabled bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`
	Id string `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled bool `pulumi:"isEnabled"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetServicePrincipalAppRoleInput is an input type that accepts GetServicePrincipalAppRoleArgs and GetServicePrincipalAppRoleOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleInput` via:
//
//          GetServicePrincipalAppRoleArgs{...}
type GetServicePrincipalAppRoleInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput
	ToGetServicePrincipalAppRoleOutputWithContext(context.Context) GetServicePrincipalAppRoleOutput
}

type GetServicePrincipalAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Is this permission enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`
	Id pulumi.StringInput `pulumi:"id"`
	// Is this permission enabled?
	//
	// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return i.ToGetServicePrincipalAppRoleOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleOutput)
}

// GetServicePrincipalAppRoleArrayInput is an input type that accepts GetServicePrincipalAppRoleArray and GetServicePrincipalAppRoleArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleArrayInput` via:
//
//          GetServicePrincipalAppRoleArray{ GetServicePrincipalAppRoleArgs{...} }
type GetServicePrincipalAppRoleArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput
	ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Context) GetServicePrincipalAppRoleArrayOutput
}

type GetServicePrincipalAppRoleArray []GetServicePrincipalAppRoleInput

func (GetServicePrincipalAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return i.ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleArrayOutput)
}

type GetServicePrincipalAppRoleOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return o
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o GetServicePrincipalAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o GetServicePrincipalAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// The Display Name of the Azure AD Application associated with this Service Principal.
func (o GetServicePrincipalAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Is this permission enabled?
func (o GetServicePrincipalAppRoleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The unique identifier for one of the `OAuth2Permission`
func (o GetServicePrincipalAppRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Id }).(pulumi.StringOutput)
}

// Is this permission enabled?
//
// Deprecated: [NOTE] This attribute will be renamed to `enabled` in version 2.0 of the AzureAD provider
func (o GetServicePrincipalAppRoleOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The name of this permission
func (o GetServicePrincipalAppRoleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalAppRoleArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalAppRole {
		return vs[0].([]GetServicePrincipalAppRole)[vs[1].(int)]
	}).(GetServicePrincipalAppRoleOutput)
}

type GetServicePrincipalOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`
	Id string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetServicePrincipalOauth2PermissionInput is an input type that accepts GetServicePrincipalOauth2PermissionArgs and GetServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionInput` via:
//
//          GetServicePrincipalOauth2PermissionArgs{...}
type GetServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput
	ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionOutput
}

type GetServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`
	Id pulumi.StringInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return i.ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionOutput)
}

// GetServicePrincipalOauth2PermissionArrayInput is an input type that accepts GetServicePrincipalOauth2PermissionArray and GetServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionArrayInput` via:
//
//          GetServicePrincipalOauth2PermissionArray{ GetServicePrincipalOauth2PermissionArgs{...} }
type GetServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput
	ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionArrayOutput
}

type GetServicePrincipalOauth2PermissionArray []GetServicePrincipalOauth2PermissionInput

func (GetServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return i.ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionArrayOutput)
}

type GetServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// The unique identifier for one of the `OAuth2Permission`
func (o GetServicePrincipalOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Is this permission enabled?
func (o GetServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of the permission
func (o GetServicePrincipalOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// The name of this permission
func (o GetServicePrincipalOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalOauth2Permission {
		return vs[0].([]GetServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(GetServicePrincipalOauth2PermissionOutput)
}

type GetServicePrincipalOauth2PermissionScope struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// Is this permission enabled?
	Enabled bool `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`
	Id string `pulumi:"id"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value string `pulumi:"value"`
}

// GetServicePrincipalOauth2PermissionScopeInput is an input type that accepts GetServicePrincipalOauth2PermissionScopeArgs and GetServicePrincipalOauth2PermissionScopeOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionScopeInput` via:
//
//          GetServicePrincipalOauth2PermissionScopeArgs{...}
type GetServicePrincipalOauth2PermissionScopeInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionScopeOutput() GetServicePrincipalOauth2PermissionScopeOutput
	ToGetServicePrincipalOauth2PermissionScopeOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionScopeOutput
}

type GetServicePrincipalOauth2PermissionScopeArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// Is this permission enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The unique identifier for one of the `OAuth2Permission`
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// The name of this permission
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalOauth2PermissionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionScopeArgs) ToGetServicePrincipalOauth2PermissionScopeOutput() GetServicePrincipalOauth2PermissionScopeOutput {
	return i.ToGetServicePrincipalOauth2PermissionScopeOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionScopeArgs) ToGetServicePrincipalOauth2PermissionScopeOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionScopeOutput)
}

// GetServicePrincipalOauth2PermissionScopeArrayInput is an input type that accepts GetServicePrincipalOauth2PermissionScopeArray and GetServicePrincipalOauth2PermissionScopeArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionScopeArrayInput` via:
//
//          GetServicePrincipalOauth2PermissionScopeArray{ GetServicePrincipalOauth2PermissionScopeArgs{...} }
type GetServicePrincipalOauth2PermissionScopeArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionScopeArrayOutput() GetServicePrincipalOauth2PermissionScopeArrayOutput
	ToGetServicePrincipalOauth2PermissionScopeArrayOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionScopeArrayOutput
}

type GetServicePrincipalOauth2PermissionScopeArray []GetServicePrincipalOauth2PermissionScopeInput

func (GetServicePrincipalOauth2PermissionScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionScopeArray) ToGetServicePrincipalOauth2PermissionScopeArrayOutput() GetServicePrincipalOauth2PermissionScopeArrayOutput {
	return i.ToGetServicePrincipalOauth2PermissionScopeArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionScopeArray) ToGetServicePrincipalOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionScopeArrayOutput)
}

type GetServicePrincipalOauth2PermissionScopeOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionScopeOutput) ToGetServicePrincipalOauth2PermissionScopeOutput() GetServicePrincipalOauth2PermissionScopeOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionScopeOutput) ToGetServicePrincipalOauth2PermissionScopeOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionScopeOutput {
	return o
}

// The description of the admin consent
func (o GetServicePrincipalOauth2PermissionScopeOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetServicePrincipalOauth2PermissionScopeOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// Is this permission enabled?
func (o GetServicePrincipalOauth2PermissionScopeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The unique identifier for one of the `OAuth2Permission`
func (o GetServicePrincipalOauth2PermissionScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the permission
func (o GetServicePrincipalOauth2PermissionScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetServicePrincipalOauth2PermissionScopeOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetServicePrincipalOauth2PermissionScopeOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// The name of this permission
func (o GetServicePrincipalOauth2PermissionScopeOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2PermissionScope) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalOauth2PermissionScopeArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2PermissionScope)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionScopeArrayOutput) ToGetServicePrincipalOauth2PermissionScopeArrayOutput() GetServicePrincipalOauth2PermissionScopeArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionScopeArrayOutput) ToGetServicePrincipalOauth2PermissionScopeArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionScopeArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionScopeArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalOauth2PermissionScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalOauth2PermissionScope {
		return vs[0].([]GetServicePrincipalOauth2PermissionScope)[vs[1].(int)]
	}).(GetServicePrincipalOauth2PermissionScopeOutput)
}

type GetUsersUser struct {
	// `True` if the account is enabled; otherwise `False`.
	AccountEnabled bool `pulumi:"accountEnabled"`
	// The Display Name of the Azure AD User.
	DisplayName string `pulumi:"displayName"`
	// (**Deprecated**) The value used to associate an on-premises Active Directory user account with their Azure AD user object. Deprecated in favour of `onpremisesImmutableId`.
	//
	// Deprecated: This property has been renamed to `onpremises_immutable_id` and will be removed in version 2.0 of the AzureAD provider
	ImmutableId string `pulumi:"immutableId"`
	// The primary email address of the Azure AD User.
	Mail string `pulumi:"mail"`
	// The email alias of the Azure AD User.
	MailNickname string `pulumi:"mailNickname"`
	// The Object ID of the Azure AD User.
	ObjectId string `pulumi:"objectId"`
	// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
	OnpremisesImmutableId string `pulumi:"onpremisesImmutableId"`
	// The on-premise SAM account name of the Azure AD User.
	OnpremisesSamAccountName string `pulumi:"onpremisesSamAccountName"`
	// The on-premise user principal name of the Azure AD User.
	OnpremisesUserPrincipalName string `pulumi:"onpremisesUserPrincipalName"`
	// The usage location of the Azure AD User.
	UsageLocation string `pulumi:"usageLocation"`
	// The User Principal Name of the Azure AD User.
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//          GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// `True` if the account is enabled; otherwise `False`.
	AccountEnabled pulumi.BoolInput `pulumi:"accountEnabled"`
	// The Display Name of the Azure AD User.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// (**Deprecated**) The value used to associate an on-premises Active Directory user account with their Azure AD user object. Deprecated in favour of `onpremisesImmutableId`.
	//
	// Deprecated: This property has been renamed to `onpremises_immutable_id` and will be removed in version 2.0 of the AzureAD provider
	ImmutableId pulumi.StringInput `pulumi:"immutableId"`
	// The primary email address of the Azure AD User.
	Mail pulumi.StringInput `pulumi:"mail"`
	// The email alias of the Azure AD User.
	MailNickname pulumi.StringInput `pulumi:"mailNickname"`
	// The Object ID of the Azure AD User.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
	OnpremisesImmutableId pulumi.StringInput `pulumi:"onpremisesImmutableId"`
	// The on-premise SAM account name of the Azure AD User.
	OnpremisesSamAccountName pulumi.StringInput `pulumi:"onpremisesSamAccountName"`
	// The on-premise user principal name of the Azure AD User.
	OnpremisesUserPrincipalName pulumi.StringInput `pulumi:"onpremisesUserPrincipalName"`
	// The usage location of the Azure AD User.
	UsageLocation pulumi.StringInput `pulumi:"usageLocation"`
	// The User Principal Name of the Azure AD User.
	UserPrincipalName pulumi.StringInput `pulumi:"userPrincipalName"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//          GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// `True` if the account is enabled; otherwise `False`.
func (o GetUsersUserOutput) AccountEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.AccountEnabled }).(pulumi.BoolOutput)
}

// The Display Name of the Azure AD User.
func (o GetUsersUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DisplayName }).(pulumi.StringOutput)
}

// (**Deprecated**) The value used to associate an on-premises Active Directory user account with their Azure AD user object. Deprecated in favour of `onpremisesImmutableId`.
//
// Deprecated: This property has been renamed to `onpremises_immutable_id` and will be removed in version 2.0 of the AzureAD provider
func (o GetUsersUserOutput) ImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ImmutableId }).(pulumi.StringOutput)
}

// The primary email address of the Azure AD User.
func (o GetUsersUserOutput) Mail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Mail }).(pulumi.StringOutput)
}

// The email alias of the Azure AD User.
func (o GetUsersUserOutput) MailNickname() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.MailNickname }).(pulumi.StringOutput)
}

// The Object ID of the Azure AD User.
func (o GetUsersUserOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The value used to associate an on-premises Active Directory user account with their Azure AD user object.
func (o GetUsersUserOutput) OnpremisesImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OnpremisesImmutableId }).(pulumi.StringOutput)
}

// The on-premise SAM account name of the Azure AD User.
func (o GetUsersUserOutput) OnpremisesSamAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OnpremisesSamAccountName }).(pulumi.StringOutput)
}

// The on-premise user principal name of the Azure AD User.
func (o GetUsersUserOutput) OnpremisesUserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OnpremisesUserPrincipalName }).(pulumi.StringOutput)
}

// The usage location of the Azure AD User.
func (o GetUsersUserOutput) UsageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UsageLocation }).(pulumi.StringOutput)
}

// The User Principal Name of the Azure AD User.
func (o GetUsersUserOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationApiOutput{})
	pulumi.RegisterOutputType(ApplicationApiPtrOutput{})
	pulumi.RegisterOutputType(ApplicationApiOauth2PermissionScopeOutput{})
	pulumi.RegisterOutputType(ApplicationApiOauth2PermissionScopeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleTypeOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsPtrOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(ApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationWebOutput{})
	pulumi.RegisterOutputType(ApplicationWebPtrOutput{})
	pulumi.RegisterOutputType(ApplicationWebImplicitGrantOutput{})
	pulumi.RegisterOutputType(ApplicationWebImplicitGrantPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalAppRoleOutput{})
	pulumi.RegisterOutputType(ServicePrincipalAppRoleArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionScopeOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionScopeArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationApiOutput{})
	pulumi.RegisterOutputType(GetApplicationApiArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationApiOauth2PermissionScopeOutput{})
	pulumi.RegisterOutputType(GetApplicationApiOauth2PermissionScopeArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleTypeOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleTypeArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenOutput{})
	pulumi.RegisterOutputType(GetApplicationOptionalClaimsIdTokenArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationWebOutput{})
	pulumi.RegisterOutputType(GetApplicationWebImplicitGrantOutput{})
	pulumi.RegisterOutputType(GetApplicationWebImplicitGrantArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionScopeOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionScopeArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
