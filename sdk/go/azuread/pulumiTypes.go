// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ApplicationAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id *string `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value *string `pulumi:"value"`
}

// ApplicationAppRoleInput is an input type that accepts ApplicationAppRoleArgs and ApplicationAppRoleOutput values.
// You can construct a concrete instance of `ApplicationAppRoleInput` via:
//
// 		 ApplicationAppRoleArgs{...}
//
type ApplicationAppRoleInput interface {
	pulumi.Input

	ToApplicationAppRoleOutput() ApplicationAppRoleOutput
	ToApplicationAppRoleOutputWithContext(context.Context) ApplicationAppRoleOutput
}

type ApplicationAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil)).Elem()
}

func (i ApplicationAppRoleArgs) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return i.ToApplicationAppRoleOutputWithContext(context.Background())
}

func (i ApplicationAppRoleArgs) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleOutput)
}

// ApplicationAppRoleArrayInput is an input type that accepts ApplicationAppRoleArray and ApplicationAppRoleArrayOutput values.
// You can construct a concrete instance of `ApplicationAppRoleArrayInput` via:
//
// 		 ApplicationAppRoleArray{ ApplicationAppRoleArgs{...} }
//
type ApplicationAppRoleArrayInput interface {
	pulumi.Input

	ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput
	ToApplicationAppRoleArrayOutputWithContext(context.Context) ApplicationAppRoleArrayOutput
}

type ApplicationAppRoleArray []ApplicationAppRoleInput

func (ApplicationAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRole)(nil)).Elem()
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return i.ToApplicationAppRoleArrayOutputWithContext(context.Background())
}

func (i ApplicationAppRoleArray) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAppRoleArrayOutput)
}

type ApplicationAppRoleOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationAppRole)(nil)).Elem()
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutput() ApplicationAppRoleOutput {
	return o
}

func (o ApplicationAppRoleOutput) ToApplicationAppRoleOutputWithContext(ctx context.Context) ApplicationAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both.
func (o ApplicationAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o ApplicationAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o ApplicationAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o ApplicationAppRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationAppRoleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o ApplicationAppRoleOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationAppRole) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationAppRoleArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationAppRole)(nil)).Elem()
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutput() ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) ToApplicationAppRoleArrayOutputWithContext(ctx context.Context) ApplicationAppRoleArrayOutput {
	return o
}

func (o ApplicationAppRoleArrayOutput) Index(i pulumi.IntInput) ApplicationAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationAppRole {
		return vs[0].([]ApplicationAppRole)[vs[1].(int)]
	}).(ApplicationAppRoleOutput)
}

type ApplicationOauth2Permission struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id *string `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value *string `pulumi:"value"`
}

// ApplicationOauth2PermissionInput is an input type that accepts ApplicationOauth2PermissionArgs and ApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionInput` via:
//
// 		 ApplicationOauth2PermissionArgs{...}
//
type ApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput
	ToApplicationOauth2PermissionOutputWithContext(context.Context) ApplicationOauth2PermissionOutput
}

type ApplicationOauth2PermissionArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the app role is enabled: Defaults to `true`.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return i.ToApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArgs) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionOutput)
}

// ApplicationOauth2PermissionArrayInput is an input type that accepts ApplicationOauth2PermissionArray and ApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ApplicationOauth2PermissionArrayInput` via:
//
// 		 ApplicationOauth2PermissionArray{ ApplicationOauth2PermissionArgs{...} }
//
type ApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput
	ToApplicationOauth2PermissionArrayOutputWithContext(context.Context) ApplicationOauth2PermissionArrayOutput
}

type ApplicationOauth2PermissionArray []ApplicationOauth2PermissionInput

func (ApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return i.ToApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ApplicationOauth2PermissionArray) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOauth2PermissionArrayOutput)
}

type ApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutput() ApplicationOauth2PermissionOutput {
	return o
}

func (o ApplicationOauth2PermissionOutput) ToApplicationOauth2PermissionOutputWithContext(ctx context.Context) ApplicationOauth2PermissionOutput {
	return o
}

// The description of the admin consent.
func (o ApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the app role is enabled: Defaults to `true`.
func (o ApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifierUris` property can not not be set.
func (o ApplicationOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o ApplicationOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationOauth2Permission)(nil)).Elem()
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutput() ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) ToApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) ApplicationOauth2PermissionArrayOutput {
	return o
}

func (o ApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationOauth2Permission {
		return vs[0].([]ApplicationOauth2Permission)[vs[1].(int)]
	}).(ApplicationOauth2PermissionOutput)
}

type ApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses []ApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// ApplicationRequiredResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessArgs and ApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessInput` via:
//
// 		 ApplicationRequiredResourceAccessArgs{...}
//
type ApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput
	ToApplicationRequiredResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessOutput
}

type ApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below.
	ResourceAccesses ApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (ApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArgs) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessOutput)
}

// ApplicationRequiredResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessArray and ApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessArrayInput` via:
//
// 		 ApplicationRequiredResourceAccessArray{ ApplicationRequiredResourceAccessArgs{...} }
//
type ApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessArray []ApplicationRequiredResourceAccessInput

func (ApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessArray) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutput() ApplicationRequiredResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessOutput) ToApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below.
func (o ApplicationRequiredResourceAccessOutput) ResourceAccesses() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) []ApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
func (o ApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutput() ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) ToApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessOutput)
}

type ApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id string `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type string `pulumi:"type"`
}

// ApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArgs and ApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessInput` via:
//
// 		 ApplicationRequiredResourceAccessResourceAccessArgs{...}
//
type ApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput
	ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessOutput
}

type ApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArgs) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

// ApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts ApplicationRequiredResourceAccessResourceAccessArray and ApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
// 		 ApplicationRequiredResourceAccessResourceAccessArray{ ApplicationRequiredResourceAccessResourceAccessArgs{...} }
//
type ApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type ApplicationRequiredResourceAccessResourceAccessArray []ApplicationRequiredResourceAccessResourceAccessInput

func (ApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationRequiredResourceAccessResourceAccessArray) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type ApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutput() ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessOutput) ToApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`.
func (o ApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type ApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutput() ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) ToApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) ApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o ApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) ApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]ApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(ApplicationRequiredResourceAccessResourceAccessOutput)
}

type ServicePrincipalOauth2Permission struct {
	// The description of the admin consent.
	AdminConsentDescription *string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName *string `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id *string `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of the permission.
	Type *string `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription *string `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName *string `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value *string `pulumi:"value"`
}

// ServicePrincipalOauth2PermissionInput is an input type that accepts ServicePrincipalOauth2PermissionArgs and ServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionInput` via:
//
// 		 ServicePrincipalOauth2PermissionArgs{...}
//
type ServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput
	ToServicePrincipalOauth2PermissionOutputWithContext(context.Context) ServicePrincipalOauth2PermissionOutput
}

type ServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent.
	AdminConsentDescription pulumi.StringPtrInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent.
	AdminConsentDisplayName pulumi.StringPtrInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier for one of the `OAuth2Permission`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Is this permission enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of the permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The description of the user consent.
	UserConsentDescription pulumi.StringPtrInput `pulumi:"userConsentDescription"`
	// The display name of the user consent.
	UserConsentDisplayName pulumi.StringPtrInput `pulumi:"userConsentDisplayName"`
	// The name of this permission.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return i.ToServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArgs) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionOutput)
}

// ServicePrincipalOauth2PermissionArrayInput is an input type that accepts ServicePrincipalOauth2PermissionArray and ServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalOauth2PermissionArrayInput` via:
//
// 		 ServicePrincipalOauth2PermissionArray{ ServicePrincipalOauth2PermissionArgs{...} }
//
type ServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput
	ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) ServicePrincipalOauth2PermissionArrayOutput
}

type ServicePrincipalOauth2PermissionArray []ServicePrincipalOauth2PermissionInput

func (ServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return i.ToServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalOauth2PermissionArray) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalOauth2PermissionArrayOutput)
}

type ServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutput() ServicePrincipalOauth2PermissionOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionOutput) ToServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the admin consent.
func (o ServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.AdminConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The unique identifier for one of the `OAuth2Permission`.
func (o ServicePrincipalOauth2PermissionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Is this permission enabled?
func (o ServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the permission.
func (o ServicePrincipalOauth2PermissionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The description of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDescription }).(pulumi.StringPtrOutput)
}

// The display name of the user consent.
func (o ServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.UserConsentDisplayName }).(pulumi.StringPtrOutput)
}

// The name of this permission.
func (o ServicePrincipalOauth2PermissionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalOauth2Permission) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutput() ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) ToServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) ServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o ServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) ServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServicePrincipalOauth2Permission {
		return vs[0].([]ServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(ServicePrincipalOauth2PermissionOutput)
}

type GetApplicationAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetApplicationAppRoleInput is an input type that accepts GetApplicationAppRoleArgs and GetApplicationAppRoleOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleInput` via:
//
// 		 GetApplicationAppRoleArgs{...}
//
type GetApplicationAppRoleInput interface {
	pulumi.Input

	ToGetApplicationAppRoleOutput() GetApplicationAppRoleOutput
	ToGetApplicationAppRoleOutputWithContext(context.Context) GetApplicationAppRoleOutput
}

type GetApplicationAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// Display name for the permission that appears in the admin consent and app assignment experiences.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRole)(nil)).Elem()
}

func (i GetApplicationAppRoleArgs) ToGetApplicationAppRoleOutput() GetApplicationAppRoleOutput {
	return i.ToGetApplicationAppRoleOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleArgs) ToGetApplicationAppRoleOutputWithContext(ctx context.Context) GetApplicationAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleOutput)
}

// GetApplicationAppRoleArrayInput is an input type that accepts GetApplicationAppRoleArray and GetApplicationAppRoleArrayOutput values.
// You can construct a concrete instance of `GetApplicationAppRoleArrayInput` via:
//
// 		 GetApplicationAppRoleArray{ GetApplicationAppRoleArgs{...} }
//
type GetApplicationAppRoleArrayInput interface {
	pulumi.Input

	ToGetApplicationAppRoleArrayOutput() GetApplicationAppRoleArrayOutput
	ToGetApplicationAppRoleArrayOutputWithContext(context.Context) GetApplicationAppRoleArrayOutput
}

type GetApplicationAppRoleArray []GetApplicationAppRoleInput

func (GetApplicationAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRole)(nil)).Elem()
}

func (i GetApplicationAppRoleArray) ToGetApplicationAppRoleArrayOutput() GetApplicationAppRoleArrayOutput {
	return i.ToGetApplicationAppRoleArrayOutputWithContext(context.Background())
}

func (i GetApplicationAppRoleArray) ToGetApplicationAppRoleArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationAppRoleArrayOutput)
}

type GetApplicationAppRoleOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationAppRole)(nil)).Elem()
}

func (o GetApplicationAppRoleOutput) ToGetApplicationAppRoleOutput() GetApplicationAppRoleOutput {
	return o
}

func (o GetApplicationAppRoleOutput) ToGetApplicationAppRoleOutputWithContext(ctx context.Context) GetApplicationAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o GetApplicationAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetApplicationAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o GetApplicationAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// Display name for the permission that appears in the admin consent and app assignment experiences.
func (o GetApplicationAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetApplicationAppRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRole) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetApplicationAppRoleOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationAppRole) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetApplicationAppRoleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationAppRole) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationAppRoleArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationAppRole)(nil)).Elem()
}

func (o GetApplicationAppRoleArrayOutput) ToGetApplicationAppRoleArrayOutput() GetApplicationAppRoleArrayOutput {
	return o
}

func (o GetApplicationAppRoleArrayOutput) ToGetApplicationAppRoleArrayOutputWithContext(ctx context.Context) GetApplicationAppRoleArrayOutput {
	return o
}

func (o GetApplicationAppRoleArrayOutput) Index(i pulumi.IntInput) GetApplicationAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationAppRole {
		return vs[0].([]GetApplicationAppRole)[vs[1].(int)]
	}).(GetApplicationAppRoleOutput)
}

type GetApplicationOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetApplicationOauth2PermissionInput is an input type that accepts GetApplicationOauth2PermissionArgs and GetApplicationOauth2PermissionOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionInput` via:
//
// 		 GetApplicationOauth2PermissionArgs{...}
//
type GetApplicationOauth2PermissionInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput
	ToGetApplicationOauth2PermissionOutputWithContext(context.Context) GetApplicationOauth2PermissionOutput
}

type GetApplicationOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetApplicationOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return i.ToGetApplicationOauth2PermissionOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArgs) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionOutput)
}

// GetApplicationOauth2PermissionArrayInput is an input type that accepts GetApplicationOauth2PermissionArray and GetApplicationOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetApplicationOauth2PermissionArrayInput` via:
//
// 		 GetApplicationOauth2PermissionArray{ GetApplicationOauth2PermissionArgs{...} }
//
type GetApplicationOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput
	ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Context) GetApplicationOauth2PermissionArrayOutput
}

type GetApplicationOauth2PermissionArray []GetApplicationOauth2PermissionInput

func (GetApplicationOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return i.ToGetApplicationOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetApplicationOauth2PermissionArray) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationOauth2PermissionArrayOutput)
}

type GetApplicationOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutput() GetApplicationOauth2PermissionOutput {
	return o
}

func (o GetApplicationOauth2PermissionOutput) ToGetApplicationOauth2PermissionOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetApplicationOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetApplicationOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetApplicationOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of the permission
func (o GetApplicationOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetApplicationOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetApplicationOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetApplicationOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationOauth2Permission)(nil)).Elem()
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutput() GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) ToGetApplicationOauth2PermissionArrayOutputWithContext(ctx context.Context) GetApplicationOauth2PermissionArrayOutput {
	return o
}

func (o GetApplicationOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetApplicationOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationOauth2Permission {
		return vs[0].([]GetApplicationOauth2Permission)[vs[1].(int)]
	}).(GetApplicationOauth2PermissionOutput)
}

type GetApplicationRequiredResourceAccess struct {
	// A collection of `resourceAccess` blocks as documented below
	ResourceAccesses []GetApplicationRequiredResourceAccessResourceAccess `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to.
	ResourceAppId string `pulumi:"resourceAppId"`
}

// GetApplicationRequiredResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessArgs and GetApplicationRequiredResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessInput` via:
//
// 		 GetApplicationRequiredResourceAccessArgs{...}
//
type GetApplicationRequiredResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput
	ToGetApplicationRequiredResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessOutput
}

type GetApplicationRequiredResourceAccessArgs struct {
	// A collection of `resourceAccess` blocks as documented below
	ResourceAccesses GetApplicationRequiredResourceAccessResourceAccessArrayInput `pulumi:"resourceAccesses"`
	// The unique identifier for the resource that the application requires access to.
	ResourceAppId pulumi.StringInput `pulumi:"resourceAppId"`
}

func (GetApplicationRequiredResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArgs) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessArray and GetApplicationRequiredResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessArrayInput` via:
//
// 		 GetApplicationRequiredResourceAccessArray{ GetApplicationRequiredResourceAccessArgs{...} }
//
type GetApplicationRequiredResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessArray []GetApplicationRequiredResourceAccessInput

func (GetApplicationRequiredResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessArray) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutput() GetApplicationRequiredResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessOutput) ToGetApplicationRequiredResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessOutput {
	return o
}

// A collection of `resourceAccess` blocks as documented below
func (o GetApplicationRequiredResourceAccessOutput) ResourceAccesses() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) []GetApplicationRequiredResourceAccessResourceAccess {
		return v.ResourceAccesses
	}).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

// The unique identifier for the resource that the application requires access to.
func (o GetApplicationRequiredResourceAccessOutput) ResourceAppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccess) string { return v.ResourceAppId }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutput() GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessOutput)
}

type GetApplicationRequiredResourceAccessResourceAccess struct {
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// The type of the permission
	Type string `pulumi:"type"`
}

// GetApplicationRequiredResourceAccessResourceAccessInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArgs and GetApplicationRequiredResourceAccessResourceAccessOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessInput` via:
//
// 		 GetApplicationRequiredResourceAccessResourceAccessArgs{...}
//
type GetApplicationRequiredResourceAccessResourceAccessInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput
	ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArgs struct {
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetApplicationRequiredResourceAccessResourceAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArgs) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

// GetApplicationRequiredResourceAccessResourceAccessArrayInput is an input type that accepts GetApplicationRequiredResourceAccessResourceAccessArray and GetApplicationRequiredResourceAccessResourceAccessArrayOutput values.
// You can construct a concrete instance of `GetApplicationRequiredResourceAccessResourceAccessArrayInput` via:
//
// 		 GetApplicationRequiredResourceAccessResourceAccessArray{ GetApplicationRequiredResourceAccessResourceAccessArgs{...} }
//
type GetApplicationRequiredResourceAccessResourceAccessArrayInput interface {
	pulumi.Input

	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput
	ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput
}

type GetApplicationRequiredResourceAccessResourceAccessArray []GetApplicationRequiredResourceAccessResourceAccessInput

func (GetApplicationRequiredResourceAccessResourceAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return i.ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(context.Background())
}

func (i GetApplicationRequiredResourceAccessResourceAccessArray) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApplicationRequiredResourceAccessResourceAccessArrayOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutput() GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessOutput) ToGetApplicationRequiredResourceAccessResourceAccessOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return o
}

// The unique identifier of the `appRole`.
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the permission
func (o GetApplicationRequiredResourceAccessResourceAccessOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetApplicationRequiredResourceAccessResourceAccess) string { return v.Type }).(pulumi.StringOutput)
}

type GetApplicationRequiredResourceAccessResourceAccessArrayOutput struct{ *pulumi.OutputState }

func (GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApplicationRequiredResourceAccessResourceAccess)(nil)).Elem()
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutput() GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) ToGetApplicationRequiredResourceAccessResourceAccessArrayOutputWithContext(ctx context.Context) GetApplicationRequiredResourceAccessResourceAccessArrayOutput {
	return o
}

func (o GetApplicationRequiredResourceAccessResourceAccessArrayOutput) Index(i pulumi.IntInput) GetApplicationRequiredResourceAccessResourceAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApplicationRequiredResourceAccessResourceAccess {
		return vs[0].([]GetApplicationRequiredResourceAccessResourceAccess)[vs[1].(int)]
	}).(GetApplicationRequiredResourceAccessResourceAccessOutput)
}

type GetDomainsDomain struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType string `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName string `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault bool `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Activie Directory.
	IsInitial bool `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified bool `pulumi:"isVerified"`
}

// GetDomainsDomainInput is an input type that accepts GetDomainsDomainArgs and GetDomainsDomainOutput values.
// You can construct a concrete instance of `GetDomainsDomainInput` via:
//
// 		 GetDomainsDomainArgs{...}
//
type GetDomainsDomainInput interface {
	pulumi.Input

	ToGetDomainsDomainOutput() GetDomainsDomainOutput
	ToGetDomainsDomainOutputWithContext(context.Context) GetDomainsDomainOutput
}

type GetDomainsDomainArgs struct {
	// The authentication type of the domain (Managed or Federated).
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The name of the domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// `True` if this is the default domain that is used for user creation.
	IsDefault pulumi.BoolInput `pulumi:"isDefault"`
	// `True` if this is the initial domain created by Azure Activie Directory.
	IsInitial pulumi.BoolInput `pulumi:"isInitial"`
	// `True` if the domain has completed domain ownership verification.
	IsVerified pulumi.BoolInput `pulumi:"isVerified"`
}

func (GetDomainsDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return i.ToGetDomainsDomainOutputWithContext(context.Background())
}

func (i GetDomainsDomainArgs) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainOutput)
}

// GetDomainsDomainArrayInput is an input type that accepts GetDomainsDomainArray and GetDomainsDomainArrayOutput values.
// You can construct a concrete instance of `GetDomainsDomainArrayInput` via:
//
// 		 GetDomainsDomainArray{ GetDomainsDomainArgs{...} }
//
type GetDomainsDomainArrayInput interface {
	pulumi.Input

	ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput
	ToGetDomainsDomainArrayOutputWithContext(context.Context) GetDomainsDomainArrayOutput
}

type GetDomainsDomainArray []GetDomainsDomainInput

func (GetDomainsDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return i.ToGetDomainsDomainArrayOutputWithContext(context.Background())
}

func (i GetDomainsDomainArray) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDomainsDomainArrayOutput)
}

type GetDomainsDomainOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutput() GetDomainsDomainOutput {
	return o
}

func (o GetDomainsDomainOutput) ToGetDomainsDomainOutputWithContext(ctx context.Context) GetDomainsDomainOutput {
	return o
}

// The authentication type of the domain (Managed or Federated).
func (o GetDomainsDomainOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The name of the domain.
func (o GetDomainsDomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainsDomain) string { return v.DomainName }).(pulumi.StringOutput)
}

// `True` if this is the default domain that is used for user creation.
func (o GetDomainsDomainOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// `True` if this is the initial domain created by Azure Activie Directory.
func (o GetDomainsDomainOutput) IsInitial() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsInitial }).(pulumi.BoolOutput)
}

// `True` if the domain has completed domain ownership verification.
func (o GetDomainsDomainOutput) IsVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainsDomain) bool { return v.IsVerified }).(pulumi.BoolOutput)
}

type GetDomainsDomainArrayOutput struct{ *pulumi.OutputState }

func (GetDomainsDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDomainsDomain)(nil)).Elem()
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutput() GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) ToGetDomainsDomainArrayOutputWithContext(ctx context.Context) GetDomainsDomainArrayOutput {
	return o
}

func (o GetDomainsDomainArrayOutput) Index(i pulumi.IntInput) GetDomainsDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDomainsDomain {
		return vs[0].([]GetDomainsDomain)[vs[1].(int)]
	}).(GetDomainsDomainOutput)
}

type GetServicePrincipalAppRole struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes []string `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description string `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName string `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetServicePrincipalAppRoleInput is an input type that accepts GetServicePrincipalAppRoleArgs and GetServicePrincipalAppRoleOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleInput` via:
//
// 		 GetServicePrincipalAppRoleArgs{...}
//
type GetServicePrincipalAppRoleInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput
	ToGetServicePrincipalAppRoleOutputWithContext(context.Context) GetServicePrincipalAppRoleOutput
}

type GetServicePrincipalAppRoleArgs struct {
	// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
	AllowedMemberTypes pulumi.StringArrayInput `pulumi:"allowedMemberTypes"`
	// Permission help text that appears in the admin app assignment and consent experiences.
	Description pulumi.StringInput `pulumi:"description"`
	// The Display Name of the Azure AD Application associated with this Service Principal.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return i.ToGetServicePrincipalAppRoleOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArgs) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleOutput)
}

// GetServicePrincipalAppRoleArrayInput is an input type that accepts GetServicePrincipalAppRoleArray and GetServicePrincipalAppRoleArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalAppRoleArrayInput` via:
//
// 		 GetServicePrincipalAppRoleArray{ GetServicePrincipalAppRoleArgs{...} }
//
type GetServicePrincipalAppRoleArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput
	ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Context) GetServicePrincipalAppRoleArrayOutput
}

type GetServicePrincipalAppRoleArray []GetServicePrincipalAppRoleInput

func (GetServicePrincipalAppRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return i.ToGetServicePrincipalAppRoleArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalAppRoleArray) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalAppRoleArrayOutput)
}

type GetServicePrincipalAppRoleOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutput() GetServicePrincipalAppRoleOutput {
	return o
}

func (o GetServicePrincipalAppRoleOutput) ToGetServicePrincipalAppRoleOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleOutput {
	return o
}

// Specifies whether this app role definition can be assigned to users and groups, or to other applications (that are accessing this application in daemon service scenarios). Possible values are: `User` and `Application`, or both.
func (o GetServicePrincipalAppRoleOutput) AllowedMemberTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) []string { return v.AllowedMemberTypes }).(pulumi.StringArrayOutput)
}

// Permission help text that appears in the admin app assignment and consent experiences.
func (o GetServicePrincipalAppRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Description }).(pulumi.StringOutput)
}

// The Display Name of the Azure AD Application associated with this Service Principal.
func (o GetServicePrincipalAppRoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetServicePrincipalAppRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetServicePrincipalAppRoleOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetServicePrincipalAppRoleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalAppRole) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalAppRoleArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalAppRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalAppRole)(nil)).Elem()
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutput() GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) ToGetServicePrincipalAppRoleArrayOutputWithContext(ctx context.Context) GetServicePrincipalAppRoleArrayOutput {
	return o
}

func (o GetServicePrincipalAppRoleArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalAppRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalAppRole {
		return vs[0].([]GetServicePrincipalAppRole)[vs[1].(int)]
	}).(GetServicePrincipalAppRoleOutput)
}

type GetServicePrincipalOauth2Permission struct {
	// The description of the admin consent
	AdminConsentDescription string `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName string `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id string `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The type of the permission
	Type string `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription string `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName string `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value string `pulumi:"value"`
}

// GetServicePrincipalOauth2PermissionInput is an input type that accepts GetServicePrincipalOauth2PermissionArgs and GetServicePrincipalOauth2PermissionOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionInput` via:
//
// 		 GetServicePrincipalOauth2PermissionArgs{...}
//
type GetServicePrincipalOauth2PermissionInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput
	ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionOutput
}

type GetServicePrincipalOauth2PermissionArgs struct {
	// The description of the admin consent
	AdminConsentDescription pulumi.StringInput `pulumi:"adminConsentDescription"`
	// The display name of the admin consent
	AdminConsentDisplayName pulumi.StringInput `pulumi:"adminConsentDisplayName"`
	// The unique identifier of the `appRole`.
	Id pulumi.StringInput `pulumi:"id"`
	// Determines if the app role is enabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The type of the permission
	Type pulumi.StringInput `pulumi:"type"`
	// The description of the user consent
	UserConsentDescription pulumi.StringInput `pulumi:"userConsentDescription"`
	// The display name of the user consent
	UserConsentDisplayName pulumi.StringInput `pulumi:"userConsentDisplayName"`
	// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServicePrincipalOauth2PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return i.ToGetServicePrincipalOauth2PermissionOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArgs) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionOutput)
}

// GetServicePrincipalOauth2PermissionArrayInput is an input type that accepts GetServicePrincipalOauth2PermissionArray and GetServicePrincipalOauth2PermissionArrayOutput values.
// You can construct a concrete instance of `GetServicePrincipalOauth2PermissionArrayInput` via:
//
// 		 GetServicePrincipalOauth2PermissionArray{ GetServicePrincipalOauth2PermissionArgs{...} }
//
type GetServicePrincipalOauth2PermissionArrayInput interface {
	pulumi.Input

	ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput
	ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Context) GetServicePrincipalOauth2PermissionArrayOutput
}

type GetServicePrincipalOauth2PermissionArray []GetServicePrincipalOauth2PermissionInput

func (GetServicePrincipalOauth2PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return i.ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(context.Background())
}

func (i GetServicePrincipalOauth2PermissionArray) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicePrincipalOauth2PermissionArrayOutput)
}

type GetServicePrincipalOauth2PermissionOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutput() GetServicePrincipalOauth2PermissionOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionOutput) ToGetServicePrincipalOauth2PermissionOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionOutput {
	return o
}

// The description of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDescription }).(pulumi.StringOutput)
}

// The display name of the admin consent
func (o GetServicePrincipalOauth2PermissionOutput) AdminConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.AdminConsentDisplayName }).(pulumi.StringOutput)
}

// The unique identifier of the `appRole`.
func (o GetServicePrincipalOauth2PermissionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Id }).(pulumi.StringOutput)
}

// Determines if the app role is enabled.
func (o GetServicePrincipalOauth2PermissionOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The type of the permission
func (o GetServicePrincipalOauth2PermissionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Type }).(pulumi.StringOutput)
}

// The description of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDescription }).(pulumi.StringOutput)
}

// The display name of the user consent
func (o GetServicePrincipalOauth2PermissionOutput) UserConsentDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.UserConsentDisplayName }).(pulumi.StringOutput)
}

// Specifies the value of the roles claim that the application should expect in the authentication and access tokens.
func (o GetServicePrincipalOauth2PermissionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicePrincipalOauth2Permission) string { return v.Value }).(pulumi.StringOutput)
}

type GetServicePrincipalOauth2PermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServicePrincipalOauth2PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicePrincipalOauth2Permission)(nil)).Elem()
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutput() GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) ToGetServicePrincipalOauth2PermissionArrayOutputWithContext(ctx context.Context) GetServicePrincipalOauth2PermissionArrayOutput {
	return o
}

func (o GetServicePrincipalOauth2PermissionArrayOutput) Index(i pulumi.IntInput) GetServicePrincipalOauth2PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicePrincipalOauth2Permission {
		return vs[0].([]GetServicePrincipalOauth2Permission)[vs[1].(int)]
	}).(GetServicePrincipalOauth2PermissionOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationAppRoleOutput{})
	pulumi.RegisterOutputType(ApplicationAppRoleArrayOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(ApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(ServicePrincipalOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleOutput{})
	pulumi.RegisterOutputType(GetApplicationAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetApplicationOauth2PermissionArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessOutput{})
	pulumi.RegisterOutputType(GetApplicationRequiredResourceAccessResourceAccessArrayOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainOutput{})
	pulumi.RegisterOutputType(GetDomainsDomainArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalAppRoleArrayOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionOutput{})
	pulumi.RegisterOutputType(GetServicePrincipalOauth2PermissionArrayOutput{})
}
