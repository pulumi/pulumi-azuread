// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an active assignment to a privileged access group.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires the `PrivilegedAssignmentSchedule.ReadWrite.AzureADGroup` Microsoft Graph API permissions.
//
// When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := azuread.NewGroup(ctx, "example", &azuread.GroupArgs{
//				DisplayName:     pulumi.String("group-name"),
//				SecurityEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			member, err := azuread.NewUser(ctx, "member", &azuread.UserArgs{
//				UserPrincipalName: pulumi.String("jdoe@example.com"),
//				DisplayName:       pulumi.String("J. Doe"),
//				MailNickname:      pulumi.String("jdoe"),
//				Password:          pulumi.String("SecretP@sswd99!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewPrivilegedAccessGroupAssignmentSchedule(ctx, "example", &azuread.PrivilegedAccessGroupAssignmentScheduleArgs{
//				GroupId:        pulumi.Any(pim.Id),
//				PrincipalId:    member.ID(),
//				AssignmentType: pulumi.String("member"),
//				Duration:       pulumi.String("P30D"),
//				Justification:  pulumi.String("as requested"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An assignment schedule can be imported using the schedule ID, e.g.
//
// ```sh
// $ pulumi import azuread:index/privilegedAccessGroupAssignmentSchedule:PrivilegedAccessGroupAssignmentSchedule example 00000000-0000-0000-0000-000000000000_member_00000000-0000-0000-0000-000000000000
// ```
type PrivilegedAccessGroupAssignmentSchedule struct {
	pulumi.CustomResourceState

	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringOutput `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrOutput `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolOutput `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// (String) The provisioning status of this request.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrOutput `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrOutput `pulumi:"ticketSystem"`
}

// NewPrivilegedAccessGroupAssignmentSchedule registers a new resource with the given unique name, arguments, and options.
func NewPrivilegedAccessGroupAssignmentSchedule(ctx *pulumi.Context,
	name string, args *PrivilegedAccessGroupAssignmentScheduleArgs, opts ...pulumi.ResourceOption) (*PrivilegedAccessGroupAssignmentSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssignmentType == nil {
		return nil, errors.New("invalid value for required argument 'AssignmentType'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivilegedAccessGroupAssignmentSchedule
	err := ctx.RegisterResource("azuread:index/privilegedAccessGroupAssignmentSchedule:PrivilegedAccessGroupAssignmentSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilegedAccessGroupAssignmentSchedule gets an existing PrivilegedAccessGroupAssignmentSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilegedAccessGroupAssignmentSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegedAccessGroupAssignmentScheduleState, opts ...pulumi.ResourceOption) (*PrivilegedAccessGroupAssignmentSchedule, error) {
	var resource PrivilegedAccessGroupAssignmentSchedule
	err := ctx.ReadResource("azuread:index/privilegedAccessGroupAssignmentSchedule:PrivilegedAccessGroupAssignmentSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivilegedAccessGroupAssignmentSchedule resources.
type privilegedAccessGroupAssignmentScheduleState struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType *string `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration *string `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate *string `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId *string `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification *string `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment *bool `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId *string `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate *string `pulumi:"startDate"`
	// (String) The provisioning status of this request.
	Status *string `pulumi:"status"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber *string `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem *string `pulumi:"ticketSystem"`
}

type PrivilegedAccessGroupAssignmentScheduleState struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringPtrInput
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrInput
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringPtrInput
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringPtrInput
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrInput
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolPtrInput
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringPtrInput
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringPtrInput
	// (String) The provisioning status of this request.
	Status pulumi.StringPtrInput
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrInput
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrInput
}

func (PrivilegedAccessGroupAssignmentScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessGroupAssignmentScheduleState)(nil)).Elem()
}

type privilegedAccessGroupAssignmentScheduleArgs struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType string `pulumi:"assignmentType"`
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration *string `pulumi:"duration"`
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate *string `pulumi:"expirationDate"`
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId string `pulumi:"groupId"`
	// The justification for this assignment. May be required by the role policy.
	Justification *string `pulumi:"justification"`
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment *bool `pulumi:"permanentAssignment"`
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId string `pulumi:"principalId"`
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate *string `pulumi:"startDate"`
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber *string `pulumi:"ticketNumber"`
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem *string `pulumi:"ticketSystem"`
}

// The set of arguments for constructing a PrivilegedAccessGroupAssignmentSchedule resource.
type PrivilegedAccessGroupAssignmentScheduleArgs struct {
	// The type of assignment to the group. Can be either `member` or `owner`.
	AssignmentType pulumi.StringInput
	// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
	Duration pulumi.StringPtrInput
	// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	ExpirationDate pulumi.StringPtrInput
	// The Object ID of the Azure AD group to which the principal will be assigned.
	GroupId pulumi.StringInput
	// The justification for this assignment. May be required by the role policy.
	Justification pulumi.StringPtrInput
	// Is this assigment permanently valid.
	//
	// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
	PermanentAssignment pulumi.BoolPtrInput
	// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
	PrincipalId pulumi.StringInput
	// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
	StartDate pulumi.StringPtrInput
	// The ticket number in the ticket system approving this assignment. May be required by the role policy.
	TicketNumber pulumi.StringPtrInput
	// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
	TicketSystem pulumi.StringPtrInput
}

func (PrivilegedAccessGroupAssignmentScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegedAccessGroupAssignmentScheduleArgs)(nil)).Elem()
}

type PrivilegedAccessGroupAssignmentScheduleInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupAssignmentScheduleOutput() PrivilegedAccessGroupAssignmentScheduleOutput
	ToPrivilegedAccessGroupAssignmentScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleOutput
}

func (*PrivilegedAccessGroupAssignmentSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (i *PrivilegedAccessGroupAssignmentSchedule) ToPrivilegedAccessGroupAssignmentScheduleOutput() PrivilegedAccessGroupAssignmentScheduleOutput {
	return i.ToPrivilegedAccessGroupAssignmentScheduleOutputWithContext(context.Background())
}

func (i *PrivilegedAccessGroupAssignmentSchedule) ToPrivilegedAccessGroupAssignmentScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupAssignmentScheduleOutput)
}

// PrivilegedAccessGroupAssignmentScheduleArrayInput is an input type that accepts PrivilegedAccessGroupAssignmentScheduleArray and PrivilegedAccessGroupAssignmentScheduleArrayOutput values.
// You can construct a concrete instance of `PrivilegedAccessGroupAssignmentScheduleArrayInput` via:
//
//	PrivilegedAccessGroupAssignmentScheduleArray{ PrivilegedAccessGroupAssignmentScheduleArgs{...} }
type PrivilegedAccessGroupAssignmentScheduleArrayInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupAssignmentScheduleArrayOutput() PrivilegedAccessGroupAssignmentScheduleArrayOutput
	ToPrivilegedAccessGroupAssignmentScheduleArrayOutputWithContext(context.Context) PrivilegedAccessGroupAssignmentScheduleArrayOutput
}

type PrivilegedAccessGroupAssignmentScheduleArray []PrivilegedAccessGroupAssignmentScheduleInput

func (PrivilegedAccessGroupAssignmentScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (i PrivilegedAccessGroupAssignmentScheduleArray) ToPrivilegedAccessGroupAssignmentScheduleArrayOutput() PrivilegedAccessGroupAssignmentScheduleArrayOutput {
	return i.ToPrivilegedAccessGroupAssignmentScheduleArrayOutputWithContext(context.Background())
}

func (i PrivilegedAccessGroupAssignmentScheduleArray) ToPrivilegedAccessGroupAssignmentScheduleArrayOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupAssignmentScheduleArrayOutput)
}

// PrivilegedAccessGroupAssignmentScheduleMapInput is an input type that accepts PrivilegedAccessGroupAssignmentScheduleMap and PrivilegedAccessGroupAssignmentScheduleMapOutput values.
// You can construct a concrete instance of `PrivilegedAccessGroupAssignmentScheduleMapInput` via:
//
//	PrivilegedAccessGroupAssignmentScheduleMap{ "key": PrivilegedAccessGroupAssignmentScheduleArgs{...} }
type PrivilegedAccessGroupAssignmentScheduleMapInput interface {
	pulumi.Input

	ToPrivilegedAccessGroupAssignmentScheduleMapOutput() PrivilegedAccessGroupAssignmentScheduleMapOutput
	ToPrivilegedAccessGroupAssignmentScheduleMapOutputWithContext(context.Context) PrivilegedAccessGroupAssignmentScheduleMapOutput
}

type PrivilegedAccessGroupAssignmentScheduleMap map[string]PrivilegedAccessGroupAssignmentScheduleInput

func (PrivilegedAccessGroupAssignmentScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (i PrivilegedAccessGroupAssignmentScheduleMap) ToPrivilegedAccessGroupAssignmentScheduleMapOutput() PrivilegedAccessGroupAssignmentScheduleMapOutput {
	return i.ToPrivilegedAccessGroupAssignmentScheduleMapOutputWithContext(context.Background())
}

func (i PrivilegedAccessGroupAssignmentScheduleMap) ToPrivilegedAccessGroupAssignmentScheduleMapOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegedAccessGroupAssignmentScheduleMapOutput)
}

type PrivilegedAccessGroupAssignmentScheduleOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupAssignmentScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupAssignmentScheduleOutput) ToPrivilegedAccessGroupAssignmentScheduleOutput() PrivilegedAccessGroupAssignmentScheduleOutput {
	return o
}

func (o PrivilegedAccessGroupAssignmentScheduleOutput) ToPrivilegedAccessGroupAssignmentScheduleOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleOutput {
	return o
}

// The type of assignment to the group. Can be either `member` or `owner`.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) AssignmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.AssignmentType }).(pulumi.StringOutput)
}

// The duration that this assignment is valid for, formatted as an ISO8601 duration (e.g. P30D for 30 days, PT3H for three hours).
func (o PrivilegedAccessGroupAssignmentScheduleOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// The date that this assignment expires, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
func (o PrivilegedAccessGroupAssignmentScheduleOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The Object ID of the Azure AD group to which the principal will be assigned.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The justification for this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringPtrOutput { return v.Justification }).(pulumi.StringPtrOutput)
}

// Is this assigment permanently valid.
//
// At least one of `expirationDate`, `duration`, or `permanentAssignment` must be supplied. The role policy may limit the maximum duration which can be supplied.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) PermanentAssignment() pulumi.BoolOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.BoolOutput { return v.PermanentAssignment }).(pulumi.BoolOutput)
}

// The Object ID of the principal to be assigned to the above group. Can be either a user or a group.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The date from which this assignment is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). If not provided, the assignment is immediately valid.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// (String) The provisioning status of this request.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ticket number in the ticket system approving this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringPtrOutput { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// The ticket system containing the ticket number approving this assignment. May be required by the role policy.
func (o PrivilegedAccessGroupAssignmentScheduleOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivilegedAccessGroupAssignmentSchedule) pulumi.StringPtrOutput { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type PrivilegedAccessGroupAssignmentScheduleArrayOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupAssignmentScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupAssignmentScheduleArrayOutput) ToPrivilegedAccessGroupAssignmentScheduleArrayOutput() PrivilegedAccessGroupAssignmentScheduleArrayOutput {
	return o
}

func (o PrivilegedAccessGroupAssignmentScheduleArrayOutput) ToPrivilegedAccessGroupAssignmentScheduleArrayOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleArrayOutput {
	return o
}

func (o PrivilegedAccessGroupAssignmentScheduleArrayOutput) Index(i pulumi.IntInput) PrivilegedAccessGroupAssignmentScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivilegedAccessGroupAssignmentSchedule {
		return vs[0].([]*PrivilegedAccessGroupAssignmentSchedule)[vs[1].(int)]
	}).(PrivilegedAccessGroupAssignmentScheduleOutput)
}

type PrivilegedAccessGroupAssignmentScheduleMapOutput struct{ *pulumi.OutputState }

func (PrivilegedAccessGroupAssignmentScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivilegedAccessGroupAssignmentSchedule)(nil)).Elem()
}

func (o PrivilegedAccessGroupAssignmentScheduleMapOutput) ToPrivilegedAccessGroupAssignmentScheduleMapOutput() PrivilegedAccessGroupAssignmentScheduleMapOutput {
	return o
}

func (o PrivilegedAccessGroupAssignmentScheduleMapOutput) ToPrivilegedAccessGroupAssignmentScheduleMapOutputWithContext(ctx context.Context) PrivilegedAccessGroupAssignmentScheduleMapOutput {
	return o
}

func (o PrivilegedAccessGroupAssignmentScheduleMapOutput) MapIndex(k pulumi.StringInput) PrivilegedAccessGroupAssignmentScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivilegedAccessGroupAssignmentSchedule {
		return vs[0].(map[string]*PrivilegedAccessGroupAssignmentSchedule)[vs[1].(string)]
	}).(PrivilegedAccessGroupAssignmentScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupAssignmentScheduleInput)(nil)).Elem(), &PrivilegedAccessGroupAssignmentSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupAssignmentScheduleArrayInput)(nil)).Elem(), PrivilegedAccessGroupAssignmentScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegedAccessGroupAssignmentScheduleMapInput)(nil)).Elem(), PrivilegedAccessGroupAssignmentScheduleMap{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupAssignmentScheduleOutput{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupAssignmentScheduleArrayOutput{})
	pulumi.RegisterOutputType(PrivilegedAccessGroupAssignmentScheduleMapOutput{})
}
