// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServicePrincipalCertificate struct {
	pulumi.CustomResourceState

	// Specifies the encoding used for the supplied certificate data
	Encoding pulumi.StringPtrOutput `pulumi:"encoding"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	EndDate pulumi.StringOutput `pulumi:"endDate"`
	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
	// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	EndDateRelative pulumi.StringPtrOutput `pulumi:"endDateRelative"`
	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringOutput `pulumi:"servicePrincipalId"`
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// If this isn't specified, the current date is used
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// The type of key/certificate
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewServicePrincipalCertificate registers a new resource with the given unique name, arguments, and options.
func NewServicePrincipalCertificate(ctx *pulumi.Context,
	name string, args *ServicePrincipalCertificateArgs, opts ...pulumi.ResourceOption) (*ServicePrincipalCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServicePrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrincipalId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	var resource ServicePrincipalCertificate
	err := ctx.RegisterResource("azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicePrincipalCertificate gets an existing ServicePrincipalCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicePrincipalCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicePrincipalCertificateState, opts ...pulumi.ResourceOption) (*ServicePrincipalCertificate, error) {
	var resource ServicePrincipalCertificate
	err := ctx.ReadResource("azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicePrincipalCertificate resources.
type servicePrincipalCertificateState struct {
	// Specifies the encoding used for the supplied certificate data
	Encoding *string `pulumi:"encoding"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	EndDate *string `pulumi:"endDate"`
	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
	// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	EndDateRelative *string `pulumi:"endDateRelative"`
	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	KeyId *string `pulumi:"keyId"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// If this isn't specified, the current date is used
	StartDate *string `pulumi:"startDate"`
	// The type of key/certificate
	Type *string `pulumi:"type"`
	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	Value *string `pulumi:"value"`
}

type ServicePrincipalCertificateState struct {
	// Specifies the encoding used for the supplied certificate data
	Encoding pulumi.StringPtrInput
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	EndDate pulumi.StringPtrInput
	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
	// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	EndDateRelative pulumi.StringPtrInput
	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	KeyId pulumi.StringPtrInput
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringPtrInput
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// If this isn't specified, the current date is used
	StartDate pulumi.StringPtrInput
	// The type of key/certificate
	Type pulumi.StringPtrInput
	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	Value pulumi.StringPtrInput
}

func (ServicePrincipalCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalCertificateState)(nil)).Elem()
}

type servicePrincipalCertificateArgs struct {
	// Specifies the encoding used for the supplied certificate data
	Encoding *string `pulumi:"encoding"`
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	EndDate *string `pulumi:"endDate"`
	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
	// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	EndDateRelative *string `pulumi:"endDateRelative"`
	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	KeyId *string `pulumi:"keyId"`
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId string `pulumi:"servicePrincipalId"`
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// If this isn't specified, the current date is used
	StartDate *string `pulumi:"startDate"`
	// The type of key/certificate
	Type *string `pulumi:"type"`
	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a ServicePrincipalCertificate resource.
type ServicePrincipalCertificateArgs struct {
	// Specifies the encoding used for the supplied certificate data
	Encoding pulumi.StringPtrInput
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	EndDate pulumi.StringPtrInput
	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
	// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
	EndDateRelative pulumi.StringPtrInput
	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	KeyId pulumi.StringPtrInput
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalId pulumi.StringInput
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	// If this isn't specified, the current date is used
	StartDate pulumi.StringPtrInput
	// The type of key/certificate
	Type pulumi.StringPtrInput
	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	Value pulumi.StringInput
}

func (ServicePrincipalCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicePrincipalCertificateArgs)(nil)).Elem()
}

type ServicePrincipalCertificateInput interface {
	pulumi.Input

	ToServicePrincipalCertificateOutput() ServicePrincipalCertificateOutput
	ToServicePrincipalCertificateOutputWithContext(ctx context.Context) ServicePrincipalCertificateOutput
}

func (*ServicePrincipalCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalCertificate)(nil)).Elem()
}

func (i *ServicePrincipalCertificate) ToServicePrincipalCertificateOutput() ServicePrincipalCertificateOutput {
	return i.ToServicePrincipalCertificateOutputWithContext(context.Background())
}

func (i *ServicePrincipalCertificate) ToServicePrincipalCertificateOutputWithContext(ctx context.Context) ServicePrincipalCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateOutput)
}

// ServicePrincipalCertificateArrayInput is an input type that accepts ServicePrincipalCertificateArray and ServicePrincipalCertificateArrayOutput values.
// You can construct a concrete instance of `ServicePrincipalCertificateArrayInput` via:
//
//	ServicePrincipalCertificateArray{ ServicePrincipalCertificateArgs{...} }
type ServicePrincipalCertificateArrayInput interface {
	pulumi.Input

	ToServicePrincipalCertificateArrayOutput() ServicePrincipalCertificateArrayOutput
	ToServicePrincipalCertificateArrayOutputWithContext(context.Context) ServicePrincipalCertificateArrayOutput
}

type ServicePrincipalCertificateArray []ServicePrincipalCertificateInput

func (ServicePrincipalCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipalCertificate)(nil)).Elem()
}

func (i ServicePrincipalCertificateArray) ToServicePrincipalCertificateArrayOutput() ServicePrincipalCertificateArrayOutput {
	return i.ToServicePrincipalCertificateArrayOutputWithContext(context.Background())
}

func (i ServicePrincipalCertificateArray) ToServicePrincipalCertificateArrayOutputWithContext(ctx context.Context) ServicePrincipalCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateArrayOutput)
}

// ServicePrincipalCertificateMapInput is an input type that accepts ServicePrincipalCertificateMap and ServicePrincipalCertificateMapOutput values.
// You can construct a concrete instance of `ServicePrincipalCertificateMapInput` via:
//
//	ServicePrincipalCertificateMap{ "key": ServicePrincipalCertificateArgs{...} }
type ServicePrincipalCertificateMapInput interface {
	pulumi.Input

	ToServicePrincipalCertificateMapOutput() ServicePrincipalCertificateMapOutput
	ToServicePrincipalCertificateMapOutputWithContext(context.Context) ServicePrincipalCertificateMapOutput
}

type ServicePrincipalCertificateMap map[string]ServicePrincipalCertificateInput

func (ServicePrincipalCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipalCertificate)(nil)).Elem()
}

func (i ServicePrincipalCertificateMap) ToServicePrincipalCertificateMapOutput() ServicePrincipalCertificateMapOutput {
	return i.ToServicePrincipalCertificateMapOutputWithContext(context.Background())
}

func (i ServicePrincipalCertificateMap) ToServicePrincipalCertificateMapOutputWithContext(ctx context.Context) ServicePrincipalCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateMapOutput)
}

type ServicePrincipalCertificateOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalCertificate)(nil)).Elem()
}

func (o ServicePrincipalCertificateOutput) ToServicePrincipalCertificateOutput() ServicePrincipalCertificateOutput {
	return o
}

func (o ServicePrincipalCertificateOutput) ToServicePrincipalCertificateOutputWithContext(ctx context.Context) ServicePrincipalCertificateOutput {
	return o
}

// Specifies the encoding used for the supplied certificate data
func (o ServicePrincipalCertificateOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringPtrOutput { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
func (o ServicePrincipalCertificateOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringOutput { return v.EndDate }).(pulumi.StringOutput)
}

// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time
// units are "ns", "us" (or "µs"), "ms", "s", "m", "h"
func (o ServicePrincipalCertificateOutput) EndDateRelative() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringPtrOutput { return v.EndDateRelative }).(pulumi.StringPtrOutput)
}

// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
func (o ServicePrincipalCertificateOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The object ID of the service principal for which this certificate should be created
func (o ServicePrincipalCertificateOutput) ServicePrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringOutput { return v.ServicePrincipalId }).(pulumi.StringOutput)
}

// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
// If this isn't specified, the current date is used
func (o ServicePrincipalCertificateOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// The type of key/certificate
func (o ServicePrincipalCertificateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
func (o ServicePrincipalCertificateOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificate) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type ServicePrincipalCertificateArrayOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServicePrincipalCertificate)(nil)).Elem()
}

func (o ServicePrincipalCertificateArrayOutput) ToServicePrincipalCertificateArrayOutput() ServicePrincipalCertificateArrayOutput {
	return o
}

func (o ServicePrincipalCertificateArrayOutput) ToServicePrincipalCertificateArrayOutputWithContext(ctx context.Context) ServicePrincipalCertificateArrayOutput {
	return o
}

func (o ServicePrincipalCertificateArrayOutput) Index(i pulumi.IntInput) ServicePrincipalCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServicePrincipalCertificate {
		return vs[0].([]*ServicePrincipalCertificate)[vs[1].(int)]
	}).(ServicePrincipalCertificateOutput)
}

type ServicePrincipalCertificateMapOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServicePrincipalCertificate)(nil)).Elem()
}

func (o ServicePrincipalCertificateMapOutput) ToServicePrincipalCertificateMapOutput() ServicePrincipalCertificateMapOutput {
	return o
}

func (o ServicePrincipalCertificateMapOutput) ToServicePrincipalCertificateMapOutputWithContext(ctx context.Context) ServicePrincipalCertificateMapOutput {
	return o
}

func (o ServicePrincipalCertificateMapOutput) MapIndex(k pulumi.StringInput) ServicePrincipalCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServicePrincipalCertificate {
		return vs[0].(map[string]*ServicePrincipalCertificate)[vs[1].(string)]
	}).(ServicePrincipalCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalCertificateInput)(nil)).Elem(), &ServicePrincipalCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalCertificateArrayInput)(nil)).Elem(), ServicePrincipalCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServicePrincipalCertificateMapInput)(nil)).Elem(), ServicePrincipalCertificateMap{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateMapOutput{})
}
