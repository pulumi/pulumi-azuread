// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an application registration and associated service principal from a gallery template.
//
// > The Application resource can also be used to instantiate a gallery application, however unlike the `Application` resource, this resource does not attempt to manage any properties of the resulting application.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires one of the following application roles: `Application.ReadWrite.OwnedBy` or `Application.ReadWrite.All`
//
// When authenticated with a user principal, this resource may require one of the following directory roles: `Application Administrator` or `Global Administrator`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := azuread.GetApplicationTemplate(ctx, &azuread.GetApplicationTemplateArgs{
//				DisplayName: pulumi.StringRef("Marketo"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleApplicationFromTemplate, err := azuread.NewApplicationFromTemplate(ctx, "example", &azuread.ApplicationFromTemplateArgs{
//				DisplayName: pulumi.String("Example Application"),
//				TemplateId:  pulumi.String(example.TemplateId),
//			})
//			if err != nil {
//				return err
//			}
//			_ = azuread.LookupApplicationOutput(ctx, azuread.GetApplicationOutputArgs{
//				ObjectId: exampleApplicationFromTemplate.ApplicationObjectId,
//			}, nil)
//			_ = azuread.LookupServicePrincipalOutput(ctx, azuread.GetServicePrincipalOutputArgs{
//				ObjectId: exampleApplicationFromTemplate.ServicePrincipalObjectId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Templated Applications can be imported using the template ID, the object ID of the application, and the object ID of the service principal, in the following format.
//
// ```sh
// $ pulumi import azuread:index/applicationFromTemplate:ApplicationFromTemplate example /applicationTemplates/00000000-0000-0000-0000-000000000000/instantiate/11111111-1111-1111-1111-111111111111/22222222-2222-2222-2222-222222222222
// ```
type ApplicationFromTemplate struct {
	pulumi.CustomResourceState

	// The resource ID for the application.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The object ID for the application.
	ApplicationObjectId pulumi.StringOutput `pulumi:"applicationObjectId"`
	// The display name for the application.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The resource ID for the service principal.
	ServicePrincipalId pulumi.StringOutput `pulumi:"servicePrincipalId"`
	// The object ID for the service principal.
	ServicePrincipalObjectId pulumi.StringOutput `pulumi:"servicePrincipalObjectId"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
}

// NewApplicationFromTemplate registers a new resource with the given unique name, arguments, and options.
func NewApplicationFromTemplate(ctx *pulumi.Context,
	name string, args *ApplicationFromTemplateArgs, opts ...pulumi.ResourceOption) (*ApplicationFromTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationFromTemplate
	err := ctx.RegisterResource("azuread:index/applicationFromTemplate:ApplicationFromTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationFromTemplate gets an existing ApplicationFromTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationFromTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationFromTemplateState, opts ...pulumi.ResourceOption) (*ApplicationFromTemplate, error) {
	var resource ApplicationFromTemplate
	err := ctx.ReadResource("azuread:index/applicationFromTemplate:ApplicationFromTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationFromTemplate resources.
type applicationFromTemplateState struct {
	// The resource ID for the application.
	ApplicationId *string `pulumi:"applicationId"`
	// The object ID for the application.
	ApplicationObjectId *string `pulumi:"applicationObjectId"`
	// The display name for the application.
	DisplayName *string `pulumi:"displayName"`
	// The resource ID for the service principal.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The object ID for the service principal.
	ServicePrincipalObjectId *string `pulumi:"servicePrincipalObjectId"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	TemplateId *string `pulumi:"templateId"`
}

type ApplicationFromTemplateState struct {
	// The resource ID for the application.
	ApplicationId pulumi.StringPtrInput
	// The object ID for the application.
	ApplicationObjectId pulumi.StringPtrInput
	// The display name for the application.
	DisplayName pulumi.StringPtrInput
	// The resource ID for the service principal.
	ServicePrincipalId pulumi.StringPtrInput
	// The object ID for the service principal.
	ServicePrincipalObjectId pulumi.StringPtrInput
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	TemplateId pulumi.StringPtrInput
}

func (ApplicationFromTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationFromTemplateState)(nil)).Elem()
}

type applicationFromTemplateArgs struct {
	// The display name for the application.
	DisplayName string `pulumi:"displayName"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	TemplateId string `pulumi:"templateId"`
}

// The set of arguments for constructing a ApplicationFromTemplate resource.
type ApplicationFromTemplateArgs struct {
	// The display name for the application.
	DisplayName pulumi.StringInput
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	TemplateId pulumi.StringInput
}

func (ApplicationFromTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationFromTemplateArgs)(nil)).Elem()
}

type ApplicationFromTemplateInput interface {
	pulumi.Input

	ToApplicationFromTemplateOutput() ApplicationFromTemplateOutput
	ToApplicationFromTemplateOutputWithContext(ctx context.Context) ApplicationFromTemplateOutput
}

func (*ApplicationFromTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFromTemplate)(nil)).Elem()
}

func (i *ApplicationFromTemplate) ToApplicationFromTemplateOutput() ApplicationFromTemplateOutput {
	return i.ToApplicationFromTemplateOutputWithContext(context.Background())
}

func (i *ApplicationFromTemplate) ToApplicationFromTemplateOutputWithContext(ctx context.Context) ApplicationFromTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFromTemplateOutput)
}

// ApplicationFromTemplateArrayInput is an input type that accepts ApplicationFromTemplateArray and ApplicationFromTemplateArrayOutput values.
// You can construct a concrete instance of `ApplicationFromTemplateArrayInput` via:
//
//	ApplicationFromTemplateArray{ ApplicationFromTemplateArgs{...} }
type ApplicationFromTemplateArrayInput interface {
	pulumi.Input

	ToApplicationFromTemplateArrayOutput() ApplicationFromTemplateArrayOutput
	ToApplicationFromTemplateArrayOutputWithContext(context.Context) ApplicationFromTemplateArrayOutput
}

type ApplicationFromTemplateArray []ApplicationFromTemplateInput

func (ApplicationFromTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationFromTemplate)(nil)).Elem()
}

func (i ApplicationFromTemplateArray) ToApplicationFromTemplateArrayOutput() ApplicationFromTemplateArrayOutput {
	return i.ToApplicationFromTemplateArrayOutputWithContext(context.Background())
}

func (i ApplicationFromTemplateArray) ToApplicationFromTemplateArrayOutputWithContext(ctx context.Context) ApplicationFromTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFromTemplateArrayOutput)
}

// ApplicationFromTemplateMapInput is an input type that accepts ApplicationFromTemplateMap and ApplicationFromTemplateMapOutput values.
// You can construct a concrete instance of `ApplicationFromTemplateMapInput` via:
//
//	ApplicationFromTemplateMap{ "key": ApplicationFromTemplateArgs{...} }
type ApplicationFromTemplateMapInput interface {
	pulumi.Input

	ToApplicationFromTemplateMapOutput() ApplicationFromTemplateMapOutput
	ToApplicationFromTemplateMapOutputWithContext(context.Context) ApplicationFromTemplateMapOutput
}

type ApplicationFromTemplateMap map[string]ApplicationFromTemplateInput

func (ApplicationFromTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationFromTemplate)(nil)).Elem()
}

func (i ApplicationFromTemplateMap) ToApplicationFromTemplateMapOutput() ApplicationFromTemplateMapOutput {
	return i.ToApplicationFromTemplateMapOutputWithContext(context.Background())
}

func (i ApplicationFromTemplateMap) ToApplicationFromTemplateMapOutputWithContext(ctx context.Context) ApplicationFromTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationFromTemplateMapOutput)
}

type ApplicationFromTemplateOutput struct{ *pulumi.OutputState }

func (ApplicationFromTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationFromTemplate)(nil)).Elem()
}

func (o ApplicationFromTemplateOutput) ToApplicationFromTemplateOutput() ApplicationFromTemplateOutput {
	return o
}

func (o ApplicationFromTemplateOutput) ToApplicationFromTemplateOutputWithContext(ctx context.Context) ApplicationFromTemplateOutput {
	return o
}

// The resource ID for the application.
func (o ApplicationFromTemplateOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The object ID for the application.
func (o ApplicationFromTemplateOutput) ApplicationObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.ApplicationObjectId }).(pulumi.StringOutput)
}

// The display name for the application.
func (o ApplicationFromTemplateOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource ID for the service principal.
func (o ApplicationFromTemplateOutput) ServicePrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.ServicePrincipalId }).(pulumi.StringOutput)
}

// The object ID for the service principal.
func (o ApplicationFromTemplateOutput) ServicePrincipalObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.ServicePrincipalObjectId }).(pulumi.StringOutput)
}

// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
func (o ApplicationFromTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationFromTemplate) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

type ApplicationFromTemplateArrayOutput struct{ *pulumi.OutputState }

func (ApplicationFromTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationFromTemplate)(nil)).Elem()
}

func (o ApplicationFromTemplateArrayOutput) ToApplicationFromTemplateArrayOutput() ApplicationFromTemplateArrayOutput {
	return o
}

func (o ApplicationFromTemplateArrayOutput) ToApplicationFromTemplateArrayOutputWithContext(ctx context.Context) ApplicationFromTemplateArrayOutput {
	return o
}

func (o ApplicationFromTemplateArrayOutput) Index(i pulumi.IntInput) ApplicationFromTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationFromTemplate {
		return vs[0].([]*ApplicationFromTemplate)[vs[1].(int)]
	}).(ApplicationFromTemplateOutput)
}

type ApplicationFromTemplateMapOutput struct{ *pulumi.OutputState }

func (ApplicationFromTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationFromTemplate)(nil)).Elem()
}

func (o ApplicationFromTemplateMapOutput) ToApplicationFromTemplateMapOutput() ApplicationFromTemplateMapOutput {
	return o
}

func (o ApplicationFromTemplateMapOutput) ToApplicationFromTemplateMapOutputWithContext(ctx context.Context) ApplicationFromTemplateMapOutput {
	return o
}

func (o ApplicationFromTemplateMapOutput) MapIndex(k pulumi.StringInput) ApplicationFromTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationFromTemplate {
		return vs[0].(map[string]*ApplicationFromTemplate)[vs[1].(string)]
	}).(ApplicationFromTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFromTemplateInput)(nil)).Elem(), &ApplicationFromTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFromTemplateArrayInput)(nil)).Elem(), ApplicationFromTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationFromTemplateMapInput)(nil)).Elem(), ApplicationFromTemplateMap{})
	pulumi.RegisterOutputType(ApplicationFromTemplateOutput{})
	pulumi.RegisterOutputType(ApplicationFromTemplateArrayOutput{})
	pulumi.RegisterOutputType(ApplicationFromTemplateMapOutput{})
}
