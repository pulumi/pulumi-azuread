// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v6/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a group within Azure Active Directory. Does not directly manage or expose members of the group.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// When authenticated with a service principal, this resource requires one of the following application roles: `Group.ReadWrite.All` or `Directory.ReadWrite.All`.
//
// Alternatively, if the authenticated service principal is also an owner of the group being managed, this resource can use the application role: `Group.Create`.
//
// If using the `assignableToRole` property, this resource additionally requires the `RoleManagement.ReadWrite.Directory` application role.
//
// If specifying owners for a group, which are user principals, this resource additionally requires one of the following application roles: `User.Read.All`, `User.ReadWrite.All`, `Directory.Read.All` or `Directory.ReadWrite.All`
//
// When authenticated with a user principal, this resource requires one of the following directory roles: `Groups Administrator`, `User Administrator` or `Global Administrator`
//
// When creating this resource in administrative units exclusively, the directory role `Groups Administrator` is required to be scoped on any administrative unit used. Additionally, it must be possible to read the administrative units being used, which can be granted through the `AdministrativeUnit.Read.All` or `Directory.Read.All` application roles.
//
// The `externalSendersAllowed`, `autoSubscribeNewMembers`, `hideFromAddressLists` and `hideFromOutlookClients` properties can only be configured when authenticating as a user and cannot be configured when authenticating as a service principal. Additionally, the user being used for authentication must be a Member of the tenant where the group is being managed and _not_ a Guest. This is a known API issue; please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) official documentation.
//
// ## Example Usage
//
// *Basic example*
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v6/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := azuread.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewGroupWithoutMembers(ctx, "example", &azuread.GroupWithoutMembersArgs{
//				DisplayName: pulumi.String("example"),
//				Owners: pulumi.StringArray{
//					pulumi.String(current.ObjectId),
//				},
//				SecurityEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// *Microsoft 365 group*
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v6/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := azuread.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			groupOwner, err := azuread.NewUser(ctx, "group_owner", &azuread.UserArgs{
//				UserPrincipalName: pulumi.String("example-group-owner@example.com"),
//				DisplayName:       pulumi.String("Group Owner"),
//				MailNickname:      pulumi.String("example-group-owner"),
//				Password:          pulumi.String("SecretP@sswd99!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewGroupWithoutMembers(ctx, "example", &azuread.GroupWithoutMembersArgs{
//				DisplayName:     pulumi.String("example"),
//				MailEnabled:     pulumi.Bool(true),
//				MailNickname:    pulumi.String("ExampleGroup"),
//				SecurityEnabled: pulumi.Bool(true),
//				Types: pulumi.StringArray{
//					pulumi.String("Unified"),
//				},
//				Owners: pulumi.StringArray{
//					pulumi.String(current.ObjectId),
//					groupOwner.ObjectId,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// *Group with dynamic membership*
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v6/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := azuread.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewGroupWithoutMembers(ctx, "example", &azuread.GroupWithoutMembersArgs{
//				DisplayName: pulumi.String("MyGroup"),
//				Owners: pulumi.StringArray{
//					pulumi.String(current.ObjectId),
//				},
//				SecurityEnabled: pulumi.Bool(true),
//				Types: pulumi.StringArray{
//					pulumi.String("DynamicMembership"),
//				},
//				DynamicMembership: &azuread.GroupWithoutMembersDynamicMembershipArgs{
//					Enabled: pulumi.Bool(true),
//					Rule:    pulumi.String("user.department -eq \"Sales\""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Groups can be imported using their object ID, e.g.
//
// ```sh
// $ pulumi import azuread:index/groupWithoutMembers:GroupWithoutMembers my_group /groups/00000000-0000-0000-0000-000000000000
// ```
type GroupWithoutMembers struct {
	pulumi.CustomResourceState

	// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
	//
	// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
	AdministrativeUnitIds pulumi.StringArrayOutput `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
	AssignableToRole pulumi.BoolPtrOutput `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	AutoSubscribeNewMembers pulumi.BoolOutput `pulumi:"autoSubscribeNewMembers"`
	// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
	Behaviors pulumi.StringArrayOutput `pulumi:"behaviors"`
	// The description for the group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name for the group.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
	DynamicMembership GroupWithoutMembersDynamicMembershipPtrOutput `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	ExternalSendersAllowed pulumi.BoolOutput `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromAddressLists pulumi.BoolOutput `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromOutlookClients pulumi.BoolOutput `pulumi:"hideFromOutlookClients"`
	// The SMTP address for the group.
	Mail pulumi.StringOutput `pulumi:"mail"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
	MailEnabled pulumi.BoolPtrOutput `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
	MailNickname pulumi.StringOutput `pulumi:"mailNickname"`
	// The object ID of the group.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesDomainName pulumi.StringOutput `pulumi:"onpremisesDomainName"`
	// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
	OnpremisesGroupType pulumi.StringOutput `pulumi:"onpremisesGroupType"`
	// The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesNetbiosName pulumi.StringOutput `pulumi:"onpremisesNetbiosName"`
	// The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSamAccountName pulumi.StringOutput `pulumi:"onpremisesSamAccountName"`
	// The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSecurityIdentifier pulumi.StringOutput `pulumi:"onpremisesSecurityIdentifier"`
	// Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
	OnpremisesSyncEnabled pulumi.BoolOutput `pulumi:"onpremisesSyncEnabled"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayOutput `pulumi:"owners"`
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation.
	PreferredLanguage pulumi.StringOutput `pulumi:"preferredLanguage"`
	// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrOutput `pulumi:"preventDuplicateNames"`
	// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
	ProvisioningOptions pulumi.StringArrayOutput `pulumi:"provisioningOptions"`
	// List of email addresses for the group that direct to the same group mailbox.
	ProxyAddresses pulumi.StringArrayOutput `pulumi:"proxyAddresses"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
	SecurityEnabled pulumi.BoolPtrOutput `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
	Theme pulumi.StringPtrOutput `pulumi:"theme"`
	// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
	//
	// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
	Types pulumi.StringArrayOutput `pulumi:"types"`
	// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
	//
	// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
	WritebackEnabled pulumi.BoolPtrOutput `pulumi:"writebackEnabled"`
}

// NewGroupWithoutMembers registers a new resource with the given unique name, arguments, and options.
func NewGroupWithoutMembers(ctx *pulumi.Context,
	name string, args *GroupWithoutMembersArgs, opts ...pulumi.ResourceOption) (*GroupWithoutMembers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupWithoutMembers
	err := ctx.RegisterResource("azuread:index/groupWithoutMembers:GroupWithoutMembers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupWithoutMembers gets an existing GroupWithoutMembers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupWithoutMembers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupWithoutMembersState, opts ...pulumi.ResourceOption) (*GroupWithoutMembers, error) {
	var resource GroupWithoutMembers
	err := ctx.ReadResource("azuread:index/groupWithoutMembers:GroupWithoutMembers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupWithoutMembers resources.
type groupWithoutMembersState struct {
	// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
	//
	// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
	AdministrativeUnitIds []string `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
	AssignableToRole *bool `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	AutoSubscribeNewMembers *bool `pulumi:"autoSubscribeNewMembers"`
	// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
	Behaviors []string `pulumi:"behaviors"`
	// The description for the group.
	Description *string `pulumi:"description"`
	// The display name for the group.
	DisplayName *string `pulumi:"displayName"`
	// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
	DynamicMembership *GroupWithoutMembersDynamicMembership `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	ExternalSendersAllowed *bool `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromAddressLists *bool `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromOutlookClients *bool `pulumi:"hideFromOutlookClients"`
	// The SMTP address for the group.
	Mail *string `pulumi:"mail"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
	MailEnabled *bool `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
	MailNickname *string `pulumi:"mailNickname"`
	// The object ID of the group.
	ObjectId *string `pulumi:"objectId"`
	// The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesDomainName *string `pulumi:"onpremisesDomainName"`
	// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
	OnpremisesGroupType *string `pulumi:"onpremisesGroupType"`
	// The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesNetbiosName *string `pulumi:"onpremisesNetbiosName"`
	// The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSamAccountName *string `pulumi:"onpremisesSamAccountName"`
	// The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSecurityIdentifier *string `pulumi:"onpremisesSecurityIdentifier"`
	// Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
	OnpremisesSyncEnabled *bool `pulumi:"onpremisesSyncEnabled"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners []string `pulumi:"owners"`
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation.
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
	ProvisioningOptions []string `pulumi:"provisioningOptions"`
	// List of email addresses for the group that direct to the same group mailbox.
	ProxyAddresses []string `pulumi:"proxyAddresses"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
	SecurityEnabled *bool `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
	Theme *string `pulumi:"theme"`
	// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
	//
	// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
	Types []string `pulumi:"types"`
	// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
	//
	// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
	Visibility *string `pulumi:"visibility"`
	// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
	WritebackEnabled *bool `pulumi:"writebackEnabled"`
}

type GroupWithoutMembersState struct {
	// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
	//
	// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
	AdministrativeUnitIds pulumi.StringArrayInput
	// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
	AssignableToRole pulumi.BoolPtrInput
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	AutoSubscribeNewMembers pulumi.BoolPtrInput
	// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
	Behaviors pulumi.StringArrayInput
	// The description for the group.
	Description pulumi.StringPtrInput
	// The display name for the group.
	DisplayName pulumi.StringPtrInput
	// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
	DynamicMembership GroupWithoutMembersDynamicMembershipPtrInput
	// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	ExternalSendersAllowed pulumi.BoolPtrInput
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromAddressLists pulumi.BoolPtrInput
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromOutlookClients pulumi.BoolPtrInput
	// The SMTP address for the group.
	Mail pulumi.StringPtrInput
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
	MailEnabled pulumi.BoolPtrInput
	// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
	MailNickname pulumi.StringPtrInput
	// The object ID of the group.
	ObjectId pulumi.StringPtrInput
	// The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesDomainName pulumi.StringPtrInput
	// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
	OnpremisesGroupType pulumi.StringPtrInput
	// The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesNetbiosName pulumi.StringPtrInput
	// The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSamAccountName pulumi.StringPtrInput
	// The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
	OnpremisesSecurityIdentifier pulumi.StringPtrInput
	// Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
	OnpremisesSyncEnabled pulumi.BoolPtrInput
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayInput
	// The preferred language for a Microsoft 365 group, in ISO 639-1 notation.
	PreferredLanguage pulumi.StringPtrInput
	// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrInput
	// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
	ProvisioningOptions pulumi.StringArrayInput
	// List of email addresses for the group that direct to the same group mailbox.
	ProxyAddresses pulumi.StringArrayInput
	// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
	SecurityEnabled pulumi.BoolPtrInput
	// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
	Theme pulumi.StringPtrInput
	// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
	//
	// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
	Types pulumi.StringArrayInput
	// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
	//
	// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
	Visibility pulumi.StringPtrInput
	// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
	WritebackEnabled pulumi.BoolPtrInput
}

func (GroupWithoutMembersState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupWithoutMembersState)(nil)).Elem()
}

type groupWithoutMembersArgs struct {
	// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
	//
	// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
	AdministrativeUnitIds []string `pulumi:"administrativeUnitIds"`
	// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
	AssignableToRole *bool `pulumi:"assignableToRole"`
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	AutoSubscribeNewMembers *bool `pulumi:"autoSubscribeNewMembers"`
	// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
	Behaviors []string `pulumi:"behaviors"`
	// The description for the group.
	Description *string `pulumi:"description"`
	// The display name for the group.
	DisplayName string `pulumi:"displayName"`
	// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
	DynamicMembership *GroupWithoutMembersDynamicMembership `pulumi:"dynamicMembership"`
	// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	ExternalSendersAllowed *bool `pulumi:"externalSendersAllowed"`
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromAddressLists *bool `pulumi:"hideFromAddressLists"`
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromOutlookClients *bool `pulumi:"hideFromOutlookClients"`
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
	MailEnabled *bool `pulumi:"mailEnabled"`
	// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
	MailNickname *string `pulumi:"mailNickname"`
	// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
	OnpremisesGroupType *string `pulumi:"onpremisesGroupType"`
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners []string `pulumi:"owners"`
	// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
	ProvisioningOptions []string `pulumi:"provisioningOptions"`
	// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
	SecurityEnabled *bool `pulumi:"securityEnabled"`
	// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
	Theme *string `pulumi:"theme"`
	// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
	//
	// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
	Types []string `pulumi:"types"`
	// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
	//
	// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
	Visibility *string `pulumi:"visibility"`
	// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
	WritebackEnabled *bool `pulumi:"writebackEnabled"`
}

// The set of arguments for constructing a GroupWithoutMembers resource.
type GroupWithoutMembersArgs struct {
	// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
	//
	// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
	AdministrativeUnitIds pulumi.StringArrayInput
	// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
	AssignableToRole pulumi.BoolPtrInput
	// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	AutoSubscribeNewMembers pulumi.BoolPtrInput
	// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
	Behaviors pulumi.StringArrayInput
	// The description for the group.
	Description pulumi.StringPtrInput
	// The display name for the group.
	DisplayName pulumi.StringInput
	// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
	DynamicMembership GroupWithoutMembersDynamicMembershipPtrInput
	// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	ExternalSendersAllowed pulumi.BoolPtrInput
	// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromAddressLists pulumi.BoolPtrInput
	// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
	//
	// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
	HideFromOutlookClients pulumi.BoolPtrInput
	// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
	MailEnabled pulumi.BoolPtrInput
	// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
	MailNickname pulumi.StringPtrInput
	// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
	OnpremisesGroupType pulumi.StringPtrInput
	// A set of owners who own this group. Supported object types are Users or Service Principals
	Owners pulumi.StringArrayInput
	// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrInput
	// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
	ProvisioningOptions pulumi.StringArrayInput
	// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
	SecurityEnabled pulumi.BoolPtrInput
	// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
	Theme pulumi.StringPtrInput
	// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
	//
	// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
	Types pulumi.StringArrayInput
	// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
	//
	// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
	Visibility pulumi.StringPtrInput
	// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
	WritebackEnabled pulumi.BoolPtrInput
}

func (GroupWithoutMembersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupWithoutMembersArgs)(nil)).Elem()
}

type GroupWithoutMembersInput interface {
	pulumi.Input

	ToGroupWithoutMembersOutput() GroupWithoutMembersOutput
	ToGroupWithoutMembersOutputWithContext(ctx context.Context) GroupWithoutMembersOutput
}

func (*GroupWithoutMembers) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupWithoutMembers)(nil)).Elem()
}

func (i *GroupWithoutMembers) ToGroupWithoutMembersOutput() GroupWithoutMembersOutput {
	return i.ToGroupWithoutMembersOutputWithContext(context.Background())
}

func (i *GroupWithoutMembers) ToGroupWithoutMembersOutputWithContext(ctx context.Context) GroupWithoutMembersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithoutMembersOutput)
}

// GroupWithoutMembersArrayInput is an input type that accepts GroupWithoutMembersArray and GroupWithoutMembersArrayOutput values.
// You can construct a concrete instance of `GroupWithoutMembersArrayInput` via:
//
//	GroupWithoutMembersArray{ GroupWithoutMembersArgs{...} }
type GroupWithoutMembersArrayInput interface {
	pulumi.Input

	ToGroupWithoutMembersArrayOutput() GroupWithoutMembersArrayOutput
	ToGroupWithoutMembersArrayOutputWithContext(context.Context) GroupWithoutMembersArrayOutput
}

type GroupWithoutMembersArray []GroupWithoutMembersInput

func (GroupWithoutMembersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupWithoutMembers)(nil)).Elem()
}

func (i GroupWithoutMembersArray) ToGroupWithoutMembersArrayOutput() GroupWithoutMembersArrayOutput {
	return i.ToGroupWithoutMembersArrayOutputWithContext(context.Background())
}

func (i GroupWithoutMembersArray) ToGroupWithoutMembersArrayOutputWithContext(ctx context.Context) GroupWithoutMembersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithoutMembersArrayOutput)
}

// GroupWithoutMembersMapInput is an input type that accepts GroupWithoutMembersMap and GroupWithoutMembersMapOutput values.
// You can construct a concrete instance of `GroupWithoutMembersMapInput` via:
//
//	GroupWithoutMembersMap{ "key": GroupWithoutMembersArgs{...} }
type GroupWithoutMembersMapInput interface {
	pulumi.Input

	ToGroupWithoutMembersMapOutput() GroupWithoutMembersMapOutput
	ToGroupWithoutMembersMapOutputWithContext(context.Context) GroupWithoutMembersMapOutput
}

type GroupWithoutMembersMap map[string]GroupWithoutMembersInput

func (GroupWithoutMembersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupWithoutMembers)(nil)).Elem()
}

func (i GroupWithoutMembersMap) ToGroupWithoutMembersMapOutput() GroupWithoutMembersMapOutput {
	return i.ToGroupWithoutMembersMapOutputWithContext(context.Background())
}

func (i GroupWithoutMembersMap) ToGroupWithoutMembersMapOutputWithContext(ctx context.Context) GroupWithoutMembersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupWithoutMembersMapOutput)
}

type GroupWithoutMembersOutput struct{ *pulumi.OutputState }

func (GroupWithoutMembersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupWithoutMembers)(nil)).Elem()
}

func (o GroupWithoutMembersOutput) ToGroupWithoutMembersOutput() GroupWithoutMembersOutput {
	return o
}

func (o GroupWithoutMembersOutput) ToGroupWithoutMembersOutputWithContext(ctx context.Context) GroupWithoutMembersOutput {
	return o
}

// The object IDs of administrative units in which the group is a member. If specified, new groups will be created in the scope of the first administrative unit and added to the others. If empty, new groups will be created at the tenant level.
//
// > **Caution** When using the AdministrativeUnitMember resource, or the `members` property of the AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `Group` resource, in order to avoid a persistent diff.
func (o GroupWithoutMembersOutput) AdministrativeUnitIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.AdministrativeUnitIds }).(pulumi.StringArrayOutput)
}

// Indicates whether this group can be assigned to an Azure Active Directory role. Defaults to `false`. Can only be set to `true` for security-enabled groups. Changing this forces a new resource to be created.
func (o GroupWithoutMembersOutput) AssignableToRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolPtrOutput { return v.AssignableToRole }).(pulumi.BoolPtrOutput)
}

// Indicates whether new members added to the group will be auto-subscribed to receive email notifications. Can only be set for Unified groups.
//
// > **Known Permissions Issue** The `autoSubscribeNewMembers` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
func (o GroupWithoutMembersOutput) AutoSubscribeNewMembers() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolOutput { return v.AutoSubscribeNewMembers }).(pulumi.BoolOutput)
}

// A set of behaviors for a Microsoft 365 group. Possible values are `AllowOnlyMembersToPost`, `HideGroupInOutlook`, `SkipExchangeInstantOn`, `SubscribeMembersToCalendarEventsDisabled`, `SubscribeNewGroupMembers` and `WelcomeEmailDisabled`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for more details. Changing this forces a new resource to be created.
func (o GroupWithoutMembersOutput) Behaviors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.Behaviors }).(pulumi.StringArrayOutput)
}

// The description for the group.
func (o GroupWithoutMembersOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the group.
func (o GroupWithoutMembersOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// A `dynamicMembership` block as documented below. Required when `types` contains `DynamicMembership`. Cannot be used with the `members` property.
func (o GroupWithoutMembersOutput) DynamicMembership() GroupWithoutMembersDynamicMembershipPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) GroupWithoutMembersDynamicMembershipPtrOutput { return v.DynamicMembership }).(GroupWithoutMembersDynamicMembershipPtrOutput)
}

// Indicates whether people external to the organization can send messages to the group. Can only be set for Unified groups.
//
// > **Known Permissions Issue** The `externalSendersAllowed` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
func (o GroupWithoutMembersOutput) ExternalSendersAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolOutput { return v.ExternalSendersAllowed }).(pulumi.BoolOutput)
}

// Indicates whether the group is displayed in certain parts of the Outlook user interface: in the Address Book, in address lists for selecting message recipients, and in the Browse Groups dialog for searching groups. Can only be set for Unified groups.
//
// > **Known Permissions Issue** The `hideFromAddressLists` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
func (o GroupWithoutMembersOutput) HideFromAddressLists() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolOutput { return v.HideFromAddressLists }).(pulumi.BoolOutput)
}

// Indicates whether the group is displayed in Outlook clients, such as Outlook for Windows and Outlook on the web. Can only be set for Unified groups.
//
// > **Known Permissions Issue** The `hideFromOutlookClients` property can only be set when authenticating as a Member user of the tenant and _not_ when authenticating as a Guest user or as a service principal. Please see the [Microsoft Graph Known Issues](https://docs.microsoft.com/en-us/graph/known-issues#groups) documentation.
func (o GroupWithoutMembersOutput) HideFromOutlookClients() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolOutput { return v.HideFromOutlookClients }).(pulumi.BoolOutput)
}

// The SMTP address for the group.
func (o GroupWithoutMembersOutput) Mail() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.Mail }).(pulumi.StringOutput)
}

// Whether the group is a mail enabled, with a shared group mailbox. At least one of `mailEnabled` or `securityEnabled` must be specified. Only Microsoft 365 groups can be mail enabled (see the `types` property).
func (o GroupWithoutMembersOutput) MailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolPtrOutput { return v.MailEnabled }).(pulumi.BoolPtrOutput)
}

// The mail alias for the group, unique in the organisation. Required for mail-enabled groups. Changing this forces a new resource to be created.
func (o GroupWithoutMembersOutput) MailNickname() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.MailNickname }).(pulumi.StringOutput)
}

// The object ID of the group.
func (o GroupWithoutMembersOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
func (o GroupWithoutMembersOutput) OnpremisesDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.OnpremisesDomainName }).(pulumi.StringOutput)
}

// The on-premises group type that the AAD group will be written as, when writeback is enabled. Possible values are `UniversalDistributionGroup`, `UniversalMailEnabledSecurityGroup`, or `UniversalSecurityGroup`.
func (o GroupWithoutMembersOutput) OnpremisesGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.OnpremisesGroupType }).(pulumi.StringOutput)
}

// The on-premises NetBIOS name, synchronised from the on-premises directory when Azure AD Connect is used.
func (o GroupWithoutMembersOutput) OnpremisesNetbiosName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.OnpremisesNetbiosName }).(pulumi.StringOutput)
}

// The on-premises SAM account name, synchronised from the on-premises directory when Azure AD Connect is used.
func (o GroupWithoutMembersOutput) OnpremisesSamAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.OnpremisesSamAccountName }).(pulumi.StringOutput)
}

// The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
func (o GroupWithoutMembersOutput) OnpremisesSecurityIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.OnpremisesSecurityIdentifier }).(pulumi.StringOutput)
}

// Whether this group is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
func (o GroupWithoutMembersOutput) OnpremisesSyncEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolOutput { return v.OnpremisesSyncEnabled }).(pulumi.BoolOutput)
}

// A set of owners who own this group. Supported object types are Users or Service Principals
func (o GroupWithoutMembersOutput) Owners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.Owners }).(pulumi.StringArrayOutput)
}

// The preferred language for a Microsoft 365 group, in ISO 639-1 notation.
func (o GroupWithoutMembersOutput) PreferredLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.PreferredLanguage }).(pulumi.StringOutput)
}

// If `true`, will return an error if an existing group is found with the same name. Defaults to `false`.
func (o GroupWithoutMembersOutput) PreventDuplicateNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolPtrOutput { return v.PreventDuplicateNames }).(pulumi.BoolPtrOutput)
}

// A set of provisioning options for a Microsoft 365 group. The only supported value is `Team`. See [official documentation](https://docs.microsoft.com/en-us/graph/group-set-options) for details. Changing this forces a new resource to be created.
func (o GroupWithoutMembersOutput) ProvisioningOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.ProvisioningOptions }).(pulumi.StringArrayOutput)
}

// List of email addresses for the group that direct to the same group mailbox.
func (o GroupWithoutMembersOutput) ProxyAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.ProxyAddresses }).(pulumi.StringArrayOutput)
}

// Whether the group is a security group for controlling access to in-app resources. At least one of `securityEnabled` or `mailEnabled` must be specified. A Microsoft 365 group can be security enabled _and_ mail enabled (see the `types` property).
func (o GroupWithoutMembersOutput) SecurityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolPtrOutput { return v.SecurityEnabled }).(pulumi.BoolPtrOutput)
}

// The colour theme for a Microsoft 365 group. Possible values are `Blue`, `Green`, `Orange`, `Pink`, `Purple`, `Red` or `Teal`. By default, no theme is set.
func (o GroupWithoutMembersOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringPtrOutput { return v.Theme }).(pulumi.StringPtrOutput)
}

// A set of group types to configure for the group. Supported values are `DynamicMembership`, which denotes a group with dynamic membership, and `Unified`, which specifies a Microsoft 365 group. Required when `mailEnabled` is true. Changing this forces a new resource to be created.
//
// > **Supported Group Types** At present, only security groups and Microsoft 365 groups can be created or managed with this resource. Distribution groups and mail-enabled security groups are not supported. Microsoft 365 groups can be security-enabled.
func (o GroupWithoutMembersOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringArrayOutput { return v.Types }).(pulumi.StringArrayOutput)
}

// The group join policy and group content visibility. Possible values are `Private`, `Public`, or `Hiddenmembership`. Only Microsoft 365 groups can have `Hiddenmembership` visibility and this value must be set when the group is created. By default, security groups will receive `Private` visibility and Microsoft 365 groups will receive `Public` visibility.
//
// > **Group Name Uniqueness** Group names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing groups if you want to avoid name collisions.
func (o GroupWithoutMembersOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// Whether the group will be written back to the configured on-premises Active Directory when Azure AD Connect is used.
func (o GroupWithoutMembersOutput) WritebackEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupWithoutMembers) pulumi.BoolPtrOutput { return v.WritebackEnabled }).(pulumi.BoolPtrOutput)
}

type GroupWithoutMembersArrayOutput struct{ *pulumi.OutputState }

func (GroupWithoutMembersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupWithoutMembers)(nil)).Elem()
}

func (o GroupWithoutMembersArrayOutput) ToGroupWithoutMembersArrayOutput() GroupWithoutMembersArrayOutput {
	return o
}

func (o GroupWithoutMembersArrayOutput) ToGroupWithoutMembersArrayOutputWithContext(ctx context.Context) GroupWithoutMembersArrayOutput {
	return o
}

func (o GroupWithoutMembersArrayOutput) Index(i pulumi.IntInput) GroupWithoutMembersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupWithoutMembers {
		return vs[0].([]*GroupWithoutMembers)[vs[1].(int)]
	}).(GroupWithoutMembersOutput)
}

type GroupWithoutMembersMapOutput struct{ *pulumi.OutputState }

func (GroupWithoutMembersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupWithoutMembers)(nil)).Elem()
}

func (o GroupWithoutMembersMapOutput) ToGroupWithoutMembersMapOutput() GroupWithoutMembersMapOutput {
	return o
}

func (o GroupWithoutMembersMapOutput) ToGroupWithoutMembersMapOutputWithContext(ctx context.Context) GroupWithoutMembersMapOutput {
	return o
}

func (o GroupWithoutMembersMapOutput) MapIndex(k pulumi.StringInput) GroupWithoutMembersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupWithoutMembers {
		return vs[0].(map[string]*GroupWithoutMembers)[vs[1].(string)]
	}).(GroupWithoutMembersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithoutMembersInput)(nil)).Elem(), &GroupWithoutMembers{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithoutMembersArrayInput)(nil)).Elem(), GroupWithoutMembersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupWithoutMembersMapInput)(nil)).Elem(), GroupWithoutMembersMap{})
	pulumi.RegisterOutputType(GroupWithoutMembersOutput{})
	pulumi.RegisterOutputType(GroupWithoutMembersArrayOutput{})
	pulumi.RegisterOutputType(GroupWithoutMembersMapOutput{})
}
