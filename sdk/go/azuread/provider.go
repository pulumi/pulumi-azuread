// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The provider type for the azuread package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetadataHost == nil {
		return nil, errors.New("invalid value for required argument 'MetadataHost'")
	}
	if args.ClientCertificatePassword == nil {
		args.ClientCertificatePassword = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_CLIENT_CERTIFICATE_PASSWORD").(string))
	}
	if args.ClientCertificatePath == nil {
		args.ClientCertificatePath = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_CLIENT_CERTIFICATE_PATH").(string))
	}
	if args.ClientId == nil {
		args.ClientId = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_CLIENT_ID").(string))
	}
	if args.ClientSecret == nil {
		args.ClientSecret = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_CLIENT_SECRET").(string))
	}
	if args.Environment == nil {
		args.Environment = pulumi.StringPtr(getEnvOrDefault("public", nil, "ARM_ENVIRONMENT").(string))
	}
	if args.MsiEndpoint == nil {
		args.MsiEndpoint = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_MSI_ENDPOINT").(string))
	}
	if args.TenantId == nil {
		args.TenantId = pulumi.StringPtr(getEnvOrDefault("", nil, "ARM_TENANT_ID").(string))
	}
	if args.UseMsi == nil {
		args.UseMsi = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "ARM_USE_MSI").(bool))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:azuread", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	ClientCertificatePassword *string `pulumi:"clientCertificatePassword"`
	// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
	// Principal using a Client Certificate.
	ClientCertificatePath *string `pulumi:"clientCertificatePath"`
	// The Client ID which should be used for service principal authentication.
	ClientId *string `pulumi:"clientId"`
	// The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client
	// Certificate
	ClientSecret *string `pulumi:"clientSecret"`
	// Disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.
	DisableTerraformPartnerId *bool `pulumi:"disableTerraformPartnerId"`
	// The Cloud Environment which should be used. Possible values are `public`, `usgovernment`, `german`, and `china`.
	// Defaults to `public`.
	Environment *string `pulumi:"environment"`
	// The Hostname which should be used for the Azure Metadata Service.
	MetadataHost string `pulumi:"metadataHost"`
	// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
	// automatically.
	MsiEndpoint *string `pulumi:"msiEndpoint"`
	// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
	PartnerId *string `pulumi:"partnerId"`
	// The Tenant ID which should be used. Works with all authentication methods except MSI.
	TenantId *string `pulumi:"tenantId"`
	// Allow Managed Service Identity to be used for Authentication.
	UseMsi *bool `pulumi:"useMsi"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	ClientCertificatePassword pulumi.StringPtrInput
	// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
	// Principal using a Client Certificate.
	ClientCertificatePath pulumi.StringPtrInput
	// The Client ID which should be used for service principal authentication.
	ClientId pulumi.StringPtrInput
	// The password to decrypt the Client Certificate. For use when authenticating as a Service Principal using a Client
	// Certificate
	ClientSecret pulumi.StringPtrInput
	// Disable the Terraform Partner ID which is used if a custom `partner_id` isn't specified.
	DisableTerraformPartnerId pulumi.BoolPtrInput
	// The Cloud Environment which should be used. Possible values are `public`, `usgovernment`, `german`, and `china`.
	// Defaults to `public`.
	Environment pulumi.StringPtrInput
	// The Hostname which should be used for the Azure Metadata Service.
	MetadataHost pulumi.StringInput
	// The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
	// automatically.
	MsiEndpoint pulumi.StringPtrInput
	// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
	PartnerId pulumi.StringPtrInput
	// The Tenant ID which should be used. Works with all authentication methods except MSI.
	TenantId pulumi.StringPtrInput
	// Allow Managed Service Identity to be used for Authentication.
	UseMsi pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct {
	*pulumi.OutputState
}

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
}
