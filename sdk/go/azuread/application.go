// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v6/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// *Create an application*
//
// ## Import
//
// Applications can be imported using the object ID of the application, in the following format.
//
// ```sh
// $ pulumi import azuread:index/application:Application example /applications/00000000-0000-0000-0000-000000000000
// ```
type Application struct {
	pulumi.CustomResourceState

	// An `api` block as documented below, which configures API related settings for this application.
	Api ApplicationApiPtrOutput `pulumi:"api"`
	// A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
	AppRoleIds pulumi.StringMapOutput `pulumi:"appRoleIds"`
	// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
	AppRoles ApplicationAppRoleTypeArrayOutput `pulumi:"appRoles"`
	// The Client ID for the application.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// A description of the application, as shown to end users.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether this application supports device authentication without a user. Defaults to `false`.
	DeviceOnlyAuthEnabled pulumi.BoolPtrOutput `pulumi:"deviceOnlyAuthEnabled"`
	// Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
	DisabledByMicrosoft pulumi.StringOutput `pulumi:"disabledByMicrosoft"`
	// The display name for the application.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
	FallbackPublicClientEnabled pulumi.BoolPtrOutput `pulumi:"fallbackPublicClientEnabled"`
	// A `featureTags` block as described below. Cannot be used together with the `tags` property.
	//
	// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
	FeatureTags ApplicationFeatureTagArrayOutput `pulumi:"featureTags"`
	// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
	GroupMembershipClaims pulumi.StringArrayOutput `pulumi:"groupMembershipClaims"`
	// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
	IdentifierUris pulumi.StringArrayOutput `pulumi:"identifierUris"`
	// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
	LogoImage pulumi.StringPtrOutput `pulumi:"logoImage"`
	// CDN URL to the application's logo, as uploaded with the `logoImage` property.
	LogoUrl pulumi.StringOutput `pulumi:"logoUrl"`
	// URL of the application's marketing page.
	MarketingUrl pulumi.StringPtrOutput `pulumi:"marketingUrl"`
	// User-specified notes relevant for the management of the application.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
	Oauth2PermissionScopeIds pulumi.StringMapOutput `pulumi:"oauth2PermissionScopeIds"`
	// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
	Oauth2PostResponseRequired pulumi.BoolPtrOutput `pulumi:"oauth2PostResponseRequired"`
	// The application's object ID.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// An `optionalClaims` block as documented below.
	OptionalClaims ApplicationOptionalClaimsTypePtrOutput `pulumi:"optionalClaims"`
	// A list of object IDs of principals that will be granted ownership of the application
	Owners pulumi.StringArrayOutput `pulumi:"owners"`
	// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
	//
	// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
	Password ApplicationPasswordTypeOutput `pulumi:"password"`
	// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrOutput `pulumi:"preventDuplicateNames"`
	// URL of the application's privacy statement.
	PrivacyStatementUrl pulumi.StringPtrOutput `pulumi:"privacyStatementUrl"`
	// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
	PublicClient ApplicationPublicClientPtrOutput `pulumi:"publicClient"`
	// The verified publisher domain for the application.
	PublisherDomain pulumi.StringOutput `pulumi:"publisherDomain"`
	// A collection of `requiredResourceAccess` blocks as documented below.
	RequiredResourceAccesses ApplicationRequiredResourceAccessArrayOutput `pulumi:"requiredResourceAccesses"`
	// References application context information from a Service or Asset Management database.
	ServiceManagementReference pulumi.StringPtrOutput `pulumi:"serviceManagementReference"`
	// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
	//
	// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
	SignInAudience pulumi.StringPtrOutput `pulumi:"signInAudience"`
	// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
	SinglePageApplication ApplicationSinglePageApplicationPtrOutput `pulumi:"singlePageApplication"`
	// URL of the application's support page.
	SupportUrl pulumi.StringPtrOutput `pulumi:"supportUrl"`
	// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
	//
	// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	//
	// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// URL of the application's terms of service statement.
	TermsOfServiceUrl pulumi.StringPtrOutput `pulumi:"termsOfServiceUrl"`
	// A `web` block as documented below, which configures web related settings for this application.
	//
	// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
	Web ApplicationWebPtrOutput `pulumi:"web"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("azuread:index/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("azuread:index/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// An `api` block as documented below, which configures API related settings for this application.
	Api *ApplicationApi `pulumi:"api"`
	// A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
	AppRoleIds map[string]string `pulumi:"appRoleIds"`
	// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
	AppRoles []ApplicationAppRoleType `pulumi:"appRoles"`
	// The Client ID for the application.
	ClientId *string `pulumi:"clientId"`
	// A description of the application, as shown to end users.
	Description *string `pulumi:"description"`
	// Specifies whether this application supports device authentication without a user. Defaults to `false`.
	DeviceOnlyAuthEnabled *bool `pulumi:"deviceOnlyAuthEnabled"`
	// Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
	DisabledByMicrosoft *string `pulumi:"disabledByMicrosoft"`
	// The display name for the application.
	DisplayName *string `pulumi:"displayName"`
	// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
	FallbackPublicClientEnabled *bool `pulumi:"fallbackPublicClientEnabled"`
	// A `featureTags` block as described below. Cannot be used together with the `tags` property.
	//
	// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
	FeatureTags []ApplicationFeatureTag `pulumi:"featureTags"`
	// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
	GroupMembershipClaims []string `pulumi:"groupMembershipClaims"`
	// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
	IdentifierUris []string `pulumi:"identifierUris"`
	// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
	LogoImage *string `pulumi:"logoImage"`
	// CDN URL to the application's logo, as uploaded with the `logoImage` property.
	LogoUrl *string `pulumi:"logoUrl"`
	// URL of the application's marketing page.
	MarketingUrl *string `pulumi:"marketingUrl"`
	// User-specified notes relevant for the management of the application.
	Notes *string `pulumi:"notes"`
	// A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
	Oauth2PermissionScopeIds map[string]string `pulumi:"oauth2PermissionScopeIds"`
	// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
	Oauth2PostResponseRequired *bool `pulumi:"oauth2PostResponseRequired"`
	// The application's object ID.
	ObjectId *string `pulumi:"objectId"`
	// An `optionalClaims` block as documented below.
	OptionalClaims *ApplicationOptionalClaimsType `pulumi:"optionalClaims"`
	// A list of object IDs of principals that will be granted ownership of the application
	Owners []string `pulumi:"owners"`
	// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
	//
	// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
	Password *ApplicationPasswordType `pulumi:"password"`
	// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// URL of the application's privacy statement.
	PrivacyStatementUrl *string `pulumi:"privacyStatementUrl"`
	// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
	PublicClient *ApplicationPublicClient `pulumi:"publicClient"`
	// The verified publisher domain for the application.
	PublisherDomain *string `pulumi:"publisherDomain"`
	// A collection of `requiredResourceAccess` blocks as documented below.
	RequiredResourceAccesses []ApplicationRequiredResourceAccess `pulumi:"requiredResourceAccesses"`
	// References application context information from a Service or Asset Management database.
	ServiceManagementReference *string `pulumi:"serviceManagementReference"`
	// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
	//
	// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
	SignInAudience *string `pulumi:"signInAudience"`
	// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
	SinglePageApplication *ApplicationSinglePageApplication `pulumi:"singlePageApplication"`
	// URL of the application's support page.
	SupportUrl *string `pulumi:"supportUrl"`
	// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
	//
	// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
	Tags []string `pulumi:"tags"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	//
	// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
	TemplateId *string `pulumi:"templateId"`
	// URL of the application's terms of service statement.
	TermsOfServiceUrl *string `pulumi:"termsOfServiceUrl"`
	// A `web` block as documented below, which configures web related settings for this application.
	//
	// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
	Web *ApplicationWeb `pulumi:"web"`
}

type ApplicationState struct {
	// An `api` block as documented below, which configures API related settings for this application.
	Api ApplicationApiPtrInput
	// A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
	AppRoleIds pulumi.StringMapInput
	// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
	AppRoles ApplicationAppRoleTypeArrayInput
	// The Client ID for the application.
	ClientId pulumi.StringPtrInput
	// A description of the application, as shown to end users.
	Description pulumi.StringPtrInput
	// Specifies whether this application supports device authentication without a user. Defaults to `false`.
	DeviceOnlyAuthEnabled pulumi.BoolPtrInput
	// Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
	DisabledByMicrosoft pulumi.StringPtrInput
	// The display name for the application.
	DisplayName pulumi.StringPtrInput
	// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
	FallbackPublicClientEnabled pulumi.BoolPtrInput
	// A `featureTags` block as described below. Cannot be used together with the `tags` property.
	//
	// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
	FeatureTags ApplicationFeatureTagArrayInput
	// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
	GroupMembershipClaims pulumi.StringArrayInput
	// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
	IdentifierUris pulumi.StringArrayInput
	// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
	LogoImage pulumi.StringPtrInput
	// CDN URL to the application's logo, as uploaded with the `logoImage` property.
	LogoUrl pulumi.StringPtrInput
	// URL of the application's marketing page.
	MarketingUrl pulumi.StringPtrInput
	// User-specified notes relevant for the management of the application.
	Notes pulumi.StringPtrInput
	// A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
	Oauth2PermissionScopeIds pulumi.StringMapInput
	// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
	Oauth2PostResponseRequired pulumi.BoolPtrInput
	// The application's object ID.
	ObjectId pulumi.StringPtrInput
	// An `optionalClaims` block as documented below.
	OptionalClaims ApplicationOptionalClaimsTypePtrInput
	// A list of object IDs of principals that will be granted ownership of the application
	Owners pulumi.StringArrayInput
	// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
	//
	// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
	Password ApplicationPasswordTypePtrInput
	// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrInput
	// URL of the application's privacy statement.
	PrivacyStatementUrl pulumi.StringPtrInput
	// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
	PublicClient ApplicationPublicClientPtrInput
	// The verified publisher domain for the application.
	PublisherDomain pulumi.StringPtrInput
	// A collection of `requiredResourceAccess` blocks as documented below.
	RequiredResourceAccesses ApplicationRequiredResourceAccessArrayInput
	// References application context information from a Service or Asset Management database.
	ServiceManagementReference pulumi.StringPtrInput
	// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
	//
	// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
	SignInAudience pulumi.StringPtrInput
	// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
	SinglePageApplication ApplicationSinglePageApplicationPtrInput
	// URL of the application's support page.
	SupportUrl pulumi.StringPtrInput
	// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
	//
	// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
	Tags pulumi.StringArrayInput
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	//
	// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
	TemplateId pulumi.StringPtrInput
	// URL of the application's terms of service statement.
	TermsOfServiceUrl pulumi.StringPtrInput
	// A `web` block as documented below, which configures web related settings for this application.
	//
	// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
	Web ApplicationWebPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// An `api` block as documented below, which configures API related settings for this application.
	Api *ApplicationApi `pulumi:"api"`
	// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
	AppRoles []ApplicationAppRoleType `pulumi:"appRoles"`
	// A description of the application, as shown to end users.
	Description *string `pulumi:"description"`
	// Specifies whether this application supports device authentication without a user. Defaults to `false`.
	DeviceOnlyAuthEnabled *bool `pulumi:"deviceOnlyAuthEnabled"`
	// The display name for the application.
	DisplayName string `pulumi:"displayName"`
	// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
	FallbackPublicClientEnabled *bool `pulumi:"fallbackPublicClientEnabled"`
	// A `featureTags` block as described below. Cannot be used together with the `tags` property.
	//
	// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
	FeatureTags []ApplicationFeatureTag `pulumi:"featureTags"`
	// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
	GroupMembershipClaims []string `pulumi:"groupMembershipClaims"`
	// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
	IdentifierUris []string `pulumi:"identifierUris"`
	// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
	LogoImage *string `pulumi:"logoImage"`
	// URL of the application's marketing page.
	MarketingUrl *string `pulumi:"marketingUrl"`
	// User-specified notes relevant for the management of the application.
	Notes *string `pulumi:"notes"`
	// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
	Oauth2PostResponseRequired *bool `pulumi:"oauth2PostResponseRequired"`
	// An `optionalClaims` block as documented below.
	OptionalClaims *ApplicationOptionalClaimsType `pulumi:"optionalClaims"`
	// A list of object IDs of principals that will be granted ownership of the application
	Owners []string `pulumi:"owners"`
	// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
	//
	// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
	Password *ApplicationPasswordType `pulumi:"password"`
	// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
	PreventDuplicateNames *bool `pulumi:"preventDuplicateNames"`
	// URL of the application's privacy statement.
	PrivacyStatementUrl *string `pulumi:"privacyStatementUrl"`
	// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
	PublicClient *ApplicationPublicClient `pulumi:"publicClient"`
	// A collection of `requiredResourceAccess` blocks as documented below.
	RequiredResourceAccesses []ApplicationRequiredResourceAccess `pulumi:"requiredResourceAccesses"`
	// References application context information from a Service or Asset Management database.
	ServiceManagementReference *string `pulumi:"serviceManagementReference"`
	// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
	//
	// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
	SignInAudience *string `pulumi:"signInAudience"`
	// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
	SinglePageApplication *ApplicationSinglePageApplication `pulumi:"singlePageApplication"`
	// URL of the application's support page.
	SupportUrl *string `pulumi:"supportUrl"`
	// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
	//
	// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
	Tags []string `pulumi:"tags"`
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	//
	// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
	TemplateId *string `pulumi:"templateId"`
	// URL of the application's terms of service statement.
	TermsOfServiceUrl *string `pulumi:"termsOfServiceUrl"`
	// A `web` block as documented below, which configures web related settings for this application.
	//
	// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
	Web *ApplicationWeb `pulumi:"web"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// An `api` block as documented below, which configures API related settings for this application.
	Api ApplicationApiPtrInput
	// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
	AppRoles ApplicationAppRoleTypeArrayInput
	// A description of the application, as shown to end users.
	Description pulumi.StringPtrInput
	// Specifies whether this application supports device authentication without a user. Defaults to `false`.
	DeviceOnlyAuthEnabled pulumi.BoolPtrInput
	// The display name for the application.
	DisplayName pulumi.StringInput
	// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
	FallbackPublicClientEnabled pulumi.BoolPtrInput
	// A `featureTags` block as described below. Cannot be used together with the `tags` property.
	//
	// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
	FeatureTags ApplicationFeatureTagArrayInput
	// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
	GroupMembershipClaims pulumi.StringArrayInput
	// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
	IdentifierUris pulumi.StringArrayInput
	// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
	LogoImage pulumi.StringPtrInput
	// URL of the application's marketing page.
	MarketingUrl pulumi.StringPtrInput
	// User-specified notes relevant for the management of the application.
	Notes pulumi.StringPtrInput
	// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
	Oauth2PostResponseRequired pulumi.BoolPtrInput
	// An `optionalClaims` block as documented below.
	OptionalClaims ApplicationOptionalClaimsTypePtrInput
	// A list of object IDs of principals that will be granted ownership of the application
	Owners pulumi.StringArrayInput
	// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
	//
	// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
	Password ApplicationPasswordTypePtrInput
	// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
	PreventDuplicateNames pulumi.BoolPtrInput
	// URL of the application's privacy statement.
	PrivacyStatementUrl pulumi.StringPtrInput
	// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
	PublicClient ApplicationPublicClientPtrInput
	// A collection of `requiredResourceAccess` blocks as documented below.
	RequiredResourceAccesses ApplicationRequiredResourceAccessArrayInput
	// References application context information from a Service or Asset Management database.
	ServiceManagementReference pulumi.StringPtrInput
	// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
	//
	// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
	SignInAudience pulumi.StringPtrInput
	// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
	SinglePageApplication ApplicationSinglePageApplicationPtrInput
	// URL of the application's support page.
	SupportUrl pulumi.StringPtrInput
	// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
	//
	// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
	Tags pulumi.StringArrayInput
	// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
	//
	// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
	TemplateId pulumi.StringPtrInput
	// URL of the application's terms of service statement.
	TermsOfServiceUrl pulumi.StringPtrInput
	// A `web` block as documented below, which configures web related settings for this application.
	//
	// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
	Web ApplicationWebPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// An `api` block as documented below, which configures API related settings for this application.
func (o ApplicationOutput) Api() ApplicationApiPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationApiPtrOutput { return v.Api }).(ApplicationApiPtrOutput)
}

// A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
func (o ApplicationOutput) AppRoleIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Application) pulumi.StringMapOutput { return v.AppRoleIds }).(pulumi.StringMapOutput)
}

// A collection of `appRole` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
func (o ApplicationOutput) AppRoles() ApplicationAppRoleTypeArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationAppRoleTypeArrayOutput { return v.AppRoles }).(ApplicationAppRoleTypeArrayOutput)
}

// The Client ID for the application.
func (o ApplicationOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// A description of the application, as shown to end users.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether this application supports device authentication without a user. Defaults to `false`.
func (o ApplicationOutput) DeviceOnlyAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.DeviceOnlyAuthEnabled }).(pulumi.BoolPtrOutput)
}

// Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
func (o ApplicationOutput) DisabledByMicrosoft() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DisabledByMicrosoft }).(pulumi.StringOutput)
}

// The display name for the application.
func (o ApplicationOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Specifies whether the application is a public client. Appropriate for apps using token grant flows that don't use a redirect URI. Defaults to `false`.
func (o ApplicationOutput) FallbackPublicClientEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.FallbackPublicClientEnabled }).(pulumi.BoolPtrOutput)
}

// A `featureTags` block as described below. Cannot be used together with the `tags` property.
//
// > **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `featureTags` and `tags` for an application at the same time, so if you need to assign additional custom tags it's recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
func (o ApplicationOutput) FeatureTags() ApplicationFeatureTagArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationFeatureTagArrayOutput { return v.FeatureTags }).(ApplicationFeatureTagArrayOutput)
}

// A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
func (o ApplicationOutput) GroupMembershipClaims() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.GroupMembershipClaims }).(pulumi.StringArrayOutput)
}

// A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
func (o ApplicationOutput) IdentifierUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.IdentifierUris }).(pulumi.StringArrayOutput)
}

// A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
func (o ApplicationOutput) LogoImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.LogoImage }).(pulumi.StringPtrOutput)
}

// CDN URL to the application's logo, as uploaded with the `logoImage` property.
func (o ApplicationOutput) LogoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.LogoUrl }).(pulumi.StringOutput)
}

// URL of the application's marketing page.
func (o ApplicationOutput) MarketingUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.MarketingUrl }).(pulumi.StringPtrOutput)
}

// User-specified notes relevant for the management of the application.
func (o ApplicationOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
func (o ApplicationOutput) Oauth2PermissionScopeIds() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Application) pulumi.StringMapOutput { return v.Oauth2PermissionScopeIds }).(pulumi.StringMapOutput)
}

// Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
func (o ApplicationOutput) Oauth2PostResponseRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.Oauth2PostResponseRequired }).(pulumi.BoolPtrOutput)
}

// The application's object ID.
func (o ApplicationOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// An `optionalClaims` block as documented below.
func (o ApplicationOutput) OptionalClaims() ApplicationOptionalClaimsTypePtrOutput {
	return o.ApplyT(func(v *Application) ApplicationOptionalClaimsTypePtrOutput { return v.OptionalClaims }).(ApplicationOptionalClaimsTypePtrOutput)
}

// A list of object IDs of principals that will be granted ownership of the application
func (o ApplicationOutput) Owners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.Owners }).(pulumi.StringArrayOutput)
}

// A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
//
// > **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the ApplicationPassword resource.
func (o ApplicationOutput) Password() ApplicationPasswordTypeOutput {
	return o.ApplyT(func(v *Application) ApplicationPasswordTypeOutput { return v.Password }).(ApplicationPasswordTypeOutput)
}

// If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
func (o ApplicationOutput) PreventDuplicateNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.PreventDuplicateNames }).(pulumi.BoolPtrOutput)
}

// URL of the application's privacy statement.
func (o ApplicationOutput) PrivacyStatementUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.PrivacyStatementUrl }).(pulumi.StringPtrOutput)
}

// A `publicClient` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
func (o ApplicationOutput) PublicClient() ApplicationPublicClientPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationPublicClientPtrOutput { return v.PublicClient }).(ApplicationPublicClientPtrOutput)
}

// The verified publisher domain for the application.
func (o ApplicationOutput) PublisherDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.PublisherDomain }).(pulumi.StringOutput)
}

// A collection of `requiredResourceAccess` blocks as documented below.
func (o ApplicationOutput) RequiredResourceAccesses() ApplicationRequiredResourceAccessArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationRequiredResourceAccessArrayOutput { return v.RequiredResourceAccesses }).(ApplicationRequiredResourceAccessArrayOutput)
}

// References application context information from a Service or Asset Management database.
func (o ApplicationOutput) ServiceManagementReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ServiceManagementReference }).(pulumi.StringPtrOutput)
}

// The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
//
// > **Changing `signInAudience` for existing applications** When updating an existing application to use a `signInAudience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
func (o ApplicationOutput) SignInAudience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SignInAudience }).(pulumi.StringPtrOutput)
}

// A `singlePageApplication` block as documented below, which configures single-page application (SPA) related settings for this application.
func (o ApplicationOutput) SinglePageApplication() ApplicationSinglePageApplicationPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationSinglePageApplicationPtrOutput { return v.SinglePageApplication }).(ApplicationSinglePageApplicationPtrOutput)
}

// URL of the application's support page.
func (o ApplicationOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SupportUrl }).(pulumi.StringPtrOutput)
}

// A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `featureTags` block.
//
// > **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `featureTags` block. If you need to set any custom tag values not supported by the `featureTags` block, it's recommended to use the `tags` property. Tag values also propagate to any linked service principals.
func (o ApplicationOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
//
// > **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the ApplicationRegistration resource instead.
func (o ApplicationOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// URL of the application's terms of service statement.
func (o ApplicationOutput) TermsOfServiceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.TermsOfServiceUrl }).(pulumi.StringPtrOutput)
}

// A `web` block as documented below, which configures web related settings for this application.
//
// > **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `preventDuplicateNames` argument to check for existing applications if you want to avoid name collisions.
func (o ApplicationOutput) Web() ApplicationWebPtrOutput {
	return o.ApplyT(func(v *Application) ApplicationWebPtrOutput { return v.Web }).(ApplicationWebPtrOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
