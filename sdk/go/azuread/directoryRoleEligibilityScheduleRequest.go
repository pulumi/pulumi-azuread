// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuread

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a single directory role eligibility schedule request within Azure Active Directory.
//
// ## API Permissions
//
// The following API permissions are required in order to use this resource.
//
// The calling principal requires one of the following application roles: `RoleEligibilitySchedule.ReadWrite.Directory` or `RoleManagement.ReadWrite.Directory`.
//
// The calling principal requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`.
//
// ## Import
//
// Directory role eligibility schedule requests can be imported using the ID of the assignment, e.g.
//
// ```sh
//
//	$ pulumi import azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest example 822ec710-4c9f-4f71-a27a-451759cc7522
//
// ```
type DirectoryRoleEligibilityScheduleRequest struct {
	pulumi.CustomResourceState

	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	DirectoryScopeId pulumi.StringOutput `pulumi:"directoryScopeId"`
	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	Justification pulumi.StringOutput `pulumi:"justification"`
	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`
}

// NewDirectoryRoleEligibilityScheduleRequest registers a new resource with the given unique name, arguments, and options.
func NewDirectoryRoleEligibilityScheduleRequest(ctx *pulumi.Context,
	name string, args *DirectoryRoleEligibilityScheduleRequestArgs, opts ...pulumi.ResourceOption) (*DirectoryRoleEligibilityScheduleRequest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryScopeId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryScopeId'")
	}
	if args.Justification == nil {
		return nil, errors.New("invalid value for required argument 'Justification'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.RoleDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'RoleDefinitionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DirectoryRoleEligibilityScheduleRequest
	err := ctx.RegisterResource("azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectoryRoleEligibilityScheduleRequest gets an existing DirectoryRoleEligibilityScheduleRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectoryRoleEligibilityScheduleRequest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryRoleEligibilityScheduleRequestState, opts ...pulumi.ResourceOption) (*DirectoryRoleEligibilityScheduleRequest, error) {
	var resource DirectoryRoleEligibilityScheduleRequest
	err := ctx.ReadResource("azuread:index/directoryRoleEligibilityScheduleRequest:DirectoryRoleEligibilityScheduleRequest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectoryRoleEligibilityScheduleRequest resources.
type directoryRoleEligibilityScheduleRequestState struct {
	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	DirectoryScopeId *string `pulumi:"directoryScopeId"`
	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	Justification *string `pulumi:"justification"`
	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	PrincipalId *string `pulumi:"principalId"`
	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
}

type DirectoryRoleEligibilityScheduleRequestState struct {
	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	DirectoryScopeId pulumi.StringPtrInput
	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	Justification pulumi.StringPtrInput
	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	PrincipalId pulumi.StringPtrInput
	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringPtrInput
}

func (DirectoryRoleEligibilityScheduleRequestState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryRoleEligibilityScheduleRequestState)(nil)).Elem()
}

type directoryRoleEligibilityScheduleRequestArgs struct {
	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	DirectoryScopeId string `pulumi:"directoryScopeId"`
	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	Justification string `pulumi:"justification"`
	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	PrincipalId string `pulumi:"principalId"`
	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// The set of arguments for constructing a DirectoryRoleEligibilityScheduleRequest resource.
type DirectoryRoleEligibilityScheduleRequestArgs struct {
	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	DirectoryScopeId pulumi.StringInput
	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	Justification pulumi.StringInput
	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	PrincipalId pulumi.StringInput
	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringInput
}

func (DirectoryRoleEligibilityScheduleRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryRoleEligibilityScheduleRequestArgs)(nil)).Elem()
}

type DirectoryRoleEligibilityScheduleRequestInput interface {
	pulumi.Input

	ToDirectoryRoleEligibilityScheduleRequestOutput() DirectoryRoleEligibilityScheduleRequestOutput
	ToDirectoryRoleEligibilityScheduleRequestOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestOutput
}

func (*DirectoryRoleEligibilityScheduleRequest) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (i *DirectoryRoleEligibilityScheduleRequest) ToDirectoryRoleEligibilityScheduleRequestOutput() DirectoryRoleEligibilityScheduleRequestOutput {
	return i.ToDirectoryRoleEligibilityScheduleRequestOutputWithContext(context.Background())
}

func (i *DirectoryRoleEligibilityScheduleRequest) ToDirectoryRoleEligibilityScheduleRequestOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleEligibilityScheduleRequestOutput)
}

func (i *DirectoryRoleEligibilityScheduleRequest) ToOutput(ctx context.Context) pulumix.Output[*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: i.ToDirectoryRoleEligibilityScheduleRequestOutputWithContext(ctx).OutputState,
	}
}

// DirectoryRoleEligibilityScheduleRequestArrayInput is an input type that accepts DirectoryRoleEligibilityScheduleRequestArray and DirectoryRoleEligibilityScheduleRequestArrayOutput values.
// You can construct a concrete instance of `DirectoryRoleEligibilityScheduleRequestArrayInput` via:
//
//	DirectoryRoleEligibilityScheduleRequestArray{ DirectoryRoleEligibilityScheduleRequestArgs{...} }
type DirectoryRoleEligibilityScheduleRequestArrayInput interface {
	pulumi.Input

	ToDirectoryRoleEligibilityScheduleRequestArrayOutput() DirectoryRoleEligibilityScheduleRequestArrayOutput
	ToDirectoryRoleEligibilityScheduleRequestArrayOutputWithContext(context.Context) DirectoryRoleEligibilityScheduleRequestArrayOutput
}

type DirectoryRoleEligibilityScheduleRequestArray []DirectoryRoleEligibilityScheduleRequestInput

func (DirectoryRoleEligibilityScheduleRequestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (i DirectoryRoleEligibilityScheduleRequestArray) ToDirectoryRoleEligibilityScheduleRequestArrayOutput() DirectoryRoleEligibilityScheduleRequestArrayOutput {
	return i.ToDirectoryRoleEligibilityScheduleRequestArrayOutputWithContext(context.Background())
}

func (i DirectoryRoleEligibilityScheduleRequestArray) ToDirectoryRoleEligibilityScheduleRequestArrayOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleEligibilityScheduleRequestArrayOutput)
}

func (i DirectoryRoleEligibilityScheduleRequestArray) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[[]*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: i.ToDirectoryRoleEligibilityScheduleRequestArrayOutputWithContext(ctx).OutputState,
	}
}

// DirectoryRoleEligibilityScheduleRequestMapInput is an input type that accepts DirectoryRoleEligibilityScheduleRequestMap and DirectoryRoleEligibilityScheduleRequestMapOutput values.
// You can construct a concrete instance of `DirectoryRoleEligibilityScheduleRequestMapInput` via:
//
//	DirectoryRoleEligibilityScheduleRequestMap{ "key": DirectoryRoleEligibilityScheduleRequestArgs{...} }
type DirectoryRoleEligibilityScheduleRequestMapInput interface {
	pulumi.Input

	ToDirectoryRoleEligibilityScheduleRequestMapOutput() DirectoryRoleEligibilityScheduleRequestMapOutput
	ToDirectoryRoleEligibilityScheduleRequestMapOutputWithContext(context.Context) DirectoryRoleEligibilityScheduleRequestMapOutput
}

type DirectoryRoleEligibilityScheduleRequestMap map[string]DirectoryRoleEligibilityScheduleRequestInput

func (DirectoryRoleEligibilityScheduleRequestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (i DirectoryRoleEligibilityScheduleRequestMap) ToDirectoryRoleEligibilityScheduleRequestMapOutput() DirectoryRoleEligibilityScheduleRequestMapOutput {
	return i.ToDirectoryRoleEligibilityScheduleRequestMapOutputWithContext(context.Background())
}

func (i DirectoryRoleEligibilityScheduleRequestMap) ToDirectoryRoleEligibilityScheduleRequestMapOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleEligibilityScheduleRequestMapOutput)
}

func (i DirectoryRoleEligibilityScheduleRequestMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[map[string]*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: i.ToDirectoryRoleEligibilityScheduleRequestMapOutputWithContext(ctx).OutputState,
	}
}

type DirectoryRoleEligibilityScheduleRequestOutput struct{ *pulumi.OutputState }

func (DirectoryRoleEligibilityScheduleRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (o DirectoryRoleEligibilityScheduleRequestOutput) ToDirectoryRoleEligibilityScheduleRequestOutput() DirectoryRoleEligibilityScheduleRequestOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestOutput) ToDirectoryRoleEligibilityScheduleRequestOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestOutput) ToOutput(ctx context.Context) pulumix.Output[*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: o.OutputState,
	}
}

// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
func (o DirectoryRoleEligibilityScheduleRequestOutput) DirectoryScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleEligibilityScheduleRequest) pulumi.StringOutput { return v.DirectoryScopeId }).(pulumi.StringOutput)
}

// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
func (o DirectoryRoleEligibilityScheduleRequestOutput) Justification() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleEligibilityScheduleRequest) pulumi.StringOutput { return v.Justification }).(pulumi.StringOutput)
}

// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
func (o DirectoryRoleEligibilityScheduleRequestOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleEligibilityScheduleRequest) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
func (o DirectoryRoleEligibilityScheduleRequestOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleEligibilityScheduleRequest) pulumi.StringOutput { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type DirectoryRoleEligibilityScheduleRequestArrayOutput struct{ *pulumi.OutputState }

func (DirectoryRoleEligibilityScheduleRequestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (o DirectoryRoleEligibilityScheduleRequestArrayOutput) ToDirectoryRoleEligibilityScheduleRequestArrayOutput() DirectoryRoleEligibilityScheduleRequestArrayOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestArrayOutput) ToDirectoryRoleEligibilityScheduleRequestArrayOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestArrayOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[[]*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryRoleEligibilityScheduleRequestArrayOutput) Index(i pulumi.IntInput) DirectoryRoleEligibilityScheduleRequestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectoryRoleEligibilityScheduleRequest {
		return vs[0].([]*DirectoryRoleEligibilityScheduleRequest)[vs[1].(int)]
	}).(DirectoryRoleEligibilityScheduleRequestOutput)
}

type DirectoryRoleEligibilityScheduleRequestMapOutput struct{ *pulumi.OutputState }

func (DirectoryRoleEligibilityScheduleRequestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryRoleEligibilityScheduleRequest)(nil)).Elem()
}

func (o DirectoryRoleEligibilityScheduleRequestMapOutput) ToDirectoryRoleEligibilityScheduleRequestMapOutput() DirectoryRoleEligibilityScheduleRequestMapOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestMapOutput) ToDirectoryRoleEligibilityScheduleRequestMapOutputWithContext(ctx context.Context) DirectoryRoleEligibilityScheduleRequestMapOutput {
	return o
}

func (o DirectoryRoleEligibilityScheduleRequestMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryRoleEligibilityScheduleRequest] {
	return pulumix.Output[map[string]*DirectoryRoleEligibilityScheduleRequest]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryRoleEligibilityScheduleRequestMapOutput) MapIndex(k pulumi.StringInput) DirectoryRoleEligibilityScheduleRequestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectoryRoleEligibilityScheduleRequest {
		return vs[0].(map[string]*DirectoryRoleEligibilityScheduleRequest)[vs[1].(string)]
	}).(DirectoryRoleEligibilityScheduleRequestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleEligibilityScheduleRequestInput)(nil)).Elem(), &DirectoryRoleEligibilityScheduleRequest{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleEligibilityScheduleRequestArrayInput)(nil)).Elem(), DirectoryRoleEligibilityScheduleRequestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleEligibilityScheduleRequestMapInput)(nil)).Elem(), DirectoryRoleEligibilityScheduleRequestMap{})
	pulumi.RegisterOutputType(DirectoryRoleEligibilityScheduleRequestOutput{})
	pulumi.RegisterOutputType(DirectoryRoleEligibilityScheduleRequestArrayOutput{})
	pulumi.RegisterOutputType(DirectoryRoleEligibilityScheduleRequestMapOutput{})
}
