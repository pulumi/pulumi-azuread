# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AccessPackageAssignmentPolicyApprovalSettingsArgs',
    'AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs',
    'AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs',
    'AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs',
    'AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs',
    'AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs',
    'AccessPackageAssignmentPolicyQuestionArgs',
    'AccessPackageAssignmentPolicyQuestionChoiceArgs',
    'AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs',
    'AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedTextArgs',
    'AccessPackageAssignmentPolicyQuestionTextArgs',
    'AccessPackageAssignmentPolicyQuestionTextLocalizedTextArgs',
    'AccessPackageAssignmentPolicyRequestorSettingsArgs',
    'AccessPackageAssignmentPolicyRequestorSettingsRequestorArgs',
    'ApplicationApiArgs',
    'ApplicationApiOauth2PermissionScopeArgs',
    'ApplicationAppRoleArgs',
    'ApplicationFeatureTagArgs',
    'ApplicationOptionalClaimsArgs',
    'ApplicationOptionalClaimsAccessTokenArgs',
    'ApplicationOptionalClaimsIdTokenArgs',
    'ApplicationOptionalClaimsSaml2TokenArgs',
    'ApplicationPublicClientArgs',
    'ApplicationRequiredResourceAccessArgs',
    'ApplicationRequiredResourceAccessResourceAccessArgs',
    'ApplicationSinglePageApplicationArgs',
    'ApplicationWebArgs',
    'ApplicationWebImplicitGrantArgs',
    'ConditionalAccessPolicyConditionsArgs',
    'ConditionalAccessPolicyConditionsApplicationsArgs',
    'ConditionalAccessPolicyConditionsClientApplicationsArgs',
    'ConditionalAccessPolicyConditionsDevicesArgs',
    'ConditionalAccessPolicyConditionsDevicesFilterArgs',
    'ConditionalAccessPolicyConditionsLocationsArgs',
    'ConditionalAccessPolicyConditionsPlatformsArgs',
    'ConditionalAccessPolicyConditionsUsersArgs',
    'ConditionalAccessPolicyGrantControlsArgs',
    'ConditionalAccessPolicySessionControlsArgs',
    'CustomDirectoryRolePermissionArgs',
    'GroupDynamicMembershipArgs',
    'InvitationMessageArgs',
    'NamedLocationCountryArgs',
    'NamedLocationIpArgs',
    'ServicePrincipalAppRoleArgs',
    'ServicePrincipalFeatureArgs',
    'ServicePrincipalFeatureTagArgs',
    'ServicePrincipalOauth2PermissionScopeArgs',
    'ServicePrincipalSamlSingleSignOnArgs',
    'SynchronizationJobScheduleArgs',
    'SynchronizationSecretCredentialArgs',
]

@pulumi.input_type
class AccessPackageAssignmentPolicyApprovalSettingsArgs:
    def __init__(__self__, *,
                 approval_required: Optional[pulumi.Input[bool]] = None,
                 approval_required_for_extension: Optional[pulumi.Input[bool]] = None,
                 approval_stages: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs']]]] = None,
                 requestor_justification_required: Optional[pulumi.Input[bool]] = None):
        if approval_required is not None:
            pulumi.set(__self__, "approval_required", approval_required)
        if approval_required_for_extension is not None:
            pulumi.set(__self__, "approval_required_for_extension", approval_required_for_extension)
        if approval_stages is not None:
            pulumi.set(__self__, "approval_stages", approval_stages)
        if requestor_justification_required is not None:
            pulumi.set(__self__, "requestor_justification_required", requestor_justification_required)

    @property
    @pulumi.getter(name="approvalRequired")
    def approval_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "approval_required")

    @approval_required.setter
    def approval_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "approval_required", value)

    @property
    @pulumi.getter(name="approvalRequiredForExtension")
    def approval_required_for_extension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "approval_required_for_extension")

    @approval_required_for_extension.setter
    def approval_required_for_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "approval_required_for_extension", value)

    @property
    @pulumi.getter(name="approvalStages")
    def approval_stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs']]]]:
        return pulumi.get(self, "approval_stages")

    @approval_stages.setter
    def approval_stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs']]]]):
        pulumi.set(self, "approval_stages", value)

    @property
    @pulumi.getter(name="requestorJustificationRequired")
    def requestor_justification_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "requestor_justification_required")

    @requestor_justification_required.setter
    def requestor_justification_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requestor_justification_required", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs:
    def __init__(__self__, *,
                 approval_timeout_in_days: pulumi.Input[int],
                 alternative_approval_enabled: Optional[pulumi.Input[bool]] = None,
                 alternative_approvers: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs']]]] = None,
                 approver_justification_required: Optional[pulumi.Input[bool]] = None,
                 enable_alternative_approval_in_days: Optional[pulumi.Input[int]] = None,
                 primary_approvers: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs']]]] = None):
        pulumi.set(__self__, "approval_timeout_in_days", approval_timeout_in_days)
        if alternative_approval_enabled is not None:
            pulumi.set(__self__, "alternative_approval_enabled", alternative_approval_enabled)
        if alternative_approvers is not None:
            pulumi.set(__self__, "alternative_approvers", alternative_approvers)
        if approver_justification_required is not None:
            pulumi.set(__self__, "approver_justification_required", approver_justification_required)
        if enable_alternative_approval_in_days is not None:
            pulumi.set(__self__, "enable_alternative_approval_in_days", enable_alternative_approval_in_days)
        if primary_approvers is not None:
            pulumi.set(__self__, "primary_approvers", primary_approvers)

    @property
    @pulumi.getter(name="approvalTimeoutInDays")
    def approval_timeout_in_days(self) -> pulumi.Input[int]:
        return pulumi.get(self, "approval_timeout_in_days")

    @approval_timeout_in_days.setter
    def approval_timeout_in_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "approval_timeout_in_days", value)

    @property
    @pulumi.getter(name="alternativeApprovalEnabled")
    def alternative_approval_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alternative_approval_enabled")

    @alternative_approval_enabled.setter
    def alternative_approval_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alternative_approval_enabled", value)

    @property
    @pulumi.getter(name="alternativeApprovers")
    def alternative_approvers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs']]]]:
        return pulumi.get(self, "alternative_approvers")

    @alternative_approvers.setter
    def alternative_approvers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs']]]]):
        pulumi.set(self, "alternative_approvers", value)

    @property
    @pulumi.getter(name="approverJustificationRequired")
    def approver_justification_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "approver_justification_required")

    @approver_justification_required.setter
    def approver_justification_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "approver_justification_required", value)

    @property
    @pulumi.getter(name="enableAlternativeApprovalInDays")
    def enable_alternative_approval_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "enable_alternative_approval_in_days")

    @enable_alternative_approval_in_days.setter
    def enable_alternative_approval_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_alternative_approval_in_days", value)

    @property
    @pulumi.getter(name="primaryApprovers")
    def primary_approvers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs']]]]:
        return pulumi.get(self, "primary_approvers")

    @primary_approvers.setter
    def primary_approvers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs']]]]):
        pulumi.set(self, "primary_approvers", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyApprovalSettingsApprovalStageAlternativeApproverArgs:
    def __init__(__self__, *,
                 subject_type: pulumi.Input[str],
                 backup: Optional[pulumi.Input[bool]] = None,
                 object_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "subject_type", subject_type)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs:
    def __init__(__self__, *,
                 subject_type: pulumi.Input[str],
                 backup: Optional[pulumi.Input[bool]] = None,
                 object_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "subject_type", subject_type)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs:
    def __init__(__self__, *,
                 access_recommendation_enabled: Optional[pulumi.Input[bool]] = None,
                 access_review_timeout_behavior: Optional[pulumi.Input[str]] = None,
                 approver_justification_required: Optional[pulumi.Input[bool]] = None,
                 duration_in_days: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 review_frequency: Optional[pulumi.Input[str]] = None,
                 review_type: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs']]]] = None,
                 starting_on: Optional[pulumi.Input[str]] = None):
        if access_recommendation_enabled is not None:
            pulumi.set(__self__, "access_recommendation_enabled", access_recommendation_enabled)
        if access_review_timeout_behavior is not None:
            pulumi.set(__self__, "access_review_timeout_behavior", access_review_timeout_behavior)
        if approver_justification_required is not None:
            pulumi.set(__self__, "approver_justification_required", approver_justification_required)
        if duration_in_days is not None:
            pulumi.set(__self__, "duration_in_days", duration_in_days)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if review_frequency is not None:
            pulumi.set(__self__, "review_frequency", review_frequency)
        if review_type is not None:
            pulumi.set(__self__, "review_type", review_type)
        if reviewers is not None:
            pulumi.set(__self__, "reviewers", reviewers)
        if starting_on is not None:
            pulumi.set(__self__, "starting_on", starting_on)

    @property
    @pulumi.getter(name="accessRecommendationEnabled")
    def access_recommendation_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "access_recommendation_enabled")

    @access_recommendation_enabled.setter
    def access_recommendation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_recommendation_enabled", value)

    @property
    @pulumi.getter(name="accessReviewTimeoutBehavior")
    def access_review_timeout_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_review_timeout_behavior")

    @access_review_timeout_behavior.setter
    def access_review_timeout_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_review_timeout_behavior", value)

    @property
    @pulumi.getter(name="approverJustificationRequired")
    def approver_justification_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "approver_justification_required")

    @approver_justification_required.setter
    def approver_justification_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "approver_justification_required", value)

    @property
    @pulumi.getter(name="durationInDays")
    def duration_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_days")

    @duration_in_days.setter
    def duration_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_days", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="reviewFrequency")
    def review_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "review_frequency")

    @review_frequency.setter
    def review_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "review_frequency", value)

    @property
    @pulumi.getter(name="reviewType")
    def review_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "review_type")

    @review_type.setter
    def review_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "review_type", value)

    @property
    @pulumi.getter
    def reviewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs']]]]:
        return pulumi.get(self, "reviewers")

    @reviewers.setter
    def reviewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs']]]]):
        pulumi.set(self, "reviewers", value)

    @property
    @pulumi.getter(name="startingOn")
    def starting_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "starting_on")

    @starting_on.setter
    def starting_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_on", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs:
    def __init__(__self__, *,
                 subject_type: pulumi.Input[str],
                 backup: Optional[pulumi.Input[bool]] = None,
                 object_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "subject_type", subject_type)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionArgs:
    def __init__(__self__, *,
                 text: pulumi.Input['AccessPackageAssignmentPolicyQuestionTextArgs'],
                 choices: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceArgs']]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sequence: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "text", text)
        if choices is not None:
            pulumi.set(__self__, "choices", choices)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input['AccessPackageAssignmentPolicyQuestionTextArgs']:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input['AccessPackageAssignmentPolicyQuestionTextArgs']):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def choices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceArgs']]]]:
        return pulumi.get(self, "choices")

    @choices.setter
    def choices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceArgs']]]]):
        pulumi.set(self, "choices", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sequence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sequence", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionChoiceArgs:
    def __init__(__self__, *,
                 actual_value: pulumi.Input[str],
                 display_value: pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs']):
        pulumi.set(__self__, "actual_value", actual_value)
        pulumi.set(__self__, "display_value", display_value)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "actual_value")

    @actual_value.setter
    def actual_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "actual_value", value)

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs']:
        return pulumi.get(self, "display_value")

    @display_value.setter
    def display_value(self, value: pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs']):
        pulumi.set(self, "display_value", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs:
    def __init__(__self__, *,
                 default_text: pulumi.Input[str],
                 localized_texts: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedTextArgs']]]] = None):
        pulumi.set(__self__, "default_text", default_text)
        if localized_texts is not None:
            pulumi.set(__self__, "localized_texts", localized_texts)

    @property
    @pulumi.getter(name="defaultText")
    def default_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_text")

    @default_text.setter
    def default_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_text", value)

    @property
    @pulumi.getter(name="localizedTexts")
    def localized_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedTextArgs']]]]:
        return pulumi.get(self, "localized_texts")

    @localized_texts.setter
    def localized_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedTextArgs']]]]):
        pulumi.set(self, "localized_texts", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionChoiceDisplayValueLocalizedTextArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 language_code: pulumi.Input[str]):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "language_code", language_code)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "language_code", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionTextArgs:
    def __init__(__self__, *,
                 default_text: pulumi.Input[str],
                 localized_texts: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionTextLocalizedTextArgs']]]] = None):
        pulumi.set(__self__, "default_text", default_text)
        if localized_texts is not None:
            pulumi.set(__self__, "localized_texts", localized_texts)

    @property
    @pulumi.getter(name="defaultText")
    def default_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_text")

    @default_text.setter
    def default_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_text", value)

    @property
    @pulumi.getter(name="localizedTexts")
    def localized_texts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionTextLocalizedTextArgs']]]]:
        return pulumi.get(self, "localized_texts")

    @localized_texts.setter
    def localized_texts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyQuestionTextLocalizedTextArgs']]]]):
        pulumi.set(self, "localized_texts", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyQuestionTextLocalizedTextArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 language_code: pulumi.Input[str]):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "language_code", language_code)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "language_code", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyRequestorSettingsArgs:
    def __init__(__self__, *,
                 requestors: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyRequestorSettingsRequestorArgs']]]] = None,
                 requests_accepted: Optional[pulumi.Input[bool]] = None,
                 scope_type: Optional[pulumi.Input[str]] = None):
        if requestors is not None:
            pulumi.set(__self__, "requestors", requestors)
        if requests_accepted is not None:
            pulumi.set(__self__, "requests_accepted", requests_accepted)
        if scope_type is not None:
            pulumi.set(__self__, "scope_type", scope_type)

    @property
    @pulumi.getter
    def requestors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyRequestorSettingsRequestorArgs']]]]:
        return pulumi.get(self, "requestors")

    @requestors.setter
    def requestors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPackageAssignmentPolicyRequestorSettingsRequestorArgs']]]]):
        pulumi.set(self, "requestors", value)

    @property
    @pulumi.getter(name="requestsAccepted")
    def requests_accepted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "requests_accepted")

    @requests_accepted.setter
    def requests_accepted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requests_accepted", value)

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope_type")

    @scope_type.setter
    def scope_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_type", value)


@pulumi.input_type
class AccessPackageAssignmentPolicyRequestorSettingsRequestorArgs:
    def __init__(__self__, *,
                 subject_type: pulumi.Input[str],
                 backup: Optional[pulumi.Input[bool]] = None,
                 object_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "subject_type", subject_type)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject_type")

    @subject_type.setter
    def subject_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject_type", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)


@pulumi.input_type
class ApplicationApiArgs:
    def __init__(__self__, *,
                 known_client_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mapped_claims_enabled: Optional[pulumi.Input[bool]] = None,
                 oauth2_permission_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationApiOauth2PermissionScopeArgs']]]] = None,
                 requested_access_token_version: Optional[pulumi.Input[int]] = None):
        if known_client_applications is not None:
            pulumi.set(__self__, "known_client_applications", known_client_applications)
        if mapped_claims_enabled is not None:
            pulumi.set(__self__, "mapped_claims_enabled", mapped_claims_enabled)
        if oauth2_permission_scopes is not None:
            pulumi.set(__self__, "oauth2_permission_scopes", oauth2_permission_scopes)
        if requested_access_token_version is not None:
            pulumi.set(__self__, "requested_access_token_version", requested_access_token_version)

    @property
    @pulumi.getter(name="knownClientApplications")
    def known_client_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "known_client_applications")

    @known_client_applications.setter
    def known_client_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "known_client_applications", value)

    @property
    @pulumi.getter(name="mappedClaimsEnabled")
    def mapped_claims_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mapped_claims_enabled")

    @mapped_claims_enabled.setter
    def mapped_claims_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mapped_claims_enabled", value)

    @property
    @pulumi.getter(name="oauth2PermissionScopes")
    def oauth2_permission_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationApiOauth2PermissionScopeArgs']]]]:
        return pulumi.get(self, "oauth2_permission_scopes")

    @oauth2_permission_scopes.setter
    def oauth2_permission_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationApiOauth2PermissionScopeArgs']]]]):
        pulumi.set(self, "oauth2_permission_scopes", value)

    @property
    @pulumi.getter(name="requestedAccessTokenVersion")
    def requested_access_token_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "requested_access_token_version")

    @requested_access_token_version.setter
    def requested_access_token_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requested_access_token_version", value)


@pulumi.input_type
class ApplicationApiOauth2PermissionScopeArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 admin_consent_description: Optional[pulumi.Input[str]] = None,
                 admin_consent_display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_consent_description: Optional[pulumi.Input[str]] = None,
                 user_consent_display_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        if admin_consent_description is not None:
            pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        if admin_consent_display_name is not None:
            pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_consent_description is not None:
            pulumi.set(__self__, "user_consent_description", user_consent_description)
        if user_consent_display_name is not None:
            pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_consent_description")

    @admin_consent_description.setter
    def admin_consent_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_consent_description", value)

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_consent_display_name")

    @admin_consent_display_name.setter
    def admin_consent_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_consent_display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_consent_description")

    @user_consent_description.setter
    def user_consent_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_consent_description", value)

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_consent_display_name")

    @user_consent_display_name.setter
    def user_consent_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_consent_display_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationAppRoleArgs:
    def __init__(__self__, *,
                 allowed_member_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 id: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "allowed_member_types", allowed_member_types)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_member_types")

    @allowed_member_types.setter
    def allowed_member_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_member_types", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationFeatureTagArgs:
    def __init__(__self__, *,
                 custom_single_sign_on: Optional[pulumi.Input[bool]] = None,
                 enterprise: Optional[pulumi.Input[bool]] = None,
                 gallery: Optional[pulumi.Input[bool]] = None,
                 hide: Optional[pulumi.Input[bool]] = None):
        if custom_single_sign_on is not None:
            pulumi.set(__self__, "custom_single_sign_on", custom_single_sign_on)
        if enterprise is not None:
            pulumi.set(__self__, "enterprise", enterprise)
        if gallery is not None:
            pulumi.set(__self__, "gallery", gallery)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)

    @property
    @pulumi.getter(name="customSingleSignOn")
    def custom_single_sign_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_single_sign_on")

    @custom_single_sign_on.setter
    def custom_single_sign_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_single_sign_on", value)

    @property
    @pulumi.getter
    def enterprise(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enterprise")

    @enterprise.setter
    def enterprise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enterprise", value)

    @property
    @pulumi.getter
    def gallery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "gallery")

    @gallery.setter
    def gallery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gallery", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide", value)


@pulumi.input_type
class ApplicationOptionalClaimsArgs:
    def __init__(__self__, *,
                 access_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsAccessTokenArgs']]]] = None,
                 id_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsIdTokenArgs']]]] = None,
                 saml2_tokens: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsSaml2TokenArgs']]]] = None):
        if access_tokens is not None:
            pulumi.set(__self__, "access_tokens", access_tokens)
        if id_tokens is not None:
            pulumi.set(__self__, "id_tokens", id_tokens)
        if saml2_tokens is not None:
            pulumi.set(__self__, "saml2_tokens", saml2_tokens)

    @property
    @pulumi.getter(name="accessTokens")
    def access_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsAccessTokenArgs']]]]:
        return pulumi.get(self, "access_tokens")

    @access_tokens.setter
    def access_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsAccessTokenArgs']]]]):
        pulumi.set(self, "access_tokens", value)

    @property
    @pulumi.getter(name="idTokens")
    def id_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsIdTokenArgs']]]]:
        return pulumi.get(self, "id_tokens")

    @id_tokens.setter
    def id_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsIdTokenArgs']]]]):
        pulumi.set(self, "id_tokens", value)

    @property
    @pulumi.getter(name="saml2Tokens")
    def saml2_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsSaml2TokenArgs']]]]:
        return pulumi.get(self, "saml2_tokens")

    @saml2_tokens.setter
    def saml2_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationOptionalClaimsSaml2TokenArgs']]]]):
        pulumi.set(self, "saml2_tokens", value)


@pulumi.input_type
class ApplicationOptionalClaimsAccessTokenArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 essential: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter
    def essential(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "essential")

    @essential.setter
    def essential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "essential", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationOptionalClaimsIdTokenArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 essential: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter
    def essential(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "essential")

    @essential.setter
    def essential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "essential", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationOptionalClaimsSaml2TokenArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 essential: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if essential is not None:
            pulumi.set(__self__, "essential", essential)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter
    def essential(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "essential")

    @essential.setter
    def essential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "essential", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class ApplicationPublicClientArgs:
    def __init__(__self__, *,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)


@pulumi.input_type
class ApplicationRequiredResourceAccessArgs:
    def __init__(__self__, *,
                 resource_accesses: pulumi.Input[Sequence[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]],
                 resource_app_id: pulumi.Input[str]):
        pulumi.set(__self__, "resource_accesses", resource_accesses)
        pulumi.set(__self__, "resource_app_id", resource_app_id)

    @property
    @pulumi.getter(name="resourceAccesses")
    def resource_accesses(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]]:
        return pulumi.get(self, "resource_accesses")

    @resource_accesses.setter
    def resource_accesses(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationRequiredResourceAccessResourceAccessArgs']]]):
        pulumi.set(self, "resource_accesses", value)

    @property
    @pulumi.getter(name="resourceAppId")
    def resource_app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_app_id")

    @resource_app_id.setter
    def resource_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_app_id", value)


@pulumi.input_type
class ApplicationRequiredResourceAccessResourceAccessArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ApplicationSinglePageApplicationArgs:
    def __init__(__self__, *,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)


@pulumi.input_type
class ApplicationWebArgs:
    def __init__(__self__, *,
                 homepage_url: Optional[pulumi.Input[str]] = None,
                 implicit_grant: Optional[pulumi.Input['ApplicationWebImplicitGrantArgs']] = None,
                 logout_url: Optional[pulumi.Input[str]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if homepage_url is not None:
            pulumi.set(__self__, "homepage_url", homepage_url)
        if implicit_grant is not None:
            pulumi.set(__self__, "implicit_grant", implicit_grant)
        if logout_url is not None:
            pulumi.set(__self__, "logout_url", logout_url)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)

    @property
    @pulumi.getter(name="homepageUrl")
    def homepage_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "homepage_url")

    @homepage_url.setter
    def homepage_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "homepage_url", value)

    @property
    @pulumi.getter(name="implicitGrant")
    def implicit_grant(self) -> Optional[pulumi.Input['ApplicationWebImplicitGrantArgs']]:
        return pulumi.get(self, "implicit_grant")

    @implicit_grant.setter
    def implicit_grant(self, value: Optional[pulumi.Input['ApplicationWebImplicitGrantArgs']]):
        pulumi.set(self, "implicit_grant", value)

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logout_url")

    @logout_url.setter
    def logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_url", value)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)


@pulumi.input_type
class ApplicationWebImplicitGrantArgs:
    def __init__(__self__, *,
                 access_token_issuance_enabled: Optional[pulumi.Input[bool]] = None,
                 id_token_issuance_enabled: Optional[pulumi.Input[bool]] = None):
        if access_token_issuance_enabled is not None:
            pulumi.set(__self__, "access_token_issuance_enabled", access_token_issuance_enabled)
        if id_token_issuance_enabled is not None:
            pulumi.set(__self__, "id_token_issuance_enabled", id_token_issuance_enabled)

    @property
    @pulumi.getter(name="accessTokenIssuanceEnabled")
    def access_token_issuance_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "access_token_issuance_enabled")

    @access_token_issuance_enabled.setter
    def access_token_issuance_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_token_issuance_enabled", value)

    @property
    @pulumi.getter(name="idTokenIssuanceEnabled")
    def id_token_issuance_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "id_token_issuance_enabled")

    @id_token_issuance_enabled.setter
    def id_token_issuance_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "id_token_issuance_enabled", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input['ConditionalAccessPolicyConditionsApplicationsArgs'],
                 client_app_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 users: pulumi.Input['ConditionalAccessPolicyConditionsUsersArgs'],
                 client_applications: Optional[pulumi.Input['ConditionalAccessPolicyConditionsClientApplicationsArgs']] = None,
                 devices: Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesArgs']] = None,
                 locations: Optional[pulumi.Input['ConditionalAccessPolicyConditionsLocationsArgs']] = None,
                 platforms: Optional[pulumi.Input['ConditionalAccessPolicyConditionsPlatformsArgs']] = None,
                 sign_in_risk_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_risk_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "client_app_types", client_app_types)
        pulumi.set(__self__, "users", users)
        if client_applications is not None:
            pulumi.set(__self__, "client_applications", client_applications)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if platforms is not None:
            pulumi.set(__self__, "platforms", platforms)
        if sign_in_risk_levels is not None:
            pulumi.set(__self__, "sign_in_risk_levels", sign_in_risk_levels)
        if user_risk_levels is not None:
            pulumi.set(__self__, "user_risk_levels", user_risk_levels)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Input['ConditionalAccessPolicyConditionsApplicationsArgs']:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input['ConditionalAccessPolicyConditionsApplicationsArgs']):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="clientAppTypes")
    def client_app_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "client_app_types")

    @client_app_types.setter
    def client_app_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "client_app_types", value)

    @property
    @pulumi.getter
    def users(self) -> pulumi.Input['ConditionalAccessPolicyConditionsUsersArgs']:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input['ConditionalAccessPolicyConditionsUsersArgs']):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="clientApplications")
    def client_applications(self) -> Optional[pulumi.Input['ConditionalAccessPolicyConditionsClientApplicationsArgs']]:
        return pulumi.get(self, "client_applications")

    @client_applications.setter
    def client_applications(self, value: Optional[pulumi.Input['ConditionalAccessPolicyConditionsClientApplicationsArgs']]):
        pulumi.set(self, "client_applications", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesArgs']]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ConditionalAccessPolicyConditionsLocationsArgs']]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ConditionalAccessPolicyConditionsLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def platforms(self) -> Optional[pulumi.Input['ConditionalAccessPolicyConditionsPlatformsArgs']]:
        return pulumi.get(self, "platforms")

    @platforms.setter
    def platforms(self, value: Optional[pulumi.Input['ConditionalAccessPolicyConditionsPlatformsArgs']]):
        pulumi.set(self, "platforms", value)

    @property
    @pulumi.getter(name="signInRiskLevels")
    def sign_in_risk_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sign_in_risk_levels")

    @sign_in_risk_levels.setter
    def sign_in_risk_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sign_in_risk_levels", value)

    @property
    @pulumi.getter(name="userRiskLevels")
    def user_risk_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_risk_levels")

    @user_risk_levels.setter
    def user_risk_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_risk_levels", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsApplicationsArgs:
    def __init__(__self__, *,
                 excluded_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_user_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if excluded_applications is not None:
            pulumi.set(__self__, "excluded_applications", excluded_applications)
        if included_applications is not None:
            pulumi.set(__self__, "included_applications", included_applications)
        if included_user_actions is not None:
            pulumi.set(__self__, "included_user_actions", included_user_actions)

    @property
    @pulumi.getter(name="excludedApplications")
    def excluded_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_applications")

    @excluded_applications.setter
    def excluded_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_applications", value)

    @property
    @pulumi.getter(name="includedApplications")
    def included_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_applications")

    @included_applications.setter
    def included_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_applications", value)

    @property
    @pulumi.getter(name="includedUserActions")
    def included_user_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_user_actions")

    @included_user_actions.setter
    def included_user_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_user_actions", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsClientApplicationsArgs:
    def __init__(__self__, *,
                 excluded_service_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_service_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if excluded_service_principals is not None:
            pulumi.set(__self__, "excluded_service_principals", excluded_service_principals)
        if included_service_principals is not None:
            pulumi.set(__self__, "included_service_principals", included_service_principals)

    @property
    @pulumi.getter(name="excludedServicePrincipals")
    def excluded_service_principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_service_principals")

    @excluded_service_principals.setter
    def excluded_service_principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_service_principals", value)

    @property
    @pulumi.getter(name="includedServicePrincipals")
    def included_service_principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_service_principals")

    @included_service_principals.setter
    def included_service_principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_service_principals", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsDevicesArgs:
    def __init__(__self__, *,
                 filter: Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesFilterArgs']] = None):
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesFilterArgs']]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['ConditionalAccessPolicyConditionsDevicesFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsDevicesFilterArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 rule: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsLocationsArgs:
    def __init__(__self__, *,
                 included_locations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 excluded_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "included_locations", included_locations)
        if excluded_locations is not None:
            pulumi.set(__self__, "excluded_locations", excluded_locations)

    @property
    @pulumi.getter(name="includedLocations")
    def included_locations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "included_locations")

    @included_locations.setter
    def included_locations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "included_locations", value)

    @property
    @pulumi.getter(name="excludedLocations")
    def excluded_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_locations")

    @excluded_locations.setter
    def excluded_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_locations", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsPlatformsArgs:
    def __init__(__self__, *,
                 included_platforms: pulumi.Input[Sequence[pulumi.Input[str]]],
                 excluded_platforms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "included_platforms", included_platforms)
        if excluded_platforms is not None:
            pulumi.set(__self__, "excluded_platforms", excluded_platforms)

    @property
    @pulumi.getter(name="includedPlatforms")
    def included_platforms(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "included_platforms")

    @included_platforms.setter
    def included_platforms(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "included_platforms", value)

    @property
    @pulumi.getter(name="excludedPlatforms")
    def excluded_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_platforms")

    @excluded_platforms.setter
    def excluded_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_platforms", value)


@pulumi.input_type
class ConditionalAccessPolicyConditionsUsersArgs:
    def __init__(__self__, *,
                 excluded_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 included_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_roles is not None:
            pulumi.set(__self__, "excluded_roles", excluded_roles)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if included_groups is not None:
            pulumi.set(__self__, "included_groups", included_groups)
        if included_roles is not None:
            pulumi.set(__self__, "included_roles", included_roles)
        if included_users is not None:
            pulumi.set(__self__, "included_users", included_users)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedRoles")
    def excluded_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_roles")

    @excluded_roles.setter
    def excluded_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_roles", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="includedGroups")
    def included_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_groups")

    @included_groups.setter
    def included_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_groups", value)

    @property
    @pulumi.getter(name="includedRoles")
    def included_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_roles")

    @included_roles.setter
    def included_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_roles", value)

    @property
    @pulumi.getter(name="includedUsers")
    def included_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_users")

    @included_users.setter
    def included_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_users", value)


@pulumi.input_type
class ConditionalAccessPolicyGrantControlsArgs:
    def __init__(__self__, *,
                 built_in_controls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 operator: pulumi.Input[str],
                 custom_authentication_factors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 terms_of_uses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "built_in_controls", built_in_controls)
        pulumi.set(__self__, "operator", operator)
        if custom_authentication_factors is not None:
            pulumi.set(__self__, "custom_authentication_factors", custom_authentication_factors)
        if terms_of_uses is not None:
            pulumi.set(__self__, "terms_of_uses", terms_of_uses)

    @property
    @pulumi.getter(name="builtInControls")
    def built_in_controls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "built_in_controls")

    @built_in_controls.setter
    def built_in_controls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "built_in_controls", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="customAuthenticationFactors")
    def custom_authentication_factors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_authentication_factors")

    @custom_authentication_factors.setter
    def custom_authentication_factors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_authentication_factors", value)

    @property
    @pulumi.getter(name="termsOfUses")
    def terms_of_uses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "terms_of_uses")

    @terms_of_uses.setter
    def terms_of_uses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "terms_of_uses", value)


@pulumi.input_type
class ConditionalAccessPolicySessionControlsArgs:
    def __init__(__self__, *,
                 application_enforced_restrictions_enabled: Optional[pulumi.Input[bool]] = None,
                 cloud_app_security_policy: Optional[pulumi.Input[str]] = None,
                 disable_resilience_defaults: Optional[pulumi.Input[bool]] = None,
                 persistent_browser_mode: Optional[pulumi.Input[str]] = None,
                 sign_in_frequency: Optional[pulumi.Input[int]] = None,
                 sign_in_frequency_period: Optional[pulumi.Input[str]] = None):
        if application_enforced_restrictions_enabled is not None:
            pulumi.set(__self__, "application_enforced_restrictions_enabled", application_enforced_restrictions_enabled)
        if cloud_app_security_policy is not None:
            pulumi.set(__self__, "cloud_app_security_policy", cloud_app_security_policy)
        if disable_resilience_defaults is not None:
            pulumi.set(__self__, "disable_resilience_defaults", disable_resilience_defaults)
        if persistent_browser_mode is not None:
            pulumi.set(__self__, "persistent_browser_mode", persistent_browser_mode)
        if sign_in_frequency is not None:
            pulumi.set(__self__, "sign_in_frequency", sign_in_frequency)
        if sign_in_frequency_period is not None:
            pulumi.set(__self__, "sign_in_frequency_period", sign_in_frequency_period)

    @property
    @pulumi.getter(name="applicationEnforcedRestrictionsEnabled")
    def application_enforced_restrictions_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "application_enforced_restrictions_enabled")

    @application_enforced_restrictions_enabled.setter
    def application_enforced_restrictions_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "application_enforced_restrictions_enabled", value)

    @property
    @pulumi.getter(name="cloudAppSecurityPolicy")
    def cloud_app_security_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_app_security_policy")

    @cloud_app_security_policy.setter
    def cloud_app_security_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_app_security_policy", value)

    @property
    @pulumi.getter(name="disableResilienceDefaults")
    def disable_resilience_defaults(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_resilience_defaults")

    @disable_resilience_defaults.setter
    def disable_resilience_defaults(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_resilience_defaults", value)

    @property
    @pulumi.getter(name="persistentBrowserMode")
    def persistent_browser_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persistent_browser_mode")

    @persistent_browser_mode.setter
    def persistent_browser_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_browser_mode", value)

    @property
    @pulumi.getter(name="signInFrequency")
    def sign_in_frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sign_in_frequency")

    @sign_in_frequency.setter
    def sign_in_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sign_in_frequency", value)

    @property
    @pulumi.getter(name="signInFrequencyPeriod")
    def sign_in_frequency_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sign_in_frequency_period")

    @sign_in_frequency_period.setter
    def sign_in_frequency_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_frequency_period", value)


@pulumi.input_type
class CustomDirectoryRolePermissionArgs:
    def __init__(__self__, *,
                 allowed_resource_actions: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "allowed_resource_actions", allowed_resource_actions)

    @property
    @pulumi.getter(name="allowedResourceActions")
    def allowed_resource_actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_resource_actions")

    @allowed_resource_actions.setter
    def allowed_resource_actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_resource_actions", value)


@pulumi.input_type
class GroupDynamicMembershipArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 rule: pulumi.Input[str]):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class InvitationMessageArgs:
    def __init__(__self__, *,
                 additional_recipients: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None):
        if additional_recipients is not None:
            pulumi.set(__self__, "additional_recipients", additional_recipients)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @property
    @pulumi.getter(name="additionalRecipients")
    def additional_recipients(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_recipients")

    @additional_recipients.setter
    def additional_recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_recipients", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)


@pulumi.input_type
class NamedLocationCountryArgs:
    def __init__(__self__, *,
                 countries_and_regions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 include_unknown_countries_and_regions: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "countries_and_regions", countries_and_regions)
        if include_unknown_countries_and_regions is not None:
            pulumi.set(__self__, "include_unknown_countries_and_regions", include_unknown_countries_and_regions)

    @property
    @pulumi.getter(name="countriesAndRegions")
    def countries_and_regions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "countries_and_regions")

    @countries_and_regions.setter
    def countries_and_regions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "countries_and_regions", value)

    @property
    @pulumi.getter(name="includeUnknownCountriesAndRegions")
    def include_unknown_countries_and_regions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_unknown_countries_and_regions")

    @include_unknown_countries_and_regions.setter
    def include_unknown_countries_and_regions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_unknown_countries_and_regions", value)


@pulumi.input_type
class NamedLocationIpArgs:
    def __init__(__self__, *,
                 ip_ranges: pulumi.Input[Sequence[pulumi.Input[str]]],
                 trusted: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted", value)


@pulumi.input_type
class ServicePrincipalAppRoleArgs:
    def __init__(__self__, *,
                 allowed_member_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if allowed_member_types is not None:
            pulumi.set(__self__, "allowed_member_types", allowed_member_types)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedMemberTypes")
    def allowed_member_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_member_types")

    @allowed_member_types.setter
    def allowed_member_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_member_types", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServicePrincipalFeatureArgs:
    def __init__(__self__, *,
                 custom_single_sign_on_app: Optional[pulumi.Input[bool]] = None,
                 enterprise_application: Optional[pulumi.Input[bool]] = None,
                 gallery_application: Optional[pulumi.Input[bool]] = None,
                 visible_to_users: Optional[pulumi.Input[bool]] = None):
        if custom_single_sign_on_app is not None:
            pulumi.set(__self__, "custom_single_sign_on_app", custom_single_sign_on_app)
        if enterprise_application is not None:
            pulumi.set(__self__, "enterprise_application", enterprise_application)
        if gallery_application is not None:
            pulumi.set(__self__, "gallery_application", gallery_application)
        if visible_to_users is not None:
            pulumi.set(__self__, "visible_to_users", visible_to_users)

    @property
    @pulumi.getter(name="customSingleSignOnApp")
    def custom_single_sign_on_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_single_sign_on_app")

    @custom_single_sign_on_app.setter
    def custom_single_sign_on_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_single_sign_on_app", value)

    @property
    @pulumi.getter(name="enterpriseApplication")
    def enterprise_application(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enterprise_application")

    @enterprise_application.setter
    def enterprise_application(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enterprise_application", value)

    @property
    @pulumi.getter(name="galleryApplication")
    def gallery_application(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "gallery_application")

    @gallery_application.setter
    def gallery_application(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gallery_application", value)

    @property
    @pulumi.getter(name="visibleToUsers")
    def visible_to_users(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "visible_to_users")

    @visible_to_users.setter
    def visible_to_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible_to_users", value)


@pulumi.input_type
class ServicePrincipalFeatureTagArgs:
    def __init__(__self__, *,
                 custom_single_sign_on: Optional[pulumi.Input[bool]] = None,
                 enterprise: Optional[pulumi.Input[bool]] = None,
                 gallery: Optional[pulumi.Input[bool]] = None,
                 hide: Optional[pulumi.Input[bool]] = None):
        if custom_single_sign_on is not None:
            pulumi.set(__self__, "custom_single_sign_on", custom_single_sign_on)
        if enterprise is not None:
            pulumi.set(__self__, "enterprise", enterprise)
        if gallery is not None:
            pulumi.set(__self__, "gallery", gallery)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)

    @property
    @pulumi.getter(name="customSingleSignOn")
    def custom_single_sign_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_single_sign_on")

    @custom_single_sign_on.setter
    def custom_single_sign_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_single_sign_on", value)

    @property
    @pulumi.getter
    def enterprise(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enterprise")

    @enterprise.setter
    def enterprise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enterprise", value)

    @property
    @pulumi.getter
    def gallery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "gallery")

    @gallery.setter
    def gallery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gallery", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide", value)


@pulumi.input_type
class ServicePrincipalOauth2PermissionScopeArgs:
    def __init__(__self__, *,
                 admin_consent_description: Optional[pulumi.Input[str]] = None,
                 admin_consent_display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_consent_description: Optional[pulumi.Input[str]] = None,
                 user_consent_display_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if admin_consent_description is not None:
            pulumi.set(__self__, "admin_consent_description", admin_consent_description)
        if admin_consent_display_name is not None:
            pulumi.set(__self__, "admin_consent_display_name", admin_consent_display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_consent_description is not None:
            pulumi.set(__self__, "user_consent_description", user_consent_description)
        if user_consent_display_name is not None:
            pulumi.set(__self__, "user_consent_display_name", user_consent_display_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="adminConsentDescription")
    def admin_consent_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_consent_description")

    @admin_consent_description.setter
    def admin_consent_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_consent_description", value)

    @property
    @pulumi.getter(name="adminConsentDisplayName")
    def admin_consent_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_consent_display_name")

    @admin_consent_display_name.setter
    def admin_consent_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_consent_display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userConsentDescription")
    def user_consent_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_consent_description")

    @user_consent_description.setter
    def user_consent_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_consent_description", value)

    @property
    @pulumi.getter(name="userConsentDisplayName")
    def user_consent_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_consent_display_name")

    @user_consent_display_name.setter
    def user_consent_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_consent_display_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServicePrincipalSamlSingleSignOnArgs:
    def __init__(__self__, *,
                 relay_state: Optional[pulumi.Input[str]] = None):
        if relay_state is not None:
            pulumi.set(__self__, "relay_state", relay_state)

    @property
    @pulumi.getter(name="relayState")
    def relay_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "relay_state")

    @relay_state.setter
    def relay_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relay_state", value)


@pulumi.input_type
class SynchronizationJobScheduleArgs:
    def __init__(__self__, *,
                 expiration: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class SynchronizationSecretCredentialArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


