// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SynchronizationJobScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SynchronizationJobScheduleArgs Empty = new SynchronizationJobScheduleArgs();

    /**
     * Date and time when this job will expire, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<String> expiration;

    /**
     * @return Date and time when this job will expire, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     * 
     */
    public Optional<Output<String>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * The interval between synchronization iterations ISO8601. E.g. PT40M run every 40 minutes.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<String> interval;

    /**
     * @return The interval between synchronization iterations ISO8601. E.g. PT40M run every 40 minutes.
     * 
     */
    public Optional<Output<String>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * State of the job.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the job.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private SynchronizationJobScheduleArgs() {}

    private SynchronizationJobScheduleArgs(SynchronizationJobScheduleArgs $) {
        this.expiration = $.expiration;
        this.interval = $.interval;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SynchronizationJobScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SynchronizationJobScheduleArgs $;

        public Builder() {
            $ = new SynchronizationJobScheduleArgs();
        }

        public Builder(SynchronizationJobScheduleArgs defaults) {
            $ = new SynchronizationJobScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expiration Date and time when this job will expire, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<String> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration Date and time when this job will expire, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
         * 
         * @return builder
         * 
         */
        public Builder expiration(String expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param interval The interval between synchronization iterations ISO8601. E.g. PT40M run every 40 minutes.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<String> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The interval between synchronization iterations ISO8601. E.g. PT40M run every 40 minutes.
         * 
         * @return builder
         * 
         */
        public Builder interval(String interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param state State of the job.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the job.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public SynchronizationJobScheduleArgs build() {
            return $;
        }
    }

}
