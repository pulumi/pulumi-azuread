// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationRegistrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationRegistrationArgs Empty = new ApplicationRegistrationArgs();

    /**
     * A description of the application, as shown to end users.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the application, as shown to end users.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name for the application.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name for the application.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
     * 
     */
    @Import(name="groupMembershipClaims")
    private @Nullable Output<List<String>> groupMembershipClaims;

    /**
     * @return Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
     * 
     */
    public Optional<Output<List<String>>> groupMembershipClaims() {
        return Optional.ofNullable(this.groupMembershipClaims);
    }

    /**
     * Home page or landing page of the application.
     * 
     */
    @Import(name="homepageUrl")
    private @Nullable Output<String> homepageUrl;

    /**
     * @return Home page or landing page of the application.
     * 
     */
    public Optional<Output<String>> homepageUrl() {
        return Optional.ofNullable(this.homepageUrl);
    }

    /**
     * Whether this web application can request an access token using OAuth implicit flow.
     * 
     */
    @Import(name="implicitAccessTokenIssuanceEnabled")
    private @Nullable Output<Boolean> implicitAccessTokenIssuanceEnabled;

    /**
     * @return Whether this web application can request an access token using OAuth implicit flow.
     * 
     */
    public Optional<Output<Boolean>> implicitAccessTokenIssuanceEnabled() {
        return Optional.ofNullable(this.implicitAccessTokenIssuanceEnabled);
    }

    /**
     * Whether this web application can request an ID token using OAuth implicit flow.
     * 
     */
    @Import(name="implicitIdTokenIssuanceEnabled")
    private @Nullable Output<Boolean> implicitIdTokenIssuanceEnabled;

    /**
     * @return Whether this web application can request an ID token using OAuth implicit flow.
     * 
     */
    public Optional<Output<Boolean>> implicitIdTokenIssuanceEnabled() {
        return Optional.ofNullable(this.implicitIdTokenIssuanceEnabled);
    }

    /**
     * The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    @Import(name="logoutUrl")
    private @Nullable Output<String> logoutUrl;

    /**
     * @return The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    public Optional<Output<String>> logoutUrl() {
        return Optional.ofNullable(this.logoutUrl);
    }

    /**
     * URL of the marketing page for the application.
     * 
     */
    @Import(name="marketingUrl")
    private @Nullable Output<String> marketingUrl;

    /**
     * @return URL of the marketing page for the application.
     * 
     */
    public Optional<Output<String>> marketingUrl() {
        return Optional.ofNullable(this.marketingUrl);
    }

    /**
     * User-specified notes relevant for the management of the application.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return User-specified notes relevant for the management of the application.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * URL of the privacy statement for the application.
     * 
     */
    @Import(name="privacyStatementUrl")
    private @Nullable Output<String> privacyStatementUrl;

    /**
     * @return URL of the privacy statement for the application.
     * 
     */
    public Optional<Output<String>> privacyStatementUrl() {
        return Optional.ofNullable(this.privacyStatementUrl);
    }

    /**
     * The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.
     * 
     */
    @Import(name="requestedAccessTokenVersion")
    private @Nullable Output<Integer> requestedAccessTokenVersion;

    /**
     * @return The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.
     * 
     */
    public Optional<Output<Integer>> requestedAccessTokenVersion() {
        return Optional.ofNullable(this.requestedAccessTokenVersion);
    }

    /**
     * References application context information from a Service or Asset Management database.
     * 
     */
    @Import(name="serviceManagementReference")
    private @Nullable Output<String> serviceManagementReference;

    /**
     * @return References application context information from a Service or Asset Management database.
     * 
     */
    public Optional<Output<String>> serviceManagementReference() {
        return Optional.ofNullable(this.serviceManagementReference);
    }

    /**
     * The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
     * 
     */
    @Import(name="signInAudience")
    private @Nullable Output<String> signInAudience;

    /**
     * @return The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
     * 
     */
    public Optional<Output<String>> signInAudience() {
        return Optional.ofNullable(this.signInAudience);
    }

    /**
     * URL of the support page for the application.
     * 
     */
    @Import(name="supportUrl")
    private @Nullable Output<String> supportUrl;

    /**
     * @return URL of the support page for the application.
     * 
     */
    public Optional<Output<String>> supportUrl() {
        return Optional.ofNullable(this.supportUrl);
    }

    /**
     * URL of the terms of service statement for the application.
     * 
     */
    @Import(name="termsOfServiceUrl")
    private @Nullable Output<String> termsOfServiceUrl;

    /**
     * @return URL of the terms of service statement for the application.
     * 
     */
    public Optional<Output<String>> termsOfServiceUrl() {
        return Optional.ofNullable(this.termsOfServiceUrl);
    }

    private ApplicationRegistrationArgs() {}

    private ApplicationRegistrationArgs(ApplicationRegistrationArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.groupMembershipClaims = $.groupMembershipClaims;
        this.homepageUrl = $.homepageUrl;
        this.implicitAccessTokenIssuanceEnabled = $.implicitAccessTokenIssuanceEnabled;
        this.implicitIdTokenIssuanceEnabled = $.implicitIdTokenIssuanceEnabled;
        this.logoutUrl = $.logoutUrl;
        this.marketingUrl = $.marketingUrl;
        this.notes = $.notes;
        this.privacyStatementUrl = $.privacyStatementUrl;
        this.requestedAccessTokenVersion = $.requestedAccessTokenVersion;
        this.serviceManagementReference = $.serviceManagementReference;
        this.signInAudience = $.signInAudience;
        this.supportUrl = $.supportUrl;
        this.termsOfServiceUrl = $.termsOfServiceUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationRegistrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationRegistrationArgs $;

        public Builder() {
            $ = new ApplicationRegistrationArgs();
        }

        public Builder(ApplicationRegistrationArgs defaults) {
            $ = new ApplicationRegistrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the application, as shown to end users.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the application, as shown to end users.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name for the application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the application.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param groupMembershipClaims Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder groupMembershipClaims(@Nullable Output<List<String>> groupMembershipClaims) {
            $.groupMembershipClaims = groupMembershipClaims;
            return this;
        }

        /**
         * @param groupMembershipClaims Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder groupMembershipClaims(List<String> groupMembershipClaims) {
            return groupMembershipClaims(Output.of(groupMembershipClaims));
        }

        /**
         * @param groupMembershipClaims Configures the `groups` claim issued in a user or OAuth access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
         * 
         * @return builder
         * 
         */
        public Builder groupMembershipClaims(String... groupMembershipClaims) {
            return groupMembershipClaims(List.of(groupMembershipClaims));
        }

        /**
         * @param homepageUrl Home page or landing page of the application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(@Nullable Output<String> homepageUrl) {
            $.homepageUrl = homepageUrl;
            return this;
        }

        /**
         * @param homepageUrl Home page or landing page of the application.
         * 
         * @return builder
         * 
         */
        public Builder homepageUrl(String homepageUrl) {
            return homepageUrl(Output.of(homepageUrl));
        }

        /**
         * @param implicitAccessTokenIssuanceEnabled Whether this web application can request an access token using OAuth implicit flow.
         * 
         * @return builder
         * 
         */
        public Builder implicitAccessTokenIssuanceEnabled(@Nullable Output<Boolean> implicitAccessTokenIssuanceEnabled) {
            $.implicitAccessTokenIssuanceEnabled = implicitAccessTokenIssuanceEnabled;
            return this;
        }

        /**
         * @param implicitAccessTokenIssuanceEnabled Whether this web application can request an access token using OAuth implicit flow.
         * 
         * @return builder
         * 
         */
        public Builder implicitAccessTokenIssuanceEnabled(Boolean implicitAccessTokenIssuanceEnabled) {
            return implicitAccessTokenIssuanceEnabled(Output.of(implicitAccessTokenIssuanceEnabled));
        }

        /**
         * @param implicitIdTokenIssuanceEnabled Whether this web application can request an ID token using OAuth implicit flow.
         * 
         * @return builder
         * 
         */
        public Builder implicitIdTokenIssuanceEnabled(@Nullable Output<Boolean> implicitIdTokenIssuanceEnabled) {
            $.implicitIdTokenIssuanceEnabled = implicitIdTokenIssuanceEnabled;
            return this;
        }

        /**
         * @param implicitIdTokenIssuanceEnabled Whether this web application can request an ID token using OAuth implicit flow.
         * 
         * @return builder
         * 
         */
        public Builder implicitIdTokenIssuanceEnabled(Boolean implicitIdTokenIssuanceEnabled) {
            return implicitIdTokenIssuanceEnabled(Output.of(implicitIdTokenIssuanceEnabled));
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(@Nullable Output<String> logoutUrl) {
            $.logoutUrl = logoutUrl;
            return this;
        }

        /**
         * @param logoutUrl The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(String logoutUrl) {
            return logoutUrl(Output.of(logoutUrl));
        }

        /**
         * @param marketingUrl URL of the marketing page for the application.
         * 
         * @return builder
         * 
         */
        public Builder marketingUrl(@Nullable Output<String> marketingUrl) {
            $.marketingUrl = marketingUrl;
            return this;
        }

        /**
         * @param marketingUrl URL of the marketing page for the application.
         * 
         * @return builder
         * 
         */
        public Builder marketingUrl(String marketingUrl) {
            return marketingUrl(Output.of(marketingUrl));
        }

        /**
         * @param notes User-specified notes relevant for the management of the application.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes User-specified notes relevant for the management of the application.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param privacyStatementUrl URL of the privacy statement for the application.
         * 
         * @return builder
         * 
         */
        public Builder privacyStatementUrl(@Nullable Output<String> privacyStatementUrl) {
            $.privacyStatementUrl = privacyStatementUrl;
            return this;
        }

        /**
         * @param privacyStatementUrl URL of the privacy statement for the application.
         * 
         * @return builder
         * 
         */
        public Builder privacyStatementUrl(String privacyStatementUrl) {
            return privacyStatementUrl(Output.of(privacyStatementUrl));
        }

        /**
         * @param requestedAccessTokenVersion The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.
         * 
         * @return builder
         * 
         */
        public Builder requestedAccessTokenVersion(@Nullable Output<Integer> requestedAccessTokenVersion) {
            $.requestedAccessTokenVersion = requestedAccessTokenVersion;
            return this;
        }

        /**
         * @param requestedAccessTokenVersion The access token version expected by this resource. Must be one of `1` or `2`, and must be `2` when `sign_in_audience` is either `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount` Defaults to `2`.
         * 
         * @return builder
         * 
         */
        public Builder requestedAccessTokenVersion(Integer requestedAccessTokenVersion) {
            return requestedAccessTokenVersion(Output.of(requestedAccessTokenVersion));
        }

        /**
         * @param serviceManagementReference References application context information from a Service or Asset Management database.
         * 
         * @return builder
         * 
         */
        public Builder serviceManagementReference(@Nullable Output<String> serviceManagementReference) {
            $.serviceManagementReference = serviceManagementReference;
            return this;
        }

        /**
         * @param serviceManagementReference References application context information from a Service or Asset Management database.
         * 
         * @return builder
         * 
         */
        public Builder serviceManagementReference(String serviceManagementReference) {
            return serviceManagementReference(Output.of(serviceManagementReference));
        }

        /**
         * @param signInAudience The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
         * 
         * @return builder
         * 
         */
        public Builder signInAudience(@Nullable Output<String> signInAudience) {
            $.signInAudience = signInAudience;
            return this;
        }

        /**
         * @param signInAudience The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
         * 
         * @return builder
         * 
         */
        public Builder signInAudience(String signInAudience) {
            return signInAudience(Output.of(signInAudience));
        }

        /**
         * @param supportUrl URL of the support page for the application.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(@Nullable Output<String> supportUrl) {
            $.supportUrl = supportUrl;
            return this;
        }

        /**
         * @param supportUrl URL of the support page for the application.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(String supportUrl) {
            return supportUrl(Output.of(supportUrl));
        }

        /**
         * @param termsOfServiceUrl URL of the terms of service statement for the application.
         * 
         * @return builder
         * 
         */
        public Builder termsOfServiceUrl(@Nullable Output<String> termsOfServiceUrl) {
            $.termsOfServiceUrl = termsOfServiceUrl;
            return this;
        }

        /**
         * @param termsOfServiceUrl URL of the terms of service statement for the application.
         * 
         * @return builder
         * 
         */
        public Builder termsOfServiceUrl(String termsOfServiceUrl) {
            return termsOfServiceUrl(Output.of(termsOfServiceUrl));
        }

        public ApplicationRegistrationArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("ApplicationRegistrationArgs", "displayName");
            }
            return $;
        }
    }

}
