// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    /**
     * @return Whether or not the account is enabled.
     * 
     */
    private Boolean accountEnabled;
    /**
     * @return The display name of the user.
     * 
     */
    private String displayName;
    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    private String employeeId;
    /**
     * @return The primary email address of the user.
     * 
     */
    private String mail;
    /**
     * @return The email alias of the user.
     * 
     */
    private String mailNickname;
    /**
     * @return The object ID of the user.
     * 
     */
    private String objectId;
    /**
     * @return The value used to associate an on-premises Active Directory user account with their Azure AD user object.
     * 
     */
    private String onpremisesImmutableId;
    /**
     * @return The on-premise SAM account name of the user.
     * 
     */
    private String onpremisesSamAccountName;
    /**
     * @return The on-premise user principal name of the user.
     * 
     */
    private String onpremisesUserPrincipalName;
    /**
     * @return The usage location of the user.
     * 
     */
    private String usageLocation;
    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    private String userPrincipalName;

    private GetUsersUser() {}
    /**
     * @return Whether or not the account is enabled.
     * 
     */
    public Boolean accountEnabled() {
        return this.accountEnabled;
    }
    /**
     * @return The display name of the user.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    public String employeeId() {
        return this.employeeId;
    }
    /**
     * @return The primary email address of the user.
     * 
     */
    public String mail() {
        return this.mail;
    }
    /**
     * @return The email alias of the user.
     * 
     */
    public String mailNickname() {
        return this.mailNickname;
    }
    /**
     * @return The object ID of the user.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return The value used to associate an on-premises Active Directory user account with their Azure AD user object.
     * 
     */
    public String onpremisesImmutableId() {
        return this.onpremisesImmutableId;
    }
    /**
     * @return The on-premise SAM account name of the user.
     * 
     */
    public String onpremisesSamAccountName() {
        return this.onpremisesSamAccountName;
    }
    /**
     * @return The on-premise user principal name of the user.
     * 
     */
    public String onpremisesUserPrincipalName() {
        return this.onpremisesUserPrincipalName;
    }
    /**
     * @return The usage location of the user.
     * 
     */
    public String usageLocation() {
        return this.usageLocation;
    }
    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accountEnabled;
        private String displayName;
        private String employeeId;
        private String mail;
        private String mailNickname;
        private String objectId;
        private String onpremisesImmutableId;
        private String onpremisesSamAccountName;
        private String onpremisesUserPrincipalName;
        private String usageLocation;
        private String userPrincipalName;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.displayName = defaults.displayName;
    	      this.employeeId = defaults.employeeId;
    	      this.mail = defaults.mail;
    	      this.mailNickname = defaults.mailNickname;
    	      this.objectId = defaults.objectId;
    	      this.onpremisesImmutableId = defaults.onpremisesImmutableId;
    	      this.onpremisesSamAccountName = defaults.onpremisesSamAccountName;
    	      this.onpremisesUserPrincipalName = defaults.onpremisesUserPrincipalName;
    	      this.usageLocation = defaults.usageLocation;
    	      this.userPrincipalName = defaults.userPrincipalName;
        }

        @CustomType.Setter
        public Builder accountEnabled(Boolean accountEnabled) {
            if (accountEnabled == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "accountEnabled");
            }
            this.accountEnabled = accountEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder employeeId(String employeeId) {
            if (employeeId == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "employeeId");
            }
            this.employeeId = employeeId;
            return this;
        }
        @CustomType.Setter
        public Builder mail(String mail) {
            if (mail == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "mail");
            }
            this.mail = mail;
            return this;
        }
        @CustomType.Setter
        public Builder mailNickname(String mailNickname) {
            if (mailNickname == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "mailNickname");
            }
            this.mailNickname = mailNickname;
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            if (objectId == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "objectId");
            }
            this.objectId = objectId;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesImmutableId(String onpremisesImmutableId) {
            if (onpremisesImmutableId == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "onpremisesImmutableId");
            }
            this.onpremisesImmutableId = onpremisesImmutableId;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesSamAccountName(String onpremisesSamAccountName) {
            if (onpremisesSamAccountName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "onpremisesSamAccountName");
            }
            this.onpremisesSamAccountName = onpremisesSamAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesUserPrincipalName(String onpremisesUserPrincipalName) {
            if (onpremisesUserPrincipalName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "onpremisesUserPrincipalName");
            }
            this.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder usageLocation(String usageLocation) {
            if (usageLocation == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "usageLocation");
            }
            this.usageLocation = usageLocation;
            return this;
        }
        @CustomType.Setter
        public Builder userPrincipalName(String userPrincipalName) {
            if (userPrincipalName == null) {
              throw new MissingRequiredPropertyException("GetUsersUser", "userPrincipalName");
            }
            this.userPrincipalName = userPrincipalName;
            return this;
        }
        public GetUsersUser build() {
            final var _resultValue = new GetUsersUser();
            _resultValue.accountEnabled = accountEnabled;
            _resultValue.displayName = displayName;
            _resultValue.employeeId = employeeId;
            _resultValue.mail = mail;
            _resultValue.mailNickname = mailNickname;
            _resultValue.objectId = objectId;
            _resultValue.onpremisesImmutableId = onpremisesImmutableId;
            _resultValue.onpremisesSamAccountName = onpremisesSamAccountName;
            _resultValue.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
            _resultValue.usageLocation = usageLocation;
            _resultValue.userPrincipalName = userPrincipalName;
            return _resultValue;
        }
    }
}
