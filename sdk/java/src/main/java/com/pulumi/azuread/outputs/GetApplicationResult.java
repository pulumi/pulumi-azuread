// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.azuread.outputs.GetApplicationApi;
import com.pulumi.azuread.outputs.GetApplicationAppRole;
import com.pulumi.azuread.outputs.GetApplicationFeatureTag;
import com.pulumi.azuread.outputs.GetApplicationOptionalClaim;
import com.pulumi.azuread.outputs.GetApplicationPublicClient;
import com.pulumi.azuread.outputs.GetApplicationRequiredResourceAccess;
import com.pulumi.azuread.outputs.GetApplicationSinglePageApplication;
import com.pulumi.azuread.outputs.GetApplicationWeb;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetApplicationResult {
    /**
     * @return An `api` block as documented below.
     * 
     */
    private List<GetApplicationApi> apis;
    /**
     * @return A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    private Map<String,String> appRoleIds;
    /**
     * @return A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    private List<GetApplicationAppRole> appRoles;
    /**
     * @return The Application ID (also called Client ID).
     * 
     */
    private String applicationId;
    /**
     * @return Specifies whether this application supports device authentication without a user.
     * 
     */
    private Boolean deviceOnlyAuthEnabled;
    /**
     * @return Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
     * 
     */
    private String disabledByMicrosoft;
    /**
     * @return Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    private String displayName;
    /**
     * @return The fallback application type as public client, such as an installed application running on a mobile device.
     * 
     */
    private Boolean fallbackPublicClientEnabled;
    /**
     * @return A `features` block as described below.
     * 
     */
    private List<GetApplicationFeatureTag> featureTags;
    /**
     * @return The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.
     * 
     */
    private List<String> groupMembershipClaims;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of user-defined URI(s) that uniquely identify a Web application within it&#39;s Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
     * 
     */
    private List<String> identifierUris;
    /**
     * @return CDN URL to the application&#39;s logo.
     * 
     */
    private String logoUrl;
    /**
     * @return URL of the application&#39;s marketing page.
     * 
     */
    private String marketingUrl;
    /**
     * @return A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    private Map<String,String> oauth2PermissionScopeIds;
    /**
     * @return Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. When `false`, only GET requests are allowed.
     * 
     */
    private Boolean oauth2PostResponseRequired;
    /**
     * @return The application&#39;s object ID.
     * 
     */
    private String objectId;
    /**
     * @return An `optional_claims` block as documented below.
     * 
     */
    private List<GetApplicationOptionalClaim> optionalClaims;
    /**
     * @return A list of object IDs of principals that are assigned ownership of the application.
     * 
     */
    private List<String> owners;
    /**
     * @return URL of the application&#39;s privacy statement.
     * 
     */
    private String privacyStatementUrl;
    /**
     * @return A `public_client` block as documented below.
     * 
     */
    private List<GetApplicationPublicClient> publicClients;
    /**
     * @return The verified publisher domain for the application.
     * 
     */
    private String publisherDomain;
    /**
     * @return A collection of `required_resource_access` blocks as documented below.
     * 
     */
    private List<GetApplicationRequiredResourceAccess> requiredResourceAccesses;
    /**
     * @return The Microsoft account types that are supported for the current application. One of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    private String signInAudience;
    /**
     * @return A `single_page_application` block as documented below.
     * 
     */
    private List<GetApplicationSinglePageApplication> singlePageApplications;
    /**
     * @return URL of the application&#39;s support page.
     * 
     */
    private String supportUrl;
    /**
     * @return A list of tags applied to the application.
     * 
     */
    private List<String> tags;
    /**
     * @return URL of the application&#39;s terms of service statement.
     * 
     */
    private String termsOfServiceUrl;
    /**
     * @return A `web` block as documented below.
     * 
     */
    private List<GetApplicationWeb> webs;

    private GetApplicationResult() {}
    /**
     * @return An `api` block as documented below.
     * 
     */
    public List<GetApplicationApi> apis() {
        return this.apis;
    }
    /**
     * @return A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    public Map<String,String> appRoleIds() {
        return this.appRoleIds;
    }
    /**
     * @return A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    public List<GetApplicationAppRole> appRoles() {
        return this.appRoles;
    }
    /**
     * @return The Application ID (also called Client ID).
     * 
     */
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Specifies whether this application supports device authentication without a user.
     * 
     */
    public Boolean deviceOnlyAuthEnabled() {
        return this.deviceOnlyAuthEnabled;
    }
    /**
     * @return Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
     * 
     */
    public String disabledByMicrosoft() {
        return this.disabledByMicrosoft;
    }
    /**
     * @return Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The fallback application type as public client, such as an installed application running on a mobile device.
     * 
     */
    public Boolean fallbackPublicClientEnabled() {
        return this.fallbackPublicClientEnabled;
    }
    /**
     * @return A `features` block as described below.
     * 
     */
    public List<GetApplicationFeatureTag> featureTags() {
        return this.featureTags;
    }
    /**
     * @return The `groups` claim issued in a user or OAuth 2.0 access token that the app expects.
     * 
     */
    public List<String> groupMembershipClaims() {
        return this.groupMembershipClaims;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of user-defined URI(s) that uniquely identify a Web application within it&#39;s Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
     * 
     */
    public List<String> identifierUris() {
        return this.identifierUris;
    }
    /**
     * @return CDN URL to the application&#39;s logo.
     * 
     */
    public String logoUrl() {
        return this.logoUrl;
    }
    /**
     * @return URL of the application&#39;s marketing page.
     * 
     */
    public String marketingUrl() {
        return this.marketingUrl;
    }
    /**
     * @return A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    public Map<String,String> oauth2PermissionScopeIds() {
        return this.oauth2PermissionScopeIds;
    }
    /**
     * @return Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. When `false`, only GET requests are allowed.
     * 
     */
    public Boolean oauth2PostResponseRequired() {
        return this.oauth2PostResponseRequired;
    }
    /**
     * @return The application&#39;s object ID.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return An `optional_claims` block as documented below.
     * 
     */
    public List<GetApplicationOptionalClaim> optionalClaims() {
        return this.optionalClaims;
    }
    /**
     * @return A list of object IDs of principals that are assigned ownership of the application.
     * 
     */
    public List<String> owners() {
        return this.owners;
    }
    /**
     * @return URL of the application&#39;s privacy statement.
     * 
     */
    public String privacyStatementUrl() {
        return this.privacyStatementUrl;
    }
    /**
     * @return A `public_client` block as documented below.
     * 
     */
    public List<GetApplicationPublicClient> publicClients() {
        return this.publicClients;
    }
    /**
     * @return The verified publisher domain for the application.
     * 
     */
    public String publisherDomain() {
        return this.publisherDomain;
    }
    /**
     * @return A collection of `required_resource_access` blocks as documented below.
     * 
     */
    public List<GetApplicationRequiredResourceAccess> requiredResourceAccesses() {
        return this.requiredResourceAccesses;
    }
    /**
     * @return The Microsoft account types that are supported for the current application. One of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`.
     * 
     */
    public String signInAudience() {
        return this.signInAudience;
    }
    /**
     * @return A `single_page_application` block as documented below.
     * 
     */
    public List<GetApplicationSinglePageApplication> singlePageApplications() {
        return this.singlePageApplications;
    }
    /**
     * @return URL of the application&#39;s support page.
     * 
     */
    public String supportUrl() {
        return this.supportUrl;
    }
    /**
     * @return A list of tags applied to the application.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return URL of the application&#39;s terms of service statement.
     * 
     */
    public String termsOfServiceUrl() {
        return this.termsOfServiceUrl;
    }
    /**
     * @return A `web` block as documented below.
     * 
     */
    public List<GetApplicationWeb> webs() {
        return this.webs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetApplicationApi> apis;
        private Map<String,String> appRoleIds;
        private List<GetApplicationAppRole> appRoles;
        private String applicationId;
        private Boolean deviceOnlyAuthEnabled;
        private String disabledByMicrosoft;
        private String displayName;
        private Boolean fallbackPublicClientEnabled;
        private List<GetApplicationFeatureTag> featureTags;
        private List<String> groupMembershipClaims;
        private String id;
        private List<String> identifierUris;
        private String logoUrl;
        private String marketingUrl;
        private Map<String,String> oauth2PermissionScopeIds;
        private Boolean oauth2PostResponseRequired;
        private String objectId;
        private List<GetApplicationOptionalClaim> optionalClaims;
        private List<String> owners;
        private String privacyStatementUrl;
        private List<GetApplicationPublicClient> publicClients;
        private String publisherDomain;
        private List<GetApplicationRequiredResourceAccess> requiredResourceAccesses;
        private String signInAudience;
        private List<GetApplicationSinglePageApplication> singlePageApplications;
        private String supportUrl;
        private List<String> tags;
        private String termsOfServiceUrl;
        private List<GetApplicationWeb> webs;
        public Builder() {}
        public Builder(GetApplicationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apis = defaults.apis;
    	      this.appRoleIds = defaults.appRoleIds;
    	      this.appRoles = defaults.appRoles;
    	      this.applicationId = defaults.applicationId;
    	      this.deviceOnlyAuthEnabled = defaults.deviceOnlyAuthEnabled;
    	      this.disabledByMicrosoft = defaults.disabledByMicrosoft;
    	      this.displayName = defaults.displayName;
    	      this.fallbackPublicClientEnabled = defaults.fallbackPublicClientEnabled;
    	      this.featureTags = defaults.featureTags;
    	      this.groupMembershipClaims = defaults.groupMembershipClaims;
    	      this.id = defaults.id;
    	      this.identifierUris = defaults.identifierUris;
    	      this.logoUrl = defaults.logoUrl;
    	      this.marketingUrl = defaults.marketingUrl;
    	      this.oauth2PermissionScopeIds = defaults.oauth2PermissionScopeIds;
    	      this.oauth2PostResponseRequired = defaults.oauth2PostResponseRequired;
    	      this.objectId = defaults.objectId;
    	      this.optionalClaims = defaults.optionalClaims;
    	      this.owners = defaults.owners;
    	      this.privacyStatementUrl = defaults.privacyStatementUrl;
    	      this.publicClients = defaults.publicClients;
    	      this.publisherDomain = defaults.publisherDomain;
    	      this.requiredResourceAccesses = defaults.requiredResourceAccesses;
    	      this.signInAudience = defaults.signInAudience;
    	      this.singlePageApplications = defaults.singlePageApplications;
    	      this.supportUrl = defaults.supportUrl;
    	      this.tags = defaults.tags;
    	      this.termsOfServiceUrl = defaults.termsOfServiceUrl;
    	      this.webs = defaults.webs;
        }

        @CustomType.Setter
        public Builder apis(List<GetApplicationApi> apis) {
            this.apis = Objects.requireNonNull(apis);
            return this;
        }
        public Builder apis(GetApplicationApi... apis) {
            return apis(List.of(apis));
        }
        @CustomType.Setter
        public Builder appRoleIds(Map<String,String> appRoleIds) {
            this.appRoleIds = Objects.requireNonNull(appRoleIds);
            return this;
        }
        @CustomType.Setter
        public Builder appRoles(List<GetApplicationAppRole> appRoles) {
            this.appRoles = Objects.requireNonNull(appRoles);
            return this;
        }
        public Builder appRoles(GetApplicationAppRole... appRoles) {
            return appRoles(List.of(appRoles));
        }
        @CustomType.Setter
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        @CustomType.Setter
        public Builder deviceOnlyAuthEnabled(Boolean deviceOnlyAuthEnabled) {
            this.deviceOnlyAuthEnabled = Objects.requireNonNull(deviceOnlyAuthEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder disabledByMicrosoft(String disabledByMicrosoft) {
            this.disabledByMicrosoft = Objects.requireNonNull(disabledByMicrosoft);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder fallbackPublicClientEnabled(Boolean fallbackPublicClientEnabled) {
            this.fallbackPublicClientEnabled = Objects.requireNonNull(fallbackPublicClientEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder featureTags(List<GetApplicationFeatureTag> featureTags) {
            this.featureTags = Objects.requireNonNull(featureTags);
            return this;
        }
        public Builder featureTags(GetApplicationFeatureTag... featureTags) {
            return featureTags(List.of(featureTags));
        }
        @CustomType.Setter
        public Builder groupMembershipClaims(List<String> groupMembershipClaims) {
            this.groupMembershipClaims = Objects.requireNonNull(groupMembershipClaims);
            return this;
        }
        public Builder groupMembershipClaims(String... groupMembershipClaims) {
            return groupMembershipClaims(List.of(groupMembershipClaims));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identifierUris(List<String> identifierUris) {
            this.identifierUris = Objects.requireNonNull(identifierUris);
            return this;
        }
        public Builder identifierUris(String... identifierUris) {
            return identifierUris(List.of(identifierUris));
        }
        @CustomType.Setter
        public Builder logoUrl(String logoUrl) {
            this.logoUrl = Objects.requireNonNull(logoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder marketingUrl(String marketingUrl) {
            this.marketingUrl = Objects.requireNonNull(marketingUrl);
            return this;
        }
        @CustomType.Setter
        public Builder oauth2PermissionScopeIds(Map<String,String> oauth2PermissionScopeIds) {
            this.oauth2PermissionScopeIds = Objects.requireNonNull(oauth2PermissionScopeIds);
            return this;
        }
        @CustomType.Setter
        public Builder oauth2PostResponseRequired(Boolean oauth2PostResponseRequired) {
            this.oauth2PostResponseRequired = Objects.requireNonNull(oauth2PostResponseRequired);
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        @CustomType.Setter
        public Builder optionalClaims(List<GetApplicationOptionalClaim> optionalClaims) {
            this.optionalClaims = Objects.requireNonNull(optionalClaims);
            return this;
        }
        public Builder optionalClaims(GetApplicationOptionalClaim... optionalClaims) {
            return optionalClaims(List.of(optionalClaims));
        }
        @CustomType.Setter
        public Builder owners(List<String> owners) {
            this.owners = Objects.requireNonNull(owners);
            return this;
        }
        public Builder owners(String... owners) {
            return owners(List.of(owners));
        }
        @CustomType.Setter
        public Builder privacyStatementUrl(String privacyStatementUrl) {
            this.privacyStatementUrl = Objects.requireNonNull(privacyStatementUrl);
            return this;
        }
        @CustomType.Setter
        public Builder publicClients(List<GetApplicationPublicClient> publicClients) {
            this.publicClients = Objects.requireNonNull(publicClients);
            return this;
        }
        public Builder publicClients(GetApplicationPublicClient... publicClients) {
            return publicClients(List.of(publicClients));
        }
        @CustomType.Setter
        public Builder publisherDomain(String publisherDomain) {
            this.publisherDomain = Objects.requireNonNull(publisherDomain);
            return this;
        }
        @CustomType.Setter
        public Builder requiredResourceAccesses(List<GetApplicationRequiredResourceAccess> requiredResourceAccesses) {
            this.requiredResourceAccesses = Objects.requireNonNull(requiredResourceAccesses);
            return this;
        }
        public Builder requiredResourceAccesses(GetApplicationRequiredResourceAccess... requiredResourceAccesses) {
            return requiredResourceAccesses(List.of(requiredResourceAccesses));
        }
        @CustomType.Setter
        public Builder signInAudience(String signInAudience) {
            this.signInAudience = Objects.requireNonNull(signInAudience);
            return this;
        }
        @CustomType.Setter
        public Builder singlePageApplications(List<GetApplicationSinglePageApplication> singlePageApplications) {
            this.singlePageApplications = Objects.requireNonNull(singlePageApplications);
            return this;
        }
        public Builder singlePageApplications(GetApplicationSinglePageApplication... singlePageApplications) {
            return singlePageApplications(List.of(singlePageApplications));
        }
        @CustomType.Setter
        public Builder supportUrl(String supportUrl) {
            this.supportUrl = Objects.requireNonNull(supportUrl);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder termsOfServiceUrl(String termsOfServiceUrl) {
            this.termsOfServiceUrl = Objects.requireNonNull(termsOfServiceUrl);
            return this;
        }
        @CustomType.Setter
        public Builder webs(List<GetApplicationWeb> webs) {
            this.webs = Objects.requireNonNull(webs);
            return this;
        }
        public Builder webs(GetApplicationWeb... webs) {
            return webs(List.of(webs));
        }
        public GetApplicationResult build() {
            final var o = new GetApplicationResult();
            o.apis = apis;
            o.appRoleIds = appRoleIds;
            o.appRoles = appRoles;
            o.applicationId = applicationId;
            o.deviceOnlyAuthEnabled = deviceOnlyAuthEnabled;
            o.disabledByMicrosoft = disabledByMicrosoft;
            o.displayName = displayName;
            o.fallbackPublicClientEnabled = fallbackPublicClientEnabled;
            o.featureTags = featureTags;
            o.groupMembershipClaims = groupMembershipClaims;
            o.id = id;
            o.identifierUris = identifierUris;
            o.logoUrl = logoUrl;
            o.marketingUrl = marketingUrl;
            o.oauth2PermissionScopeIds = oauth2PermissionScopeIds;
            o.oauth2PostResponseRequired = oauth2PostResponseRequired;
            o.objectId = objectId;
            o.optionalClaims = optionalClaims;
            o.owners = owners;
            o.privacyStatementUrl = privacyStatementUrl;
            o.publicClients = publicClients;
            o.publisherDomain = publisherDomain;
            o.requiredResourceAccesses = requiredResourceAccesses;
            o.signInAudience = signInAudience;
            o.singlePageApplications = singlePageApplications;
            o.supportUrl = supportUrl;
            o.tags = tags;
            o.termsOfServiceUrl = termsOfServiceUrl;
            o.webs = webs;
            return o;
        }
    }
}
