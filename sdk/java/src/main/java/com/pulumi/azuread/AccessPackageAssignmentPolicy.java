// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.AccessPackageAssignmentPolicyArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyState;
import com.pulumi.azuread.outputs.AccessPackageAssignmentPolicyApprovalSettings;
import com.pulumi.azuread.outputs.AccessPackageAssignmentPolicyAssignmentReviewSettings;
import com.pulumi.azuread.outputs.AccessPackageAssignmentPolicyQuestion;
import com.pulumi.azuread.outputs.AccessPackageAssignmentPolicyRequestorSettings;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an assignment policy for an access package within Identity Governance in Azure Active Directory.
 * 
 * ## API Permissions
 * 
 * The following API permissions are required in order to use this resource.
 * 
 * When authenticated with a service principal, this resource requires the following application role: `EntitlementManagement.ReadWrite.All`.
 * 
 * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or one of the `Catalog Owner` and `Access Package Manager` role in Identity Governance.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuread.Group;
 * import com.pulumi.azuread.GroupArgs;
 * import com.pulumi.azuread.AccessPackageCatalog;
 * import com.pulumi.azuread.AccessPackageCatalogArgs;
 * import com.pulumi.azuread.AccessPackage;
 * import com.pulumi.azuread.AccessPackageArgs;
 * import com.pulumi.azuread.AccessPackageAssignmentPolicy;
 * import com.pulumi.azuread.AccessPackageAssignmentPolicyArgs;
 * import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyRequestorSettingsArgs;
 * import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyApprovalSettingsArgs;
 * import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs;
 * import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyQuestionArgs;
 * import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyQuestionTextArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Group("example", GroupArgs.builder()        
 *             .displayName("group-name")
 *             .securityEnabled(true)
 *             .build());
 * 
 *         var exampleAccessPackageCatalog = new AccessPackageCatalog("exampleAccessPackageCatalog", AccessPackageCatalogArgs.builder()        
 *             .displayName("example-catalog")
 *             .description("Example catalog")
 *             .build());
 * 
 *         var exampleAccessPackage = new AccessPackage("exampleAccessPackage", AccessPackageArgs.builder()        
 *             .catalogId(exampleAccessPackageCatalog.id())
 *             .displayName("access-package")
 *             .description("Access Package")
 *             .build());
 * 
 *         var exampleAccessPackageAssignmentPolicy = new AccessPackageAssignmentPolicy("exampleAccessPackageAssignmentPolicy", AccessPackageAssignmentPolicyArgs.builder()        
 *             .accessPackageId(exampleAccessPackage.id())
 *             .displayName("assignment-policy")
 *             .description("My assignment policy")
 *             .durationInDays(90)
 *             .requestorSettings(AccessPackageAssignmentPolicyRequestorSettingsArgs.builder()
 *                 .scopeType("AllExistingDirectoryMemberUsers")
 *                 .build())
 *             .approvalSettings(AccessPackageAssignmentPolicyApprovalSettingsArgs.builder()
 *                 .approvalRequired(true)
 *                 .approvalStages(AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs.builder()
 *                     .approvalTimeoutInDays(14)
 *                     .primaryApprovers(AccessPackageAssignmentPolicyApprovalSettingsApprovalStagePrimaryApproverArgs.builder()
 *                         .objectId(example.objectId())
 *                         .subjectType("groupMembers")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .assignmentReviewSettings(AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs.builder()
 *                 .enabled(true)
 *                 .reviewFrequency("weekly")
 *                 .durationInDays(3)
 *                 .reviewType("Self")
 *                 .accessReviewTimeoutBehavior("keepAccess")
 *                 .build())
 *             .questions(AccessPackageAssignmentPolicyQuestionArgs.builder()
 *                 .text(AccessPackageAssignmentPolicyQuestionTextArgs.builder()
 *                     .defaultText("hello, how are you?")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An access package assignment policy can be imported using the ID, e.g.
 * 
 * ```sh
 * $ pulumi import azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy example 00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy")
public class AccessPackageAssignmentPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the access package that will contain the policy.
     * 
     */
    @Export(name="accessPackageId", refs={String.class}, tree="[0]")
    private Output<String> accessPackageId;

    /**
     * @return The ID of the access package that will contain the policy.
     * 
     */
    public Output<String> accessPackageId() {
        return this.accessPackageId;
    }
    /**
     * An `approval_settings` block to specify whether approvals are required and how they are obtained, as documented below.
     * 
     */
    @Export(name="approvalSettings", refs={AccessPackageAssignmentPolicyApprovalSettings.class}, tree="[0]")
    private Output</* @Nullable */ AccessPackageAssignmentPolicyApprovalSettings> approvalSettings;

    /**
     * @return An `approval_settings` block to specify whether approvals are required and how they are obtained, as documented below.
     * 
     */
    public Output<Optional<AccessPackageAssignmentPolicyApprovalSettings>> approvalSettings() {
        return Codegen.optional(this.approvalSettings);
    }
    /**
     * An `assignment_review_settings` block, to specify whether assignment review is needed and how it is conducted, as documented below.
     * 
     */
    @Export(name="assignmentReviewSettings", refs={AccessPackageAssignmentPolicyAssignmentReviewSettings.class}, tree="[0]")
    private Output</* @Nullable */ AccessPackageAssignmentPolicyAssignmentReviewSettings> assignmentReviewSettings;

    /**
     * @return An `assignment_review_settings` block, to specify whether assignment review is needed and how it is conducted, as documented below.
     * 
     */
    public Output<Optional<AccessPackageAssignmentPolicyAssignmentReviewSettings>> assignmentReviewSettings() {
        return Codegen.optional(this.assignmentReviewSettings);
    }
    /**
     * The description of the policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the policy.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The display name of the policy.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the policy.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * How many days this assignment is valid for.
     * 
     */
    @Export(name="durationInDays", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> durationInDays;

    /**
     * @return How many days this assignment is valid for.
     * 
     */
    public Output<Optional<Integer>> durationInDays() {
        return Codegen.optional(this.durationInDays);
    }
    /**
     * The date that this assignment expires, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z).
     * 
     */
    @Export(name="expirationDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> expirationDate;

    /**
     * @return The date that this assignment expires, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z).
     * 
     */
    public Output<Optional<String>> expirationDate() {
        return Codegen.optional(this.expirationDate);
    }
    /**
     * Whether users will be able to request extension of their access to this package before their access expires.
     * 
     */
    @Export(name="extensionEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> extensionEnabled;

    /**
     * @return Whether users will be able to request extension of their access to this package before their access expires.
     * 
     */
    public Output<Optional<Boolean>> extensionEnabled() {
        return Codegen.optional(this.extensionEnabled);
    }
    /**
     * One or more `question` blocks for the requestor, as documented below.
     * 
     */
    @Export(name="questions", refs={List.class,AccessPackageAssignmentPolicyQuestion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<AccessPackageAssignmentPolicyQuestion>> questions;

    /**
     * @return One or more `question` blocks for the requestor, as documented below.
     * 
     */
    public Output<Optional<List<AccessPackageAssignmentPolicyQuestion>>> questions() {
        return Codegen.optional(this.questions);
    }
    /**
     * A `requestor_settings` block to configure the users who can request access, as documented below.
     * 
     */
    @Export(name="requestorSettings", refs={AccessPackageAssignmentPolicyRequestorSettings.class}, tree="[0]")
    private Output</* @Nullable */ AccessPackageAssignmentPolicyRequestorSettings> requestorSettings;

    /**
     * @return A `requestor_settings` block to configure the users who can request access, as documented below.
     * 
     */
    public Output<Optional<AccessPackageAssignmentPolicyRequestorSettings>> requestorSettings() {
        return Codegen.optional(this.requestorSettings);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AccessPackageAssignmentPolicy(String name) {
        this(name, AccessPackageAssignmentPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AccessPackageAssignmentPolicy(String name, AccessPackageAssignmentPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AccessPackageAssignmentPolicy(String name, AccessPackageAssignmentPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy", name, args == null ? AccessPackageAssignmentPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AccessPackageAssignmentPolicy(String name, Output<String> id, @Nullable AccessPackageAssignmentPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/accessPackageAssignmentPolicy:AccessPackageAssignmentPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AccessPackageAssignmentPolicy get(String name, Output<String> id, @Nullable AccessPackageAssignmentPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AccessPackageAssignmentPolicy(name, id, state, options);
    }
}
