// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.azuread.outputs.AccessPackageAssignmentPolicyRequestorSettingsRequestor;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessPackageAssignmentPolicyRequestorSettings {
    /**
     * @return A block specifying the users who are allowed to request on this policy, as documented below.
     * 
     */
    private @Nullable List<AccessPackageAssignmentPolicyRequestorSettingsRequestor> requestors;
    /**
     * @return Whether to accept requests using this policy. When `false`, no new requests can be made using this policy.
     * 
     */
    private @Nullable Boolean requestsAccepted;
    /**
     * @return Specifies the scopes of the requestors. Valid values are `AllConfiguredConnectedOrganizationSubjects`, `AllExistingConnectedOrganizationSubjects`, `AllExistingDirectoryMemberUsers`, `AllExistingDirectorySubjects`, `AllExternalSubjects`, `NoSubjects`, `SpecificConnectedOrganizationSubjects`, or `SpecificDirectorySubjects`.
     * 
     */
    private @Nullable String scopeType;

    private AccessPackageAssignmentPolicyRequestorSettings() {}
    /**
     * @return A block specifying the users who are allowed to request on this policy, as documented below.
     * 
     */
    public List<AccessPackageAssignmentPolicyRequestorSettingsRequestor> requestors() {
        return this.requestors == null ? List.of() : this.requestors;
    }
    /**
     * @return Whether to accept requests using this policy. When `false`, no new requests can be made using this policy.
     * 
     */
    public Optional<Boolean> requestsAccepted() {
        return Optional.ofNullable(this.requestsAccepted);
    }
    /**
     * @return Specifies the scopes of the requestors. Valid values are `AllConfiguredConnectedOrganizationSubjects`, `AllExistingConnectedOrganizationSubjects`, `AllExistingDirectoryMemberUsers`, `AllExistingDirectorySubjects`, `AllExternalSubjects`, `NoSubjects`, `SpecificConnectedOrganizationSubjects`, or `SpecificDirectorySubjects`.
     * 
     */
    public Optional<String> scopeType() {
        return Optional.ofNullable(this.scopeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessPackageAssignmentPolicyRequestorSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AccessPackageAssignmentPolicyRequestorSettingsRequestor> requestors;
        private @Nullable Boolean requestsAccepted;
        private @Nullable String scopeType;
        public Builder() {}
        public Builder(AccessPackageAssignmentPolicyRequestorSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.requestors = defaults.requestors;
    	      this.requestsAccepted = defaults.requestsAccepted;
    	      this.scopeType = defaults.scopeType;
        }

        @CustomType.Setter
        public Builder requestors(@Nullable List<AccessPackageAssignmentPolicyRequestorSettingsRequestor> requestors) {
            this.requestors = requestors;
            return this;
        }
        public Builder requestors(AccessPackageAssignmentPolicyRequestorSettingsRequestor... requestors) {
            return requestors(List.of(requestors));
        }
        @CustomType.Setter
        public Builder requestsAccepted(@Nullable Boolean requestsAccepted) {
            this.requestsAccepted = requestsAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder scopeType(@Nullable String scopeType) {
            this.scopeType = scopeType;
            return this;
        }
        public AccessPackageAssignmentPolicyRequestorSettings build() {
            final var _resultValue = new AccessPackageAssignmentPolicyRequestorSettings();
            _resultValue.requestors = requestors;
            _resultValue.requestsAccepted = requestsAccepted;
            _resultValue.scopeType = scopeType;
            return _resultValue;
        }
    }
}
