// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryRoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryRoleAssignmentArgs Empty = new DirectoryRoleAssignmentArgs();

    /**
     * Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_object_id`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="appScopeObjectId")
    private @Nullable Output<String> appScopeObjectId;

    /**
     * @return Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_object_id`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> appScopeObjectId() {
        return Optional.ofNullable(this.appScopeObjectId);
    }

    /**
     * The object ID of a directory object representing the scope of the assignment. Cannot be used with `app_scope_object_id`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="directoryScopeObjectId")
    private @Nullable Output<String> directoryScopeObjectId;

    /**
     * @return The object ID of a directory object representing the scope of the assignment. Cannot be used with `app_scope_object_id`. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> directoryScopeObjectId() {
        return Optional.ofNullable(this.directoryScopeObjectId);
    }

    /**
     * The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="principalObjectId")
    private @Nullable Output<String> principalObjectId;

    /**
     * @return The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> principalObjectId() {
        return Optional.ofNullable(this.principalObjectId);
    }

    /**
     * The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    private DirectoryRoleAssignmentArgs() {}

    private DirectoryRoleAssignmentArgs(DirectoryRoleAssignmentArgs $) {
        this.appScopeObjectId = $.appScopeObjectId;
        this.directoryScopeObjectId = $.directoryScopeObjectId;
        this.principalObjectId = $.principalObjectId;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryRoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryRoleAssignmentArgs $;

        public Builder() {
            $ = new DirectoryRoleAssignmentArgs();
        }

        public Builder(DirectoryRoleAssignmentArgs defaults) {
            $ = new DirectoryRoleAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appScopeObjectId Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_object_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appScopeObjectId(@Nullable Output<String> appScopeObjectId) {
            $.appScopeObjectId = appScopeObjectId;
            return this;
        }

        /**
         * @param appScopeObjectId Identifier of the app-specific scope when the assignment scope is app-specific. Cannot be used with `directory_scope_object_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder appScopeObjectId(String appScopeObjectId) {
            return appScopeObjectId(Output.of(appScopeObjectId));
        }

        /**
         * @param directoryScopeObjectId The object ID of a directory object representing the scope of the assignment. Cannot be used with `app_scope_object_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder directoryScopeObjectId(@Nullable Output<String> directoryScopeObjectId) {
            $.directoryScopeObjectId = directoryScopeObjectId;
            return this;
        }

        /**
         * @param directoryScopeObjectId The object ID of a directory object representing the scope of the assignment. Cannot be used with `app_scope_object_id`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder directoryScopeObjectId(String directoryScopeObjectId) {
            return directoryScopeObjectId(Output.of(directoryScopeObjectId));
        }

        /**
         * @param principalObjectId The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalObjectId(@Nullable Output<String> principalObjectId) {
            $.principalObjectId = principalObjectId;
            return this;
        }

        /**
         * @param principalObjectId The object ID of the principal for you want to create a role assignment. Supported object types are Users, Groups or Service Principals. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder principalObjectId(String principalObjectId) {
            return principalObjectId(Output.of(principalObjectId));
        }

        /**
         * @param roleId The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public DirectoryRoleAssignmentArgs build() {
            return $;
        }
    }

}
