// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationPermissionScopeState extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationPermissionScopeState Empty = new ApplicationPermissionScopeState();

    /**
     * Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    @Import(name="adminConsentDescription")
    private @Nullable Output<String> adminConsentDescription;

    /**
     * @return Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    public Optional<Output<String>> adminConsentDescription() {
        return Optional.ofNullable(this.adminConsentDescription);
    }

    /**
     * Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    @Import(name="adminConsentDisplayName")
    private @Nullable Output<String> adminConsentDisplayName;

    /**
     * @return Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
     * 
     */
    public Optional<Output<String>> adminConsentDisplayName() {
        return Optional.ofNullable(this.adminConsentDisplayName);
    }

    /**
     * The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="scopeId")
    private @Nullable Output<String> scopeId;

    /**
     * @return The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
     * 
     */
    public Optional<Output<String>> scopeId() {
        return Optional.ofNullable(this.scopeId);
    }

    /**
     * Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     * 
     */
    @Import(name="userConsentDescription")
    private @Nullable Output<String> userConsentDescription;

    /**
     * @return Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
     * 
     */
    public Optional<Output<String>> userConsentDescription() {
        return Optional.ofNullable(this.userConsentDescription);
    }

    /**
     * Display name for the delegated permission that appears in the end user consent experience
     * 
     */
    @Import(name="userConsentDisplayName")
    private @Nullable Output<String> userConsentDisplayName;

    /**
     * @return Display name for the delegated permission that appears in the end user consent experience
     * 
     */
    public Optional<Output<String>> userConsentDisplayName() {
        return Optional.ofNullable(this.userConsentDisplayName);
    }

    /**
     * The value that is used for the `scp` claim in OAuth access tokens.
     * 
     * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value that is used for the `scp` claim in OAuth access tokens.
     * 
     * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private ApplicationPermissionScopeState() {}

    private ApplicationPermissionScopeState(ApplicationPermissionScopeState $) {
        this.adminConsentDescription = $.adminConsentDescription;
        this.adminConsentDisplayName = $.adminConsentDisplayName;
        this.applicationId = $.applicationId;
        this.scopeId = $.scopeId;
        this.type = $.type;
        this.userConsentDescription = $.userConsentDescription;
        this.userConsentDisplayName = $.userConsentDisplayName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationPermissionScopeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationPermissionScopeState $;

        public Builder() {
            $ = new ApplicationPermissionScopeState();
        }

        public Builder(ApplicationPermissionScopeState defaults) {
            $ = new ApplicationPermissionScopeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminConsentDescription Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
         * 
         * @return builder
         * 
         */
        public Builder adminConsentDescription(@Nullable Output<String> adminConsentDescription) {
            $.adminConsentDescription = adminConsentDescription;
            return this;
        }

        /**
         * @param adminConsentDescription Delegated permission description that appears in all tenant-wide admin consent experiences, intended to be read by an administrator granting the permission on behalf of all users.
         * 
         * @return builder
         * 
         */
        public Builder adminConsentDescription(String adminConsentDescription) {
            return adminConsentDescription(Output.of(adminConsentDescription));
        }

        /**
         * @param adminConsentDisplayName Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
         * 
         * @return builder
         * 
         */
        public Builder adminConsentDisplayName(@Nullable Output<String> adminConsentDisplayName) {
            $.adminConsentDisplayName = adminConsentDisplayName;
            return this;
        }

        /**
         * @param adminConsentDisplayName Display name for the delegated permission, intended to be read by an administrator granting the permission on behalf of all users.
         * 
         * @return builder
         * 
         */
        public Builder adminConsentDisplayName(String adminConsentDisplayName) {
            return adminConsentDisplayName(Output.of(adminConsentDisplayName));
        }

        /**
         * @param applicationId The resource ID of the application registration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The resource ID of the application registration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param scopeId The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scopeId(@Nullable Output<String> scopeId) {
            $.scopeId = scopeId;
            return this;
        }

        /**
         * @param scopeId The unique identifier of the permission scope. Must be a valid UUID. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder scopeId(String scopeId) {
            return scopeId(Output.of(scopeId));
        }

        /**
         * @param type Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userConsentDescription Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
         * 
         * @return builder
         * 
         */
        public Builder userConsentDescription(@Nullable Output<String> userConsentDescription) {
            $.userConsentDescription = userConsentDescription;
            return this;
        }

        /**
         * @param userConsentDescription Delegated permission description that appears in the end user consent experience, intended to be read by a user consenting on their own behalf.
         * 
         * @return builder
         * 
         */
        public Builder userConsentDescription(String userConsentDescription) {
            return userConsentDescription(Output.of(userConsentDescription));
        }

        /**
         * @param userConsentDisplayName Display name for the delegated permission that appears in the end user consent experience
         * 
         * @return builder
         * 
         */
        public Builder userConsentDisplayName(@Nullable Output<String> userConsentDisplayName) {
            $.userConsentDisplayName = userConsentDisplayName;
            return this;
        }

        /**
         * @param userConsentDisplayName Display name for the delegated permission that appears in the end user consent experience
         * 
         * @return builder
         * 
         */
        public Builder userConsentDisplayName(String userConsentDisplayName) {
            return userConsentDisplayName(Output.of(userConsentDisplayName));
        }

        /**
         * @param value The value that is used for the `scp` claim in OAuth access tokens.
         * 
         * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value that is used for the `scp` claim in OAuth access tokens.
         * 
         * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ApplicationPermissionScopeState build() {
            return $;
        }
    }

}
