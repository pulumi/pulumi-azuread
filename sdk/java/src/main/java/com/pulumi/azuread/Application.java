// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.ApplicationArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.ApplicationState;
import com.pulumi.azuread.outputs.ApplicationApi;
import com.pulumi.azuread.outputs.ApplicationAppRole;
import com.pulumi.azuread.outputs.ApplicationFeatureTag;
import com.pulumi.azuread.outputs.ApplicationOptionalClaims;
import com.pulumi.azuread.outputs.ApplicationPassword;
import com.pulumi.azuread.outputs.ApplicationPublicClient;
import com.pulumi.azuread.outputs.ApplicationRequiredResourceAccess;
import com.pulumi.azuread.outputs.ApplicationSinglePageApplication;
import com.pulumi.azuread.outputs.ApplicationWeb;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * *Create an application*
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuread.AzureadFunctions;
 * import com.pulumi.azuread.Application;
 * import com.pulumi.azuread.ApplicationArgs;
 * import com.pulumi.azuread.inputs.ApplicationApiArgs;
 * import com.pulumi.azuread.inputs.ApplicationAppRoleArgs;
 * import com.pulumi.azuread.inputs.ApplicationFeatureTagArgs;
 * import com.pulumi.azuread.inputs.ApplicationOptionalClaimsArgs;
 * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
 * import com.pulumi.azuread.inputs.ApplicationWebArgs;
 * import com.pulumi.azuread.inputs.ApplicationWebImplicitGrantArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.Filebase64Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = AzureadFunctions.getClientConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);
 * 
 *         var example = new Application("example", ApplicationArgs.builder()
 *             .displayName("example")
 *             .identifierUris("api://example-app")
 *             .logoImage(StdFunctions.filebase64(Filebase64Args.builder()
 *                 .input("/path/to/logo.png")
 *                 .build()).result())
 *             .owners(current.objectId())
 *             .signInAudience("AzureADMultipleOrgs")
 *             .api(ApplicationApiArgs.builder()
 *                 .mappedClaimsEnabled(true)
 *                 .requestedAccessTokenVersion(2)
 *                 .knownClientApplications(                
 *                     known1.clientId(),
 *                     known2.clientId())
 *                 .oauth2PermissionScopes(                
 *                     ApplicationApiOauth2PermissionScopeArgs.builder()
 *                         .adminConsentDescription("Allow the application to access example on behalf of the signed-in user.")
 *                         .adminConsentDisplayName("Access example")
 *                         .enabled(true)
 *                         .id("96183846-204b-4b43-82e1-5d2222eb4b9b")
 *                         .type("User")
 *                         .userConsentDescription("Allow the application to access example on your behalf.")
 *                         .userConsentDisplayName("Access example")
 *                         .value("user_impersonation")
 *                         .build(),
 *                     ApplicationApiOauth2PermissionScopeArgs.builder()
 *                         .adminConsentDescription("Administer the example application")
 *                         .adminConsentDisplayName("Administer")
 *                         .enabled(true)
 *                         .id("be98fa3e-ab5b-4b11-83d9-04ba2b7946bc")
 *                         .type("Admin")
 *                         .value("administer")
 *                         .build())
 *                 .build())
 *             .appRoles(            
 *                 ApplicationAppRoleArgs.builder()
 *                     .allowedMemberTypes(                    
 *                         "User",
 *                         "Application")
 *                     .description("Admins can manage roles and perform all task actions")
 *                     .displayName("Admin")
 *                     .enabled(true)
 *                     .id("1b19509b-32b1-4e9f-b71d-4992aa991967")
 *                     .value("admin")
 *                     .build(),
 *                 ApplicationAppRoleArgs.builder()
 *                     .allowedMemberTypes("User")
 *                     .description("ReadOnly roles have limited query access")
 *                     .displayName("ReadOnly")
 *                     .enabled(true)
 *                     .id("497406e4-012a-4267-bf18-45a1cb148a01")
 *                     .value("User")
 *                     .build())
 *             .featureTags(ApplicationFeatureTagArgs.builder()
 *                 .enterprise(true)
 *                 .gallery(true)
 *                 .build())
 *             .optionalClaims(ApplicationOptionalClaimsArgs.builder()
 *                 .accessTokens(                
 *                     ApplicationOptionalClaimsAccessTokenArgs.builder()
 *                         .name("myclaim")
 *                         .build(),
 *                     ApplicationOptionalClaimsAccessTokenArgs.builder()
 *                         .name("otherclaim")
 *                         .build())
 *                 .idTokens(ApplicationOptionalClaimsIdTokenArgs.builder()
 *                     .name("userclaim")
 *                     .source("user")
 *                     .essential(true)
 *                     .additionalProperties("emit_as_roles")
 *                     .build())
 *                 .saml2Tokens(ApplicationOptionalClaimsSaml2TokenArgs.builder()
 *                     .name("samlexample")
 *                     .build())
 *                 .build())
 *             .requiredResourceAccesses(            
 *                 ApplicationRequiredResourceAccessArgs.builder()
 *                     .resourceAppId("00000003-0000-0000-c000-000000000000")
 *                     .resourceAccesses(                    
 *                         ApplicationRequiredResourceAccessResourceAccessArgs.builder()
 *                             .id("df021288-bdef-4463-88db-98f22de89214")
 *                             .type("Role")
 *                             .build(),
 *                         ApplicationRequiredResourceAccessResourceAccessArgs.builder()
 *                             .id("b4e74841-8e56-480b-be8b-910348b18b4c")
 *                             .type("Scope")
 *                             .build())
 *                     .build(),
 *                 ApplicationRequiredResourceAccessArgs.builder()
 *                     .resourceAppId("c5393580-f805-4401-95e8-94b7a6ef2fc2")
 *                     .resourceAccesses(ApplicationRequiredResourceAccessResourceAccessArgs.builder()
 *                         .id("594c1fb6-4f81-4475-ae41-0c394909246c")
 *                         .type("Role")
 *                         .build())
 *                     .build())
 *             .web(ApplicationWebArgs.builder()
 *                 .homepageUrl("https://app.example.net")
 *                 .logoutUrl("https://app.example.net/logout")
 *                 .redirectUris("https://app.example.net/account")
 *                 .implicitGrant(ApplicationWebImplicitGrantArgs.builder()
 *                     .accessTokenIssuanceEnabled(true)
 *                     .idTokenIssuanceEnabled(true)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * *Create application and generate a password*
 * 
 * ## Import
 * 
 * Applications can be imported using the object ID of the application, in the following format.
 * 
 * ```sh
 * $ pulumi import azuread:index/application:Application example /applications/00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuread:index/application:Application")
public class Application extends com.pulumi.resources.CustomResource {
    /**
     * An `api` block as documented below, which configures API related settings for this application.
     * 
     */
    @Export(name="api", refs={ApplicationApi.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationApi> api;

    /**
     * @return An `api` block as documented below, which configures API related settings for this application.
     * 
     */
    public Output<Optional<ApplicationApi>> api() {
        return Codegen.optional(this.api);
    }
    /**
     * A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    @Export(name="appRoleIds", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> appRoleIds;

    /**
     * @return A mapping of app role values to app role IDs, intended to be useful when referencing app roles in other resources in your configuration.
     * 
     */
    public Output<Map<String,String>> appRoleIds() {
        return this.appRoleIds;
    }
    /**
     * A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    @Export(name="appRoles", refs={List.class,ApplicationAppRole.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ApplicationAppRole>> appRoles;

    /**
     * @return A collection of `app_role` blocks as documented below. For more information see [official documentation on Application Roles](https://docs.microsoft.com/en-us/azure/architecture/multitenant-identity/app-roles).
     * 
     */
    public Output<Optional<List<ApplicationAppRole>>> appRoles() {
        return Codegen.optional(this.appRoles);
    }
    /**
     * The Client ID for the application.
     * 
     */
    @Export(name="clientId", refs={String.class}, tree="[0]")
    private Output<String> clientId;

    /**
     * @return The Client ID for the application.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }
    /**
     * A description of the application, as shown to end users.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of the application, as shown to end users.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Specifies whether this application supports device authentication without a user. Defaults to `false`.
     * 
     */
    @Export(name="deviceOnlyAuthEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deviceOnlyAuthEnabled;

    /**
     * @return Specifies whether this application supports device authentication without a user. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> deviceOnlyAuthEnabled() {
        return Codegen.optional(this.deviceOnlyAuthEnabled);
    }
    /**
     * Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
     * 
     */
    @Export(name="disabledByMicrosoft", refs={String.class}, tree="[0]")
    private Output<String> disabledByMicrosoft;

    /**
     * @return Whether Microsoft has disabled the registered application. If the application is disabled, this will be a string indicating the status/reason, e.g. `DisabledDueToViolationOfServicesAgreement`
     * 
     */
    public Output<String> disabledByMicrosoft() {
        return this.disabledByMicrosoft;
    }
    /**
     * The display name for the application.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name for the application.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Specifies whether the application is a public client. Appropriate for apps using token grant flows that don&#39;t use a redirect URI. Defaults to `false`.
     * 
     */
    @Export(name="fallbackPublicClientEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fallbackPublicClientEnabled;

    /**
     * @return Specifies whether the application is a public client. Appropriate for apps using token grant flows that don&#39;t use a redirect URI. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> fallbackPublicClientEnabled() {
        return Codegen.optional(this.fallbackPublicClientEnabled);
    }
    /**
     * A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     * &gt; **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for an application at the same time, so if you need to assign additional custom tags it&#39;s recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
     * 
     */
    @Export(name="featureTags", refs={List.class,ApplicationFeatureTag.class}, tree="[0,1]")
    private Output<List<ApplicationFeatureTag>> featureTags;

    /**
     * @return A `feature_tags` block as described below. Cannot be used together with the `tags` property.
     * 
     * &gt; **Features and Tags** Features are configured for an application using tags, and are provided as a shortcut to set the corresponding magic tag value for each feature. You cannot configure `feature_tags` and `tags` for an application at the same time, so if you need to assign additional custom tags it&#39;s recommended to use the `tags` property instead. Tag values also propagate to any linked service principals.
     * 
     */
    public Output<List<ApplicationFeatureTag>> featureTags() {
        return this.featureTags;
    }
    /**
     * A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
     * 
     */
    @Export(name="groupMembershipClaims", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupMembershipClaims;

    /**
     * @return A set of strings containing membership claims issued in a user or OAuth 2.0 access token that the app expects. Possible values are `None`, `SecurityGroup`, `DirectoryRole`, `ApplicationGroup` or `All`.
     * 
     */
    public Output<Optional<List<String>>> groupMembershipClaims() {
        return Codegen.optional(this.groupMembershipClaims);
    }
    /**
     * A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
     * 
     */
    @Export(name="identifierUris", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> identifierUris;

    /**
     * @return A set of user-defined URI(s) that uniquely identify an application within its Azure AD tenant, or within a verified custom domain if the application is multi-tenant.
     * 
     */
    public Output<Optional<List<String>>> identifierUris() {
        return Codegen.optional(this.identifierUris);
    }
    /**
     * A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
     * 
     */
    @Export(name="logoImage", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> logoImage;

    /**
     * @return A logo image to upload for the application, as a raw base64-encoded string. The image should be in gif, jpeg or png format. Note that once an image has been uploaded, it is not possible to remove it without replacing it with another image.
     * 
     */
    public Output<Optional<String>> logoImage() {
        return Codegen.optional(this.logoImage);
    }
    /**
     * CDN URL to the application&#39;s logo, as uploaded with the `logo_image` property.
     * 
     */
    @Export(name="logoUrl", refs={String.class}, tree="[0]")
    private Output<String> logoUrl;

    /**
     * @return CDN URL to the application&#39;s logo, as uploaded with the `logo_image` property.
     * 
     */
    public Output<String> logoUrl() {
        return this.logoUrl;
    }
    /**
     * URL of the application&#39;s marketing page.
     * 
     */
    @Export(name="marketingUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> marketingUrl;

    /**
     * @return URL of the application&#39;s marketing page.
     * 
     */
    public Output<Optional<String>> marketingUrl() {
        return Codegen.optional(this.marketingUrl);
    }
    /**
     * User-specified notes relevant for the management of the application.
     * 
     */
    @Export(name="notes", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notes;

    /**
     * @return User-specified notes relevant for the management of the application.
     * 
     */
    public Output<Optional<String>> notes() {
        return Codegen.optional(this.notes);
    }
    /**
     * A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    @Export(name="oauth2PermissionScopeIds", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> oauth2PermissionScopeIds;

    /**
     * @return A mapping of OAuth2.0 permission scope values to scope IDs, intended to be useful when referencing permission scopes in other resources in your configuration.
     * 
     */
    public Output<Map<String,String>> oauth2PermissionScopeIds() {
        return this.oauth2PermissionScopeIds;
    }
    /**
     * Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
     * 
     */
    @Export(name="oauth2PostResponseRequired", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> oauth2PostResponseRequired;

    /**
     * @return Specifies whether, as part of OAuth 2.0 token requests, Azure AD allows POST requests, as opposed to GET requests. Defaults to `false`, which specifies that only GET requests are allowed.
     * 
     */
    public Output<Optional<Boolean>> oauth2PostResponseRequired() {
        return Codegen.optional(this.oauth2PostResponseRequired);
    }
    /**
     * The application&#39;s object ID.
     * 
     */
    @Export(name="objectId", refs={String.class}, tree="[0]")
    private Output<String> objectId;

    /**
     * @return The application&#39;s object ID.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }
    /**
     * An `optional_claims` block as documented below.
     * 
     */
    @Export(name="optionalClaims", refs={ApplicationOptionalClaims.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationOptionalClaims> optionalClaims;

    /**
     * @return An `optional_claims` block as documented below.
     * 
     */
    public Output<Optional<ApplicationOptionalClaims>> optionalClaims() {
        return Codegen.optional(this.optionalClaims);
    }
    /**
     * A list of object IDs of principals that will be granted ownership of the application
     * 
     */
    @Export(name="owners", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> owners;

    /**
     * @return A list of object IDs of principals that will be granted ownership of the application
     * 
     */
    public Output<Optional<List<String>>> owners() {
        return Codegen.optional(this.owners);
    }
    /**
     * A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
     * 
     * &gt; **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the azuread.ApplicationPassword resource.
     * 
     */
    @Export(name="password", refs={ApplicationPassword.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationPassword> password;

    /**
     * @return A single `password` block as documented below. The password is generated during creation. By default, no password is generated.
     * 
     * &gt; **Creating a Password** The `password` block supports a single password for the application, and is provided so that a password can be generated when a new application is created. This helps to make new applications available for authentication more quickly. To add additional passwords to an application, see the azuread.ApplicationPassword resource.
     * 
     */
    public Output<Optional<ApplicationPassword>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
     * 
     */
    @Export(name="preventDuplicateNames", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> preventDuplicateNames;

    /**
     * @return If `true`, will return an error if an existing application is found with the same name. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> preventDuplicateNames() {
        return Codegen.optional(this.preventDuplicateNames);
    }
    /**
     * URL of the application&#39;s privacy statement.
     * 
     */
    @Export(name="privacyStatementUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> privacyStatementUrl;

    /**
     * @return URL of the application&#39;s privacy statement.
     * 
     */
    public Output<Optional<String>> privacyStatementUrl() {
        return Codegen.optional(this.privacyStatementUrl);
    }
    /**
     * A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
     * 
     */
    @Export(name="publicClient", refs={ApplicationPublicClient.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationPublicClient> publicClient;

    /**
     * @return A `public_client` block as documented below, which configures non-web app or non-web API application settings, for example mobile or other public clients such as an installed application running on a desktop device.
     * 
     */
    public Output<Optional<ApplicationPublicClient>> publicClient() {
        return Codegen.optional(this.publicClient);
    }
    /**
     * The verified publisher domain for the application.
     * 
     */
    @Export(name="publisherDomain", refs={String.class}, tree="[0]")
    private Output<String> publisherDomain;

    /**
     * @return The verified publisher domain for the application.
     * 
     */
    public Output<String> publisherDomain() {
        return this.publisherDomain;
    }
    /**
     * A collection of `required_resource_access` blocks as documented below.
     * 
     */
    @Export(name="requiredResourceAccesses", refs={List.class,ApplicationRequiredResourceAccess.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ApplicationRequiredResourceAccess>> requiredResourceAccesses;

    /**
     * @return A collection of `required_resource_access` blocks as documented below.
     * 
     */
    public Output<Optional<List<ApplicationRequiredResourceAccess>>> requiredResourceAccesses() {
        return Codegen.optional(this.requiredResourceAccesses);
    }
    /**
     * References application context information from a Service or Asset Management database.
     * 
     */
    @Export(name="serviceManagementReference", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceManagementReference;

    /**
     * @return References application context information from a Service or Asset Management database.
     * 
     */
    public Output<Optional<String>> serviceManagementReference() {
        return Codegen.optional(this.serviceManagementReference);
    }
    /**
     * The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
     * 
     * &gt; **Changing `sign_in_audience` for existing applications** When updating an existing application to use a `sign_in_audience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
     * 
     */
    @Export(name="signInAudience", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> signInAudience;

    /**
     * @return The Microsoft account types that are supported for the current application. Must be one of `AzureADMyOrg`, `AzureADMultipleOrgs`, `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`. Defaults to `AzureADMyOrg`.
     * 
     * &gt; **Changing `sign_in_audience` for existing applications** When updating an existing application to use a `sign_in_audience` value of `AzureADandPersonalMicrosoftAccount` or `PersonalMicrosoftAccount`, your configuration may no longer be valid. Refer to [official documentation](https://docs.microsoft.com/en-gb/azure/active-directory/develop/supported-accounts-validation) to understand the differences in supported configurations. Where possible, the provider will attempt to validate your configuration and try to avoid applying unsupported settings to your application.
     * 
     */
    public Output<Optional<String>> signInAudience() {
        return Codegen.optional(this.signInAudience);
    }
    /**
     * A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.
     * 
     */
    @Export(name="singlePageApplication", refs={ApplicationSinglePageApplication.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationSinglePageApplication> singlePageApplication;

    /**
     * @return A `single_page_application` block as documented below, which configures single-page application (SPA) related settings for this application.
     * 
     */
    public Output<Optional<ApplicationSinglePageApplication>> singlePageApplication() {
        return Codegen.optional(this.singlePageApplication);
    }
    /**
     * URL of the application&#39;s support page.
     * 
     */
    @Export(name="supportUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> supportUrl;

    /**
     * @return URL of the application&#39;s support page.
     * 
     */
    public Output<Optional<String>> supportUrl() {
        return Codegen.optional(this.supportUrl);
    }
    /**
     * A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.
     * 
     * &gt; **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it&#39;s recommended to use the `tags` property. Tag values also propagate to any linked service principals.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> tags;

    /**
     * @return A set of tags to apply to the application for configuring specific behaviours of the application and linked service principals. Note that these are not provided for use by practitioners. Cannot be used together with the `feature_tags` block.
     * 
     * &gt; **Tags and Features** Azure Active Directory uses special tag values to configure the behavior of applications. These can be specified using either the `tags` property or with the `feature_tags` block. If you need to set any custom tag values not supported by the `feature_tags` block, it&#39;s recommended to use the `tags` property. Tag values also propagate to any linked service principals.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }
    /**
     * Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
     * 
     * &gt; **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the azuread.ApplicationRegistration resource instead.
     * 
     */
    @Export(name="templateId", refs={String.class}, tree="[0]")
    private Output<String> templateId;

    /**
     * @return Unique ID for a templated application in the Azure AD App Gallery, from which to create the application. Changing this forces a new resource to be created.
     * 
     * &gt; **Tip for Gallery Applications** This resource can  be used to instantiate a gallery application, however it will also attempt to manage the properties of the resulting application. If this is not desired, consider using the azuread.ApplicationRegistration resource instead.
     * 
     */
    public Output<String> templateId() {
        return this.templateId;
    }
    /**
     * URL of the application&#39;s terms of service statement.
     * 
     */
    @Export(name="termsOfServiceUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> termsOfServiceUrl;

    /**
     * @return URL of the application&#39;s terms of service statement.
     * 
     */
    public Output<Optional<String>> termsOfServiceUrl() {
        return Codegen.optional(this.termsOfServiceUrl);
    }
    /**
     * A `web` block as documented below, which configures web related settings for this application.
     * 
     * &gt; **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing applications if you want to avoid name collisions.
     * 
     */
    @Export(name="web", refs={ApplicationWeb.class}, tree="[0]")
    private Output</* @Nullable */ ApplicationWeb> web;

    /**
     * @return A `web` block as documented below, which configures web related settings for this application.
     * 
     * &gt; **Application Name Uniqueness** Application names are not unique within Azure Active Directory. Use the `prevent_duplicate_names` argument to check for existing applications if you want to avoid name collisions.
     * 
     */
    public Output<Optional<ApplicationWeb>> web() {
        return Codegen.optional(this.web);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Application(java.lang.String name) {
        this(name, ApplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Application(java.lang.String name, ApplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Application(java.lang.String name, ApplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/application:Application", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Application(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/application:Application", name, state, makeResourceOptions(options, id), false);
    }

    private static ApplicationArgs makeArgs(ApplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplicationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Application get(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Application(name, id, state, options);
    }
}
