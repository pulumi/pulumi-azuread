// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.SynchronizationJobProvisionOnDemandParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SynchronizationJobProvisionOnDemandState extends com.pulumi.resources.ResourceArgs {

    public static final SynchronizationJobProvisionOnDemandState Empty = new SynchronizationJobProvisionOnDemandState();

    /**
     * One or more `parameter` blocks as documented below.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<SynchronizationJobProvisionOnDemandParameterArgs>> parameters;

    /**
     * @return One or more `parameter` blocks as documented below.
     * 
     */
    public Optional<Output<List<SynchronizationJobProvisionOnDemandParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The ID of the service principal for the synchronization job.
     * 
     */
    @Import(name="servicePrincipalId")
    private @Nullable Output<String> servicePrincipalId;

    /**
     * @return The ID of the service principal for the synchronization job.
     * 
     */
    public Optional<Output<String>> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }

    /**
     * The ID of the synchronization job.
     * 
     */
    @Import(name="synchronizationJobId")
    private @Nullable Output<String> synchronizationJobId;

    /**
     * @return The ID of the synchronization job.
     * 
     */
    public Optional<Output<String>> synchronizationJobId() {
        return Optional.ofNullable(this.synchronizationJobId);
    }

    @Import(name="triggers")
    private @Nullable Output<Map<String,String>> triggers;

    public Optional<Output<Map<String,String>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    private SynchronizationJobProvisionOnDemandState() {}

    private SynchronizationJobProvisionOnDemandState(SynchronizationJobProvisionOnDemandState $) {
        this.parameters = $.parameters;
        this.servicePrincipalId = $.servicePrincipalId;
        this.synchronizationJobId = $.synchronizationJobId;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SynchronizationJobProvisionOnDemandState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SynchronizationJobProvisionOnDemandState $;

        public Builder() {
            $ = new SynchronizationJobProvisionOnDemandState();
        }

        public Builder(SynchronizationJobProvisionOnDemandState defaults) {
            $ = new SynchronizationJobProvisionOnDemandState(Objects.requireNonNull(defaults));
        }

        /**
         * @param parameters One or more `parameter` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<SynchronizationJobProvisionOnDemandParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters One or more `parameter` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<SynchronizationJobProvisionOnDemandParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters One or more `parameter` blocks as documented below.
         * 
         * @return builder
         * 
         */
        public Builder parameters(SynchronizationJobProvisionOnDemandParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param servicePrincipalId The ID of the service principal for the synchronization job.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(@Nullable Output<String> servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalId The ID of the service principal for the synchronization job.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(String servicePrincipalId) {
            return servicePrincipalId(Output.of(servicePrincipalId));
        }

        /**
         * @param synchronizationJobId The ID of the synchronization job.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationJobId(@Nullable Output<String> synchronizationJobId) {
            $.synchronizationJobId = synchronizationJobId;
            return this;
        }

        /**
         * @param synchronizationJobId The ID of the synchronization job.
         * 
         * @return builder
         * 
         */
        public Builder synchronizationJobId(String synchronizationJobId) {
            return synchronizationJobId(Output.of(synchronizationJobId));
        }

        public Builder triggers(@Nullable Output<Map<String,String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        public Builder triggers(Map<String,String> triggers) {
            return triggers(Output.of(triggers));
        }

        public SynchronizationJobProvisionOnDemandState build() {
            return $;
        }
    }

}
