// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return Whether or not the account is enabled.
     * 
     */
    private Boolean accountEnabled;
    /**
     * @return The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`.
     * 
     */
    private String ageGroup;
    /**
     * @return A list of telephone numbers for the user.
     * 
     */
    private List<String> businessPhones;
    /**
     * @return The city in which the user is located.
     * 
     */
    private String city;
    /**
     * @return The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    private String companyName;
    /**
     * @return Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`.
     * 
     */
    private String consentProvidedForMinor;
    /**
     * @return The cost center associated with the user.
     * 
     */
    private String costCenter;
    /**
     * @return The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    private String country;
    /**
     * @return Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).
     * 
     */
    private String creationType;
    /**
     * @return The name for the department in which the user works.
     * 
     */
    private String department;
    /**
     * @return The display name of the user.
     * 
     */
    private String displayName;
    /**
     * @return The name of the division in which the user works.
     * 
     */
    private String division;
    /**
     * @return The hire date of the user, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     * 
     */
    private String employeeHireDate;
    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    private String employeeId;
    /**
     * @return Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    private String employeeType;
    /**
     * @return For an external user invited to the tenant, this property represents the invited user&#39;s invitation status. Possible values are `PendingAcceptance` or `Accepted`.
     * 
     */
    private String externalUserState;
    /**
     * @return The fax number of the user.
     * 
     */
    private String faxNumber;
    /**
     * @return The given name (first name) of the user.
     * 
     */
    private String givenName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
     * 
     */
    private List<String> imAddresses;
    /**
     * @return The userâ€™s job title.
     * 
     */
    private String jobTitle;
    /**
     * @return The SMTP address for the user.
     * 
     */
    private String mail;
    /**
     * @return The email alias of the user.
     * 
     */
    private String mailNickname;
    /**
     * @return The object ID of the user&#39;s manager.
     * 
     */
    private String managerId;
    /**
     * @return The primary cellular telephone number for the user.
     * 
     */
    private String mobilePhone;
    /**
     * @return The object ID of the user.
     * 
     */
    private String objectId;
    /**
     * @return The office location in the user&#39;s place of business.
     * 
     */
    private String officeLocation;
    /**
     * @return The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    private String onpremisesDistinguishedName;
    /**
     * @return The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    private String onpremisesDomainName;
    /**
     * @return The value used to associate an on-premise Active Directory user account with their Azure AD user object.
     * 
     */
    private String onpremisesImmutableId;
    /**
     * @return The on-premise SAM account name of the user.
     * 
     */
    private String onpremisesSamAccountName;
    /**
     * @return The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    private String onpremisesSecurityIdentifier;
    /**
     * @return Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
     * 
     */
    private Boolean onpremisesSyncEnabled;
    /**
     * @return The on-premise user principal name of the user.
     * 
     */
    private String onpremisesUserPrincipalName;
    /**
     * @return A list of additional email addresses for the user.
     * 
     */
    private List<String> otherMails;
    /**
     * @return The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    private String postalCode;
    /**
     * @return The user&#39;s preferred language, in ISO 639-1 notation.
     * 
     */
    private String preferredLanguage;
    /**
     * @return List of email addresses for the user that direct to the same mailbox.
     * 
     */
    private List<String> proxyAddresses;
    /**
     * @return Whether or not the Outlook global address list should include this user.
     * 
     */
    private Boolean showInAddressList;
    /**
     * @return The state or province in the user&#39;s address.
     * 
     */
    private String state;
    /**
     * @return The street address of the user&#39;s place of business.
     * 
     */
    private String streetAddress;
    /**
     * @return The user&#39;s surname (family name or last name).
     * 
     */
    private String surname;
    /**
     * @return The usage location of the user.
     * 
     */
    private String usageLocation;
    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    private String userPrincipalName;
    /**
     * @return The user type in the directory. Possible values are `Guest` or `Member`.
     * 
     */
    private String userType;

    private GetUserResult() {}
    /**
     * @return Whether or not the account is enabled.
     * 
     */
    public Boolean accountEnabled() {
        return this.accountEnabled;
    }
    /**
     * @return The age group of the user. Supported values are `Adult`, `NotAdult` and `Minor`.
     * 
     */
    public String ageGroup() {
        return this.ageGroup;
    }
    /**
     * @return A list of telephone numbers for the user.
     * 
     */
    public List<String> businessPhones() {
        return this.businessPhones;
    }
    /**
     * @return The city in which the user is located.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return The company name which the user is associated. This property can be useful for describing the company that an external user comes from.
     * 
     */
    public String companyName() {
        return this.companyName;
    }
    /**
     * @return Whether consent has been obtained for minors. Supported values are `Granted`, `Denied` and `NotRequired`.
     * 
     */
    public String consentProvidedForMinor() {
        return this.consentProvidedForMinor;
    }
    /**
     * @return The cost center associated with the user.
     * 
     */
    public String costCenter() {
        return this.costCenter;
    }
    /**
     * @return The country/region in which the user is located, e.g. `US` or `UK`.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return Indicates whether the user account was created as a regular school or work account (`null`), an external account (`Invitation`), a local account for an Azure Active Directory B2C tenant (`LocalAccount`) or self-service sign-up using email verification (`EmailVerified`).
     * 
     */
    public String creationType() {
        return this.creationType;
    }
    /**
     * @return The name for the department in which the user works.
     * 
     */
    public String department() {
        return this.department;
    }
    /**
     * @return The display name of the user.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The name of the division in which the user works.
     * 
     */
    public String division() {
        return this.division;
    }
    /**
     * @return The hire date of the user, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
     * 
     */
    public String employeeHireDate() {
        return this.employeeHireDate;
    }
    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    public String employeeId() {
        return this.employeeId;
    }
    /**
     * @return Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor.
     * 
     */
    public String employeeType() {
        return this.employeeType;
    }
    /**
     * @return For an external user invited to the tenant, this property represents the invited user&#39;s invitation status. Possible values are `PendingAcceptance` or `Accepted`.
     * 
     */
    public String externalUserState() {
        return this.externalUserState;
    }
    /**
     * @return The fax number of the user.
     * 
     */
    public String faxNumber() {
        return this.faxNumber;
    }
    /**
     * @return The given name (first name) of the user.
     * 
     */
    public String givenName() {
        return this.givenName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A list of instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user.
     * 
     */
    public List<String> imAddresses() {
        return this.imAddresses;
    }
    /**
     * @return The userâ€™s job title.
     * 
     */
    public String jobTitle() {
        return this.jobTitle;
    }
    /**
     * @return The SMTP address for the user.
     * 
     */
    public String mail() {
        return this.mail;
    }
    /**
     * @return The email alias of the user.
     * 
     */
    public String mailNickname() {
        return this.mailNickname;
    }
    /**
     * @return The object ID of the user&#39;s manager.
     * 
     */
    public String managerId() {
        return this.managerId;
    }
    /**
     * @return The primary cellular telephone number for the user.
     * 
     */
    public String mobilePhone() {
        return this.mobilePhone;
    }
    /**
     * @return The object ID of the user.
     * 
     */
    public String objectId() {
        return this.objectId;
    }
    /**
     * @return The office location in the user&#39;s place of business.
     * 
     */
    public String officeLocation() {
        return this.officeLocation;
    }
    /**
     * @return The on-premises distinguished name (DN) of the user, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public String onpremisesDistinguishedName() {
        return this.onpremisesDistinguishedName;
    }
    /**
     * @return The on-premises FQDN, also called dnsDomainName, synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public String onpremisesDomainName() {
        return this.onpremisesDomainName;
    }
    /**
     * @return The value used to associate an on-premise Active Directory user account with their Azure AD user object.
     * 
     */
    public String onpremisesImmutableId() {
        return this.onpremisesImmutableId;
    }
    /**
     * @return The on-premise SAM account name of the user.
     * 
     */
    public String onpremisesSamAccountName() {
        return this.onpremisesSamAccountName;
    }
    /**
     * @return The on-premises security identifier (SID), synchronised from the on-premises directory when Azure AD Connect is used.
     * 
     */
    public String onpremisesSecurityIdentifier() {
        return this.onpremisesSecurityIdentifier;
    }
    /**
     * @return Whether this user is synchronised from an on-premises directory (`true`), no longer synchronised (`false`), or has never been synchronised (`null`).
     * 
     */
    public Boolean onpremisesSyncEnabled() {
        return this.onpremisesSyncEnabled;
    }
    /**
     * @return The on-premise user principal name of the user.
     * 
     */
    public String onpremisesUserPrincipalName() {
        return this.onpremisesUserPrincipalName;
    }
    /**
     * @return A list of additional email addresses for the user.
     * 
     */
    public List<String> otherMails() {
        return this.otherMails;
    }
    /**
     * @return The postal code for the user&#39;s postal address. The postal code is specific to the user&#39;s country/region. In the United States of America, this attribute contains the ZIP code.
     * 
     */
    public String postalCode() {
        return this.postalCode;
    }
    /**
     * @return The user&#39;s preferred language, in ISO 639-1 notation.
     * 
     */
    public String preferredLanguage() {
        return this.preferredLanguage;
    }
    /**
     * @return List of email addresses for the user that direct to the same mailbox.
     * 
     */
    public List<String> proxyAddresses() {
        return this.proxyAddresses;
    }
    /**
     * @return Whether or not the Outlook global address list should include this user.
     * 
     */
    public Boolean showInAddressList() {
        return this.showInAddressList;
    }
    /**
     * @return The state or province in the user&#39;s address.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The street address of the user&#39;s place of business.
     * 
     */
    public String streetAddress() {
        return this.streetAddress;
    }
    /**
     * @return The user&#39;s surname (family name or last name).
     * 
     */
    public String surname() {
        return this.surname;
    }
    /**
     * @return The usage location of the user.
     * 
     */
    public String usageLocation() {
        return this.usageLocation;
    }
    /**
     * @return The user principal name (UPN) of the user.
     * 
     */
    public String userPrincipalName() {
        return this.userPrincipalName;
    }
    /**
     * @return The user type in the directory. Possible values are `Guest` or `Member`.
     * 
     */
    public String userType() {
        return this.userType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean accountEnabled;
        private String ageGroup;
        private List<String> businessPhones;
        private String city;
        private String companyName;
        private String consentProvidedForMinor;
        private String costCenter;
        private String country;
        private String creationType;
        private String department;
        private String displayName;
        private String division;
        private String employeeHireDate;
        private String employeeId;
        private String employeeType;
        private String externalUserState;
        private String faxNumber;
        private String givenName;
        private String id;
        private List<String> imAddresses;
        private String jobTitle;
        private String mail;
        private String mailNickname;
        private String managerId;
        private String mobilePhone;
        private String objectId;
        private String officeLocation;
        private String onpremisesDistinguishedName;
        private String onpremisesDomainName;
        private String onpremisesImmutableId;
        private String onpremisesSamAccountName;
        private String onpremisesSecurityIdentifier;
        private Boolean onpremisesSyncEnabled;
        private String onpremisesUserPrincipalName;
        private List<String> otherMails;
        private String postalCode;
        private String preferredLanguage;
        private List<String> proxyAddresses;
        private Boolean showInAddressList;
        private String state;
        private String streetAddress;
        private String surname;
        private String usageLocation;
        private String userPrincipalName;
        private String userType;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountEnabled = defaults.accountEnabled;
    	      this.ageGroup = defaults.ageGroup;
    	      this.businessPhones = defaults.businessPhones;
    	      this.city = defaults.city;
    	      this.companyName = defaults.companyName;
    	      this.consentProvidedForMinor = defaults.consentProvidedForMinor;
    	      this.costCenter = defaults.costCenter;
    	      this.country = defaults.country;
    	      this.creationType = defaults.creationType;
    	      this.department = defaults.department;
    	      this.displayName = defaults.displayName;
    	      this.division = defaults.division;
    	      this.employeeHireDate = defaults.employeeHireDate;
    	      this.employeeId = defaults.employeeId;
    	      this.employeeType = defaults.employeeType;
    	      this.externalUserState = defaults.externalUserState;
    	      this.faxNumber = defaults.faxNumber;
    	      this.givenName = defaults.givenName;
    	      this.id = defaults.id;
    	      this.imAddresses = defaults.imAddresses;
    	      this.jobTitle = defaults.jobTitle;
    	      this.mail = defaults.mail;
    	      this.mailNickname = defaults.mailNickname;
    	      this.managerId = defaults.managerId;
    	      this.mobilePhone = defaults.mobilePhone;
    	      this.objectId = defaults.objectId;
    	      this.officeLocation = defaults.officeLocation;
    	      this.onpremisesDistinguishedName = defaults.onpremisesDistinguishedName;
    	      this.onpremisesDomainName = defaults.onpremisesDomainName;
    	      this.onpremisesImmutableId = defaults.onpremisesImmutableId;
    	      this.onpremisesSamAccountName = defaults.onpremisesSamAccountName;
    	      this.onpremisesSecurityIdentifier = defaults.onpremisesSecurityIdentifier;
    	      this.onpremisesSyncEnabled = defaults.onpremisesSyncEnabled;
    	      this.onpremisesUserPrincipalName = defaults.onpremisesUserPrincipalName;
    	      this.otherMails = defaults.otherMails;
    	      this.postalCode = defaults.postalCode;
    	      this.preferredLanguage = defaults.preferredLanguage;
    	      this.proxyAddresses = defaults.proxyAddresses;
    	      this.showInAddressList = defaults.showInAddressList;
    	      this.state = defaults.state;
    	      this.streetAddress = defaults.streetAddress;
    	      this.surname = defaults.surname;
    	      this.usageLocation = defaults.usageLocation;
    	      this.userPrincipalName = defaults.userPrincipalName;
    	      this.userType = defaults.userType;
        }

        @CustomType.Setter
        public Builder accountEnabled(Boolean accountEnabled) {
            if (accountEnabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "accountEnabled");
            }
            this.accountEnabled = accountEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ageGroup(String ageGroup) {
            if (ageGroup == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "ageGroup");
            }
            this.ageGroup = ageGroup;
            return this;
        }
        @CustomType.Setter
        public Builder businessPhones(List<String> businessPhones) {
            if (businessPhones == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "businessPhones");
            }
            this.businessPhones = businessPhones;
            return this;
        }
        public Builder businessPhones(String... businessPhones) {
            return businessPhones(List.of(businessPhones));
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder companyName(String companyName) {
            if (companyName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "companyName");
            }
            this.companyName = companyName;
            return this;
        }
        @CustomType.Setter
        public Builder consentProvidedForMinor(String consentProvidedForMinor) {
            if (consentProvidedForMinor == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "consentProvidedForMinor");
            }
            this.consentProvidedForMinor = consentProvidedForMinor;
            return this;
        }
        @CustomType.Setter
        public Builder costCenter(String costCenter) {
            if (costCenter == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "costCenter");
            }
            this.costCenter = costCenter;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder creationType(String creationType) {
            if (creationType == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "creationType");
            }
            this.creationType = creationType;
            return this;
        }
        @CustomType.Setter
        public Builder department(String department) {
            if (department == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "department");
            }
            this.department = department;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder division(String division) {
            if (division == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "division");
            }
            this.division = division;
            return this;
        }
        @CustomType.Setter
        public Builder employeeHireDate(String employeeHireDate) {
            if (employeeHireDate == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "employeeHireDate");
            }
            this.employeeHireDate = employeeHireDate;
            return this;
        }
        @CustomType.Setter
        public Builder employeeId(String employeeId) {
            if (employeeId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "employeeId");
            }
            this.employeeId = employeeId;
            return this;
        }
        @CustomType.Setter
        public Builder employeeType(String employeeType) {
            if (employeeType == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "employeeType");
            }
            this.employeeType = employeeType;
            return this;
        }
        @CustomType.Setter
        public Builder externalUserState(String externalUserState) {
            if (externalUserState == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "externalUserState");
            }
            this.externalUserState = externalUserState;
            return this;
        }
        @CustomType.Setter
        public Builder faxNumber(String faxNumber) {
            if (faxNumber == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "faxNumber");
            }
            this.faxNumber = faxNumber;
            return this;
        }
        @CustomType.Setter
        public Builder givenName(String givenName) {
            if (givenName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "givenName");
            }
            this.givenName = givenName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imAddresses(List<String> imAddresses) {
            if (imAddresses == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "imAddresses");
            }
            this.imAddresses = imAddresses;
            return this;
        }
        public Builder imAddresses(String... imAddresses) {
            return imAddresses(List.of(imAddresses));
        }
        @CustomType.Setter
        public Builder jobTitle(String jobTitle) {
            if (jobTitle == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "jobTitle");
            }
            this.jobTitle = jobTitle;
            return this;
        }
        @CustomType.Setter
        public Builder mail(String mail) {
            if (mail == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "mail");
            }
            this.mail = mail;
            return this;
        }
        @CustomType.Setter
        public Builder mailNickname(String mailNickname) {
            if (mailNickname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "mailNickname");
            }
            this.mailNickname = mailNickname;
            return this;
        }
        @CustomType.Setter
        public Builder managerId(String managerId) {
            if (managerId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "managerId");
            }
            this.managerId = managerId;
            return this;
        }
        @CustomType.Setter
        public Builder mobilePhone(String mobilePhone) {
            if (mobilePhone == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "mobilePhone");
            }
            this.mobilePhone = mobilePhone;
            return this;
        }
        @CustomType.Setter
        public Builder objectId(String objectId) {
            if (objectId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "objectId");
            }
            this.objectId = objectId;
            return this;
        }
        @CustomType.Setter
        public Builder officeLocation(String officeLocation) {
            if (officeLocation == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "officeLocation");
            }
            this.officeLocation = officeLocation;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesDistinguishedName(String onpremisesDistinguishedName) {
            if (onpremisesDistinguishedName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesDistinguishedName");
            }
            this.onpremisesDistinguishedName = onpremisesDistinguishedName;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesDomainName(String onpremisesDomainName) {
            if (onpremisesDomainName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesDomainName");
            }
            this.onpremisesDomainName = onpremisesDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesImmutableId(String onpremisesImmutableId) {
            if (onpremisesImmutableId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesImmutableId");
            }
            this.onpremisesImmutableId = onpremisesImmutableId;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesSamAccountName(String onpremisesSamAccountName) {
            if (onpremisesSamAccountName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesSamAccountName");
            }
            this.onpremisesSamAccountName = onpremisesSamAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesSecurityIdentifier(String onpremisesSecurityIdentifier) {
            if (onpremisesSecurityIdentifier == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesSecurityIdentifier");
            }
            this.onpremisesSecurityIdentifier = onpremisesSecurityIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesSyncEnabled(Boolean onpremisesSyncEnabled) {
            if (onpremisesSyncEnabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesSyncEnabled");
            }
            this.onpremisesSyncEnabled = onpremisesSyncEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder onpremisesUserPrincipalName(String onpremisesUserPrincipalName) {
            if (onpremisesUserPrincipalName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "onpremisesUserPrincipalName");
            }
            this.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder otherMails(List<String> otherMails) {
            if (otherMails == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "otherMails");
            }
            this.otherMails = otherMails;
            return this;
        }
        public Builder otherMails(String... otherMails) {
            return otherMails(List.of(otherMails));
        }
        @CustomType.Setter
        public Builder postalCode(String postalCode) {
            if (postalCode == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "postalCode");
            }
            this.postalCode = postalCode;
            return this;
        }
        @CustomType.Setter
        public Builder preferredLanguage(String preferredLanguage) {
            if (preferredLanguage == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "preferredLanguage");
            }
            this.preferredLanguage = preferredLanguage;
            return this;
        }
        @CustomType.Setter
        public Builder proxyAddresses(List<String> proxyAddresses) {
            if (proxyAddresses == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "proxyAddresses");
            }
            this.proxyAddresses = proxyAddresses;
            return this;
        }
        public Builder proxyAddresses(String... proxyAddresses) {
            return proxyAddresses(List.of(proxyAddresses));
        }
        @CustomType.Setter
        public Builder showInAddressList(Boolean showInAddressList) {
            if (showInAddressList == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "showInAddressList");
            }
            this.showInAddressList = showInAddressList;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streetAddress(String streetAddress) {
            if (streetAddress == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "streetAddress");
            }
            this.streetAddress = streetAddress;
            return this;
        }
        @CustomType.Setter
        public Builder surname(String surname) {
            if (surname == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "surname");
            }
            this.surname = surname;
            return this;
        }
        @CustomType.Setter
        public Builder usageLocation(String usageLocation) {
            if (usageLocation == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "usageLocation");
            }
            this.usageLocation = usageLocation;
            return this;
        }
        @CustomType.Setter
        public Builder userPrincipalName(String userPrincipalName) {
            if (userPrincipalName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userPrincipalName");
            }
            this.userPrincipalName = userPrincipalName;
            return this;
        }
        @CustomType.Setter
        public Builder userType(String userType) {
            if (userType == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userType");
            }
            this.userType = userType;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.accountEnabled = accountEnabled;
            _resultValue.ageGroup = ageGroup;
            _resultValue.businessPhones = businessPhones;
            _resultValue.city = city;
            _resultValue.companyName = companyName;
            _resultValue.consentProvidedForMinor = consentProvidedForMinor;
            _resultValue.costCenter = costCenter;
            _resultValue.country = country;
            _resultValue.creationType = creationType;
            _resultValue.department = department;
            _resultValue.displayName = displayName;
            _resultValue.division = division;
            _resultValue.employeeHireDate = employeeHireDate;
            _resultValue.employeeId = employeeId;
            _resultValue.employeeType = employeeType;
            _resultValue.externalUserState = externalUserState;
            _resultValue.faxNumber = faxNumber;
            _resultValue.givenName = givenName;
            _resultValue.id = id;
            _resultValue.imAddresses = imAddresses;
            _resultValue.jobTitle = jobTitle;
            _resultValue.mail = mail;
            _resultValue.mailNickname = mailNickname;
            _resultValue.managerId = managerId;
            _resultValue.mobilePhone = mobilePhone;
            _resultValue.objectId = objectId;
            _resultValue.officeLocation = officeLocation;
            _resultValue.onpremisesDistinguishedName = onpremisesDistinguishedName;
            _resultValue.onpremisesDomainName = onpremisesDomainName;
            _resultValue.onpremisesImmutableId = onpremisesImmutableId;
            _resultValue.onpremisesSamAccountName = onpremisesSamAccountName;
            _resultValue.onpremisesSecurityIdentifier = onpremisesSecurityIdentifier;
            _resultValue.onpremisesSyncEnabled = onpremisesSyncEnabled;
            _resultValue.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
            _resultValue.otherMails = otherMails;
            _resultValue.postalCode = postalCode;
            _resultValue.preferredLanguage = preferredLanguage;
            _resultValue.proxyAddresses = proxyAddresses;
            _resultValue.showInAddressList = showInAddressList;
            _resultValue.state = state;
            _resultValue.streetAddress = streetAddress;
            _resultValue.surname = surname;
            _resultValue.usageLocation = usageLocation;
            _resultValue.userPrincipalName = userPrincipalName;
            _resultValue.userType = userType;
            return _resultValue;
        }
    }
}
