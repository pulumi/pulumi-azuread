// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticationStrengthPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticationStrengthPolicyArgs Empty = new AuthenticationStrengthPolicyArgs();

    /**
     * List of allowed authentication methods for this authentication strength policy.
     * 
     */
    @Import(name="allowedCombinations", required=true)
    private Output<List<String>> allowedCombinations;

    /**
     * @return List of allowed authentication methods for this authentication strength policy.
     * 
     */
    public Output<List<String>> allowedCombinations() {
        return this.allowedCombinations;
    }

    /**
     * The description for this authentication strength policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for this authentication strength policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The friendly name for this authentication strength policy.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The friendly name for this authentication strength policy.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    private AuthenticationStrengthPolicyArgs() {}

    private AuthenticationStrengthPolicyArgs(AuthenticationStrengthPolicyArgs $) {
        this.allowedCombinations = $.allowedCombinations;
        this.description = $.description;
        this.displayName = $.displayName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticationStrengthPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticationStrengthPolicyArgs $;

        public Builder() {
            $ = new AuthenticationStrengthPolicyArgs();
        }

        public Builder(AuthenticationStrengthPolicyArgs defaults) {
            $ = new AuthenticationStrengthPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedCombinations List of allowed authentication methods for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedCombinations(Output<List<String>> allowedCombinations) {
            $.allowedCombinations = allowedCombinations;
            return this;
        }

        /**
         * @param allowedCombinations List of allowed authentication methods for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedCombinations(List<String> allowedCombinations) {
            return allowedCombinations(Output.of(allowedCombinations));
        }

        /**
         * @param allowedCombinations List of allowed authentication methods for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder allowedCombinations(String... allowedCombinations) {
            return allowedCombinations(List.of(allowedCombinations));
        }

        /**
         * @param description The description for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The friendly name for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The friendly name for this authentication strength policy.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public AuthenticationStrengthPolicyArgs build() {
            $.allowedCombinations = Objects.requireNonNull($.allowedCombinations, "expected parameter 'allowedCombinations' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            return $;
        }
    }

}
