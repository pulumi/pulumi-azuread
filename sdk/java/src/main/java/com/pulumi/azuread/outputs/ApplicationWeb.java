// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.azuread.outputs.ApplicationWebImplicitGrant;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationWeb {
    /**
     * @return Home page or landing page of the application.
     * 
     */
    private @Nullable String homepageUrl;
    /**
     * @return An `implicit_grant` block as documented above.
     * 
     */
    private @Nullable ApplicationWebImplicitGrant implicitGrant;
    /**
     * @return The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    private @Nullable String logoutUrl;
    /**
     * @return A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
     * 
     */
    private @Nullable List<String> redirectUris;

    private ApplicationWeb() {}
    /**
     * @return Home page or landing page of the application.
     * 
     */
    public Optional<String> homepageUrl() {
        return Optional.ofNullable(this.homepageUrl);
    }
    /**
     * @return An `implicit_grant` block as documented above.
     * 
     */
    public Optional<ApplicationWebImplicitGrant> implicitGrant() {
        return Optional.ofNullable(this.implicitGrant);
    }
    /**
     * @return The URL that will be used by Microsoft&#39;s authorization service to sign out a user using front-channel, back-channel or SAML logout protocols.
     * 
     */
    public Optional<String> logoutUrl() {
        return Optional.ofNullable(this.logoutUrl);
    }
    /**
     * @return A set of URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent. Must be a valid `http` URL or a URN.
     * 
     */
    public List<String> redirectUris() {
        return this.redirectUris == null ? List.of() : this.redirectUris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationWeb defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String homepageUrl;
        private @Nullable ApplicationWebImplicitGrant implicitGrant;
        private @Nullable String logoutUrl;
        private @Nullable List<String> redirectUris;
        public Builder() {}
        public Builder(ApplicationWeb defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.homepageUrl = defaults.homepageUrl;
    	      this.implicitGrant = defaults.implicitGrant;
    	      this.logoutUrl = defaults.logoutUrl;
    	      this.redirectUris = defaults.redirectUris;
        }

        @CustomType.Setter
        public Builder homepageUrl(@Nullable String homepageUrl) {
            this.homepageUrl = homepageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder implicitGrant(@Nullable ApplicationWebImplicitGrant implicitGrant) {
            this.implicitGrant = implicitGrant;
            return this;
        }
        @CustomType.Setter
        public Builder logoutUrl(@Nullable String logoutUrl) {
            this.logoutUrl = logoutUrl;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUris(@Nullable List<String> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        public ApplicationWeb build() {
            final var o = new ApplicationWeb();
            o.homepageUrl = homepageUrl;
            o.implicitGrant = implicitGrant;
            o.logoutUrl = logoutUrl;
            o.redirectUris = redirectUris;
            return o;
        }
    }
}
