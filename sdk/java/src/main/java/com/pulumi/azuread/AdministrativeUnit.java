// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.AdministrativeUnitArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.AdministrativeUnitState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an Administrative Unit within Azure Active Directory.
 * 
 * ## API Permissions
 * 
 * The following API permissions are required in order to use this resource.
 * 
 * When authenticated with a service principal, this resource requires one of the following application roles: `AdministrativeUnit.ReadWrite.All` or `Directory.ReadWrite.All`
 * 
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Privileged Role Administrator` or `Global Administrator`
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuread.AdministrativeUnit;
 * import com.pulumi.azuread.AdministrativeUnitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new AdministrativeUnit("example", AdministrativeUnitArgs.builder()
 *             .displayName("Example-AU")
 *             .description("Just an example")
 *             .hiddenMembershipEnabled(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Administrative units can be imported using their object ID, e.g.
 * 
 * ```sh
 * $ pulumi import azuread:index/administrativeUnit:AdministrativeUnit example /directory/administrativeUnits/00000000-0000-0000-0000-000000000000
 * ```
 * 
 */
@ResourceType(type="azuread:index/administrativeUnit:AdministrativeUnit")
public class AdministrativeUnit extends com.pulumi.resources.CustomResource {
    /**
     * The description of the administrative unit.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the administrative unit.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The display name of the administrative unit.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the administrative unit.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Whether the administrative unit and its members are hidden or publicly viewable in the directory.
     * 
     */
    @Export(name="hiddenMembershipEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hiddenMembershipEnabled;

    /**
     * @return Whether the administrative unit and its members are hidden or publicly viewable in the directory.
     * 
     */
    public Output<Optional<Boolean>> hiddenMembershipEnabled() {
        return Codegen.optional(this.hiddenMembershipEnabled);
    }
    /**
     * A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
     * 
     * &gt; **Caution** When using the `members` property of the azuread.AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `azuread.Group` resource, in order to avoid a persistent diff.
     * 
     * !&gt; **Warning** Do not use the `members` property at the same time as the azuread.AdministrativeUnitMember resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.
     * 
     */
    @Export(name="members", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> members;

    /**
     * @return A set of object IDs of members who should be present in this administrative unit. Supported object types are Users or Groups.
     * 
     * &gt; **Caution** When using the `members` property of the azuread.AdministrativeUnit resource, to manage Administrative Unit membership for a group, you will need to use an `ignoreChanges = [administrativeUnitIds]` lifecycle meta argument for the `azuread.Group` resource, in order to avoid a persistent diff.
     * 
     * !&gt; **Warning** Do not use the `members` property at the same time as the azuread.AdministrativeUnitMember resource for the same administrative unit. Doing so will cause a conflict and administrative unit members will be removed.
     * 
     */
    public Output<List<String>> members() {
        return this.members;
    }
    /**
     * The object ID of the administrative unit.
     * 
     */
    @Export(name="objectId", refs={String.class}, tree="[0]")
    private Output<String> objectId;

    /**
     * @return The object ID of the administrative unit.
     * 
     */
    public Output<String> objectId() {
        return this.objectId;
    }
    /**
     * If `true`, will return an error if an existing administrative unit is found with the same name
     * 
     */
    @Export(name="preventDuplicateNames", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> preventDuplicateNames;

    /**
     * @return If `true`, will return an error if an existing administrative unit is found with the same name
     * 
     */
    public Output<Optional<Boolean>> preventDuplicateNames() {
        return Codegen.optional(this.preventDuplicateNames);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AdministrativeUnit(java.lang.String name) {
        this(name, AdministrativeUnitArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AdministrativeUnit(java.lang.String name, AdministrativeUnitArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AdministrativeUnit(java.lang.String name, AdministrativeUnitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/administrativeUnit:AdministrativeUnit", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AdministrativeUnit(java.lang.String name, Output<java.lang.String> id, @Nullable AdministrativeUnitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/administrativeUnit:AdministrativeUnit", name, state, makeResourceOptions(options, id), false);
    }

    private static AdministrativeUnitArgs makeArgs(AdministrativeUnitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AdministrativeUnitArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AdministrativeUnit get(java.lang.String name, Output<java.lang.String> id, @Nullable AdministrativeUnitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AdministrativeUnit(name, id, state, options);
    }
}
