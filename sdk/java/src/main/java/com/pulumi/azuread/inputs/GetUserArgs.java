// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserArgs Empty = new GetUserArgs();

    /**
     * The employee identifier assigned to the user by the organisation.
     * 
     */
    @Import(name="employeeId")
    private @Nullable Output<String> employeeId;

    /**
     * @return The employee identifier assigned to the user by the organisation.
     * 
     */
    public Optional<Output<String>> employeeId() {
        return Optional.ofNullable(this.employeeId);
    }

    /**
     * The SMTP address for the user.
     * 
     */
    @Import(name="mail")
    private @Nullable Output<String> mail;

    /**
     * @return The SMTP address for the user.
     * 
     */
    public Optional<Output<String>> mail() {
        return Optional.ofNullable(this.mail);
    }

    /**
     * The email alias of the user.
     * 
     */
    @Import(name="mailNickname")
    private @Nullable Output<String> mailNickname;

    /**
     * @return The email alias of the user.
     * 
     */
    public Optional<Output<String>> mailNickname() {
        return Optional.ofNullable(this.mailNickname);
    }

    /**
     * The object ID of the user.
     * 
     */
    @Import(name="objectId")
    private @Nullable Output<String> objectId;

    /**
     * @return The object ID of the user.
     * 
     */
    public Optional<Output<String>> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * The user principal name (UPN) of the user.
     * 
     * &gt; One of `user_principal_name`, `object_id`, `mail`, `mail_nickname` or `employee_id` must be specified.
     * 
     */
    @Import(name="userPrincipalName")
    private @Nullable Output<String> userPrincipalName;

    /**
     * @return The user principal name (UPN) of the user.
     * 
     * &gt; One of `user_principal_name`, `object_id`, `mail`, `mail_nickname` or `employee_id` must be specified.
     * 
     */
    public Optional<Output<String>> userPrincipalName() {
        return Optional.ofNullable(this.userPrincipalName);
    }

    private GetUserArgs() {}

    private GetUserArgs(GetUserArgs $) {
        this.employeeId = $.employeeId;
        this.mail = $.mail;
        this.mailNickname = $.mailNickname;
        this.objectId = $.objectId;
        this.userPrincipalName = $.userPrincipalName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserArgs $;

        public Builder() {
            $ = new GetUserArgs();
        }

        public Builder(GetUserArgs defaults) {
            $ = new GetUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param employeeId The employee identifier assigned to the user by the organisation.
         * 
         * @return builder
         * 
         */
        public Builder employeeId(@Nullable Output<String> employeeId) {
            $.employeeId = employeeId;
            return this;
        }

        /**
         * @param employeeId The employee identifier assigned to the user by the organisation.
         * 
         * @return builder
         * 
         */
        public Builder employeeId(String employeeId) {
            return employeeId(Output.of(employeeId));
        }

        /**
         * @param mail The SMTP address for the user.
         * 
         * @return builder
         * 
         */
        public Builder mail(@Nullable Output<String> mail) {
            $.mail = mail;
            return this;
        }

        /**
         * @param mail The SMTP address for the user.
         * 
         * @return builder
         * 
         */
        public Builder mail(String mail) {
            return mail(Output.of(mail));
        }

        /**
         * @param mailNickname The email alias of the user.
         * 
         * @return builder
         * 
         */
        public Builder mailNickname(@Nullable Output<String> mailNickname) {
            $.mailNickname = mailNickname;
            return this;
        }

        /**
         * @param mailNickname The email alias of the user.
         * 
         * @return builder
         * 
         */
        public Builder mailNickname(String mailNickname) {
            return mailNickname(Output.of(mailNickname));
        }

        /**
         * @param objectId The object ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param objectId The object ID of the user.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        /**
         * @param userPrincipalName The user principal name (UPN) of the user.
         * 
         * &gt; One of `user_principal_name`, `object_id`, `mail`, `mail_nickname` or `employee_id` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder userPrincipalName(@Nullable Output<String> userPrincipalName) {
            $.userPrincipalName = userPrincipalName;
            return this;
        }

        /**
         * @param userPrincipalName The user principal name (UPN) of the user.
         * 
         * &gt; One of `user_principal_name`, `object_id`, `mail`, `mail_nickname` or `employee_id` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder userPrincipalName(String userPrincipalName) {
            return userPrincipalName(Output.of(userPrincipalName));
        }

        public GetUserArgs build() {
            return $;
        }
    }

}
