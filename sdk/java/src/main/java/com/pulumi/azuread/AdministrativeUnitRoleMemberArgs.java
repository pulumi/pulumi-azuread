// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AdministrativeUnitRoleMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdministrativeUnitRoleMemberArgs Empty = new AdministrativeUnitRoleMemberArgs();

    /**
     * The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="administrativeUnitObjectId", required=true)
    private Output<String> administrativeUnitObjectId;

    /**
     * @return The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> administrativeUnitObjectId() {
        return this.administrativeUnitObjectId;
    }

    /**
     * The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="memberObjectId", required=true)
    private Output<String> memberObjectId;

    /**
     * @return The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> memberObjectId() {
        return this.memberObjectId;
    }

    /**
     * The object ID of the directory role you want to assign. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="roleObjectId", required=true)
    private Output<String> roleObjectId;

    /**
     * @return The object ID of the directory role you want to assign. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> roleObjectId() {
        return this.roleObjectId;
    }

    private AdministrativeUnitRoleMemberArgs() {}

    private AdministrativeUnitRoleMemberArgs(AdministrativeUnitRoleMemberArgs $) {
        this.administrativeUnitObjectId = $.administrativeUnitObjectId;
        this.memberObjectId = $.memberObjectId;
        this.roleObjectId = $.roleObjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdministrativeUnitRoleMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdministrativeUnitRoleMemberArgs $;

        public Builder() {
            $ = new AdministrativeUnitRoleMemberArgs();
        }

        public Builder(AdministrativeUnitRoleMemberArgs defaults) {
            $ = new AdministrativeUnitRoleMemberArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param administrativeUnitObjectId The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administrativeUnitObjectId(Output<String> administrativeUnitObjectId) {
            $.administrativeUnitObjectId = administrativeUnitObjectId;
            return this;
        }

        /**
         * @param administrativeUnitObjectId The object ID of the administrative unit you want to add the member to. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder administrativeUnitObjectId(String administrativeUnitObjectId) {
            return administrativeUnitObjectId(Output.of(administrativeUnitObjectId));
        }

        /**
         * @param memberObjectId The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder memberObjectId(Output<String> memberObjectId) {
            $.memberObjectId = memberObjectId;
            return this;
        }

        /**
         * @param memberObjectId The object ID of the user, group or service principal you want to add as a member of the administrative unit. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder memberObjectId(String memberObjectId) {
            return memberObjectId(Output.of(memberObjectId));
        }

        /**
         * @param roleObjectId The object ID of the directory role you want to assign. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleObjectId(Output<String> roleObjectId) {
            $.roleObjectId = roleObjectId;
            return this;
        }

        /**
         * @param roleObjectId The object ID of the directory role you want to assign. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder roleObjectId(String roleObjectId) {
            return roleObjectId(Output.of(roleObjectId));
        }

        public AdministrativeUnitRoleMemberArgs build() {
            if ($.administrativeUnitObjectId == null) {
                throw new MissingRequiredPropertyException("AdministrativeUnitRoleMemberArgs", "administrativeUnitObjectId");
            }
            if ($.memberObjectId == null) {
                throw new MissingRequiredPropertyException("AdministrativeUnitRoleMemberArgs", "memberObjectId");
            }
            if ($.roleObjectId == null) {
                throw new MissingRequiredPropertyException("AdministrativeUnitRoleMemberArgs", "roleObjectId");
            }
            return $;
        }
    }

}
