// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs Empty = new AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs();

    /**
     * Whether to show the reviewer decision helpers. If enabled, system recommendations based on users&#39; access information will be shown to the reviewers. The reviewer will be recommended to approve the review if the user has signed-in at least once during the last 30 days. The reviewer will be recommended to deny the review if the user has not signed-in during the last 30 days.
     * 
     */
    @Import(name="accessRecommendationEnabled")
    private @Nullable Output<Boolean> accessRecommendationEnabled;

    /**
     * @return Whether to show the reviewer decision helpers. If enabled, system recommendations based on users&#39; access information will be shown to the reviewers. The reviewer will be recommended to approve the review if the user has signed-in at least once during the last 30 days. The reviewer will be recommended to deny the review if the user has not signed-in during the last 30 days.
     * 
     */
    public Optional<Output<Boolean>> accessRecommendationEnabled() {
        return Optional.ofNullable(this.accessRecommendationEnabled);
    }

    /**
     * Specifies the actions the system takes if reviewers don&#39;t respond in time. Valid values are `keepAccess`, `removeAccess`, or `acceptAccessRecommendation`.
     * 
     */
    @Import(name="accessReviewTimeoutBehavior")
    private @Nullable Output<String> accessReviewTimeoutBehavior;

    /**
     * @return Specifies the actions the system takes if reviewers don&#39;t respond in time. Valid values are `keepAccess`, `removeAccess`, or `acceptAccessRecommendation`.
     * 
     */
    public Optional<Output<String>> accessReviewTimeoutBehavior() {
        return Optional.ofNullable(this.accessReviewTimeoutBehavior);
    }

    /**
     * Whether a reviewer needs to provide a justification for their decision. Justification is visible to other reviewers and the requestor.
     * 
     */
    @Import(name="approverJustificationRequired")
    private @Nullable Output<Boolean> approverJustificationRequired;

    /**
     * @return Whether a reviewer needs to provide a justification for their decision. Justification is visible to other reviewers and the requestor.
     * 
     */
    public Optional<Output<Boolean>> approverJustificationRequired() {
        return Optional.ofNullable(this.approverJustificationRequired);
    }

    /**
     * How many days each occurrence of the access review series will run.
     * 
     */
    @Import(name="durationInDays")
    private @Nullable Output<Integer> durationInDays;

    /**
     * @return How many days each occurrence of the access review series will run.
     * 
     */
    public Optional<Output<Integer>> durationInDays() {
        return Optional.ofNullable(this.durationInDays);
    }

    /**
     * Whether to enable assignment review.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable assignment review.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * This will determine how often the access review campaign runs, valid values are `weekly`, `monthly`, `quarterly`, `halfyearly`, or `annual`.
     * 
     */
    @Import(name="reviewFrequency")
    private @Nullable Output<String> reviewFrequency;

    /**
     * @return This will determine how often the access review campaign runs, valid values are `weekly`, `monthly`, `quarterly`, `halfyearly`, or `annual`.
     * 
     */
    public Optional<Output<String>> reviewFrequency() {
        return Optional.ofNullable(this.reviewFrequency);
    }

    /**
     * Self-review or specific reviewers. Valid values are `Manager`, `Reviewers`, or `Self`.
     * 
     */
    @Import(name="reviewType")
    private @Nullable Output<String> reviewType;

    /**
     * @return Self-review or specific reviewers. Valid values are `Manager`, `Reviewers`, or `Self`.
     * 
     */
    public Optional<Output<String>> reviewType() {
        return Optional.ofNullable(this.reviewType);
    }

    /**
     * One or more `reviewer` blocks to specify the users who will be reviewers (when `reviewType` is `Reviewers`), as documented below.
     * 
     */
    @Import(name="reviewers")
    private @Nullable Output<List<AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs>> reviewers;

    /**
     * @return One or more `reviewer` blocks to specify the users who will be reviewers (when `reviewType` is `Reviewers`), as documented below.
     * 
     */
    public Optional<Output<List<AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs>>> reviewers() {
        return Optional.ofNullable(this.reviewers);
    }

    /**
     * This is the date the access review campaign will start on, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z), default is now. Once an access review has been created, you cannot update its start date
     * 
     */
    @Import(name="startingOn")
    private @Nullable Output<String> startingOn;

    /**
     * @return This is the date the access review campaign will start on, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z), default is now. Once an access review has been created, you cannot update its start date
     * 
     */
    public Optional<Output<String>> startingOn() {
        return Optional.ofNullable(this.startingOn);
    }

    private AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs() {}

    private AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs(AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs $) {
        this.accessRecommendationEnabled = $.accessRecommendationEnabled;
        this.accessReviewTimeoutBehavior = $.accessReviewTimeoutBehavior;
        this.approverJustificationRequired = $.approverJustificationRequired;
        this.durationInDays = $.durationInDays;
        this.enabled = $.enabled;
        this.reviewFrequency = $.reviewFrequency;
        this.reviewType = $.reviewType;
        this.reviewers = $.reviewers;
        this.startingOn = $.startingOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs $;

        public Builder() {
            $ = new AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs();
        }

        public Builder(AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs defaults) {
            $ = new AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRecommendationEnabled Whether to show the reviewer decision helpers. If enabled, system recommendations based on users&#39; access information will be shown to the reviewers. The reviewer will be recommended to approve the review if the user has signed-in at least once during the last 30 days. The reviewer will be recommended to deny the review if the user has not signed-in during the last 30 days.
         * 
         * @return builder
         * 
         */
        public Builder accessRecommendationEnabled(@Nullable Output<Boolean> accessRecommendationEnabled) {
            $.accessRecommendationEnabled = accessRecommendationEnabled;
            return this;
        }

        /**
         * @param accessRecommendationEnabled Whether to show the reviewer decision helpers. If enabled, system recommendations based on users&#39; access information will be shown to the reviewers. The reviewer will be recommended to approve the review if the user has signed-in at least once during the last 30 days. The reviewer will be recommended to deny the review if the user has not signed-in during the last 30 days.
         * 
         * @return builder
         * 
         */
        public Builder accessRecommendationEnabled(Boolean accessRecommendationEnabled) {
            return accessRecommendationEnabled(Output.of(accessRecommendationEnabled));
        }

        /**
         * @param accessReviewTimeoutBehavior Specifies the actions the system takes if reviewers don&#39;t respond in time. Valid values are `keepAccess`, `removeAccess`, or `acceptAccessRecommendation`.
         * 
         * @return builder
         * 
         */
        public Builder accessReviewTimeoutBehavior(@Nullable Output<String> accessReviewTimeoutBehavior) {
            $.accessReviewTimeoutBehavior = accessReviewTimeoutBehavior;
            return this;
        }

        /**
         * @param accessReviewTimeoutBehavior Specifies the actions the system takes if reviewers don&#39;t respond in time. Valid values are `keepAccess`, `removeAccess`, or `acceptAccessRecommendation`.
         * 
         * @return builder
         * 
         */
        public Builder accessReviewTimeoutBehavior(String accessReviewTimeoutBehavior) {
            return accessReviewTimeoutBehavior(Output.of(accessReviewTimeoutBehavior));
        }

        /**
         * @param approverJustificationRequired Whether a reviewer needs to provide a justification for their decision. Justification is visible to other reviewers and the requestor.
         * 
         * @return builder
         * 
         */
        public Builder approverJustificationRequired(@Nullable Output<Boolean> approverJustificationRequired) {
            $.approverJustificationRequired = approverJustificationRequired;
            return this;
        }

        /**
         * @param approverJustificationRequired Whether a reviewer needs to provide a justification for their decision. Justification is visible to other reviewers and the requestor.
         * 
         * @return builder
         * 
         */
        public Builder approverJustificationRequired(Boolean approverJustificationRequired) {
            return approverJustificationRequired(Output.of(approverJustificationRequired));
        }

        /**
         * @param durationInDays How many days each occurrence of the access review series will run.
         * 
         * @return builder
         * 
         */
        public Builder durationInDays(@Nullable Output<Integer> durationInDays) {
            $.durationInDays = durationInDays;
            return this;
        }

        /**
         * @param durationInDays How many days each occurrence of the access review series will run.
         * 
         * @return builder
         * 
         */
        public Builder durationInDays(Integer durationInDays) {
            return durationInDays(Output.of(durationInDays));
        }

        /**
         * @param enabled Whether to enable assignment review.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable assignment review.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param reviewFrequency This will determine how often the access review campaign runs, valid values are `weekly`, `monthly`, `quarterly`, `halfyearly`, or `annual`.
         * 
         * @return builder
         * 
         */
        public Builder reviewFrequency(@Nullable Output<String> reviewFrequency) {
            $.reviewFrequency = reviewFrequency;
            return this;
        }

        /**
         * @param reviewFrequency This will determine how often the access review campaign runs, valid values are `weekly`, `monthly`, `quarterly`, `halfyearly`, or `annual`.
         * 
         * @return builder
         * 
         */
        public Builder reviewFrequency(String reviewFrequency) {
            return reviewFrequency(Output.of(reviewFrequency));
        }

        /**
         * @param reviewType Self-review or specific reviewers. Valid values are `Manager`, `Reviewers`, or `Self`.
         * 
         * @return builder
         * 
         */
        public Builder reviewType(@Nullable Output<String> reviewType) {
            $.reviewType = reviewType;
            return this;
        }

        /**
         * @param reviewType Self-review or specific reviewers. Valid values are `Manager`, `Reviewers`, or `Self`.
         * 
         * @return builder
         * 
         */
        public Builder reviewType(String reviewType) {
            return reviewType(Output.of(reviewType));
        }

        /**
         * @param reviewers One or more `reviewer` blocks to specify the users who will be reviewers (when `reviewType` is `Reviewers`), as documented below.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(@Nullable Output<List<AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs>> reviewers) {
            $.reviewers = reviewers;
            return this;
        }

        /**
         * @param reviewers One or more `reviewer` blocks to specify the users who will be reviewers (when `reviewType` is `Reviewers`), as documented below.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(List<AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs> reviewers) {
            return reviewers(Output.of(reviewers));
        }

        /**
         * @param reviewers One or more `reviewer` blocks to specify the users who will be reviewers (when `reviewType` is `Reviewers`), as documented below.
         * 
         * @return builder
         * 
         */
        public Builder reviewers(AccessPackageAssignmentPolicyAssignmentReviewSettingsReviewerArgs... reviewers) {
            return reviewers(List.of(reviewers));
        }

        /**
         * @param startingOn This is the date the access review campaign will start on, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z), default is now. Once an access review has been created, you cannot update its start date
         * 
         * @return builder
         * 
         */
        public Builder startingOn(@Nullable Output<String> startingOn) {
            $.startingOn = startingOn;
            return this;
        }

        /**
         * @param startingOn This is the date the access review campaign will start on, formatted as an RFC3339 date string in UTC(e.g. 2018-01-01T01:02:03Z), default is now. Once an access review has been created, you cannot update its start date
         * 
         * @return builder
         * 
         */
        public Builder startingOn(String startingOn) {
            return startingOn(Output.of(startingOn));
        }

        public AccessPackageAssignmentPolicyAssignmentReviewSettingsArgs build() {
            return $;
        }
    }

}
