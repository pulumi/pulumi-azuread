// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConditionalAccessPolicySessionControls {
    /**
     * @return Whether application enforced restrictions are enabled. Defaults to `false`.
     * 
     * &gt; Only Office 365, Exchange Online and Sharepoint Online support application enforced restrictions.
     * 
     */
    private @Nullable Boolean applicationEnforcedRestrictionsEnabled;
    /**
     * @return Enables cloud app security and specifies the cloud app security policy to use. Possible values are: `blockDownloads`, `mcasConfigured`, `monitorOnly` or `unknownFutureValue`.
     * 
     */
    private @Nullable String cloudAppSecurityPolicy;
    /**
     * @return Disables [resilience defaults](https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/resilience-defaults). Defaults to `false`.
     * 
     */
    private @Nullable Boolean disableResilienceDefaults;
    /**
     * @return Session control to define whether to persist cookies. Possible values are: `always` or `never`.
     * 
     */
    private @Nullable String persistentBrowserMode;
    /**
     * @return Number of days or hours to enforce sign-in frequency. Required when `sign_in_frequency_period` is specified.
     * 
     */
    private @Nullable Integer signInFrequency;
    /**
     * @return Authentication type for enforcing sign-in frequency. Possible values are: `primaryAndSecondaryAuthentication` or `secondaryAuthentication`. Defaults to `primaryAndSecondaryAuthentication`.
     * 
     */
    private @Nullable String signInFrequencyAuthenticationType;
    /**
     * @return The interval to apply to sign-in frequency control. Possible values are: `timeBased` or `everyTime`. Defaults to `timeBased`.
     * 
     */
    private @Nullable String signInFrequencyInterval;
    /**
     * @return The time period to enforce sign-in frequency. Possible values are: `hours` or `days`. Required when `sign_in_frequency_period` is specified.
     * 
     */
    private @Nullable String signInFrequencyPeriod;

    private ConditionalAccessPolicySessionControls() {}
    /**
     * @return Whether application enforced restrictions are enabled. Defaults to `false`.
     * 
     * &gt; Only Office 365, Exchange Online and Sharepoint Online support application enforced restrictions.
     * 
     */
    public Optional<Boolean> applicationEnforcedRestrictionsEnabled() {
        return Optional.ofNullable(this.applicationEnforcedRestrictionsEnabled);
    }
    /**
     * @return Enables cloud app security and specifies the cloud app security policy to use. Possible values are: `blockDownloads`, `mcasConfigured`, `monitorOnly` or `unknownFutureValue`.
     * 
     */
    public Optional<String> cloudAppSecurityPolicy() {
        return Optional.ofNullable(this.cloudAppSecurityPolicy);
    }
    /**
     * @return Disables [resilience defaults](https://learn.microsoft.com/en-us/azure/active-directory/conditional-access/resilience-defaults). Defaults to `false`.
     * 
     */
    public Optional<Boolean> disableResilienceDefaults() {
        return Optional.ofNullable(this.disableResilienceDefaults);
    }
    /**
     * @return Session control to define whether to persist cookies. Possible values are: `always` or `never`.
     * 
     */
    public Optional<String> persistentBrowserMode() {
        return Optional.ofNullable(this.persistentBrowserMode);
    }
    /**
     * @return Number of days or hours to enforce sign-in frequency. Required when `sign_in_frequency_period` is specified.
     * 
     */
    public Optional<Integer> signInFrequency() {
        return Optional.ofNullable(this.signInFrequency);
    }
    /**
     * @return Authentication type for enforcing sign-in frequency. Possible values are: `primaryAndSecondaryAuthentication` or `secondaryAuthentication`. Defaults to `primaryAndSecondaryAuthentication`.
     * 
     */
    public Optional<String> signInFrequencyAuthenticationType() {
        return Optional.ofNullable(this.signInFrequencyAuthenticationType);
    }
    /**
     * @return The interval to apply to sign-in frequency control. Possible values are: `timeBased` or `everyTime`. Defaults to `timeBased`.
     * 
     */
    public Optional<String> signInFrequencyInterval() {
        return Optional.ofNullable(this.signInFrequencyInterval);
    }
    /**
     * @return The time period to enforce sign-in frequency. Possible values are: `hours` or `days`. Required when `sign_in_frequency_period` is specified.
     * 
     */
    public Optional<String> signInFrequencyPeriod() {
        return Optional.ofNullable(this.signInFrequencyPeriod);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicySessionControls defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean applicationEnforcedRestrictionsEnabled;
        private @Nullable String cloudAppSecurityPolicy;
        private @Nullable Boolean disableResilienceDefaults;
        private @Nullable String persistentBrowserMode;
        private @Nullable Integer signInFrequency;
        private @Nullable String signInFrequencyAuthenticationType;
        private @Nullable String signInFrequencyInterval;
        private @Nullable String signInFrequencyPeriod;
        public Builder() {}
        public Builder(ConditionalAccessPolicySessionControls defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationEnforcedRestrictionsEnabled = defaults.applicationEnforcedRestrictionsEnabled;
    	      this.cloudAppSecurityPolicy = defaults.cloudAppSecurityPolicy;
    	      this.disableResilienceDefaults = defaults.disableResilienceDefaults;
    	      this.persistentBrowserMode = defaults.persistentBrowserMode;
    	      this.signInFrequency = defaults.signInFrequency;
    	      this.signInFrequencyAuthenticationType = defaults.signInFrequencyAuthenticationType;
    	      this.signInFrequencyInterval = defaults.signInFrequencyInterval;
    	      this.signInFrequencyPeriod = defaults.signInFrequencyPeriod;
        }

        @CustomType.Setter
        public Builder applicationEnforcedRestrictionsEnabled(@Nullable Boolean applicationEnforcedRestrictionsEnabled) {

            this.applicationEnforcedRestrictionsEnabled = applicationEnforcedRestrictionsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder cloudAppSecurityPolicy(@Nullable String cloudAppSecurityPolicy) {

            this.cloudAppSecurityPolicy = cloudAppSecurityPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder disableResilienceDefaults(@Nullable Boolean disableResilienceDefaults) {

            this.disableResilienceDefaults = disableResilienceDefaults;
            return this;
        }
        @CustomType.Setter
        public Builder persistentBrowserMode(@Nullable String persistentBrowserMode) {

            this.persistentBrowserMode = persistentBrowserMode;
            return this;
        }
        @CustomType.Setter
        public Builder signInFrequency(@Nullable Integer signInFrequency) {

            this.signInFrequency = signInFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder signInFrequencyAuthenticationType(@Nullable String signInFrequencyAuthenticationType) {

            this.signInFrequencyAuthenticationType = signInFrequencyAuthenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder signInFrequencyInterval(@Nullable String signInFrequencyInterval) {

            this.signInFrequencyInterval = signInFrequencyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder signInFrequencyPeriod(@Nullable String signInFrequencyPeriod) {

            this.signInFrequencyPeriod = signInFrequencyPeriod;
            return this;
        }
        public ConditionalAccessPolicySessionControls build() {
            final var _resultValue = new ConditionalAccessPolicySessionControls();
            _resultValue.applicationEnforcedRestrictionsEnabled = applicationEnforcedRestrictionsEnabled;
            _resultValue.cloudAppSecurityPolicy = cloudAppSecurityPolicy;
            _resultValue.disableResilienceDefaults = disableResilienceDefaults;
            _resultValue.persistentBrowserMode = persistentBrowserMode;
            _resultValue.signInFrequency = signInFrequency;
            _resultValue.signInFrequencyAuthenticationType = signInFrequencyAuthenticationType;
            _resultValue.signInFrequencyInterval = signInFrequencyInterval;
            _resultValue.signInFrequencyPeriod = signInFrequencyPeriod;
            return _resultValue;
        }
    }
}
