// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.ApplicationAppRoleArgs;
import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.ApplicationAppRoleState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuread.ApplicationRegistration;
 * import com.pulumi.azuread.ApplicationRegistrationArgs;
 * import com.pulumi.random.Uuid;
 * import com.pulumi.azuread.ApplicationAppRole;
 * import com.pulumi.azuread.ApplicationAppRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ApplicationRegistration("example", ApplicationRegistrationArgs.builder()
 *             .displayName("example")
 *             .build());
 * 
 *         var exampleAdministrator = new Uuid("exampleAdministrator");
 * 
 *         var exampleAdminister = new ApplicationAppRole("exampleAdminister", ApplicationAppRoleArgs.builder()
 *             .applicationId(example.id())
 *             .roleId(exampleAdministrator.id())
 *             .allowedMemberTypes("User")
 *             .description("My role description")
 *             .displayName("Administer")
 *             .value("admin")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * &gt; **Tip** For managing more app roles, create additional instances of this resource
 * 
 * *Usage with azuread.Application resource*
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.azuread.Application;
 * import com.pulumi.azuread.ApplicationArgs;
 * import com.pulumi.azuread.ApplicationAppRole;
 * import com.pulumi.azuread.ApplicationAppRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Application("example", ApplicationArgs.builder()
 *             .displayName("example")
 *             .build());
 * 
 *         var exampleAdminister = new ApplicationAppRole("exampleAdminister", ApplicationAppRoleArgs.builder()
 *             .applicationId(example.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Application App Roles can be imported using the object ID of the application and the ID of the app role, in the following format.
 * 
 * ```sh
 * $ pulumi import azuread:index/applicationAppRole:ApplicationAppRole example /applications/00000000-0000-0000-0000-000000000000/appRoles/11111111-1111-1111-1111-111111111111
 * ```
 * 
 */
@ResourceType(type="azuread:index/applicationAppRole:ApplicationAppRole")
public class ApplicationAppRole extends com.pulumi.resources.CustomResource {
    /**
     * A set of values to specify whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications by setting to `Application`, or to both.
     * 
     */
    @Export(name="allowedMemberTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowedMemberTypes;

    /**
     * @return A set of values to specify whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications by setting to `Application`, or to both.
     * 
     */
    public Output<List<String>> allowedMemberTypes() {
        return this.allowedMemberTypes;
    }
    /**
     * The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="applicationId", refs={String.class}, tree="[0]")
    private Output<String> applicationId;

    /**
     * @return The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }
    /**
     * Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return Display name for the app role that appears during app role assignment and in consent experiences.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The unique identifier of the app role
     * 
     */
    @Export(name="roleId", refs={String.class}, tree="[0]")
    private Output<String> roleId;

    /**
     * @return The unique identifier of the app role
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }
    /**
     * The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     * 
     * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
     * 
     */
    @Export(name="value", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> value;

    /**
     * @return The value that is used for the `roles` claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
     * 
     * &gt; **Roles and Permission Scopes** In Azure Active Directory, application roles and permission scopes exported by an application share the same namespace and cannot contain duplicate values.
     * 
     */
    public Output<Optional<String>> value() {
        return Codegen.optional(this.value);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ApplicationAppRole(java.lang.String name) {
        this(name, ApplicationAppRoleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ApplicationAppRole(java.lang.String name, ApplicationAppRoleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ApplicationAppRole(java.lang.String name, ApplicationAppRoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/applicationAppRole:ApplicationAppRole", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ApplicationAppRole(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationAppRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azuread:index/applicationAppRole:ApplicationAppRole", name, state, makeResourceOptions(options, id), false);
    }

    private static ApplicationAppRoleArgs makeArgs(ApplicationAppRoleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ApplicationAppRoleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ApplicationAppRole get(java.lang.String name, Output<java.lang.String> id, @Nullable ApplicationAppRoleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ApplicationAppRole(name, id, state, options);
    }
}
