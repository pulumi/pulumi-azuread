// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.azuread.Utilities;
import com.pulumi.azuread.inputs.GetAccessPackageArgs;
import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
import com.pulumi.azuread.inputs.GetAccessPackageCatalogPlainArgs;
import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
import com.pulumi.azuread.inputs.GetAccessPackageCatalogRolePlainArgs;
import com.pulumi.azuread.inputs.GetAccessPackagePlainArgs;
import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
import com.pulumi.azuread.inputs.GetAdministrativeUnitPlainArgs;
import com.pulumi.azuread.inputs.GetApplicationArgs;
import com.pulumi.azuread.inputs.GetApplicationPlainArgs;
import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
import com.pulumi.azuread.inputs.GetApplicationTemplatePlainArgs;
import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
import com.pulumi.azuread.inputs.GetDirectoryObjectPlainArgs;
import com.pulumi.azuread.inputs.GetDomainsArgs;
import com.pulumi.azuread.inputs.GetDomainsPlainArgs;
import com.pulumi.azuread.inputs.GetGroupArgs;
import com.pulumi.azuread.inputs.GetGroupPlainArgs;
import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyPlainArgs;
import com.pulumi.azuread.inputs.GetGroupsArgs;
import com.pulumi.azuread.inputs.GetGroupsPlainArgs;
import com.pulumi.azuread.inputs.GetNamedLocationArgs;
import com.pulumi.azuread.inputs.GetNamedLocationPlainArgs;
import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
import com.pulumi.azuread.inputs.GetServicePrincipalPlainArgs;
import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
import com.pulumi.azuread.inputs.GetServicePrincipalsPlainArgs;
import com.pulumi.azuread.inputs.GetUserArgs;
import com.pulumi.azuread.inputs.GetUserPlainArgs;
import com.pulumi.azuread.inputs.GetUsersArgs;
import com.pulumi.azuread.inputs.GetUsersPlainArgs;
import com.pulumi.azuread.outputs.GetAccessPackageCatalogResult;
import com.pulumi.azuread.outputs.GetAccessPackageCatalogRoleResult;
import com.pulumi.azuread.outputs.GetAccessPackageResult;
import com.pulumi.azuread.outputs.GetAdministrativeUnitResult;
import com.pulumi.azuread.outputs.GetApplicationPublishedAppIdsResult;
import com.pulumi.azuread.outputs.GetApplicationResult;
import com.pulumi.azuread.outputs.GetApplicationTemplateResult;
import com.pulumi.azuread.outputs.GetClientConfigResult;
import com.pulumi.azuread.outputs.GetDirectoryObjectResult;
import com.pulumi.azuread.outputs.GetDirectoryRoleTemplatesResult;
import com.pulumi.azuread.outputs.GetDirectoryRolesResult;
import com.pulumi.azuread.outputs.GetDomainsResult;
import com.pulumi.azuread.outputs.GetGroupResult;
import com.pulumi.azuread.outputs.GetGroupRoleManagementPolicyResult;
import com.pulumi.azuread.outputs.GetGroupsResult;
import com.pulumi.azuread.outputs.GetNamedLocationResult;
import com.pulumi.azuread.outputs.GetServicePrincipalResult;
import com.pulumi.azuread.outputs.GetServicePrincipalsResult;
import com.pulumi.azuread.outputs.GetUserResult;
import com.pulumi.azuread.outputs.GetUsersResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class AzureadFunctions {
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageResult> getAccessPackage() {
        return getAccessPackage(GetAccessPackageArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageResult> getAccessPackagePlain() {
        return getAccessPackagePlain(GetAccessPackagePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageResult> getAccessPackage(GetAccessPackageArgs args) {
        return getAccessPackage(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageResult> getAccessPackagePlain(GetAccessPackagePlainArgs args) {
        return getAccessPackagePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageResult> getAccessPackage(GetAccessPackageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackage:getAccessPackage", TypeShape.of(GetAccessPackageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageResult> getAccessPackage(GetAccessPackageArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackage:getAccessPackage", TypeShape.of(GetAccessPackageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information for an existing access package within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Access package manager`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackage(GetAccessPackageArgs.builder()
     *             .catalogId("00000000-0000-0000-0000-000000000000")
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageResult> getAccessPackagePlain(GetAccessPackagePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getAccessPackage:getAccessPackage", TypeShape.of(GetAccessPackageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogResult> getAccessPackageCatalog() {
        return getAccessPackageCatalog(GetAccessPackageCatalogArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogResult> getAccessPackageCatalogPlain() {
        return getAccessPackageCatalogPlain(GetAccessPackageCatalogPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogResult> getAccessPackageCatalog(GetAccessPackageCatalogArgs args) {
        return getAccessPackageCatalog(args, InvokeOptions.Empty);
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogResult> getAccessPackageCatalogPlain(GetAccessPackageCatalogPlainArgs args) {
        return getAccessPackageCatalogPlain(args, InvokeOptions.Empty);
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogResult> getAccessPackageCatalog(GetAccessPackageCatalogArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackageCatalog:getAccessPackageCatalog", TypeShape.of(GetAccessPackageCatalogResult.class), args, Utilities.withVersion(options));
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogResult> getAccessPackageCatalog(GetAccessPackageCatalogArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackageCatalog:getAccessPackageCatalog", TypeShape.of(GetAccessPackageCatalogResult.class), args, Utilities.withVersion(options));
    }
    /**
     * i
     * Use this resource to retrieve information for an existing access package catalog within Identity Governance in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All`, or `EntitlementManagement.ReadWrite.All`.
     * 
     * When authenticated with a user principal, this data source requires one of the following directory roles: `Catalog owner`, `Catalog reader`, `Global Reader`, or `Global Administrator`.
     * 
     * ## Example Usage
     * 
     * *Look up by ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by DisplayName*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalog(GetAccessPackageCatalogArgs.builder()
     *             .displayName("My access package Catalog")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogResult> getAccessPackageCatalogPlain(GetAccessPackageCatalogPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getAccessPackageCatalog:getAccessPackageCatalog", TypeShape.of(GetAccessPackageCatalogResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRole() {
        return getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRolePlain() {
        return getAccessPackageCatalogRolePlain(GetAccessPackageCatalogRolePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs args) {
        return getAccessPackageCatalogRole(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRolePlain(GetAccessPackageCatalogRolePlainArgs args) {
        return getAccessPackageCatalogRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackageCatalogRole:getAccessPackageCatalogRole", TypeShape.of(GetAccessPackageCatalogRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAccessPackageCatalogRole:getAccessPackageCatalogRole", TypeShape.of(GetAccessPackageCatalogRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an access package catalog role.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `EntitlementManagement.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .displayName("Catalog owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAccessPackageCatalogRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAccessPackageCatalogRole(GetAccessPackageCatalogRoleArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessPackageCatalogRoleResult> getAccessPackageCatalogRolePlain(GetAccessPackageCatalogRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getAccessPackageCatalogRole:getAccessPackageCatalogRole", TypeShape.of(GetAccessPackageCatalogRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdministrativeUnitResult> getAdministrativeUnit() {
        return getAdministrativeUnit(GetAdministrativeUnitArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdministrativeUnitResult> getAdministrativeUnitPlain() {
        return getAdministrativeUnitPlain(GetAdministrativeUnitPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdministrativeUnitResult> getAdministrativeUnit(GetAdministrativeUnitArgs args) {
        return getAdministrativeUnit(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdministrativeUnitResult> getAdministrativeUnitPlain(GetAdministrativeUnitPlainArgs args) {
        return getAdministrativeUnitPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdministrativeUnitResult> getAdministrativeUnit(GetAdministrativeUnitArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAdministrativeUnit:getAdministrativeUnit", TypeShape.of(GetAdministrativeUnitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdministrativeUnitResult> getAdministrativeUnit(GetAdministrativeUnitArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getAdministrativeUnit:getAdministrativeUnit", TypeShape.of(GetAdministrativeUnitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an adminisrative unit in Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `AdministrativeUnit.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * *Look up by display name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .displayName("Example-AU")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by object ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetAdministrativeUnitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getAdministrativeUnit(GetAdministrativeUnitArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdministrativeUnitResult> getAdministrativeUnitPlain(GetAdministrativeUnitPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getAdministrativeUnit:getAdministrativeUnit", TypeShape.of(GetAdministrativeUnitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationResult> getApplication() {
        return getApplication(GetApplicationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain() {
        return getApplicationPlain(GetApplicationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args) {
        return getApplication(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args) {
        return getApplicationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationResult> getApplication(GetApplicationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an existing Application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplication(GetApplicationArgs.builder()
     *             .displayName("My First AzureAD Application")
     *             .build());
     * 
     *         ctx.export("applicationObjectId", example.applyValue(getApplicationResult -> getApplicationResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationResult> getApplicationPlain(GetApplicationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getApplication:getApplication", TypeShape.of(GetApplicationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIds() {
        return getApplicationPublishedAppIds(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIdsPlain() {
        return getApplicationPublishedAppIdsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIds(InvokeArgs args) {
        return getApplicationPublishedAppIds(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIdsPlain(InvokeArgs args) {
        return getApplicationPublishedAppIdsPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIds(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplicationPublishedAppIds:getApplicationPublishedAppIds", TypeShape.of(GetApplicationPublishedAppIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIds(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplicationPublishedAppIds:getApplicationPublishedAppIds", TypeShape.of(GetApplicationPublishedAppIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * *Listing well-known application IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         ctx.export("publishedAppIds", wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Granting access to an application*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.ServicePrincipal;
     * import com.pulumi.azuread.ServicePrincipalArgs;
     * import com.pulumi.azuread.Application;
     * import com.pulumi.azuread.ApplicationArgs;
     * import com.pulumi.azuread.inputs.ApplicationRequiredResourceAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var wellKnown = AzureadFunctions.getApplicationPublishedAppIds();
     * 
     *         var msgraph = new ServicePrincipal("msgraph", ServicePrincipalArgs.builder()
     *             .clientId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *             .useExisting(true)
     *             .build());
     * 
     *         var example = new Application("example", ApplicationArgs.builder()
     *             .displayName("example")
     *             .requiredResourceAccesses(ApplicationRequiredResourceAccessArgs.builder()
     *                 .resourceAppId(wellKnown.applyValue(getApplicationPublishedAppIdsResult -> getApplicationPublishedAppIdsResult.result().MicrosoftGraph()))
     *                 .resourceAccesses(                
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.appRoleIds().applyValue(appRoleIds -> appRoleIds.User.Read.All()))
     *                         .type("Role")
     *                         .build(),
     *                     ApplicationRequiredResourceAccessResourceAccessArgs.builder()
     *                         .id(msgraph.oauth2PermissionScopeIds().applyValue(oauth2PermissionScopeIds -> oauth2PermissionScopeIds.User.ReadWrite()))
     *                         .type("Scope")
     *                         .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationPublishedAppIdsResult> getApplicationPublishedAppIdsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getApplicationPublishedAppIds:getApplicationPublishedAppIds", TypeShape.of(GetApplicationPublishedAppIdsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationTemplateResult> getApplicationTemplate() {
        return getApplicationTemplate(GetApplicationTemplateArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationTemplateResult> getApplicationTemplatePlain() {
        return getApplicationTemplatePlain(GetApplicationTemplatePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationTemplateResult> getApplicationTemplate(GetApplicationTemplateArgs args) {
        return getApplicationTemplate(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationTemplateResult> getApplicationTemplatePlain(GetApplicationTemplatePlainArgs args) {
        return getApplicationTemplatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationTemplateResult> getApplicationTemplate(GetApplicationTemplateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplicationTemplate:getApplicationTemplate", TypeShape.of(GetApplicationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetApplicationTemplateResult> getApplicationTemplate(GetApplicationTemplateArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getApplicationTemplate:getApplicationTemplate", TypeShape.of(GetApplicationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about an Application Template from the [Azure AD App Gallery](https://azuremarketplace.microsoft.com/en-US/marketplace/apps/category/azure-active-directory-apps).
     * 
     * ## API Permissions
     * 
     * This data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetApplicationTemplateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getApplicationTemplate(GetApplicationTemplateArgs.builder()
     *             .displayName("Marketo")
     *             .build());
     * 
     *         ctx.export("applicationTemplateId", example.applyValue(getApplicationTemplateResult -> getApplicationTemplateResult.templateId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetApplicationTemplateResult> getApplicationTemplatePlain(GetApplicationTemplatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getApplicationTemplate:getApplicationTemplate", TypeShape.of(GetApplicationTemplateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientConfigResult> getClientConfig() {
        return getClientConfig(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientConfigResult> getClientConfigPlain() {
        return getClientConfigPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientConfigResult> getClientConfig(InvokeArgs args) {
        return getClientConfig(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientConfigResult> getClientConfigPlain(InvokeArgs args) {
        return getClientConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientConfigResult> getClientConfig(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getClientConfig:getClientConfig", TypeShape.of(GetClientConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientConfigResult> getClientConfig(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getClientConfig:getClientConfig", TypeShape.of(GetClientConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access the configuration of the AzureAD provider.
     * 
     * ## API Permissions
     * 
     * No additional roles are required to use this data source.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getClientConfig();
     * 
     *         ctx.export("objectId", current.applyValue(getClientConfigResult -> getClientConfigResult.objectId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientConfigResult> getClientConfigPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getClientConfig:getClientConfig", TypeShape.of(GetClientConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the OData type for a generic directory object having the provided object ID.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up and output type of object by ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *         ctx.export("objectType", example.applyValue(getDirectoryObjectResult -> getDirectoryObjectResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `object_id` - The object ID of the directory object.
     * * `type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.
     * 
     */
    public static Output<GetDirectoryObjectResult> getDirectoryObject(GetDirectoryObjectArgs args) {
        return getDirectoryObject(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the OData type for a generic directory object having the provided object ID.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up and output type of object by ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *         ctx.export("objectType", example.applyValue(getDirectoryObjectResult -> getDirectoryObjectResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `object_id` - The object ID of the directory object.
     * * `type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.
     * 
     */
    public static CompletableFuture<GetDirectoryObjectResult> getDirectoryObjectPlain(GetDirectoryObjectPlainArgs args) {
        return getDirectoryObjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves the OData type for a generic directory object having the provided object ID.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up and output type of object by ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *         ctx.export("objectType", example.applyValue(getDirectoryObjectResult -> getDirectoryObjectResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `object_id` - The object ID of the directory object.
     * * `type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.
     * 
     */
    public static Output<GetDirectoryObjectResult> getDirectoryObject(GetDirectoryObjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryObject:getDirectoryObject", TypeShape.of(GetDirectoryObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the OData type for a generic directory object having the provided object ID.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up and output type of object by ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *         ctx.export("objectType", example.applyValue(getDirectoryObjectResult -> getDirectoryObjectResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `object_id` - The object ID of the directory object.
     * * `type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.
     * 
     */
    public static Output<GetDirectoryObjectResult> getDirectoryObject(GetDirectoryObjectArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryObject:getDirectoryObject", TypeShape.of(GetDirectoryObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves the OData type for a generic directory object having the provided object ID.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires either `User.Read.All`, `Group.Read.All` or `Directory.Read.All`, depending on the type of object being queried.
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up and output type of object by ID*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDirectoryObjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getDirectoryObject(GetDirectoryObjectArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *         ctx.export("objectType", example.applyValue(getDirectoryObjectResult -> getDirectoryObjectResult.type()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `object_id` - The object ID of the directory object.
     * * `type` - The shortened OData type of the directory object. Possible values include: `Group`, `User` or `ServicePrincipal`.
     * 
     */
    public static CompletableFuture<GetDirectoryObjectResult> getDirectoryObjectPlain(GetDirectoryObjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getDirectoryObject:getDirectoryObject", TypeShape.of(GetDirectoryObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplates() {
        return getDirectoryRoleTemplates(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplatesPlain() {
        return getDirectoryRoleTemplatesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplates(InvokeArgs args) {
        return getDirectoryRoleTemplates(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplatesPlain(InvokeArgs args) {
        return getDirectoryRoleTemplatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplates(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryRoleTemplates:getDirectoryRoleTemplates", TypeShape.of(GetDirectoryRoleTemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplates(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryRoleTemplates:getDirectoryRoleTemplates", TypeShape.of(GetDirectoryRoleTemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about directory role templates within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoleTemplates();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRoleTemplatesResult -> getDirectoryRoleTemplatesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRoleTemplatesResult> getDirectoryRoleTemplatesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getDirectoryRoleTemplates:getDirectoryRoleTemplates", TypeShape.of(GetDirectoryRoleTemplatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRolesResult> getDirectoryRoles() {
        return getDirectoryRoles(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRolesResult> getDirectoryRolesPlain() {
        return getDirectoryRolesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRolesResult> getDirectoryRoles(InvokeArgs args) {
        return getDirectoryRoles(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRolesResult> getDirectoryRolesPlain(InvokeArgs args) {
        return getDirectoryRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRolesResult> getDirectoryRoles(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryRoles:getDirectoryRoles", TypeShape.of(GetDirectoryRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDirectoryRolesResult> getDirectoryRoles(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDirectoryRoles:getDirectoryRoles", TypeShape.of(GetDirectoryRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about activated directory roles within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires one of the following application roles: `RoleManagement.Read.Directory` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var current = AzureadFunctions.getDirectoryRoles();
     * 
     *         ctx.export("roles", current.applyValue(getDirectoryRolesResult -> getDirectoryRolesResult.objectIds()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDirectoryRolesResult> getDirectoryRolesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getDirectoryRoles:getDirectoryRoles", TypeShape.of(GetDirectoryRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDomainsResult> getDomains() {
        return getDomains(GetDomainsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain() {
        return getDomainsPlain(GetDomainsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDomainsResult> getDomains(GetDomainsArgs args) {
        return getDomains(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain(GetDomainsPlainArgs args) {
        return getDomainsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDomainsResult> getDomains(GetDomainsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDomains:getDomains", TypeShape.of(GetDomainsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDomainsResult> getDomains(GetDomainsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getDomains:getDomains", TypeShape.of(GetDomainsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to access information about existing Domains within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Domain.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var aadDomains = AzureadFunctions.getDomains();
     * 
     *         ctx.export("domainNames", aadDomains.applyValue(getDomainsResult -> getDomainsResult.domains()).stream().map(element -> element.domainName()).collect(toList()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain(GetDomainsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getDomains:getDomains", TypeShape.of(GetDomainsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup() {
        return getGroup(GetGroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain() {
        return getGroupPlain(GetGroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * ### By Group Display Name)
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroup(GetGroupArgs.builder()
     *             .displayName("MyGroupName")
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a role policy for an Azure AD group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
     * 
     * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.Group;
     * import com.pulumi.azuread.GroupArgs;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Group("example", GroupArgs.builder()
     *             .displayName("group-name")
     *             .securityEnabled(true)
     *             .build());
     * 
     *         final var ownersPolicy = AzureadFunctions.getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs.builder()
     *             .groupId(example.id())
     *             .roleId("owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupRoleManagementPolicyResult> getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs args) {
        return getGroupRoleManagementPolicy(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a role policy for an Azure AD group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
     * 
     * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.Group;
     * import com.pulumi.azuread.GroupArgs;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Group("example", GroupArgs.builder()
     *             .displayName("group-name")
     *             .securityEnabled(true)
     *             .build());
     * 
     *         final var ownersPolicy = AzureadFunctions.getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs.builder()
     *             .groupId(example.id())
     *             .roleId("owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupRoleManagementPolicyResult> getGroupRoleManagementPolicyPlain(GetGroupRoleManagementPolicyPlainArgs args) {
        return getGroupRoleManagementPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve a role policy for an Azure AD group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
     * 
     * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.Group;
     * import com.pulumi.azuread.GroupArgs;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Group("example", GroupArgs.builder()
     *             .displayName("group-name")
     *             .securityEnabled(true)
     *             .build());
     * 
     *         final var ownersPolicy = AzureadFunctions.getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs.builder()
     *             .groupId(example.id())
     *             .roleId("owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupRoleManagementPolicyResult> getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", TypeShape.of(GetGroupRoleManagementPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a role policy for an Azure AD group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
     * 
     * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.Group;
     * import com.pulumi.azuread.GroupArgs;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Group("example", GroupArgs.builder()
     *             .displayName("group-name")
     *             .securityEnabled(true)
     *             .build());
     * 
     *         final var ownersPolicy = AzureadFunctions.getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs.builder()
     *             .groupId(example.id())
     *             .roleId("owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupRoleManagementPolicyResult> getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", TypeShape.of(GetGroupRoleManagementPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve a role policy for an Azure AD group.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this resource.
     * 
     * When authenticated with a service principal, this resource requires the `RoleManagementPolicy.Read.AzureADGroup` Microsoft Graph API permissions.
     * 
     * When authenticated with a user principal, this resource requires `Global Administrator` directory role, or the `Privileged Role Administrator` role in Identity Governance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.Group;
     * import com.pulumi.azuread.GroupArgs;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupRoleManagementPolicyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var example = new Group("example", GroupArgs.builder()
     *             .displayName("group-name")
     *             .securityEnabled(true)
     *             .build());
     * 
     *         final var ownersPolicy = AzureadFunctions.getGroupRoleManagementPolicy(GetGroupRoleManagementPolicyArgs.builder()
     *             .groupId(example.id())
     *             .roleId("owner")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupRoleManagementPolicyResult> getGroupRoleManagementPolicyPlain(GetGroupRoleManagementPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getGroupRoleManagementPolicy:getGroupRoleManagementPolicy", TypeShape.of(GetGroupRoleManagementPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupsResult> getGroups() {
        return getGroups(GetGroupsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain() {
        return getGroupsPlain(GetGroupsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args) {
        return getGroups(args, InvokeOptions.Empty);
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args) {
        return getGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupsResult> getGroups(GetGroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets Object IDs or Display Names for multiple Azure Active Directory groups.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Group.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by group name*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNames(            
     *                 "group-a",
     *                 "group-b")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by display name prefix*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sales = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .displayNamePrefix("sales-")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all mail-enabled groups*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mailEnabled = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(true)
     *             .returnAll(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up all security-enabled groups that are not mail-enabled*
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var securityOnly = AzureadFunctions.getGroups(GetGroupsArgs.builder()
     *             .mailEnabled(false)
     *             .returnAll(true)
     *             .securityEnabled(true)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupsResult> getGroupsPlain(GetGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getGroups:getGroups", TypeShape.of(GetGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about a Named Location within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`
     * 
     * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetNamedLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()
     *             .displayName("My Named Location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `country` - A `country` block as documented below, which describes a country-based named location.
     * * `id` - The ID of the named location.
     * * `ip` - An `ip` block as documented below, which describes an IP-based named location.
     * * 
     * ***
     * 
     * `country` block exports the following:
     * 
     * * `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.
     * * `include_unknown_countries_and_regions` - Whether IP addresses that don&#39;t map to a country or region are included in the named location.
     * 
     * ***
     * 
     * `ip` block exports the following:
     * 
     * * `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.
     * * `trusted` - Whether the named location is trusted.
     * 
     */
    public static Output<GetNamedLocationResult> getNamedLocation(GetNamedLocationArgs args) {
        return getNamedLocation(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about a Named Location within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`
     * 
     * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetNamedLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()
     *             .displayName("My Named Location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `country` - A `country` block as documented below, which describes a country-based named location.
     * * `id` - The ID of the named location.
     * * `ip` - An `ip` block as documented below, which describes an IP-based named location.
     * * 
     * ***
     * 
     * `country` block exports the following:
     * 
     * * `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.
     * * `include_unknown_countries_and_regions` - Whether IP addresses that don&#39;t map to a country or region are included in the named location.
     * 
     * ***
     * 
     * `ip` block exports the following:
     * 
     * * `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.
     * * `trusted` - Whether the named location is trusted.
     * 
     */
    public static CompletableFuture<GetNamedLocationResult> getNamedLocationPlain(GetNamedLocationPlainArgs args) {
        return getNamedLocationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about a Named Location within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`
     * 
     * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetNamedLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()
     *             .displayName("My Named Location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `country` - A `country` block as documented below, which describes a country-based named location.
     * * `id` - The ID of the named location.
     * * `ip` - An `ip` block as documented below, which describes an IP-based named location.
     * * 
     * ***
     * 
     * `country` block exports the following:
     * 
     * * `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.
     * * `include_unknown_countries_and_regions` - Whether IP addresses that don&#39;t map to a country or region are included in the named location.
     * 
     * ***
     * 
     * `ip` block exports the following:
     * 
     * * `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.
     * * `trusted` - Whether the named location is trusted.
     * 
     */
    public static Output<GetNamedLocationResult> getNamedLocation(GetNamedLocationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getNamedLocation:getNamedLocation", TypeShape.of(GetNamedLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about a Named Location within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`
     * 
     * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetNamedLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()
     *             .displayName("My Named Location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `country` - A `country` block as documented below, which describes a country-based named location.
     * * `id` - The ID of the named location.
     * * `ip` - An `ip` block as documented below, which describes an IP-based named location.
     * * 
     * ***
     * 
     * `country` block exports the following:
     * 
     * * `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.
     * * `include_unknown_countries_and_regions` - Whether IP addresses that don&#39;t map to a country or region are included in the named location.
     * 
     * ***
     * 
     * `ip` block exports the following:
     * 
     * * `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.
     * * `trusted` - Whether the named location is trusted.
     * 
     */
    public static Output<GetNamedLocationResult> getNamedLocation(GetNamedLocationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getNamedLocation:getNamedLocation", TypeShape.of(GetNamedLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about a Named Location within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this resource requires the following application roles: `Policy.Read.All`
     * 
     * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Reader`
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetNamedLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getNamedLocation(GetNamedLocationArgs.builder()
     *             .displayName("My Named Location")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Attributes Reference
     * 
     * The following attributes are exported:
     * 
     * * `country` - A `country` block as documented below, which describes a country-based named location.
     * * `id` - The ID of the named location.
     * * `ip` - An `ip` block as documented below, which describes an IP-based named location.
     * * 
     * ***
     * 
     * `country` block exports the following:
     * 
     * * `countries_and_regions` - List of countries and/or regions in two-letter format specified by ISO 3166-2.
     * * `include_unknown_countries_and_regions` - Whether IP addresses that don&#39;t map to a country or region are included in the named location.
     * 
     * ***
     * 
     * `ip` block exports the following:
     * 
     * * `ip_ranges` - List of IP address ranges in IPv4 CIDR format (e.g. `1.2.3.4/32`) or any allowable IPv6 format from IETF RFC596.
     * * `trusted` - Whether the named location is trusted.
     * 
     */
    public static CompletableFuture<GetNamedLocationResult> getNamedLocationPlain(GetNamedLocationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getNamedLocation:getNamedLocation", TypeShape.of(GetNamedLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalResult> getServicePrincipal() {
        return getServicePrincipal(GetServicePrincipalArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalResult> getServicePrincipalPlain() {
        return getServicePrincipalPlain(GetServicePrincipalPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalResult> getServicePrincipal(GetServicePrincipalArgs args) {
        return getServicePrincipal(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalResult> getServicePrincipalPlain(GetServicePrincipalPlainArgs args) {
        return getServicePrincipalPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalResult> getServicePrincipal(GetServicePrincipalArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getServicePrincipal:getServicePrincipal", TypeShape.of(GetServicePrincipalResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalResult> getServicePrincipal(GetServicePrincipalArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getServicePrincipal:getServicePrincipal", TypeShape.of(GetServicePrincipalResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an existing service principal associated with an application within Azure Active Directory.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display name*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .displayName("my-awesome-application")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by client ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .clientId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object ID*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipal(GetServicePrincipalArgs.builder()
     *             .objectId("00000000-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalResult> getServicePrincipalPlain(GetServicePrincipalPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getServicePrincipal:getServicePrincipal", TypeShape.of(GetServicePrincipalResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalsResult> getServicePrincipals() {
        return getServicePrincipals(GetServicePrincipalsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalsResult> getServicePrincipalsPlain() {
        return getServicePrincipalsPlain(GetServicePrincipalsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalsResult> getServicePrincipals(GetServicePrincipalsArgs args) {
        return getServicePrincipals(args, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalsResult> getServicePrincipalsPlain(GetServicePrincipalsPlainArgs args) {
        return getServicePrincipalsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalsResult> getServicePrincipals(GetServicePrincipalsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getServicePrincipals:getServicePrincipals", TypeShape.of(GetServicePrincipalsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServicePrincipalsResult> getServicePrincipals(GetServicePrincipalsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getServicePrincipals:getServicePrincipals", TypeShape.of(GetServicePrincipalsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory service principals.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `Application.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * *Look up by application display names*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .displayNames(            
     *                 "example-app",
     *                 "another-app")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by application IDs (client IDs)*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .clientIds(            
     *                 "11111111-0000-0000-0000-000000000000",
     *                 "22222222-0000-0000-0000-000000000000",
     *                 "33333333-0000-0000-0000-000000000000")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * *Look up by service principal object IDs*
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetServicePrincipalsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = AzureadFunctions.getServicePrincipals(GetServicePrincipalsArgs.builder()
     *             .objectIds(            
     *                 "00000000-0000-0000-0000-000000000000",
     *                 "00000000-0000-0000-0000-111111111111",
     *                 "00000000-0000-0000-0000-222222222222")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServicePrincipalsResult> getServicePrincipalsPlain(GetServicePrincipalsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getServicePrincipals:getServicePrincipals", TypeShape.of(GetServicePrincipalsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser() {
        return getUser(GetUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain() {
        return getUserPlain(GetUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets information about an Azure Active Directory user.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var example = AzureadFunctions.getUser(GetUserArgs.builder()
     *             .userPrincipalName("user}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers() {
        return getUsers(GetUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain() {
        return getUsersPlain(GetUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("azuread:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Gets basic information for multiple Azure Active Directory users.
     * 
     * ## API Permissions
     * 
     * The following API permissions are required in order to use this data source.
     * 
     * When authenticated with a service principal, this data source requires one of the following application roles: `User.ReadBasic.All`, `User.Read.All` or `Directory.Read.All`
     * 
     * When authenticated with a user principal, this data source does not require any additional roles.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.azuread.AzureadFunctions;
     * import com.pulumi.azuread.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App }{{@code
     *     public static void main(String[] args) }{{@code
     *         Pulumi.run(App::stack);
     *     }}{@code
     * 
     *     public static void stack(Context ctx) }{{@code
     *         final var users = AzureadFunctions.getUsers(GetUsersArgs.builder()
     *             .userPrincipalNames(            
     *                 "kat}{@literal @}{@code example.com",
     *                 "byte}{@literal @}{@code example.com")
     *             .build());
     * 
     *     }}{@code
     * }}{@code
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("azuread:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
