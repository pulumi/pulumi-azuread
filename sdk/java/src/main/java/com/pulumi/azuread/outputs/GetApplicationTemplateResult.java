// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationTemplateResult {
    /**
     * @return List of categories for this templated application.
     * 
     */
    private List<String> categories;
    /**
     * @return The display name for the templated application.
     * 
     */
    private String displayName;
    /**
     * @return Home page URL of the templated application.
     * 
     */
    private String homepageUrl;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return URL to retrieve the logo for this templated application.
     * 
     */
    private String logoUrl;
    /**
     * @return Name of the publisher for this templated application.
     * 
     */
    private String publisher;
    /**
     * @return List of provisioning modes supported by this templated application.
     * 
     */
    private List<String> supportedProvisioningTypes;
    /**
     * @return List of single sign on modes supported by this templated application.
     * 
     */
    private List<String> supportedSingleSignOnModes;
    /**
     * @return The ID of the templated application.
     * 
     */
    private String templateId;

    private GetApplicationTemplateResult() {}
    /**
     * @return List of categories for this templated application.
     * 
     */
    public List<String> categories() {
        return this.categories;
    }
    /**
     * @return The display name for the templated application.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Home page URL of the templated application.
     * 
     */
    public String homepageUrl() {
        return this.homepageUrl;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return URL to retrieve the logo for this templated application.
     * 
     */
    public String logoUrl() {
        return this.logoUrl;
    }
    /**
     * @return Name of the publisher for this templated application.
     * 
     */
    public String publisher() {
        return this.publisher;
    }
    /**
     * @return List of provisioning modes supported by this templated application.
     * 
     */
    public List<String> supportedProvisioningTypes() {
        return this.supportedProvisioningTypes;
    }
    /**
     * @return List of single sign on modes supported by this templated application.
     * 
     */
    public List<String> supportedSingleSignOnModes() {
        return this.supportedSingleSignOnModes;
    }
    /**
     * @return The ID of the templated application.
     * 
     */
    public String templateId() {
        return this.templateId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> categories;
        private String displayName;
        private String homepageUrl;
        private String id;
        private String logoUrl;
        private String publisher;
        private List<String> supportedProvisioningTypes;
        private List<String> supportedSingleSignOnModes;
        private String templateId;
        public Builder() {}
        public Builder(GetApplicationTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.categories = defaults.categories;
    	      this.displayName = defaults.displayName;
    	      this.homepageUrl = defaults.homepageUrl;
    	      this.id = defaults.id;
    	      this.logoUrl = defaults.logoUrl;
    	      this.publisher = defaults.publisher;
    	      this.supportedProvisioningTypes = defaults.supportedProvisioningTypes;
    	      this.supportedSingleSignOnModes = defaults.supportedSingleSignOnModes;
    	      this.templateId = defaults.templateId;
        }

        @CustomType.Setter
        public Builder categories(List<String> categories) {
            this.categories = Objects.requireNonNull(categories);
            return this;
        }
        public Builder categories(String... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder homepageUrl(String homepageUrl) {
            this.homepageUrl = Objects.requireNonNull(homepageUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder logoUrl(String logoUrl) {
            this.logoUrl = Objects.requireNonNull(logoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder publisher(String publisher) {
            this.publisher = Objects.requireNonNull(publisher);
            return this;
        }
        @CustomType.Setter
        public Builder supportedProvisioningTypes(List<String> supportedProvisioningTypes) {
            this.supportedProvisioningTypes = Objects.requireNonNull(supportedProvisioningTypes);
            return this;
        }
        public Builder supportedProvisioningTypes(String... supportedProvisioningTypes) {
            return supportedProvisioningTypes(List.of(supportedProvisioningTypes));
        }
        @CustomType.Setter
        public Builder supportedSingleSignOnModes(List<String> supportedSingleSignOnModes) {
            this.supportedSingleSignOnModes = Objects.requireNonNull(supportedSingleSignOnModes);
            return this;
        }
        public Builder supportedSingleSignOnModes(String... supportedSingleSignOnModes) {
            return supportedSingleSignOnModes(List.of(supportedSingleSignOnModes));
        }
        @CustomType.Setter
        public Builder templateId(String templateId) {
            this.templateId = Objects.requireNonNull(templateId);
            return this;
        }
        public GetApplicationTemplateResult build() {
            final var o = new GetApplicationTemplateResult();
            o.categories = categories;
            o.displayName = displayName;
            o.homepageUrl = homepageUrl;
            o.id = id;
            o.logoUrl = logoUrl;
            o.publisher = publisher;
            o.supportedProvisioningTypes = supportedProvisioningTypes;
            o.supportedSingleSignOnModes = supportedSingleSignOnModes;
            o.templateId = templateId;
            return o;
        }
    }
}
