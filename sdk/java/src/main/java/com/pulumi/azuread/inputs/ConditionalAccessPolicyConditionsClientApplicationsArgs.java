// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.ConditionalAccessPolicyConditionsClientApplicationsFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConditionalAccessPolicyConditionsClientApplicationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsClientApplicationsArgs Empty = new ConditionalAccessPolicyConditionsClientApplicationsArgs();

    /**
     * A list of service principal IDs explicitly excluded in the policy.
     * 
     */
    @Import(name="excludedServicePrincipals")
    private @Nullable Output<List<String>> excludedServicePrincipals;

    /**
     * @return A list of service principal IDs explicitly excluded in the policy.
     * 
     */
    public Optional<Output<List<String>>> excludedServicePrincipals() {
        return Optional.ofNullable(this.excludedServicePrincipals);
    }

    /**
     * A `filter` block as documented below.
     * 
     * &gt; **Note:** Specifying `filter` requires the `Attribute Definition Reader` role, this is not included in the `Global Administrator` or other administrator roles and must be separately assigned.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<ConditionalAccessPolicyConditionsClientApplicationsFilterArgs> filter;

    /**
     * @return A `filter` block as documented below.
     * 
     * &gt; **Note:** Specifying `filter` requires the `Attribute Definition Reader` role, this is not included in the `Global Administrator` or other administrator roles and must be separately assigned.
     * 
     */
    public Optional<Output<ConditionalAccessPolicyConditionsClientApplicationsFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excludedServicePrincipals` is set.
     * 
     */
    @Import(name="includedServicePrincipals")
    private @Nullable Output<List<String>> includedServicePrincipals;

    /**
     * @return A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excludedServicePrincipals` is set.
     * 
     */
    public Optional<Output<List<String>>> includedServicePrincipals() {
        return Optional.ofNullable(this.includedServicePrincipals);
    }

    private ConditionalAccessPolicyConditionsClientApplicationsArgs() {}

    private ConditionalAccessPolicyConditionsClientApplicationsArgs(ConditionalAccessPolicyConditionsClientApplicationsArgs $) {
        this.excludedServicePrincipals = $.excludedServicePrincipals;
        this.filter = $.filter;
        this.includedServicePrincipals = $.includedServicePrincipals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyConditionsClientApplicationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyConditionsClientApplicationsArgs $;

        public Builder() {
            $ = new ConditionalAccessPolicyConditionsClientApplicationsArgs();
        }

        public Builder(ConditionalAccessPolicyConditionsClientApplicationsArgs defaults) {
            $ = new ConditionalAccessPolicyConditionsClientApplicationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param excludedServicePrincipals A list of service principal IDs explicitly excluded in the policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedServicePrincipals(@Nullable Output<List<String>> excludedServicePrincipals) {
            $.excludedServicePrincipals = excludedServicePrincipals;
            return this;
        }

        /**
         * @param excludedServicePrincipals A list of service principal IDs explicitly excluded in the policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedServicePrincipals(List<String> excludedServicePrincipals) {
            return excludedServicePrincipals(Output.of(excludedServicePrincipals));
        }

        /**
         * @param excludedServicePrincipals A list of service principal IDs explicitly excluded in the policy.
         * 
         * @return builder
         * 
         */
        public Builder excludedServicePrincipals(String... excludedServicePrincipals) {
            return excludedServicePrincipals(List.of(excludedServicePrincipals));
        }

        /**
         * @param filter A `filter` block as documented below.
         * 
         * &gt; **Note:** Specifying `filter` requires the `Attribute Definition Reader` role, this is not included in the `Global Administrator` or other administrator roles and must be separately assigned.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<ConditionalAccessPolicyConditionsClientApplicationsFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter A `filter` block as documented below.
         * 
         * &gt; **Note:** Specifying `filter` requires the `Attribute Definition Reader` role, this is not included in the `Global Administrator` or other administrator roles and must be separately assigned.
         * 
         * @return builder
         * 
         */
        public Builder filter(ConditionalAccessPolicyConditionsClientApplicationsFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param includedServicePrincipals A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excludedServicePrincipals` is set.
         * 
         * @return builder
         * 
         */
        public Builder includedServicePrincipals(@Nullable Output<List<String>> includedServicePrincipals) {
            $.includedServicePrincipals = includedServicePrincipals;
            return this;
        }

        /**
         * @param includedServicePrincipals A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excludedServicePrincipals` is set.
         * 
         * @return builder
         * 
         */
        public Builder includedServicePrincipals(List<String> includedServicePrincipals) {
            return includedServicePrincipals(Output.of(includedServicePrincipals));
        }

        /**
         * @param includedServicePrincipals A list of service principal IDs explicitly included in the policy. Can be set to `ServicePrincipalsInMyTenant` to include all service principals. This is mandatory value when at least one `excludedServicePrincipals` is set.
         * 
         * @return builder
         * 
         */
        public Builder includedServicePrincipals(String... includedServicePrincipals) {
            return includedServicePrincipals(List.of(includedServicePrincipals));
        }

        public ConditionalAccessPolicyConditionsClientApplicationsArgs build() {
            return $;
        }
    }

}
