// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.outputs;

import com.pulumi.azuread.outputs.ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser;
import com.pulumi.azuread.outputs.ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ConditionalAccessPolicyConditionsUsers {
    /**
     * @return A list of group IDs excluded from scope of policy.
     * 
     */
    private @Nullable List<String> excludedGroups;
    /**
     * @return A `guestsOrExternalUsers` block as documented below, which specifies internal guests and external users excluded from scope of policy.
     * 
     */
    private @Nullable List<ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser> excludedGuestsOrExternalUsers;
    /**
     * @return A list of role IDs excluded from scope of policy.
     * 
     */
    private @Nullable List<String> excludedRoles;
    /**
     * @return A list of user IDs excluded from scope of policy and/or `GuestsOrExternalUsers`.
     * 
     */
    private @Nullable List<String> excludedUsers;
    /**
     * @return A list of group IDs in scope of policy unless explicitly excluded.
     * 
     */
    private @Nullable List<String> includedGroups;
    /**
     * @return A `guestsOrExternalUsers` block as documented below, which specifies internal guests and external users in scope of policy.
     * 
     */
    private @Nullable List<ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser> includedGuestsOrExternalUsers;
    /**
     * @return A list of role IDs in scope of policy unless explicitly excluded.
     * 
     */
    private @Nullable List<String> includedRoles;
    /**
     * @return A list of user IDs in scope of policy unless explicitly excluded, or `None` or `All` or `GuestsOrExternalUsers`.
     * 
     * &gt; At least one of `includedGroups`, `includedGuestsOrExternalUsers`, `includedRoles` or `includedUsers` must be specified.
     * 
     */
    private @Nullable List<String> includedUsers;

    private ConditionalAccessPolicyConditionsUsers() {}
    /**
     * @return A list of group IDs excluded from scope of policy.
     * 
     */
    public List<String> excludedGroups() {
        return this.excludedGroups == null ? List.of() : this.excludedGroups;
    }
    /**
     * @return A `guestsOrExternalUsers` block as documented below, which specifies internal guests and external users excluded from scope of policy.
     * 
     */
    public List<ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser> excludedGuestsOrExternalUsers() {
        return this.excludedGuestsOrExternalUsers == null ? List.of() : this.excludedGuestsOrExternalUsers;
    }
    /**
     * @return A list of role IDs excluded from scope of policy.
     * 
     */
    public List<String> excludedRoles() {
        return this.excludedRoles == null ? List.of() : this.excludedRoles;
    }
    /**
     * @return A list of user IDs excluded from scope of policy and/or `GuestsOrExternalUsers`.
     * 
     */
    public List<String> excludedUsers() {
        return this.excludedUsers == null ? List.of() : this.excludedUsers;
    }
    /**
     * @return A list of group IDs in scope of policy unless explicitly excluded.
     * 
     */
    public List<String> includedGroups() {
        return this.includedGroups == null ? List.of() : this.includedGroups;
    }
    /**
     * @return A `guestsOrExternalUsers` block as documented below, which specifies internal guests and external users in scope of policy.
     * 
     */
    public List<ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser> includedGuestsOrExternalUsers() {
        return this.includedGuestsOrExternalUsers == null ? List.of() : this.includedGuestsOrExternalUsers;
    }
    /**
     * @return A list of role IDs in scope of policy unless explicitly excluded.
     * 
     */
    public List<String> includedRoles() {
        return this.includedRoles == null ? List.of() : this.includedRoles;
    }
    /**
     * @return A list of user IDs in scope of policy unless explicitly excluded, or `None` or `All` or `GuestsOrExternalUsers`.
     * 
     * &gt; At least one of `includedGroups`, `includedGuestsOrExternalUsers`, `includedRoles` or `includedUsers` must be specified.
     * 
     */
    public List<String> includedUsers() {
        return this.includedUsers == null ? List.of() : this.includedUsers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConditionalAccessPolicyConditionsUsers defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> excludedGroups;
        private @Nullable List<ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser> excludedGuestsOrExternalUsers;
        private @Nullable List<String> excludedRoles;
        private @Nullable List<String> excludedUsers;
        private @Nullable List<String> includedGroups;
        private @Nullable List<ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser> includedGuestsOrExternalUsers;
        private @Nullable List<String> includedRoles;
        private @Nullable List<String> includedUsers;
        public Builder() {}
        public Builder(ConditionalAccessPolicyConditionsUsers defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludedGroups = defaults.excludedGroups;
    	      this.excludedGuestsOrExternalUsers = defaults.excludedGuestsOrExternalUsers;
    	      this.excludedRoles = defaults.excludedRoles;
    	      this.excludedUsers = defaults.excludedUsers;
    	      this.includedGroups = defaults.includedGroups;
    	      this.includedGuestsOrExternalUsers = defaults.includedGuestsOrExternalUsers;
    	      this.includedRoles = defaults.includedRoles;
    	      this.includedUsers = defaults.includedUsers;
        }

        @CustomType.Setter
        public Builder excludedGroups(@Nullable List<String> excludedGroups) {

            this.excludedGroups = excludedGroups;
            return this;
        }
        public Builder excludedGroups(String... excludedGroups) {
            return excludedGroups(List.of(excludedGroups));
        }
        @CustomType.Setter
        public Builder excludedGuestsOrExternalUsers(@Nullable List<ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser> excludedGuestsOrExternalUsers) {

            this.excludedGuestsOrExternalUsers = excludedGuestsOrExternalUsers;
            return this;
        }
        public Builder excludedGuestsOrExternalUsers(ConditionalAccessPolicyConditionsUsersExcludedGuestsOrExternalUser... excludedGuestsOrExternalUsers) {
            return excludedGuestsOrExternalUsers(List.of(excludedGuestsOrExternalUsers));
        }
        @CustomType.Setter
        public Builder excludedRoles(@Nullable List<String> excludedRoles) {

            this.excludedRoles = excludedRoles;
            return this;
        }
        public Builder excludedRoles(String... excludedRoles) {
            return excludedRoles(List.of(excludedRoles));
        }
        @CustomType.Setter
        public Builder excludedUsers(@Nullable List<String> excludedUsers) {

            this.excludedUsers = excludedUsers;
            return this;
        }
        public Builder excludedUsers(String... excludedUsers) {
            return excludedUsers(List.of(excludedUsers));
        }
        @CustomType.Setter
        public Builder includedGroups(@Nullable List<String> includedGroups) {

            this.includedGroups = includedGroups;
            return this;
        }
        public Builder includedGroups(String... includedGroups) {
            return includedGroups(List.of(includedGroups));
        }
        @CustomType.Setter
        public Builder includedGuestsOrExternalUsers(@Nullable List<ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser> includedGuestsOrExternalUsers) {

            this.includedGuestsOrExternalUsers = includedGuestsOrExternalUsers;
            return this;
        }
        public Builder includedGuestsOrExternalUsers(ConditionalAccessPolicyConditionsUsersIncludedGuestsOrExternalUser... includedGuestsOrExternalUsers) {
            return includedGuestsOrExternalUsers(List.of(includedGuestsOrExternalUsers));
        }
        @CustomType.Setter
        public Builder includedRoles(@Nullable List<String> includedRoles) {

            this.includedRoles = includedRoles;
            return this;
        }
        public Builder includedRoles(String... includedRoles) {
            return includedRoles(List.of(includedRoles));
        }
        @CustomType.Setter
        public Builder includedUsers(@Nullable List<String> includedUsers) {

            this.includedUsers = includedUsers;
            return this;
        }
        public Builder includedUsers(String... includedUsers) {
            return includedUsers(List.of(includedUsers));
        }
        public ConditionalAccessPolicyConditionsUsers build() {
            final var _resultValue = new ConditionalAccessPolicyConditionsUsers();
            _resultValue.excludedGroups = excludedGroups;
            _resultValue.excludedGuestsOrExternalUsers = excludedGuestsOrExternalUsers;
            _resultValue.excludedRoles = excludedRoles;
            _resultValue.excludedUsers = excludedUsers;
            _resultValue.includedGroups = includedGroups;
            _resultValue.includedGuestsOrExternalUsers = includedGuestsOrExternalUsers;
            _resultValue.includedRoles = includedRoles;
            _resultValue.includedUsers = includedUsers;
            return _resultValue;
        }
    }
}
