// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class AccessPackageAssignmentPolicyQuestionChoiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPackageAssignmentPolicyQuestionChoiceArgs Empty = new AccessPackageAssignmentPolicyQuestionChoiceArgs();

    /**
     * The actual value of this choice
     * 
     */
    @Import(name="actualValue", required=true)
    private Output<String> actualValue;

    /**
     * @return The actual value of this choice
     * 
     */
    public Output<String> actualValue() {
        return this.actualValue;
    }

    /**
     * The display text of this choice
     * 
     */
    @Import(name="displayValue", required=true)
    private Output<AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs> displayValue;

    /**
     * @return The display text of this choice
     * 
     */
    public Output<AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs> displayValue() {
        return this.displayValue;
    }

    private AccessPackageAssignmentPolicyQuestionChoiceArgs() {}

    private AccessPackageAssignmentPolicyQuestionChoiceArgs(AccessPackageAssignmentPolicyQuestionChoiceArgs $) {
        this.actualValue = $.actualValue;
        this.displayValue = $.displayValue;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPackageAssignmentPolicyQuestionChoiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPackageAssignmentPolicyQuestionChoiceArgs $;

        public Builder() {
            $ = new AccessPackageAssignmentPolicyQuestionChoiceArgs();
        }

        public Builder(AccessPackageAssignmentPolicyQuestionChoiceArgs defaults) {
            $ = new AccessPackageAssignmentPolicyQuestionChoiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actualValue The actual value of this choice
         * 
         * @return builder
         * 
         */
        public Builder actualValue(Output<String> actualValue) {
            $.actualValue = actualValue;
            return this;
        }

        /**
         * @param actualValue The actual value of this choice
         * 
         * @return builder
         * 
         */
        public Builder actualValue(String actualValue) {
            return actualValue(Output.of(actualValue));
        }

        /**
         * @param displayValue The display text of this choice
         * 
         * @return builder
         * 
         */
        public Builder displayValue(Output<AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs> displayValue) {
            $.displayValue = displayValue;
            return this;
        }

        /**
         * @param displayValue The display text of this choice
         * 
         * @return builder
         * 
         */
        public Builder displayValue(AccessPackageAssignmentPolicyQuestionChoiceDisplayValueArgs displayValue) {
            return displayValue(Output.of(displayValue));
        }

        public AccessPackageAssignmentPolicyQuestionChoiceArgs build() {
            if ($.actualValue == null) {
                throw new MissingRequiredPropertyException("AccessPackageAssignmentPolicyQuestionChoiceArgs", "actualValue");
            }
            if ($.displayValue == null) {
                throw new MissingRequiredPropertyException("AccessPackageAssignmentPolicyQuestionChoiceArgs", "displayValue");
            }
            return $;
        }
    }

}
