// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ApplicationRedirectUrisArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationRedirectUrisArgs Empty = new ApplicationRedirectUrisArgs();

    /**
     * The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return The resource ID of the application registration. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * A set of redirect URIs to assign to the application.
     * 
     */
    @Import(name="redirectUris", required=true)
    private Output<List<String>> redirectUris;

    /**
     * @return A set of redirect URIs to assign to the application.
     * 
     */
    public Output<List<String>> redirectUris() {
        return this.redirectUris;
    }

    /**
     * The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ApplicationRedirectUrisArgs() {}

    private ApplicationRedirectUrisArgs(ApplicationRedirectUrisArgs $) {
        this.applicationId = $.applicationId;
        this.redirectUris = $.redirectUris;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationRedirectUrisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationRedirectUrisArgs $;

        public Builder() {
            $ = new ApplicationRedirectUrisArgs();
        }

        public Builder(ApplicationRedirectUrisArgs defaults) {
            $ = new ApplicationRedirectUrisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId The resource ID of the application registration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId The resource ID of the application registration. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param redirectUris A set of redirect URIs to assign to the application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(Output<List<String>> redirectUris) {
            $.redirectUris = redirectUris;
            return this;
        }

        /**
         * @param redirectUris A set of redirect URIs to assign to the application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(List<String> redirectUris) {
            return redirectUris(Output.of(redirectUris));
        }

        /**
         * @param redirectUris A set of redirect URIs to assign to the application.
         * 
         * @return builder
         * 
         */
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }

        /**
         * @param type The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of redirect URIs to manage. Must be one of: `PublicClient`, `SPA`, or `Web`. Changing this forces a new resource to be created.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ApplicationRedirectUrisArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.redirectUris = Objects.requireNonNull($.redirectUris, "expected parameter 'redirectUris' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
