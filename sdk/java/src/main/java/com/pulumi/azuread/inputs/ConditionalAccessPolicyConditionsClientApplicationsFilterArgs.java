// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ConditionalAccessPolicyConditionsClientApplicationsFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConditionalAccessPolicyConditionsClientApplicationsFilterArgs Empty = new ConditionalAccessPolicyConditionsClientApplicationsFilterArgs();

    /**
     * Whether to include in, or exclude from, matching items from the policy. Supported values are `include` or `exclude`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Whether to include in, or exclude from, matching items from the policy. Supported values are `include` or `exclude`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Condition filter to match items.
     * 
     */
    @Import(name="rule", required=true)
    private Output<String> rule;

    /**
     * @return Condition filter to match items.
     * 
     */
    public Output<String> rule() {
        return this.rule;
    }

    private ConditionalAccessPolicyConditionsClientApplicationsFilterArgs() {}

    private ConditionalAccessPolicyConditionsClientApplicationsFilterArgs(ConditionalAccessPolicyConditionsClientApplicationsFilterArgs $) {
        this.mode = $.mode;
        this.rule = $.rule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConditionalAccessPolicyConditionsClientApplicationsFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConditionalAccessPolicyConditionsClientApplicationsFilterArgs $;

        public Builder() {
            $ = new ConditionalAccessPolicyConditionsClientApplicationsFilterArgs();
        }

        public Builder(ConditionalAccessPolicyConditionsClientApplicationsFilterArgs defaults) {
            $ = new ConditionalAccessPolicyConditionsClientApplicationsFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Whether to include in, or exclude from, matching items from the policy. Supported values are `include` or `exclude`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Whether to include in, or exclude from, matching items from the policy. Supported values are `include` or `exclude`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param rule Condition filter to match items.
         * 
         * @return builder
         * 
         */
        public Builder rule(Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Condition filter to match items.
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        public ConditionalAccessPolicyConditionsClientApplicationsFilterArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ConditionalAccessPolicyConditionsClientApplicationsFilterArgs", "mode");
            }
            if ($.rule == null) {
                throw new MissingRequiredPropertyException("ConditionalAccessPolicyConditionsClientApplicationsFilterArgs", "rule");
            }
            return $;
        }
    }

}
