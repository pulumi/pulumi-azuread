// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azuread.inputs;

import com.pulumi.azuread.inputs.AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessPackageAssignmentPolicyApprovalSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessPackageAssignmentPolicyApprovalSettingsArgs Empty = new AccessPackageAssignmentPolicyApprovalSettingsArgs();

    /**
     * Whether an approval is required.
     * 
     */
    @Import(name="approvalRequired")
    private @Nullable Output<Boolean> approvalRequired;

    /**
     * @return Whether an approval is required.
     * 
     */
    public Optional<Output<Boolean>> approvalRequired() {
        return Optional.ofNullable(this.approvalRequired);
    }

    /**
     * Whether an approval is required to grant extension. Same approval settings used to approve initial access will apply.
     * 
     */
    @Import(name="approvalRequiredForExtension")
    private @Nullable Output<Boolean> approvalRequiredForExtension;

    /**
     * @return Whether an approval is required to grant extension. Same approval settings used to approve initial access will apply.
     * 
     */
    public Optional<Output<Boolean>> approvalRequiredForExtension() {
        return Optional.ofNullable(this.approvalRequiredForExtension);
    }

    /**
     * An `approval_stage` block specifying the process to obtain an approval, as documented below.
     * 
     */
    @Import(name="approvalStages")
    private @Nullable Output<List<AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs>> approvalStages;

    /**
     * @return An `approval_stage` block specifying the process to obtain an approval, as documented below.
     * 
     */
    public Optional<Output<List<AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs>>> approvalStages() {
        return Optional.ofNullable(this.approvalStages);
    }

    /**
     * Whether a requestor is required to provide a justification to request an access package. Justification is visible to approvers and the requestor.
     * 
     */
    @Import(name="requestorJustificationRequired")
    private @Nullable Output<Boolean> requestorJustificationRequired;

    /**
     * @return Whether a requestor is required to provide a justification to request an access package. Justification is visible to approvers and the requestor.
     * 
     */
    public Optional<Output<Boolean>> requestorJustificationRequired() {
        return Optional.ofNullable(this.requestorJustificationRequired);
    }

    private AccessPackageAssignmentPolicyApprovalSettingsArgs() {}

    private AccessPackageAssignmentPolicyApprovalSettingsArgs(AccessPackageAssignmentPolicyApprovalSettingsArgs $) {
        this.approvalRequired = $.approvalRequired;
        this.approvalRequiredForExtension = $.approvalRequiredForExtension;
        this.approvalStages = $.approvalStages;
        this.requestorJustificationRequired = $.requestorJustificationRequired;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPackageAssignmentPolicyApprovalSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPackageAssignmentPolicyApprovalSettingsArgs $;

        public Builder() {
            $ = new AccessPackageAssignmentPolicyApprovalSettingsArgs();
        }

        public Builder(AccessPackageAssignmentPolicyApprovalSettingsArgs defaults) {
            $ = new AccessPackageAssignmentPolicyApprovalSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalRequired Whether an approval is required.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequired(@Nullable Output<Boolean> approvalRequired) {
            $.approvalRequired = approvalRequired;
            return this;
        }

        /**
         * @param approvalRequired Whether an approval is required.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequired(Boolean approvalRequired) {
            return approvalRequired(Output.of(approvalRequired));
        }

        /**
         * @param approvalRequiredForExtension Whether an approval is required to grant extension. Same approval settings used to approve initial access will apply.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequiredForExtension(@Nullable Output<Boolean> approvalRequiredForExtension) {
            $.approvalRequiredForExtension = approvalRequiredForExtension;
            return this;
        }

        /**
         * @param approvalRequiredForExtension Whether an approval is required to grant extension. Same approval settings used to approve initial access will apply.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequiredForExtension(Boolean approvalRequiredForExtension) {
            return approvalRequiredForExtension(Output.of(approvalRequiredForExtension));
        }

        /**
         * @param approvalStages An `approval_stage` block specifying the process to obtain an approval, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder approvalStages(@Nullable Output<List<AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs>> approvalStages) {
            $.approvalStages = approvalStages;
            return this;
        }

        /**
         * @param approvalStages An `approval_stage` block specifying the process to obtain an approval, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder approvalStages(List<AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs> approvalStages) {
            return approvalStages(Output.of(approvalStages));
        }

        /**
         * @param approvalStages An `approval_stage` block specifying the process to obtain an approval, as documented below.
         * 
         * @return builder
         * 
         */
        public Builder approvalStages(AccessPackageAssignmentPolicyApprovalSettingsApprovalStageArgs... approvalStages) {
            return approvalStages(List.of(approvalStages));
        }

        /**
         * @param requestorJustificationRequired Whether a requestor is required to provide a justification to request an access package. Justification is visible to approvers and the requestor.
         * 
         * @return builder
         * 
         */
        public Builder requestorJustificationRequired(@Nullable Output<Boolean> requestorJustificationRequired) {
            $.requestorJustificationRequired = requestorJustificationRequired;
            return this;
        }

        /**
         * @param requestorJustificationRequired Whether a requestor is required to provide a justification to request an access package. Justification is visible to approvers and the requestor.
         * 
         * @return builder
         * 
         */
        public Builder requestorJustificationRequired(Boolean requestorJustificationRequired) {
            return requestorJustificationRequired(Output.of(requestorJustificationRequired));
        }

        public AccessPackageAssignmentPolicyApprovalSettingsArgs build() {
            return $;
        }
    }

}
